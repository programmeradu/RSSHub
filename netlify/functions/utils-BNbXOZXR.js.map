{"version":3,"file":"utils-BNbXOZXR.js","names":["ConfigNotFoundError","ofetch"],"sources":["../../lib/routes/mixi2/utils.ts"],"sourcesContent":["import { Category, MixiClient, Persona, type Post } from 'mixi2';\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport function getClient() {\r\n    const { authToken, authKey } = config.mixi2;\r\n\r\n    if (!authToken || !authKey) {\r\n        throw new ConfigNotFoundError('MIXI2_AUTH_TOKEN and MIXI2_AUTH_KEY are required');\r\n    }\r\n\r\n    return new MixiClient(`auth_token=${authToken}`, authKey, {\r\n        httpAdapter: ofetch,\r\n    });\r\n}\r\n\r\nexport function parsePost(post: Post) {\r\n    let description = post.text ? `<p>${post.text}</p>` : '';\r\n\r\n    for (const media of post.medias ?? []) {\r\n        if (media.category === Category.CATEGORY_POST_IMAGE) {\r\n            description += `<img src=\"${media.postImage?.largeImageUrl ?? media.postImage?.smallImageUrl}\"${media.description ? `alt=\"${media.description}\"` : ''} />`;\r\n        } else if (media.category === Category.CATEGORY_POST_VIDEO) {\r\n            description += `<img src=\"${media.postVideo?.previewImageUrl}\" alt=\"${media.description}\" />`;\r\n        }\r\n    }\r\n    return description;\r\n}\r\n\r\nexport function generatePostDataItem(post: Post, personas: Persona[]) {\r\n    const author = personas.find((persona) => persona.personaId === post.personaId);\r\n    return {\r\n        description: parsePost(post),\r\n        pubDate: parseDate(post.createdAt.seconds * 1e3),\r\n        guid: post.postId,\r\n        author: author?.name,\r\n        link: `https://mixi.social/@${author?.name}/posts/${post.postId}`,\r\n    };\r\n}\r\n\r\nexport const CONFIG_OPTIONS = [\r\n    {\r\n        name: 'MIXI2_AUTH_TOKEN',\r\n        description: 'mixi2ログイン後の情報。ブラウザのコンソールでクッキーから `auth_token` の値を取得してください',\r\n    },\r\n    {\r\n        name: 'MIXI2_AUTH_KEY',\r\n        description: 'mixi2ログイン後の情報。ブラウザのコンソールでリクエストヘッダーから `x-auth-key` の値を取得してください',\r\n    },\r\n];\r\n\r\nexport function postFilter(post: Post) {\r\n    return !post.isDeleted && post.personaId;\r\n}\r\n"],"mappings":"oRAMA,SAAgB,GAAY,CACxB,GAAM,CAAE,YAAW,WAAY,EAAO,MAEtC,GAAI,CAAC,GAAa,CAAC,EACf,MAAM,IAAIA,EAAoB,oDAGlC,OAAO,IAAI,EAAW,cAAc,IAAa,EAAS,CACtD,YAAaC,IAIrB,SAAgB,EAAU,EAAY,CAClC,IAAI,EAAc,EAAK,KAAO,MAAM,EAAK,KAAK,MAAQ,GAEtD,IAAK,IAAM,KAAS,EAAK,QAAU,GAC3B,EAAM,WAAa,EAAS,oBAC5B,GAAe,aAAa,EAAM,WAAW,eAAiB,EAAM,WAAW,cAAc,GAAG,EAAM,YAAc,QAAQ,EAAM,YAAY,GAAK,GAAG,KAC/I,EAAM,WAAa,EAAS,sBACnC,GAAe,aAAa,EAAM,WAAW,gBAAgB,SAAS,EAAM,YAAY,OAGhG,OAAO,EAGX,SAAgB,EAAqB,EAAY,EAAqB,CAClE,IAAM,EAAS,EAAS,KAAM,GAAY,EAAQ,YAAc,EAAK,WACrE,MAAO,CACH,YAAa,EAAU,GACvB,QAAS,EAAU,EAAK,UAAU,QAAU,KAC5C,KAAM,EAAK,OACX,OAAQ,GAAQ,KAChB,KAAM,wBAAwB,GAAQ,KAAK,SAAS,EAAK,UAIjE,MAAa,EAAiB,CAC1B,CACI,KAAM,mBACN,YAAa,4DAEjB,CACI,KAAM,iBACN,YAAa,kEAIrB,SAAgB,EAAW,EAAY,CACnC,MAAO,CAAC,EAAK,WAAa,EAAK"}