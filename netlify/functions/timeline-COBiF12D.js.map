{"version":3,"file":"timeline-COBiF12D.js","names":["route: Route","cache","routeParams","got","weiboUtils","description","token","uid"],"sources":["../../lib/routes/weibo/timeline.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport querystring from 'node:querystring';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\nimport weiboUtils from './utils';\r\nimport { fallback, queryToBoolean } from '@/utils/readable-social';\r\n\r\nexport const route: Route = {\r\n    path: '/timeline/:uid/:feature?/:routeParams?',\r\n    categories: ['social-media'],\r\n    example: '/weibo/timeline/3306934123',\r\n    parameters: { uid: '用户的uid', feature: '过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。', routeParams: '额外参数；请参阅上面的说明和表格' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'WEIBO_APP_KEY',\r\n                description: '',\r\n            },\r\n            {\r\n                name: 'WEIBO_REDIRECT_URL',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '个人时间线',\r\n    maintainers: ['zytomorrow', 'DIYgod', 'Rongronggg9'],\r\n    handler,\r\n    description: `::: warning\r\n  需要对应用户打开页面进行授权生成 token 才能生成内容\r\n\r\n  自部署需要申请并配置微博 key，具体见部署文档\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const uid = ctx.req.param('uid');\r\n    const feature = ctx.req.param('feature') || 0;\r\n    const routeParams = ctx.req.param('routeParams') || undefined;\r\n    const token = await cache.get('weibotimelineuid' + uid, false);\r\n    let displayVideo = '1';\r\n    let displayArticle = '0';\r\n    let displayComments = '0';\r\n    let showBloggerIcons = '0';\r\n    if (routeParams) {\r\n        if (routeParams === '1' || routeParams === '0') {\r\n            displayVideo = routeParams;\r\n        } else {\r\n            const routeParams = querystring.parse(ctx.req.param('routeParams'));\r\n            displayVideo = fallback(undefined, queryToBoolean(routeParams.displayVideo), true) ? '1' : '0';\r\n            displayArticle = fallback(undefined, queryToBoolean(routeParams.displayArticle), false) ? '1' : '0';\r\n            displayComments = fallback(undefined, queryToBoolean(routeParams.displayComments), false) ? '1' : '0';\r\n            showBloggerIcons = fallback(undefined, queryToBoolean(routeParams.showBloggerIcons), false) ? '1' : '0';\r\n        }\r\n    }\r\n\r\n    if (token) {\r\n        const userInfo = await cache.tryGet(\r\n            `weibo:timeline:userInfo:${uid}`,\r\n            async () => {\r\n                const _r = await got({\r\n                    method: 'get',\r\n                    url: `https://m.weibo.cn/api/container/getIndex?type=uid&value=${uid}`,\r\n                    headers: {\r\n                        Referer: 'https://m.weibo.cn/',\r\n                    },\r\n                });\r\n                return _r.data.data.userInfo;\r\n            },\r\n            config.cache.routeExpire,\r\n            false\r\n        );\r\n        const name = userInfo.screen_name;\r\n        const description = userInfo.description;\r\n        const profileImageUrl = userInfo.profile_image_url;\r\n\r\n        const response = await cache.tryGet(\r\n            `weibo:timeline:${uid}`,\r\n            async () => {\r\n                const _r = await got(`https://api.weibo.com/2/statuses/home_timeline.json?access_token=${token}&count=100&feature=${feature}`);\r\n                return _r.data;\r\n            },\r\n            config.cache.routeExpire,\r\n            false\r\n        );\r\n        // 检查token失效\r\n        if (response.error !== undefined) {\r\n            const { app_key = '', redirect_url = ctx.req.origin + '/weibo/timeline/0' } = config.weibo;\r\n\r\n            ctx.status = 302;\r\n            ctx.set({\r\n                'Cache-Control': 'no-cache',\r\n            });\r\n            ctx.set('redirect', `https://api.weibo.com/oauth2/authorize?client_id=${app_key}&redirect_uri=${redirect_url}${routeParams ? `&state=${routeParams}` : ''}`);\r\n            return;\r\n        }\r\n        const resultItem = await Promise.all(\r\n            response.statuses.map(async (item) => {\r\n                const key = `weibotimelineurl${item.user.id}${item.id}`;\r\n                const data = await cache.tryGet(key, () => weiboUtils.getShowData(uid, item.id));\r\n\r\n                // 是否通过api拿到了data\r\n                const isDataOK = data?.text;\r\n                if (isDataOK) {\r\n                    item = data;\r\n                }\r\n\r\n                // 转发的长微博处理\r\n                const retweet = item.retweeted_status;\r\n                if (retweet?.isLongText) {\r\n                    const retweetData = await cache.tryGet(`weibo:retweeted:${retweet.user.id}:${retweet.id}`, () => weiboUtils.getShowData(retweet.user.id, retweet.id));\r\n                    if (retweetData?.text) {\r\n                        item.retweeted_status.text = retweetData.text;\r\n                    }\r\n                }\r\n\r\n                const guid = `https://weibo.com/${uid}/${item.id}`;\r\n                // not using formatExtended.guid in order not to introduce breaking change\r\n\r\n                const formatExtended = weiboUtils.formatExtended(ctx, item, uid);\r\n                let description = formatExtended.description;\r\n                const pubDate = isDataOK ? parseDate(data.created_at) : parseDate(item.created_at);\r\n\r\n                // 视频的处理\r\n                if (displayVideo === '1') {\r\n                    // 含被转发微博时需要从被转发微博中获取视频\r\n                    description = item.retweeted_status ? weiboUtils.formatVideo(description, item.retweeted_status) : weiboUtils.formatVideo(description, item);\r\n                }\r\n\r\n                // 评论的处理\r\n                if (displayComments === '1') {\r\n                    description = await weiboUtils.formatComments(ctx, description, item, showBloggerIcons);\r\n                }\r\n\r\n                // 文章的处理\r\n                if (displayArticle === '1') {\r\n                    // 含被转发微博时需要从被转发微博中获取文章\r\n                    description = await (item.retweeted_status ? weiboUtils.formatArticle(ctx, description, item.retweeted_status) : weiboUtils.formatArticle(ctx, description, item));\r\n                }\r\n\r\n                return {\r\n                    ...formatExtended,\r\n                    guid,\r\n                    description,\r\n                    pubDate,\r\n                    author: item.user.screen_name,\r\n                };\r\n            })\r\n        );\r\n\r\n        return weiboUtils.sinaimgTvax({\r\n            title: `个人微博时间线--${name}`,\r\n            link: `http://weibo.com/${uid}/`,\r\n            description,\r\n            image: profileImageUrl,\r\n            item: resultItem,\r\n        });\r\n    } else if (uid === '0' || ctx.req.query()) {\r\n        const { app_key = '', redirect_url = ctx.req.origin + '/weibo/timeline/0', app_secret = '' } = config.weibo;\r\n\r\n        const code = ctx.req.query('code');\r\n        const routeParams = ctx.req.query('state');\r\n        if (code) {\r\n            const rep = await got.post(`https://api.weibo.com/oauth2/access_token?client_id=${app_key}&client_secret=${app_secret}&code=${code}&redirect_uri=${redirect_url}&grant_type=authorization_code`);\r\n            const token = rep.data.access_token;\r\n            const uid = rep.data.uid;\r\n            const expires_in = rep.data.expires_in;\r\n            await cache.set('weibotimelineuid' + uid, token, expires_in);\r\n\r\n            ctx.set({\r\n                'Content-Type': 'text/html; charset=UTF-8',\r\n                'Cache-Control': 'no-cache',\r\n            });\r\n            ctx.html(`<script>window.location = '/weibo/timeline/${uid}${routeParams ? `/${routeParams}` : ''}'</script>`);\r\n        }\r\n    } else {\r\n        const { app_key = '', redirect_url = ctx.req.origin + '/weibo/timeline/0' } = config.weibo;\r\n\r\n        ctx.status = 302;\r\n        ctx.set({\r\n            'Cache-Control': 'no-cache',\r\n        });\r\n        ctx.set('redirect', `https://api.weibo.com/oauth2/authorize?client_id=${app_key}&redirect_uri=${redirect_url}${routeParams ? `&state=${feature}/${routeParams.replaceAll('&', '%26')}` : ''}`);\r\n    }\r\n}\r\n"],"mappings":"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"}