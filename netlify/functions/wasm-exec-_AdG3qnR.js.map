{"version":3,"file":"wasm-exec-_AdG3qnR.js","names":[],"sources":["../../lib/routes/bilibili/wasm-exec.ts"],"sourcesContent":["/* eslint-disable prefer-rest-params */\r\n/* eslint-disable default-case */\r\n/* eslint-disable unicorn/consistent-function-scoping */\r\n/* eslint-disable no-console */\r\n// Copyright 2018 The Go Authors. All rights reserved.\r\n// Use of this source code is governed by a BSD-style\r\n// license that can be found in the LICENSE file.\r\n\r\n'use strict';\r\n\r\n(() => {\r\n    const enosys = () => {\r\n        const err = new Error('not implemented');\r\n        err.code = 'ENOSYS';\r\n        return err;\r\n    };\r\n\r\n    if (!globalThis.fs) {\r\n        let outputBuf = '';\r\n        globalThis.fs = {\r\n            constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1, O_DIRECTORY: -1 }, // unused\r\n            writeSync(fd, buf) {\r\n                outputBuf += decoder.decode(buf);\r\n                const nl = outputBuf.lastIndexOf('\\n');\r\n                if (nl !== -1) {\r\n                    console.log(outputBuf.slice(0, nl));\r\n                    outputBuf = outputBuf.slice(nl + 1);\r\n                }\r\n                return buf.length;\r\n            },\r\n            write(fd, buf, offset, length, position, callback) {\r\n                if (offset !== 0 || length !== buf.length || position !== null) {\r\n                    callback(enosys());\r\n                    return;\r\n                }\r\n                const n = this.writeSync(fd, buf);\r\n                callback(null, n);\r\n            },\r\n            chmod(path, mode, callback) {\r\n                callback(enosys());\r\n            },\r\n            chown(path, uid, gid, callback) {\r\n                callback(enosys());\r\n            },\r\n            close(fd, callback) {\r\n                callback(enosys());\r\n            },\r\n            fchmod(fd, mode, callback) {\r\n                callback(enosys());\r\n            },\r\n            fchown(fd, uid, gid, callback) {\r\n                callback(enosys());\r\n            },\r\n            fstat(fd, callback) {\r\n                callback(enosys());\r\n            },\r\n            fsync(fd, callback) {\r\n                callback(null);\r\n            },\r\n            ftruncate(fd, length, callback) {\r\n                callback(enosys());\r\n            },\r\n            lchown(path, uid, gid, callback) {\r\n                callback(enosys());\r\n            },\r\n            link(path, link, callback) {\r\n                callback(enosys());\r\n            },\r\n            lstat(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            mkdir(path, perm, callback) {\r\n                callback(enosys());\r\n            },\r\n            open(path, flags, mode, callback) {\r\n                callback(enosys());\r\n            },\r\n            read(fd, buffer, offset, length, position, callback) {\r\n                callback(enosys());\r\n            },\r\n            readdir(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            readlink(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            rename(from, to, callback) {\r\n                callback(enosys());\r\n            },\r\n            rmdir(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            stat(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            symlink(path, link, callback) {\r\n                callback(enosys());\r\n            },\r\n            truncate(path, length, callback) {\r\n                callback(enosys());\r\n            },\r\n            unlink(path, callback) {\r\n                callback(enosys());\r\n            },\r\n            utimes(path, atime, mtime, callback) {\r\n                callback(enosys());\r\n            },\r\n        };\r\n    }\r\n\r\n    if (!globalThis.process) {\r\n        globalThis.process = {\r\n            getuid() {\r\n                return -1;\r\n            },\r\n            getgid() {\r\n                return -1;\r\n            },\r\n            geteuid() {\r\n                return -1;\r\n            },\r\n            getegid() {\r\n                return -1;\r\n            },\r\n            getgroups() {\r\n                throw enosys();\r\n            },\r\n            pid: -1,\r\n            ppid: -1,\r\n            umask() {\r\n                throw enosys();\r\n            },\r\n            cwd() {\r\n                throw enosys();\r\n            },\r\n            chdir() {\r\n                throw enosys();\r\n            },\r\n        };\r\n    }\r\n\r\n    if (!globalThis.path) {\r\n        globalThis.path = {\r\n            resolve(...pathSegments) {\r\n                return pathSegments.join('/');\r\n            },\r\n        };\r\n    }\r\n\r\n    // eslint-disable-next-line n/no-unsupported-features/node-builtins\r\n    if (!globalThis.crypto) {\r\n        throw new Error('globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)');\r\n    }\r\n\r\n    if (!globalThis.performance) {\r\n        throw new Error('globalThis.performance is not available, polyfill required (performance.now only)');\r\n    }\r\n\r\n    if (!globalThis.TextEncoder) {\r\n        throw new Error('globalThis.TextEncoder is not available, polyfill required');\r\n    }\r\n\r\n    if (!globalThis.TextDecoder) {\r\n        throw new Error('globalThis.TextDecoder is not available, polyfill required');\r\n    }\r\n\r\n    const encoder = new TextEncoder('utf-8');\r\n    const decoder = new TextDecoder('utf-8');\r\n\r\n    globalThis.Go = class {\r\n        constructor() {\r\n            this.argv = ['js'];\r\n            this.env = {};\r\n            this.exit = (code) => {\r\n                if (code !== 0) {\r\n                    console.warn('exit code:', code);\r\n                }\r\n            };\r\n            this._exitPromise = new Promise((resolve) => {\r\n                this._resolveExitPromise = resolve;\r\n            });\r\n            this._pendingEvent = null;\r\n            this._scheduledTimeouts = new Map();\r\n            this._nextCallbackTimeoutID = 1;\r\n\r\n            const setInt64 = (addr, v) => {\r\n                this.mem.setUint32(addr + 0, v, true);\r\n                this.mem.setUint32(addr + 4, Math.floor(v / 4_294_967_296), true);\r\n            };\r\n\r\n            const getInt64 = (addr) => {\r\n                const low = this.mem.getUint32(addr + 0, true);\r\n                const high = this.mem.getInt32(addr + 4, true);\r\n                return low + high * 4_294_967_296;\r\n            };\r\n\r\n            const loadValue = (addr) => {\r\n                const f = this.mem.getFloat64(addr, true);\r\n                if (f === 0) {\r\n                    return;\r\n                }\r\n                if (!Number.isNaN(f)) {\r\n                    return f;\r\n                }\r\n\r\n                const id = this.mem.getUint32(addr, true);\r\n                return this._values[id];\r\n            };\r\n\r\n            const storeValue = (addr, v) => {\r\n                const nanHead = 0x7F_F8_00_00;\r\n\r\n                if (typeof v === 'number' && v !== 0) {\r\n                    if (Number.isNaN(v)) {\r\n                        this.mem.setUint32(addr + 4, nanHead, true);\r\n                        this.mem.setUint32(addr, 0, true);\r\n                        return;\r\n                    }\r\n                    this.mem.setFloat64(addr, v, true);\r\n                    return;\r\n                }\r\n\r\n                if (v === undefined) {\r\n                    this.mem.setFloat64(addr, 0, true);\r\n                    return;\r\n                }\r\n\r\n                let id = this._ids.get(v);\r\n                if (id === undefined) {\r\n                    id = this._idPool.pop();\r\n                    if (id === undefined) {\r\n                        id = this._values.length;\r\n                    }\r\n                    this._values[id] = v;\r\n                    this._goRefCounts[id] = 0;\r\n                    this._ids.set(v, id);\r\n                }\r\n                this._goRefCounts[id]++;\r\n                let typeFlag = 0;\r\n                switch (typeof v) {\r\n                    case 'object':\r\n                        if (v !== null) {\r\n                            typeFlag = 1;\r\n                        }\r\n                        break;\r\n                    case 'string':\r\n                        typeFlag = 2;\r\n                        break;\r\n                    case 'symbol':\r\n                        typeFlag = 3;\r\n                        break;\r\n                    case 'function':\r\n                        typeFlag = 4;\r\n                        break;\r\n                }\r\n                this.mem.setUint32(addr + 4, nanHead | typeFlag, true);\r\n                this.mem.setUint32(addr, id, true);\r\n            };\r\n\r\n            const loadSlice = (addr) => {\r\n                const array = getInt64(addr + 0);\r\n                const len = getInt64(addr + 8);\r\n                return new Uint8Array(this._inst.exports.mem.buffer, array, len);\r\n            };\r\n\r\n            const loadSliceOfValues = (addr) => {\r\n                const array = getInt64(addr + 0);\r\n                const len = getInt64(addr + 8);\r\n                const a = Array.from({ length: len });\r\n                for (let i = 0; i < len; i++) {\r\n                    a[i] = loadValue(array + i * 8);\r\n                }\r\n                return a;\r\n            };\r\n\r\n            const loadString = (addr) => {\r\n                const saddr = getInt64(addr + 0);\r\n                const len = getInt64(addr + 8);\r\n                return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\r\n            };\r\n\r\n            const testCallExport = (a, b) => {\r\n                this._inst.exports.testExport0();\r\n                return this._inst.exports.testExport(a, b);\r\n            };\r\n\r\n            const timeOrigin = Date.now() - performance.now();\r\n            this.importObject = {\r\n                _gotest: {\r\n                    add: (a, b) => a + b,\r\n                    callExport: testCallExport,\r\n                },\r\n                gojs: {\r\n                    // Go's SP does not change as long as no Go code is running. Some operations (e.g. calls, getters and setters)\r\n                    // may synchronously trigger a Go event handler. This makes Go code get executed in the middle of the imported\r\n                    // function. A goroutine can switch to a new stack if the current stack is too small (see morestack function).\r\n                    // This changes the SP, thus we have to update the SP used by the imported function.\r\n\r\n                    // func wasmExit(code int32)\r\n                    'runtime.wasmExit': (sp) => {\r\n                        sp >>>= 0;\r\n                        const code = this.mem.getInt32(sp + 8, true);\r\n                        this.exited = true;\r\n                        delete this._inst;\r\n                        delete this._values;\r\n                        delete this._goRefCounts;\r\n                        delete this._ids;\r\n                        delete this._idPool;\r\n                        this.exit(code);\r\n                    },\r\n\r\n                    // func wasmWrite(fd uintptr, p unsafe.Pointer, n int32)\r\n                    'runtime.wasmWrite': (sp) => {\r\n                        sp >>>= 0;\r\n                        const fd = getInt64(sp + 8);\r\n                        const p = getInt64(sp + 16);\r\n                        const n = this.mem.getInt32(sp + 24, true);\r\n                        globalThis.fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\r\n                    },\r\n\r\n                    // func resetMemoryDataView()\r\n                    'runtime.resetMemoryDataView': (sp) => {\r\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                        sp >>>= 0;\r\n                        this.mem = new DataView(this._inst.exports.mem.buffer);\r\n                    },\r\n\r\n                    // func nanotime1() int64\r\n                    'runtime.nanotime1': (sp) => {\r\n                        sp >>>= 0;\r\n                        setInt64(sp + 8, (timeOrigin + performance.now()) * 1_000_000);\r\n                    },\r\n\r\n                    // func walltime() (sec int64, nsec int32)\r\n                    'runtime.walltime': (sp) => {\r\n                        sp >>>= 0;\r\n                        const msec = Date.now();\r\n                        setInt64(sp + 8, msec / 1000);\r\n                        this.mem.setInt32(sp + 16, (msec % 1000) * 1_000_000, true);\r\n                    },\r\n\r\n                    // func scheduleTimeoutEvent(delay int64) int32\r\n                    'runtime.scheduleTimeoutEvent': (sp) => {\r\n                        sp >>>= 0;\r\n                        const id = this._nextCallbackTimeoutID;\r\n                        this._nextCallbackTimeoutID++;\r\n                        this._scheduledTimeouts.set(\r\n                            id,\r\n                            setTimeout(\r\n                                () => {\r\n                                    this._resume();\r\n                                    while (this._scheduledTimeouts.has(id)) {\r\n                                        // for some reason Go failed to register the timeout event, log and try again\r\n                                        // (temporary workaround for https://github.com/golang/go/issues/28975)\r\n                                        console.warn('scheduleTimeoutEvent: missed timeout event');\r\n                                        this._resume();\r\n                                    }\r\n                                },\r\n                                getInt64(sp + 8)\r\n                            )\r\n                        );\r\n                        this.mem.setInt32(sp + 16, id, true);\r\n                    },\r\n\r\n                    // func clearTimeoutEvent(id int32)\r\n                    'runtime.clearTimeoutEvent': (sp) => {\r\n                        sp >>>= 0;\r\n                        const id = this.mem.getInt32(sp + 8, true);\r\n                        clearTimeout(this._scheduledTimeouts.get(id));\r\n                        this._scheduledTimeouts.delete(id);\r\n                    },\r\n\r\n                    // func getRandomData(r []byte)\r\n                    'runtime.getRandomData': (sp) => {\r\n                        sp >>>= 0;\r\n                        // eslint-disable-next-line n/no-unsupported-features/node-builtins\r\n                        crypto.getRandomValues(loadSlice(sp + 8));\r\n                    },\r\n\r\n                    // func finalizeRef(v ref)\r\n                    'syscall/js.finalizeRef': (sp) => {\r\n                        sp >>>= 0;\r\n                        const id = this.mem.getUint32(sp + 8, true);\r\n                        this._goRefCounts[id]--;\r\n                        if (this._goRefCounts[id] === 0) {\r\n                            const v = this._values[id];\r\n                            this._values[id] = null;\r\n                            this._ids.delete(v);\r\n                            this._idPool.push(id);\r\n                        }\r\n                    },\r\n\r\n                    // func stringVal(value string) ref\r\n                    'syscall/js.stringVal': (sp) => {\r\n                        sp >>>= 0;\r\n                        storeValue(sp + 24, loadString(sp + 8));\r\n                    },\r\n\r\n                    // func valueGet(v ref, p string) ref\r\n                    'syscall/js.valueGet': (sp) => {\r\n                        sp >>>= 0;\r\n                        const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\r\n                        sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                        storeValue(sp + 32, result);\r\n                    },\r\n\r\n                    // func valueSet(v ref, p string, x ref)\r\n                    'syscall/js.valueSet': (sp) => {\r\n                        sp >>>= 0;\r\n                        Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\r\n                    },\r\n\r\n                    // func valueDelete(v ref, p string)\r\n                    'syscall/js.valueDelete': (sp) => {\r\n                        sp >>>= 0;\r\n                        Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\r\n                    },\r\n\r\n                    // func valueIndex(v ref, i int) ref\r\n                    'syscall/js.valueIndex': (sp) => {\r\n                        sp >>>= 0;\r\n                        storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\r\n                    },\r\n\r\n                    // valueSetIndex(v ref, i int, x ref)\r\n                    'syscall/js.valueSetIndex': (sp) => {\r\n                        sp >>>= 0;\r\n                        Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\r\n                    },\r\n\r\n                    // func valueCall(v ref, m string, args []ref) (ref, bool)\r\n                    'syscall/js.valueCall': (sp) => {\r\n                        sp >>>= 0;\r\n                        try {\r\n                            const v = loadValue(sp + 8);\r\n                            const m = Reflect.get(v, loadString(sp + 16));\r\n                            const args = loadSliceOfValues(sp + 32);\r\n                            const result = Reflect.apply(m, v, args);\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 56, result);\r\n                            this.mem.setUint8(sp + 64, 1);\r\n                        } catch (error) {\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 56, error);\r\n                            this.mem.setUint8(sp + 64, 0);\r\n                        }\r\n                    },\r\n\r\n                    // func valueInvoke(v ref, args []ref) (ref, bool)\r\n                    'syscall/js.valueInvoke': (sp) => {\r\n                        sp >>>= 0;\r\n                        try {\r\n                            const v = loadValue(sp + 8);\r\n                            const args = loadSliceOfValues(sp + 16);\r\n                            const result = Reflect.apply(v, undefined, args);\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 40, result);\r\n                            this.mem.setUint8(sp + 48, 1);\r\n                        } catch (error) {\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 40, error);\r\n                            this.mem.setUint8(sp + 48, 0);\r\n                        }\r\n                    },\r\n\r\n                    // func valueNew(v ref, args []ref) (ref, bool)\r\n                    'syscall/js.valueNew': (sp) => {\r\n                        sp >>>= 0;\r\n                        try {\r\n                            const v = loadValue(sp + 8);\r\n                            const args = loadSliceOfValues(sp + 16);\r\n                            const result = Reflect.construct(v, args);\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 40, result);\r\n                            this.mem.setUint8(sp + 48, 1);\r\n                        } catch (error) {\r\n                            sp = this._inst.exports.getsp() >>> 0; // see comment above\r\n                            storeValue(sp + 40, error);\r\n                            this.mem.setUint8(sp + 48, 0);\r\n                        }\r\n                    },\r\n\r\n                    // func valueLength(v ref) int\r\n                    'syscall/js.valueLength': (sp) => {\r\n                        sp >>>= 0;\r\n                        setInt64(sp + 16, Number.parseInt(loadValue(sp + 8).length));\r\n                    },\r\n\r\n                    // valuePrepareString(v ref) (ref, int)\r\n                    'syscall/js.valuePrepareString': (sp) => {\r\n                        sp >>>= 0;\r\n                        const str = encoder.encode(String(loadValue(sp + 8)));\r\n                        storeValue(sp + 16, str);\r\n                        setInt64(sp + 24, str.length);\r\n                    },\r\n\r\n                    // valueLoadString(v ref, b []byte)\r\n                    'syscall/js.valueLoadString': (sp) => {\r\n                        sp >>>= 0;\r\n                        const str = loadValue(sp + 8);\r\n                        loadSlice(sp + 16).set(str);\r\n                    },\r\n\r\n                    // func valueInstanceOf(v ref, t ref) bool\r\n                    'syscall/js.valueInstanceOf': (sp) => {\r\n                        sp >>>= 0;\r\n                        this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);\r\n                    },\r\n\r\n                    // func copyBytesToGo(dst []byte, src ref) (int, bool)\r\n                    'syscall/js.copyBytesToGo': (sp) => {\r\n                        sp >>>= 0;\r\n                        const dst = loadSlice(sp + 8);\r\n                        const src = loadValue(sp + 32);\r\n                        if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\r\n                            this.mem.setUint8(sp + 48, 0);\r\n                            return;\r\n                        }\r\n                        const toCopy = src.subarray(0, dst.length);\r\n                        dst.set(toCopy);\r\n                        setInt64(sp + 40, toCopy.length);\r\n                        this.mem.setUint8(sp + 48, 1);\r\n                    },\r\n\r\n                    // func copyBytesToJS(dst ref, src []byte) (int, bool)\r\n                    'syscall/js.copyBytesToJS': (sp) => {\r\n                        sp >>>= 0;\r\n                        const dst = loadValue(sp + 8);\r\n                        const src = loadSlice(sp + 16);\r\n                        if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\r\n                            this.mem.setUint8(sp + 48, 0);\r\n                            return;\r\n                        }\r\n                        const toCopy = src.subarray(0, dst.length);\r\n                        dst.set(toCopy);\r\n                        setInt64(sp + 40, toCopy.length);\r\n                        this.mem.setUint8(sp + 48, 1);\r\n                    },\r\n\r\n                    debug: (value) => {\r\n                        console.log(value);\r\n                    },\r\n                },\r\n            };\r\n        }\r\n\r\n        async run(instance) {\r\n            if (!(instance instanceof WebAssembly.Instance)) {\r\n                throw new TypeError('Go.run: WebAssembly.Instance expected');\r\n            }\r\n            this._inst = instance;\r\n            this.mem = new DataView(this._inst.exports.mem.buffer);\r\n            this._values = [\r\n                // JS values that Go currently has references to, indexed by reference id\r\n                NaN,\r\n                0,\r\n                null,\r\n                true,\r\n                false,\r\n                globalThis,\r\n                this,\r\n            ];\r\n            this._goRefCounts = Array.from({ length: this._values.length }).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id\r\n            this._ids = new Map([\r\n                // mapping from JS values to reference ids\r\n                [0, 1],\r\n                [null, 2],\r\n                [true, 3],\r\n                [false, 4],\r\n                [globalThis, 5],\r\n                [this, 6],\r\n            ]);\r\n            this._idPool = []; // unused ids that have been garbage collected\r\n            this.exited = false; // whether the Go program has exited\r\n\r\n            // Pass command line arguments and environment variables to WebAssembly by writing them to the linear memory.\r\n            let offset = 4096;\r\n\r\n            const strPtr = (str) => {\r\n                const ptr = offset;\r\n                const bytes = encoder.encode(str + '\\0');\r\n                new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\r\n                offset += bytes.length;\r\n                if (offset % 8 !== 0) {\r\n                    offset += 8 - (offset % 8);\r\n                }\r\n                return ptr;\r\n            };\r\n\r\n            const argc = this.argv.length;\r\n\r\n            const argvPtrs = [];\r\n            for (const arg of this.argv) {\r\n                argvPtrs.push(strPtr(arg));\r\n            }\r\n            argvPtrs.push(0);\r\n\r\n            const keys = Object.keys(this.env).sort();\r\n            for (const key of keys) {\r\n                argvPtrs.push(strPtr(`${key}=${this.env[key]}`));\r\n            }\r\n            argvPtrs.push(0);\r\n\r\n            const argv = offset;\r\n            for (const ptr of argvPtrs) {\r\n                this.mem.setUint32(offset, ptr, true);\r\n                this.mem.setUint32(offset + 4, 0, true);\r\n                offset += 8;\r\n            }\r\n\r\n            // The linker guarantees global data starts from at least wasmMinDataAddr.\r\n            // Keep in sync with cmd/link/internal/ld/data.go:wasmMinDataAddr.\r\n            const wasmMinDataAddr = 4096 + 8192;\r\n            if (offset >= wasmMinDataAddr) {\r\n                throw new Error('total length of command line and environment variables exceeds limit');\r\n            }\r\n\r\n            this._inst.exports.run(argc, argv);\r\n            if (this.exited) {\r\n                this._resolveExitPromise();\r\n            }\r\n            await this._exitPromise;\r\n        }\r\n\r\n        _resume() {\r\n            if (this.exited) {\r\n                throw new Error('Go program has already exited');\r\n            }\r\n            this._inst.exports.resume();\r\n            if (this.exited) {\r\n                this._resolveExitPromise();\r\n            }\r\n        }\r\n\r\n        _makeFuncWrapper(id) {\r\n            // somehow avoiding aliasing this with an arrow function doesn't work\r\n            // eslint-disable-next-line unicorn/no-this-assignment, @typescript-eslint/no-this-alias\r\n            const go = this;\r\n            return function () {\r\n                const event = { id, this: this, args: arguments };\r\n                go._pendingEvent = event;\r\n                go._resume();\r\n                return event.result;\r\n            };\r\n        }\r\n    };\r\n})();\r\n\r\nexport const Go = globalThis.Go;\r\n"],"mappings":"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"}