{"version":3,"file":"comicskingdom-CQi_RWJr.js","names":[],"sources":["../../lib/routes/comicskingdom/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\nexport const route: Route = {\r\n    path: '/:name',\r\n    categories: ['anime'],\r\n    example: '/comicskingdom/pardon-my-planet',\r\n    parameters: { name: 'URL path of the strip on comicskingdom.com' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['comicskingdom.com/:name/*', 'comicskingdom.com/:name'],\r\n        },\r\n    ],\r\n    name: 'Archive',\r\n    maintainers: ['stjohnjohnson'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const baseURL = 'https://comicskingdom.com';\r\n    const name = ctx.req.param('name');\r\n    const url = `${baseURL}/${name}/archive`;\r\n    const { data } = await got(url);\r\n\r\n    const $ = load(data);\r\n\r\n    // Determine Comic and Author from main page\r\n    const comic = $('title').text().replace('Comics Kingdom - ', '').trim();\r\n    const author = $('.feature-title h2').text();\r\n\r\n    // Find the links for all non-archived items\r\n    const links = $('div.tile')\r\n        .toArray()\r\n        .map((el) => $(el).find('a').first().attr('href'));\r\n\r\n    if (links.length === 0) {\r\n        throw new InvalidParameterError(`Comic Not Found - ${name}`);\r\n    }\r\n    const items = await Promise.all(\r\n        links.map((link) =>\r\n            cache.tryGet(link, async () => {\r\n                const detailResponse = await got(link);\r\n                const content = load(detailResponse.data);\r\n\r\n                const title = content('meta[property=\"og:description\"]').attr('content');\r\n                const image = content('meta[property=\"og:image\"]').attr('content');\r\n                const description = art(path.join(__dirname, 'templates/desc.art'), {\r\n                    image,\r\n                });\r\n                // Pull the date out of the URL\r\n                const pubDate = parseDate(link.slice(link.lastIndexOf('/') + 1), 'YYYY-MM-DD');\r\n\r\n                return {\r\n                    title,\r\n                    author,\r\n                    category: 'comic',\r\n                    description,\r\n                    pubDate,\r\n                    link,\r\n                };\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: comic,\r\n        link: url,\r\n        image: $('.feature-logo').attr('src'),\r\n        item: items,\r\n        language: 'en-US',\r\n    };\r\n}\r\n"],"mappings":"oiBAUA,MAAa,EAAe,CACxB,KAAM,SACN,WAAY,CAAC,SACb,QAAS,kCACT,WAAY,CAAE,KAAM,8CACpB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,4BAA6B,6BAG9C,KAAM,UACN,YAAa,CAAC,iBACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IACM,EAAO,EAAI,IAAI,MAAM,QACrB,EAAM,6BAAc,EAAK,UACzB,CAAE,QAAS,MAAM,EAAI,GAErB,EAAI,EAAK,GAGT,EAAQ,EAAE,SAAS,OAAO,QAAQ,oBAAqB,IAAI,OAC3D,EAAS,EAAE,qBAAqB,OAGhC,EAAQ,EAAE,YACX,UACA,IAAK,GAAO,EAAE,GAAI,KAAK,KAAK,QAAQ,KAAK,SAE9C,GAAI,EAAM,SAAW,EACjB,MAAM,IAAI,EAAsB,qBAAqB,KAEzD,IAAM,EAAQ,MAAM,QAAQ,IACxB,EAAM,IAAK,GACP,EAAM,OAAO,EAAM,SAAY,CAC3B,IAAM,EAAiB,MAAM,EAAI,GAC3B,EAAU,EAAK,EAAe,MAE9B,EAAQ,EAAQ,mCAAmC,KAAK,WACxD,EAAQ,EAAQ,6BAA6B,KAAK,WAClD,EAAc,EAAI,EAAA,KAAA,EAAA,+BAA4C,CAChE,UAGE,EAAU,EAAU,EAAK,MAAM,EAAK,YAAY,KAAO,GAAI,cAEjE,MAAO,CACH,QACA,SACA,SAAU,QACV,cACA,UACA,YAMhB,MAAO,CACH,MAAO,EACP,KAAM,EACN,MAAO,EAAE,iBAAiB,KAAK,OAC/B,KAAM,EACN,SAAU"}