{"version":3,"file":"utils-BUpZr0KY.js","names":["ofetch","cache"],"sources":["../../lib/routes/juejin/utils.ts"],"sourcesContent":["import ofetch from '@/utils/ofetch';\r\nimport * as cheerio from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n// import MarkdownIt from 'markdown-it';\r\n// const md = MarkdownIt({\r\n//     html: true,\r\n// });\r\nimport crypto from 'node:crypto';\r\nimport cache from '@/utils/cache';\r\nimport { Category, Collection, Tag } from './types';\r\n\r\nconst b64tou8a = (str) => Uint8Array.from(Buffer.from(str, 'base64'));\r\nconst b64tohex = (str) => Buffer.from(str, 'base64').toString('hex');\r\nconst s256 = (s1: Uint8Array, s2: string) => {\r\n    const sha = crypto.createHash('sha256');\r\n    sha.update(s1);\r\n    sha.update(s2);\r\n    return sha.digest('hex');\r\n};\r\n\r\n// 加载文章页\r\n// async function loadContent(id) {\r\n//     const response = await ofetch('https://api.juejin.cn/content_api/v1/article/detail', {\r\n//         method: 'post',\r\n//         body: {\r\n//             article_id: id,\r\n//         },\r\n//     });\r\n//     let description;\r\n//     if (response.data) {\r\n//         description = md.render(response.data.article_info.mark_content) || response.data.article_info.content;\r\n//     }\r\n\r\n//     return { description };\r\n// }\r\n\r\nconst solveWafChallenge = (cs) => {\r\n    const c = JSON.parse(Buffer.from(cs, 'base64').toString());\r\n    const prefix = b64tou8a(c.v.a);\r\n    const expect = b64tohex(c.v.c);\r\n\r\n    for (let i = 0; i < 1_000_000; i++) {\r\n        const hash = s256(prefix, i.toString());\r\n        if (hash === expect) {\r\n            c.d = Buffer.from(i.toString()).toString('base64');\r\n            break;\r\n        }\r\n    }\r\n    return Buffer.from(JSON.stringify(c)).toString('base64');\r\n};\r\n\r\nexport const getArticle = async (link) => {\r\n    let response = await ofetch(link);\r\n    let $ = cheerio.load(response);\r\n    if ($('script').text().includes('_wafchallengeid')) {\r\n        const cs = $('script:contains(\"_wafchallengeid\")')\r\n            .text()\r\n            .match(/cs=\"(.*?)\",c/)?.[1];\r\n        const cookie = solveWafChallenge(cs);\r\n\r\n        response = await ofetch(link, {\r\n            headers: {\r\n                cookie: `_wafchallengeid=${cookie};`,\r\n            },\r\n        });\r\n\r\n        $ = cheerio.load(response);\r\n    }\r\n\r\n    return $('.article-viewer').html();\r\n};\r\n\r\n// const loadNews = async (link) => {\r\n//     const response = await ofetch(link);\r\n//     const $ = cheerio.load(response);\r\n//     $('h1.title, .main-box .message').remove();\r\n//     return { description: $('.main-box .article').html() };\r\n// };\r\n\r\nexport const parseList = (data) =>\r\n    data.map((item) => {\r\n        const isArticle = !!item.article_info;\r\n\r\n        return {\r\n            title: isArticle ? item.article_info.title : item.content_info.title,\r\n            description: (isArticle ? item.article_info.brief_content : item.content_info.brief) || '无描述',\r\n            pubDate: parseDate(isArticle ? item.article_info.ctime : item.content_info.ctime, 'X'),\r\n            author: item.author_user_info.user_name,\r\n            link: `https://juejin.cn${isArticle ? `/post/${item.article_id}` : `/news/${item.content_id}`}`,\r\n            category: [...new Set([item.category.category_name, ...item.tags.map((tag) => tag.tag_name)])],\r\n        };\r\n    });\r\n\r\nexport const ProcessFeed = (list) =>\r\n    Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                item.description = (await getArticle(item.link)) || item.description;\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n// export const ProcessFeed = (list, caches) =>\r\n//     Promise.all(\r\n//         list.map(async (item) => {\r\n//             const isArticle = !!item.article_info;\r\n//             const pubDate = parseDate((isArticle ? item.article_info.ctime : item.content_info.ctime) * 1000);\r\n//             const link = `https://juejin.cn${isArticle ? '/post/' + item.article_id : '/news/' + item.content_id}`;\r\n//             // 列表上提取到的信息\r\n//             const single = {\r\n//                 title: isArticle ? item.article_info.title : item.content_info.title,\r\n//                 description: ((isArticle ? item.article_info.brief_content : item.content_info.brief) || '无描述').replaceAll(/[\\u0000-\\u0008\\u000B\\u000C\\u000E-\\u001F\\u007F]/g, ''),\r\n//                 pubDate,\r\n//                 author: item.author_user_info.user_name,\r\n//                 link,\r\n//             };\r\n\r\n//             // 使用tryGet方法从缓存获取内容。\r\n//             // 当缓存中无法获取到链接内容的时候，则使用load方法加载文章内容。\r\n//             const other = await caches.tryGet(link, () => (isArticle ? loadContent(item.article_id) : loadNews(link)));\r\n//             // 合并解析后的结果集作为该篇文章最终的输出结果\r\n//             return { ...single, ...other };\r\n//         })\r\n//     );\r\n\r\nexport const getCategoryBrief = () =>\r\n    cache.tryGet('juejin:categoryBriefs', async () => {\r\n        const response = await ofetch('https://api.juejin.cn/tag_api/v1/query_category_briefs');\r\n        return response.data;\r\n    }) as Promise<Category[]>;\r\n\r\nexport const getCollection = (collectionId) =>\r\n    cache.tryGet(`juejin:collectionId:${collectionId}`, async () => {\r\n        const response = await ofetch('https://api.juejin.cn/interact_api/v1/collectionSet/get', {\r\n            query: {\r\n                tag_id: collectionId,\r\n                cursor: 0,\r\n            },\r\n        });\r\n        return response.data;\r\n    }) as Promise<Collection>;\r\n\r\nexport const getTag = (tag) =>\r\n    cache.tryGet(`juejin:tag:${tag}`, async () => {\r\n        const response = await ofetch('https://api.juejin.cn/tag_api/v1/query_tag_detail', {\r\n            method: 'POST',\r\n            body: {\r\n                key_word: tag,\r\n            },\r\n        });\r\n        return response.data;\r\n    }) as Promise<{ tag_id: string; tag: Tag }>;\r\n"],"mappings":"oNAWA,MAAM,EAAY,GAAQ,WAAW,KAAK,OAAO,KAAK,EAAK,WACrD,EAAY,GAAQ,OAAO,KAAK,EAAK,UAAU,SAAS,OACxD,GAAQ,EAAgB,IAAe,CACzC,IAAM,EAAM,EAAO,WAAW,UAG9B,OAFA,EAAI,OAAO,GACX,EAAI,OAAO,GACJ,EAAI,OAAO,QAmBhB,EAAqB,GAAO,CAC9B,IAAM,EAAI,KAAK,MAAM,OAAO,KAAK,EAAI,UAAU,YACzC,EAAS,EAAS,EAAE,EAAE,GACtB,EAAS,EAAS,EAAE,EAAE,GAE5B,IAAK,IAAI,EAAI,EAAG,EAAI,IAAW,IAAK,CAChC,IAAM,EAAO,EAAK,EAAQ,EAAE,YAC5B,GAAI,IAAS,EAAQ,CACjB,EAAE,EAAI,OAAO,KAAK,EAAE,YAAY,SAAS,UACzC,OAGR,OAAO,OAAO,KAAK,KAAK,UAAU,IAAI,SAAS,WAGtC,EAAa,KAAO,IAAS,CACtC,IAAI,EAAW,MAAMA,EAAO,GACxB,EAAI,EAAQ,KAAK,GACrB,GAAI,EAAE,UAAU,OAAO,SAAS,mBAAoB,CAChD,IAAM,EAAK,EAAE,sCACR,OACA,MAAM,kBAAkB,GACvB,EAAS,EAAkB,GAEjC,EAAW,MAAMA,EAAO,EAAM,CAC1B,QAAS,CACL,OAAQ,mBAAmB,EAAO,MAI1C,EAAI,EAAQ,KAAK,GAGrB,OAAO,EAAE,mBAAmB,QAUnB,EAAa,GACtB,EAAK,IAAK,GAAS,CACf,IAAM,EAAY,CAAC,CAAC,EAAK,aAEzB,MAAO,CACH,MAAO,EAAY,EAAK,aAAa,MAAQ,EAAK,aAAa,MAC/D,aAAc,EAAY,EAAK,aAAa,cAAgB,EAAK,aAAa,QAAU,MACxF,QAAS,EAAU,EAAY,EAAK,aAAa,MAAQ,EAAK,aAAa,MAAO,KAClF,OAAQ,EAAK,iBAAiB,UAC9B,KAAM,oBAAoB,EAAY,SAAS,EAAK,aAAe,SAAS,EAAK,eACjF,SAAU,CAAC,GAAG,IAAI,IAAI,CAAC,EAAK,SAAS,cAAe,GAAG,EAAK,KAAK,IAAK,GAAQ,EAAI,gBAIjF,EAAe,GACxB,QAAQ,IACJ,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,UACpB,EAAK,YAAe,MAAM,EAAW,EAAK,OAAU,EAAK,YAElD,MA4BV,MACTA,EAAM,OAAO,wBAAyB,SAAY,CAC9C,IAAM,EAAW,MAAMD,EAAO,0DAC9B,OAAO,EAAS,OAGX,EAAiB,GAC1BC,EAAM,OAAO,uBAAuB,IAAgB,SAAY,CAC5D,IAAM,EAAW,MAAMD,EAAO,0DAA2D,CACrF,MAAO,CACH,OAAQ,EACR,OAAQ,KAGhB,OAAO,EAAS,OAGX,EAAU,GACnBC,EAAM,OAAO,cAAc,IAAO,SAAY,CAC1C,IAAM,EAAW,MAAMD,EAAO,oDAAqD,CAC/E,OAAQ,OACR,KAAM,CACF,SAAU,KAGlB,OAAO,EAAS"}