{"version":3,"file":"imap-DgCPxgL7.js","names":["route: Route","ConfigNotFoundError","logger","cache"],"sources":["../../lib/routes/mail/imap.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport { ImapFlow } from 'imapflow';\r\nimport { config } from '@/config';\r\nimport { simpleParser } from 'mailparser';\r\nimport logger from '@/utils/logger';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nexport const route: Route = {\r\n    path: '/imap/:email/:folder{.+}?',\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { email, folder = 'INBOX' } = ctx.req.param();\r\n    const { limit = 10 } = ctx.req.query();\r\n    const mailConfig = {\r\n        username: email,\r\n        port: 993,\r\n        ...Object.fromEntries(new URLSearchParams(config.email.config[email.replaceAll(/[.@]/g, '_')])),\r\n    };\r\n\r\n    if (!mailConfig.username || !mailConfig.password || !mailConfig.host || !mailConfig.port) {\r\n        throw new ConfigNotFoundError('Email Inbox RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/#route-specific-configurations\">relevant config</a>');\r\n    }\r\n\r\n    const client = new ImapFlow({\r\n        host: mailConfig.host,\r\n        port: Number.parseInt(mailConfig.port),\r\n        secure: true,\r\n        auth: {\r\n            user: mailConfig.username,\r\n            pass: mailConfig.password,\r\n        },\r\n        proxy: config.proxyUri, // Note: socks5h is not supported\r\n        logger: {\r\n            debug: (log) => logger.debug(log.msg),\r\n            info: (log) => logger.info(log.msg),\r\n            warn: (log) => logger.warn(log.msg),\r\n            error: (log) => logger.error(log?.msg),\r\n        },\r\n    });\r\n\r\n    try {\r\n        await client.connect();\r\n    } catch (error) {\r\n        throw new Error(error.responseText);\r\n    }\r\n\r\n    /**\r\n    [\r\n        {\r\n          // https://imapflow.com/global.html#FetchMessageObject\r\n          seq: Number,\r\n          uid: Number,\r\n          envelope: {\r\n            // https://imapflow.com/global.html#MessageEnvelopeObject\r\n          },\r\n          id: 'md5-like-hash-string',\r\n          source: Buffer,\r\n        }\r\n      ]\r\n    */\r\n    const mails = [];\r\n    const lock = await client.getMailboxLock(folder);\r\n    try {\r\n        for await (const message of client.fetch(`${Math.max(client.mailbox.exists - limit + 1, 1)}:*`, { envelope: true, source: true, uid: true })) {\r\n            mails.push(message);\r\n        }\r\n    } finally {\r\n        lock.release();\r\n    }\r\n\r\n    const items = await Promise.all(\r\n        mails.map((item) =>\r\n            cache.tryGet(`mail:${email}:${item.envelope.messageId}`, async () => {\r\n                const parsed = await simpleParser(item.source);\r\n\r\n                let description = parsed.html || parsed.textAsHtml;\r\n                if (parsed.attachments.length) {\r\n                    description += `<h3>Attachments (${parsed.attachments.length})</h3>`;\r\n                    for (const attachment of parsed.attachments) {\r\n                        description += `<p>${attachment.filename}</p>`;\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    title: item.envelope.subject,\r\n                    description,\r\n                    pubDate: parseDate(item.envelope.date),\r\n                    author: parsed.from.text,\r\n                    guid: `mail:${email}:${item.envelope.messageId}`,\r\n                };\r\n            })\r\n        )\r\n    );\r\n\r\n    await client.logout();\r\n\r\n    return {\r\n        title: `${email}'s Inbox${folder === 'INBOX' ? '' : ` - ${folder}`}`,\r\n        link: `https://${email.split('@')[1]}`,\r\n        item: items,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"qWASA,MAAaA,EAAe,CACxB,KAAM,4BACN,KAAM,UACN,YAAa,GACb,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,QAAO,SAAS,SAAY,EAAI,IAAI,QACtC,CAAE,QAAQ,IAAO,EAAI,IAAI,QACzB,EAAa,CACf,SAAU,EACV,KAAM,IACN,GAAG,OAAO,YAAY,IAAI,gBAAgB,EAAO,MAAM,OAAO,EAAM,WAAW,QAAS,SAG5F,GAAI,CAAC,EAAW,UAAY,CAAC,EAAW,UAAY,CAAC,EAAW,MAAQ,CAAC,EAAW,KAChF,MAAM,IAAIC,EAAoB,8IAGlC,IAAM,EAAS,IAAI,EAAS,CACxB,KAAM,EAAW,KACjB,KAAM,OAAO,SAAS,EAAW,MACjC,OAAQ,GACR,KAAM,CACF,KAAM,EAAW,SACjB,KAAM,EAAW,UAErB,MAAO,EAAO,SACd,OAAQ,CACJ,MAAQ,GAAQC,EAAO,MAAM,EAAI,KACjC,KAAO,GAAQA,EAAO,KAAK,EAAI,KAC/B,KAAO,GAAQA,EAAO,KAAK,EAAI,KAC/B,MAAQ,GAAQA,EAAO,MAAM,GAAK,QAI1C,GAAI,CACA,MAAM,EAAO,gBACR,EAAO,CACZ,MAAU,MAAM,EAAM,cAiB1B,IAAM,EAAQ,GACR,EAAO,MAAM,EAAO,eAAe,GACzC,GAAI,CACA,UAAW,IAAM,KAAW,EAAO,MAAM,GAAG,KAAK,IAAI,EAAO,QAAQ,OAAS,EAAQ,EAAG,GAAG,IAAK,CAAE,SAAU,GAAM,OAAQ,GAAM,IAAK,KACjI,EAAM,KAAK,UAET,CACN,EAAK,UAGT,IAAM,EAAQ,MAAM,QAAQ,IACxB,EAAM,IAAK,GACPC,EAAM,OAAO,QAAQ,EAAM,GAAG,EAAK,SAAS,YAAa,SAAY,CACjE,IAAM,EAAS,MAAM,EAAa,EAAK,QAEnC,EAAc,EAAO,MAAQ,EAAO,WACxC,GAAI,EAAO,YAAY,OAAQ,CAC3B,GAAe,oBAAoB,EAAO,YAAY,OAAO,QAC7D,IAAK,IAAM,KAAc,EAAO,YAC5B,GAAe,MAAM,EAAW,SAAS,MAIjD,MAAO,CACH,MAAO,EAAK,SAAS,QACrB,cACA,QAAS,EAAU,EAAK,SAAS,MACjC,OAAQ,EAAO,KAAK,KACpB,KAAM,QAAQ,EAAM,GAAG,EAAK,SAAS,iBAQrD,OAFA,MAAM,EAAO,SAEN,CACH,MAAO,GAAG,EAAM,UAAU,IAAW,QAAU,GAAK,MAAM,MAC1D,KAAM,WAAW,EAAM,MAAM,KAAK,KAClC,KAAM,EACN,WAAY"}