{"version":3,"file":"userplaylist-2yNIOx39.js","names":[],"sources":["../../lib/routes/163/music/userplaylist.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/music/user/playlist/:uid',\r\n    categories: ['multimedia'],\r\n    example: '/163/music/user/playlist/45441555',\r\n    parameters: { uid: '用户 uid, 可在用户主页 URL 中找到' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '用户歌单',\r\n    maintainers: ['DIYgod'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const uid = ctx.req.param('uid');\r\n\r\n    const response = await got.post('https://music.163.com/api/user/playlist', {\r\n        headers: {\r\n            Referer: 'https://music.163.com/',\r\n        },\r\n        form: {\r\n            uid,\r\n            limit: 1000,\r\n            offset: 0,\r\n        },\r\n    });\r\n\r\n    const playlist = response.data.playlist || [];\r\n\r\n    const creator = (playlist[0] || {}).creator;\r\n\r\n    const { nickname, signature, avatarUrl } = creator;\r\n\r\n    return {\r\n        title: `${nickname} 的所有歌单`,\r\n        link: `https://music.163.com/user/home?id=${uid}`,\r\n        subtitle: signature,\r\n        description: signature,\r\n        author: nickname,\r\n        updated: response.headers.date,\r\n        icon: avatarUrl,\r\n        image: avatarUrl,\r\n        item: playlist.map((pl) => {\r\n            const src = `http://music.163.com/playlist/${pl.id}`;\r\n\r\n            const html = art(path.join(__dirname, '../templates/music/userplaylist.art'), {\r\n                image: pl.coverImgUrl,\r\n                description: (pl.description || '').split('\\n'),\r\n                src,\r\n            });\r\n\r\n            return {\r\n                title: pl.name,\r\n                link: src,\r\n                pubDate: new Date(pl.createTime).toUTCString(),\r\n                published: new Date(pl.createTime).toISOString(),\r\n                updated: new Date(pl.updateTime).toISOString(),\r\n                author: pl.creator.nickname,\r\n                description: html,\r\n                content: { html },\r\n                category: pl.tags,\r\n            };\r\n        }),\r\n    };\r\n}\r\n"],"mappings":"gVAMA,MAAa,EAAe,CACxB,KAAM,4BACN,WAAY,CAAC,cACb,QAAS,oCACT,WAAY,CAAE,IAAK,0BACnB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,OACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAM,EAAI,IAAI,MAAM,OAEpB,EAAW,MAAM,EAAI,KAAK,0CAA2C,CACvE,QAAS,CACL,QAAS,0BAEb,KAAM,CACF,MACA,MAAO,IACP,OAAQ,KAIV,EAAW,EAAS,KAAK,UAAY,GAErC,GAAW,EAAS,IAAM,IAAI,QAE9B,CAAE,WAAU,YAAW,aAAc,EAE3C,MAAO,CACH,MAAO,GAAG,EAAS,QACnB,KAAM,sCAAsC,IAC5C,SAAU,EACV,YAAa,EACb,OAAQ,EACR,QAAS,EAAS,QAAQ,KAC1B,KAAM,EACN,MAAO,EACP,KAAM,EAAS,IAAK,GAAO,CACvB,IAAM,EAAM,iCAAiC,EAAG,KAE1C,EAAO,EAAI,EAAA,KAAA,EAAA,uCAA6D,CAC1E,MAAO,EAAG,YACV,aAAc,EAAG,aAAe,IAAI,MAAM;GAC1C,QAGJ,MAAO,CACH,MAAO,EAAG,KACV,KAAM,EACN,QAAS,IAAI,KAAK,EAAG,YAAY,cACjC,UAAW,IAAI,KAAK,EAAG,YAAY,cACnC,QAAS,IAAI,KAAK,EAAG,YAAY,cACjC,OAAQ,EAAG,QAAQ,SACnB,YAAa,EACb,QAAS,CAAE,QACX,SAAU,EAAG"}