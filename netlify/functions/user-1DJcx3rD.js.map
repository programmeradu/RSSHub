{"version":3,"file":"user-1DJcx3rD.js","names":[],"sources":["../../lib/routes/artstation/user.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport path from 'node:path';\r\nimport { art } from '@/utils/render';\r\nimport { config } from '@/config';\r\n\r\nexport const route: Route = {\r\n    path: '/:handle',\r\n    categories: ['picture'],\r\n    example: '/artstation/wlop',\r\n    parameters: { handle: 'Artist handle, can be found in URL' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.artstation.com/:handle'],\r\n        },\r\n    ],\r\n    name: 'Artist Profolio',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const handle = ctx.req.param('handle');\r\n\r\n    const headers = {\r\n        accept: 'application/json, text/plain, */*',\r\n        'accept-language': 'en-US,en;q=0.9',\r\n        'content-type': 'application/json',\r\n        'user-agent': config.trueUA,\r\n    };\r\n\r\n    const csrfToken = await cache.tryGet('artstation:csrfToken', async () => {\r\n        const tokenResponse = await got.post('https://www.artstation.com/api/v2/csrf_protection/token.json', {\r\n            headers,\r\n        });\r\n        return tokenResponse.headers['set-cookie'][0].split(';')[0].split('=')[1];\r\n    });\r\n\r\n    const { data: userData } = await got(`https://www.artstation.com/users/${handle}/quick.json`, {\r\n        headers: {\r\n            ...headers,\r\n            cookie: `PRIVATE-CSRF-TOKEN=${csrfToken}`,\r\n        },\r\n    });\r\n    const { data: projects } = await got(`https://www.artstation.com/users/${handle}/projects.json`, {\r\n        headers: {\r\n            ...headers,\r\n            cookie: `PRIVATE-CSRF-TOKEN=${csrfToken}`,\r\n        },\r\n        searchParams: {\r\n            user_id: userData.id,\r\n            page: 1,\r\n        },\r\n    });\r\n\r\n    const resolveImageUrl = (url) => url.replace(/\\/\\d{14}\\/small_square\\//, '/large/');\r\n\r\n    const list = projects.data.map((item) => ({\r\n        title: item.title,\r\n        description: art(path.join(__dirname, 'templates/description.art'), {\r\n            description: item.description,\r\n            image: {\r\n                src: resolveImageUrl(item.cover.small_square_url),\r\n                title: item.title,\r\n            },\r\n        }),\r\n        pubDate: parseDate(item.published_at),\r\n        updated: parseDate(item.updated_at),\r\n        link: item.permalink,\r\n        author: userData.full_name,\r\n        assetsCount: item.assets_count,\r\n        hashId: item.hash_id,\r\n        icons: item.icons,\r\n    }));\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                if (item.assetsCount > 1 || !item.icons.image) {\r\n                    const { data } = await got(`https://www.artstation.com/projects/${item.hashId}.json`, {\r\n                        headers: {\r\n                            ...headers,\r\n                            cookie: `PRIVATE-CSRF-TOKEN=${csrfToken}`,\r\n                        },\r\n                    });\r\n\r\n                    item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                        description: data.description,\r\n                        assets: data.assets,\r\n                    });\r\n\r\n                    for (const a of data.assets) {\r\n                        if (a.asset_type !== 'video' && a.asset_type !== 'image' && a.asset_type !== 'video_clip' && a.asset_type !== 'cover') {\r\n                            throw new Error(`Unhandle asset type: ${a.asset_type}`); // model3d, marmoset, pano\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `${userData.full_name} - ArtStation`,\r\n        description: userData.headline,\r\n        link: userData.permalink,\r\n        logo: userData.large_avatar_url,\r\n        icon: userData.large_avatar_url,\r\n        image: userData.default_cover_url,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"0cASA,MAAa,EAAe,CACxB,KAAM,WACN,WAAY,CAAC,WACb,QAAS,mBACT,WAAY,CAAE,OAAQ,sCACtB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,gCAGjB,KAAM,kBACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAS,EAAI,IAAI,MAAM,UAEvB,EAAU,CACZ,OAAQ,oCACR,kBAAmB,iBACnB,eAAgB,mBAChB,aAAc,EAAO,QAGnB,EAAY,MAAM,EAAM,OAAO,uBAAwB,SAAY,CACrE,IAAM,EAAgB,MAAM,EAAI,KAAK,+DAAgE,CACjG,YAEJ,OAAO,EAAc,QAAQ,cAAc,GAAG,MAAM,KAAK,GAAG,MAAM,KAAK,KAGrE,CAAE,KAAM,GAAa,MAAM,EAAI,oCAAoC,EAAO,aAAc,CAC1F,QAAS,CACL,GAAG,EACH,OAAQ,sBAAsB,OAGhC,CAAE,KAAM,GAAa,MAAM,EAAI,oCAAoC,EAAO,gBAAiB,CAC7F,QAAS,CACL,GAAG,EACH,OAAQ,sBAAsB,KAElC,aAAc,CACV,QAAS,EAAS,GAClB,KAAM,KAIR,EAAmB,GAAQ,EAAI,QAAQ,2BAA4B,WAEnE,EAAO,EAAS,KAAK,IAAK,IAAU,CACtC,MAAO,EAAK,MACZ,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,YAAa,EAAK,YAClB,MAAO,CACH,IAAK,EAAgB,EAAK,MAAM,kBAChC,MAAO,EAAK,SAGpB,QAAS,EAAU,EAAK,cACxB,QAAS,EAAU,EAAK,YACxB,KAAM,EAAK,UACX,OAAQ,EAAS,UACjB,YAAa,EAAK,aAClB,OAAQ,EAAK,QACb,MAAO,EAAK,SAGV,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACN,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,GAAI,EAAK,YAAc,GAAK,CAAC,EAAK,MAAM,MAAO,CAC3C,GAAM,CAAE,QAAS,MAAM,EAAI,uCAAuC,EAAK,OAAO,OAAQ,CAClF,QAAS,CACL,GAAG,EACH,OAAQ,sBAAsB,OAItC,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,YAAa,EAAK,YAClB,OAAQ,EAAK,SAGjB,IAAK,IAAM,KAAK,EAAK,OACjB,GAAI,EAAE,aAAe,SAAW,EAAE,aAAe,SAAW,EAAE,aAAe,cAAgB,EAAE,aAAe,QAC1G,MAAU,MAAM,wBAAwB,EAAE,cAKtD,OAAO,MAKnB,MAAO,CACH,MAAO,GAAG,EAAS,UAAU,eAC7B,YAAa,EAAS,SACtB,KAAM,EAAS,UACf,KAAM,EAAS,iBACf,KAAM,EAAS,iBACf,MAAO,EAAS,kBAChB,KAAM"}