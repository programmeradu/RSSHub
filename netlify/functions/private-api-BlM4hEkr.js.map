{"version":3,"file":"private-api-BlM4hEkr.js","names":["ConfigNotFoundError","ig","route: Route","InvalidParameterError","cache"],"sources":["../../lib/routes/instagram/private-api/utils.ts","../../lib/routes/instagram/private-api/index.ts"],"sourcesContent":["import { IgApiClient } from 'instagram-private-api';\r\nimport logger from '@/utils/logger';\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nconst ig = new IgApiClient();\r\n\r\nasync function login(ig, cache) {\r\n    if (!config.instagram || !config.instagram.username || !config.instagram.password) {\r\n        throw new ConfigNotFoundError('Instagram RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n    const LOGIN_CACHE_KEY = 'instagram:login';\r\n    const { username, password } = config.instagram;\r\n    const state = await cache.get(LOGIN_CACHE_KEY);\r\n    if (state) {\r\n        ig.state.deserialize(state);\r\n    } else {\r\n        ig.state.generateDevice(username);\r\n        // try {\r\n        //     await ig.simulate.preLoginFlow();\r\n        // } catch (error) {\r\n        //     logger.info('Instagram preLoginFlow fail: ' + error);\r\n        // }\r\n        await ig.account.login(username, password);\r\n        process.nextTick(() => ig.simulate.postLoginFlow());\r\n        logger.debug('Instagram login success.');\r\n    }\r\n    // Post request hook\r\n    ig.request.end$.subscribe(async () => {\r\n        const loginState = await ig.state.serialize();\r\n        delete loginState.constants;\r\n        // lifetime is defined in\r\n        // https://github.com/dilame/instagram-private-api/blob/6c160b2defcf8b0790b5a80033aab3e3084d0114/docs/classes/index/State.md#clientsessionidlifetime\r\n        await cache.set(LOGIN_CACHE_KEY, loginState, 1_200_000);\r\n    });\r\n}\r\n\r\nexport { ig, login };\r\n","import { Route, ViewType } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport { ig, login } from './utils';\r\nimport logger from '@/utils/logger';\r\nimport { config } from '@/config';\r\nimport { renderItems } from '../common-utils';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\n// loadContent pulls the desired user/tag/etc\r\nasync function loadContent(category, nameOrId, tryGet) {\r\n    let feedTitle, feedLink, feedDescription, feedLogo;\r\n    let itemsRaw;\r\n\r\n    switch (category) {\r\n        case 'user': {\r\n            let userInfo, username, id;\r\n            if (Number.isNaN(nameOrId)) {\r\n                username = nameOrId;\r\n                id = await tryGet(`instagram:getIdByUsername:${username}`, () => ig.user.getIdByUsername(username), 31_536_000); // 1 year since it will never change\r\n                userInfo = await tryGet(`instagram:userInfo:${id}`, () => ig.user.info(id));\r\n            } else {\r\n                id = nameOrId;\r\n                userInfo = await tryGet(`instagram:userInfo:${id}`, () => ig.user.info(id));\r\n                username = userInfo.username;\r\n            }\r\n\r\n            feedDescription = userInfo.biography;\r\n            // exists in web api ?? exist in private api ?? exist in both\r\n            feedLogo = userInfo.profile_pic_url_hd ?? userInfo.hd_profile_pic_url_info?.url ?? userInfo.profile_pic_url;\r\n            const fullName = userInfo.full_name;\r\n            feedTitle = `${fullName} (@${username}) - Instagram`;\r\n            feedLink = `https://www.instagram.com/${username}`;\r\n\r\n            itemsRaw = await tryGet(`instagram:feed:${id}`, () => ig.feed.user(id).items(), config.cache.routeExpire, false);\r\n            break;\r\n        }\r\n        case 'tags': {\r\n            const tag = nameOrId;\r\n\r\n            feedTitle = `#${tag} - Instagram`;\r\n            feedLink = `https://www.instagram.com/explore/tags/${tag}`;\r\n\r\n            itemsRaw = await tryGet(`instagram:tags:${tag}`, () => ig.feed.tags(tag, 'recent').items(), config.cache.routeExpire, false);\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return {\r\n        feedTitle,\r\n        feedLink,\r\n        feedDescription,\r\n        feedLogo,\r\n        itemsRaw,\r\n    };\r\n}\r\n\r\nexport const route: Route = {\r\n    path: '/:category/:key',\r\n    categories: ['social-media'],\r\n    view: ViewType.SocialMedia,\r\n    example: '/instagram/user/stefaniejoosten',\r\n    parameters: {\r\n        category: {\r\n            description: 'Feed category',\r\n            default: 'user',\r\n            options: [\r\n                {\r\n                    label: 'User',\r\n                    value: 'user',\r\n                },\r\n                {\r\n                    label: 'Tags',\r\n                    value: 'tags',\r\n                },\r\n            ],\r\n        },\r\n        key: 'Username / Hashtag name',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'IG_PROXY',\r\n                optional: true,\r\n                description: '',\r\n            },\r\n            {\r\n                name: 'IG_USERNAME',\r\n                description: 'Instagram username',\r\n            },\r\n            {\r\n                name: 'IG_PASSWORD',\r\n                description: 'Instagram password, due to [Instagram Private API](https://github.com/dilame/instagram-private-api) restrictions, you have to setup your credentials on the server. 2FA is not supported.',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'User Profile / Hashtag - Private API',\r\n    maintainers: ['oppilate', 'DIYgod'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    // https://github.com/dilame/instagram-private-api#feeds\r\n    // const availableCategories = [\"accountFollowers\", \"accountFollowing\", \"news\",\r\n    //     \"discover\", \"pendingFriendships\", \"blockedUsers\", \"directInbox\", \"directPending\",\r\n    //     \"directThread\", \"user\", \"tag\", \"location\", \"mediaComments\", \"reelsMedia\", \"reelsTray\",\r\n    //     \"timeline\", \"musicTrending\", \"musicSearch\", \"musicGenre\", \"musicMood\", \"usertags\", \"saved\"];\r\n    const availableCategories = ['user', 'tags'];\r\n    // Unique key for a feed category\r\n    // e.g. username for user feed\r\n    const { category, key } = ctx.req.param();\r\n    if (!availableCategories.includes(category)) {\r\n        throw new InvalidParameterError('Such feed is not supported.');\r\n    }\r\n\r\n    if (config.instagram && config.instagram.proxy) {\r\n        ig.state.proxyUrl = config.instagram.proxy;\r\n    }\r\n\r\n    await login(ig, cache);\r\n\r\n    let data;\r\n    try {\r\n        data = await loadContent(category, key, cache.tryGet);\r\n    } catch (error) {\r\n        logger.error(`Instagram error: ${error}`);\r\n        throw error;\r\n    }\r\n\r\n    return {\r\n        title: data.feedTitle,\r\n        link: data.feedLink,\r\n        description: data.feedDescription,\r\n        item: renderItems(data.itemsRaw),\r\n        icon: 'https://www.instagram.com/static/images/ico/xxhdpi_launcher.png/99cf3909d459.png',\r\n        logo: data.feedLogo,\r\n        image: data.feedLogo,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"wiBAKA,MAAM,EAAK,IAAI,EAEf,eAAe,EAAM,EAAI,EAAO,CAC5B,GAAI,CAAC,EAAO,WAAa,CAAC,EAAO,UAAU,UAAY,CAAC,EAAO,UAAU,SACrE,MAAM,IAAIA,EAAoB,kJAElC,IAAM,EAAkB,kBAClB,CAAE,WAAU,YAAa,EAAO,UAChC,EAAQ,MAAM,EAAM,IAAI,GAC1B,EACA,EAAG,MAAM,YAAY,IAErB,EAAG,MAAM,eAAe,GAMxB,MAAMC,EAAG,QAAQ,MAAM,EAAU,GACjC,QAAQ,aAAeA,EAAG,SAAS,iBACnC,EAAO,MAAM,6BAGjB,EAAG,QAAQ,KAAK,UAAU,SAAY,CAClC,IAAM,EAAa,MAAMA,EAAG,MAAM,YAClC,OAAO,EAAW,UAGlB,MAAM,EAAM,IAAI,EAAiB,EAAY,QCxBrD,eAAe,EAAY,EAAU,EAAU,EAAQ,CACnD,IAAI,EAAW,EAAU,EAAiB,EACtC,EAEJ,OAAQ,EAAR,CACI,IAAK,OAAQ,CACT,IAAI,EAAU,EAAU,EACpB,OAAO,MAAM,IACb,EAAW,EACX,EAAK,MAAM,EAAO,6BAA6B,QAAkB,EAAG,KAAK,gBAAgB,GAAW,SACpG,EAAW,MAAM,EAAO,sBAAsB,QAAY,EAAG,KAAK,KAAK,MAEvE,EAAK,EACL,EAAW,MAAM,EAAO,sBAAsB,QAAY,EAAG,KAAK,KAAK,IACvE,EAAW,EAAS,UAGxB,EAAkB,EAAS,UAE3B,EAAW,EAAS,oBAAsB,EAAS,yBAAyB,KAAO,EAAS,gBAC5F,IAAM,EAAW,EAAS,UAC1B,EAAY,GAAG,EAAS,KAAK,EAAS,eACtC,EAAW,6BAA6B,IAExC,EAAW,MAAM,EAAO,kBAAkB,QAAY,EAAG,KAAK,KAAK,GAAI,QAAS,EAAO,MAAM,YAAa,IAC1G,MAEJ,IAAK,OAAQ,CACT,IAAM,EAAM,EAEZ,EAAY,IAAI,EAAI,cACpB,EAAW,0CAA0C,IAErD,EAAW,MAAM,EAAO,kBAAkB,QAAa,EAAG,KAAK,KAAK,EAAK,UAAU,QAAS,EAAO,MAAM,YAAa,IACtH,MAEJ,QACI,MAGR,MAAO,CACH,YACA,WACA,kBACA,WACA,YAIR,MAAaC,EAAe,CACxB,KAAM,kBACN,WAAY,CAAC,gBACb,KAAM,EAAS,YACf,QAAS,kCACT,WAAY,CACR,SAAU,CACN,YAAa,gBACb,QAAS,OACT,QAAS,CACL,CACI,MAAO,OACP,MAAO,QAEX,CACI,MAAO,OACP,MAAO,UAInB,IAAK,2BAET,SAAU,CACN,cAAe,CACX,CACI,KAAM,WACN,SAAU,GACV,YAAa,IAEjB,CACI,KAAM,cACN,YAAa,sBAEjB,CACI,KAAM,cACN,YAAa,8LAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,uCACN,YAAa,CAAC,WAAY,UAC1B,WAGJ,eAAe,EAAQ,EAAK,CAMxB,IAAM,EAAsB,CAAC,OAAQ,QAG/B,CAAE,WAAU,OAAQ,EAAI,IAAI,QAClC,GAAI,CAAC,EAAoB,SAAS,GAC9B,MAAM,IAAIC,EAAsB,+BAGhC,EAAO,WAAa,EAAO,UAAU,QACrC,EAAG,MAAM,SAAW,EAAO,UAAU,OAGzC,MAAM,EAAM,EAAIC,GAEhB,IAAI,EACJ,GAAI,CACA,EAAO,MAAM,EAAY,EAAU,EAAKA,EAAM,cACzC,EAAO,CAEZ,MADA,EAAO,MAAM,oBAAoB,KAC3B,EAGV,MAAO,CACH,MAAO,EAAK,UACZ,KAAM,EAAK,SACX,YAAa,EAAK,gBAClB,KAAM,EAAY,EAAK,UACvB,KAAM,mFACN,KAAM,EAAK,SACX,MAAO,EAAK,SACZ,WAAY"}