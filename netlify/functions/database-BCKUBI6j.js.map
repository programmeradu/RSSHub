{"version":3,"file":"database-BCKUBI6j.js","names":["MarkdownIt","route: Route","ConfigNotFoundError","cache","got","articleAuthor","articlePubTime","InvalidParameterError"],"sources":["../../lib/routes/notion/database.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport { Client, isNotionClientError, APIErrorCode } from '@notionhq/client';\r\nimport logger from '@/utils/logger';\r\nimport { config } from '@/config';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport got from '@/utils/got';\r\nimport { NotionToMarkdown } from 'notion-to-md';\r\nimport { load } from 'cheerio';\r\nimport MarkdownIt from 'markdown-it';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n    linkify: true,\r\n});\r\n\r\nexport const route: Route = {\r\n    path: '/database/:databaseId',\r\n    categories: ['other'],\r\n    example: '/notion/database/a7cc133b68454f138011f1530a13531e',\r\n    parameters: { databaseId: 'Database ID' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'NOTION_TOKEN',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['notion.so/:id'],\r\n            target: '/database/:id',\r\n        },\r\n    ],\r\n    name: 'Database',\r\n    maintainers: ['curly210102'],\r\n    handler,\r\n    description: `There is an optional query parameter called \\`properties=\\` that can be used to customize field mapping. There are three built-in fields: author, pubTime and link, which can be used to add additional information.\r\n\r\n  For example, if you have set up three properties in your database - \"Publish Time\", \"Author\", and \"Original Article Link\" - then execute the following JavaScript code to get the result for the properties parameter.\r\n\r\n  \\`\\`\\`js\r\n  encodeURIComponent(JSON.stringify({\"pubTime\": \"Publish Time\", \"author\": \"Author\", \"link\": \"Original Article Link\"}))\r\n  \\`\\`\\`\r\n\r\n  There is an optional query parameter called \\`query=\\` that can be used to customize the search rules for your database, such as custom sorting and filtering rules.\r\n\r\n  please refer to the [Notion API documentation](https://developers.notion.com/reference/post-database-query) and execute \\`encodeURIComponent(JSON.stringify(custom rules))\\` to provide the query parameter.`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    if (!config.notion.key) {\r\n        throw new ConfigNotFoundError('Notion RSS is disabled due to the lack of NOTION_TOKEN(<a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>)');\r\n    }\r\n\r\n    const databaseId = ctx.req.param('databaseId');\r\n    const notion_api_key = config.notion.key;\r\n\r\n    const notion = new Client({\r\n        auth: notion_api_key,\r\n    });\r\n\r\n    try {\r\n        // Query database basic info\r\n        const database = await notion.databases.retrieve({ database_id: databaseId });\r\n        const title = database.title[0]?.plain_text;\r\n        const description = database.description[0]?.plain_text;\r\n        const link = database.url;\r\n        const image = database.cover?.external.url ?? database.icon?.emoji;\r\n\r\n        // List pages under the database\r\n        const databaseQuery = parseCustomQuery(ctx.req.query('query'));\r\n        const { results } = await notion.databases.query({\r\n            database_id: databaseId,\r\n            ...databaseQuery,\r\n        });\r\n        const customProperties = parseCustomQuery(ctx.req.query('properties')) ?? {};\r\n        const properties = {\r\n            author: customProperties.author ?? 'Author',\r\n            link: customProperties.link ?? 'URL',\r\n            pubTime: customProperties.pubTime ?? 'Created time',\r\n        };\r\n\r\n        // Query page content\r\n        const n2m = new NotionToMarkdown({ notionClient: notion });\r\n        const pageList = results.filter((item) => Object.values(item.properties).find((property) => property.id === 'title')?.title[0]?.plain_text);\r\n        const items = await Promise.all(\r\n            pageList.map(async (page) => {\r\n                const titleProperty = Object.values(page.properties).find((property) => property.id === 'title');\r\n                const pageTitle = titleProperty.title[0].plain_text;\r\n                const pageLink = page.url;\r\n                const pageLastEditedTime = page.last_edited_time;\r\n                // If link property is empty, try to get url with linked title\r\n                const articleLink = (properties.link && notionText(page.properties[properties.link])) || titleProperty.title[0].href || '';\r\n                const pageAuthor = notionText(page.properties[properties.author]);\r\n                const pagePubTime = notionText(page.properties[properties.pubTime]);\r\n\r\n                // Convert Notion page blocks to markdown string\r\n                const articleContent = await cache.tryGet(`${pageLink}-${pageLastEditedTime}`, async () => {\r\n                    const mdblocks = await n2m.pageToMarkdown(page.id);\r\n                    const mdString = n2m.toMarkdownString(mdblocks);\r\n                    return mdString.parent;\r\n                });\r\n\r\n                let author = pageAuthor;\r\n                let pubTime = pagePubTime || pageLastEditedTime;\r\n                // Try to get author info\r\n                if (articleLink && !pageAuthor) {\r\n                    const { articleAuthor, articlePubTime } = await cache.tryGet(`${pageLink}-${articleLink}`, async () => {\r\n                        try {\r\n                            const response = await got({\r\n                                method: 'get',\r\n                                url: articleLink,\r\n                            });\r\n                            const $ = load(response.body);\r\n                            const articleAuthor = $('meta[name=\"author\"]').attr('content');\r\n                            const articlePubTime = $('meta[name=\"publish_date\"], meta[name=\"date\"]').attr('content');\r\n                            return {\r\n                                articleAuthor,\r\n                                articlePubTime,\r\n                            };\r\n                        } catch {\r\n                            return {};\r\n                        }\r\n                    });\r\n\r\n                    if (articleAuthor) {\r\n                        author = articleAuthor;\r\n                    }\r\n\r\n                    if (articlePubTime) {\r\n                        pubTime = articlePubTime;\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    title: pageTitle,\r\n                    author,\r\n                    pubDate: parseDate(pubTime),\r\n                    description: md.render(articleContent ?? ''),\r\n                    link: articleLink || pageLink,\r\n                };\r\n            })\r\n        );\r\n\r\n        return {\r\n            title: `Notion - ${title}`,\r\n            link,\r\n            description,\r\n            image,\r\n            item: items,\r\n            allowEmpty: true,\r\n        };\r\n    } catch (error) {\r\n        logger.error(error);\r\n\r\n        if (isNotionClientError(error)) {\r\n            if (error.statusCode === APIErrorCode.ObjectNotFound) {\r\n                throw new InvalidParameterError('The database is not exist');\r\n            } else if (error.statusCode === APIErrorCode.Unauthorized) {\r\n                throw new ConfigNotFoundError('Please check the config of NOTION_TOKEN');\r\n            } else {\r\n                ctx.throw(error.statusCode, 'Notion API Error');\r\n            }\r\n        } else {\r\n            ctx.throw(error);\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseCustomQuery(queryString) {\r\n    try {\r\n        if (queryString) {\r\n            return JSON.parse(decodeURIComponent(queryString));\r\n        }\r\n    } catch {\r\n        logger.error('Query Parse Error');\r\n    }\r\n}\r\n\r\nfunction notionText(property) {\r\n    if (!property) {\r\n        return '';\r\n    }\r\n\r\n    if (property.type === 'rich_text') {\r\n        return property.rich_text?.map((text) => text.plain_text).join('') ?? '';\r\n    }\r\n\r\n    if (property.type === 'select') {\r\n        return property.select.name;\r\n    }\r\n\r\n    if (property.type === 'url') {\r\n        return property.url;\r\n    }\r\n\r\n    return '';\r\n}\r\n"],"mappings":"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"}