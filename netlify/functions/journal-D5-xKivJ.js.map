{"version":3,"file":"journal-D5-xKivJ.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/sciencedirect/cf-email.ts","../../lib/routes/sciencedirect/journal.ts"],"sourcesContent":["const decodeCFEmail = (encoded) => {\r\n    const parseHex = (string, position) => Number.parseInt(string.slice(position, position + 2), 16);\r\n    let decoded = '';\r\n    const key = parseHex(encoded, 0);\r\n    for (let position = 2; position < encoded.length; position += 2) {\r\n        const byte = parseHex(encoded, position) ^ key;\r\n        decoded += String.fromCharCode(byte);\r\n    }\r\n    return decoded;\r\n};\r\n\r\nconst encodeCFEmail = (email) => {\r\n    const key = Math.floor(Math.random() * 256);\r\n    let encoded = ('0' + key.toString(16)).slice(-2);\r\n    for (let position = 0; position < email.length; position++) {\r\n        const byte = email.charCodeAt(position) ^ key;\r\n        encoded += ('0' + byte.toString(16)).slice(-2);\r\n    }\r\n    return encoded;\r\n};\r\n\r\n/**\r\n * The alogrithm is well-explained in https://andrewlock.net/simple-obfuscation-of-email-addresses-using-javascript/\r\n */\r\nexport {\r\n    /**\r\n     * Returns decoded email address using CloudFlare's email address obfuscation.\r\n     * @param {String} encoded - encoded email, (`cfemail` attribute in `__cf_email__` tag)\r\n     * @returns decoded email address\r\n     */\r\n    decodeCFEmail,\r\n\r\n    /**\r\n     * Returns CloudFlare protected email address.\r\n     * @param {String} email - email in plaintext\r\n     * @returns obfuscated email\r\n     */\r\n    encodeCFEmail,\r\n};\r\n","import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { decodeCFEmail } from './cf-email';\r\n\r\nexport const route: Route = {\r\n    path: '/journal/:id',\r\n    categories: ['journal'],\r\n    example: '/sciencedirect/journal/research-policy',\r\n    parameters: { id: 'Journal id, can be found in URL' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['sciencedirect.com/journal/:id', 'sciencedirect.com/'],\r\n        },\r\n    ],\r\n    name: 'Journal',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n\r\n    const rootUrl = 'https://www.sciencedirect.com';\r\n    const currentUrl = `${rootUrl}/journal/${id}/articles-in-press`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: currentUrl,\r\n    });\r\n\r\n    const issn = response.data.match(/ISSN(\\w{8})'/)[1];\r\n\r\n    const apiUrl = `${rootUrl}/journal/${issn}/articles-in-press/articles?path=/journal/${id}/articles-in-press&title=${id}`;\r\n\r\n    const apiResponse = await got({\r\n        method: 'get',\r\n        url: apiUrl,\r\n        headers: {\r\n            cookie: response.headers['set-cookie'].map((cookie) => cookie.split(';Version=1;')[0]).join('; '),\r\n        },\r\n    });\r\n\r\n    const list = apiResponse.data.data.results.map((item) => ({\r\n        doi: item.doi,\r\n        title: item.title,\r\n        link: `${rootUrl}${item.href}`,\r\n        pubDate: parseDate(item.coverDateStart),\r\n        enclosure_url: `${rootUrl}${item.pdfDownload.url}`,\r\n        author: item.authors.map((author) => `${author.givenName} ${author.surname}`).join(', '),\r\n    }));\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const detailResponse = await got({\r\n                    method: 'get',\r\n                    url: item.link,\r\n                });\r\n\r\n                const content = load(detailResponse.data);\r\n\r\n                content('a.__cf_email__').each((_, e) => {\r\n                    e = content(e);\r\n                    e.after(decodeCFEmail(e.attr('data-cfemail')));\r\n                    e.remove();\r\n                });\r\n\r\n                const abstracts = content('.Abstracts').html() ?? '';\r\n                const keywords = content('.Keywords').html() ?? '';\r\n\r\n                item.description = abstracts + keywords;\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `${response.data.match(/\\\\\"displayName\\\\\":\\\\\"(.*?)\\\\\",\\\\\"/)[1]} - ScienceDirect`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"wWAAA,MAAM,EAAiB,GAAY,CAC/B,IAAM,GAAY,EAAQ,IAAa,OAAO,SAAS,EAAO,MAAM,EAAU,EAAW,GAAI,IACzF,EAAU,GACR,EAAM,EAAS,EAAS,GAC9B,IAAK,IAAI,EAAW,EAAG,EAAW,EAAQ,OAAQ,GAAY,EAAG,CAC7D,IAAM,EAAO,EAAS,EAAS,GAAY,EAC3C,GAAW,OAAO,aAAa,GAEnC,OAAO,GCDEA,EAAe,CACxB,KAAM,eACN,WAAY,CAAC,WACb,QAAS,yCACT,WAAY,CAAE,GAAI,mCAClB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,gCAAiC,wBAGlD,KAAM,UACN,YAAa,CAAC,WACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MAEnB,EAAU,gCACV,EAAa,GAAG,EAAQ,WAAW,EAAG,oBAEtC,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAO,EAAS,KAAK,MAAM,gBAAgB,GAE3C,EAAS,GAAG,EAAQ,WAAW,EAAK,4CAA4C,EAAG,2BAA2B,IAE9G,EAAc,MAAMA,EAAI,CAC1B,OAAQ,MACR,IAAK,EACL,QAAS,CACL,OAAQ,EAAS,QAAQ,cAAc,IAAK,GAAW,EAAO,MAAM,eAAe,IAAI,KAAK,SAI9F,EAAO,EAAY,KAAK,KAAK,QAAQ,IAAK,IAAU,CACtD,IAAK,EAAK,IACV,MAAO,EAAK,MACZ,KAAM,GAAG,IAAU,EAAK,OACxB,QAAS,EAAU,EAAK,gBACxB,cAAe,GAAG,IAAU,EAAK,YAAY,MAC7C,OAAQ,EAAK,QAAQ,IAAK,GAAW,GAAG,EAAO,UAAU,GAAG,EAAO,WAAW,KAAK,SAGjF,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAM,EAAiB,MAAMD,EAAI,CAC7B,OAAQ,MACR,IAAK,EAAK,OAGR,EAAU,EAAK,EAAe,MAEpC,EAAQ,kBAAkB,MAAM,EAAG,IAAM,CACrC,EAAI,EAAQ,GACZ,EAAE,MAAM,EAAc,EAAE,KAAK,kBAC7B,EAAE,WAGN,IAAM,EAAY,EAAQ,cAAc,QAAU,GAC5C,EAAW,EAAQ,aAAa,QAAU,GAIhD,MAFA,GAAK,YAAc,EAAY,EAExB,MAKnB,MAAO,CACH,MAAO,GAAG,EAAS,KAAK,MAAM,qCAAqC,GAAG,kBACtE,KAAM,EACN,KAAM"}