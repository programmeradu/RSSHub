{"version":3,"file":"report-C-ItGakj.js","names":[],"sources":["../../lib/routes/hellogithub/report.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst types = {\r\n    tiobe: '编程语言',\r\n    netcraft: '服务器',\r\n    'db-engines': '数据库',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/ranking/:type?',\r\n    example: '/hellogithub/ranking',\r\n    name: '榜单报告',\r\n    maintainers: ['moke8', 'nczitzk'],\r\n    handler,\r\n    description: `| 编程语言 | 服务器   | 数据库     |\r\n| -------- | -------- | ---------- |\r\n| tiobe    | netcraft | db-engines |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    let type = ctx.req.param('type') ?? 'tiobe';\r\n\r\n    type = type === 'webserver' ? 'netcraft' : type === 'db' ? 'db-engines' : type;\r\n\r\n    const rootUrl = 'https://hellogithub.com';\r\n    const currentUrl = `${rootUrl}/report/${type}`;\r\n\r\n    const buildResponse = await got({\r\n        method: 'get',\r\n        url: rootUrl,\r\n    });\r\n\r\n    const buildId = buildResponse.data.match(/\"buildId\":\"(.*?)\",/)[1];\r\n\r\n    const apiUrl = `${rootUrl}/_next/data/${buildId}/zh/report/${type}.json`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: apiUrl,\r\n    });\r\n\r\n    const data = response.data.pageProps;\r\n\r\n    const items = [\r\n        {\r\n            guid: `${type}:${data.year}${data.month}`,\r\n            title: `${data.year}年${data.month}月${types[type]}排行榜`,\r\n            link: currentUrl,\r\n            pubDate: parseDate(`${data.year}-${data.month}`, 'YYYY-M'),\r\n            description: art(path.join(__dirname, 'templates/report.art'), {\r\n                tiobe_list: type === 'tiobe' ? data.list : undefined,\r\n                active_list: data.active_list,\r\n                all_list: data.all_list,\r\n                db_list: type === 'db-engines' ? data.list : undefined,\r\n            }),\r\n        },\r\n    ];\r\n\r\n    return {\r\n        title: `HelloGitHub - ${types[type]}排行榜`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"qYAOA,MAAM,EAAQ,CACV,MAAO,OACP,SAAU,MACV,aAAc,OAGL,EAAe,CACxB,KAAM,kBACN,QAAS,uBACT,KAAM,OACN,YAAa,CAAC,QAAS,WACvB,UACA,YAAa;;uCAKjB,eAAe,EAAQ,EAAK,CACxB,IAAI,EAAO,EAAI,IAAI,MAAM,SAAW,QAEpC,EAAO,IAAS,YAAc,WAAa,IAAS,KAAO,aAAe,EAE1E,IAAM,EAAU,0BACV,EAAa,GAAG,EAAQ,UAAU,IAElC,EAAgB,MAAM,EAAI,CAC5B,OAAQ,MACR,IAAK,IAGH,EAAU,EAAc,KAAK,MAAM,sBAAsB,GAEzD,EAAS,GAAG,EAAQ,cAAc,EAAQ,aAAa,EAAK,OAE5D,EAAW,MAAM,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAO,EAAS,KAAK,UAErB,EAAQ,CACV,CACI,KAAM,GAAG,EAAK,GAAG,EAAK,OAAO,EAAK,QAClC,MAAO,GAAG,EAAK,KAAK,GAAG,EAAK,MAAM,GAAG,EAAM,GAAM,KACjD,KAAM,EACN,QAAS,EAAU,GAAG,EAAK,KAAK,GAAG,EAAK,QAAS,UACjD,YAAa,EAAI,EAAA,KAAA,EAAA,iCAA8C,CAC3D,WAAY,IAAS,QAAU,EAAK,KAAO,IAAA,GAC3C,YAAa,EAAK,YAClB,SAAU,EAAK,SACf,QAAS,IAAS,aAAe,EAAK,KAAO,IAAA,OAKzD,MAAO,CACH,MAAO,iBAAiB,EAAM,GAAM,KACpC,KAAM,EACN,KAAM"}