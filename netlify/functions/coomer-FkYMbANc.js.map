{"version":3,"file":"coomer-FkYMbANc.js","names":[],"sources":["../../lib/routes/coomer/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst headers = { Accept: 'text/css' };\r\n\r\nexport const route: Route = {\r\n    path: '/:source?/:id?',\r\n    categories: ['multimedia'],\r\n    example: '/coomer',\r\n    parameters: { source: 'Source, see below, Posts by default', id: 'User id, can be found in URL' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n        nsfw: true,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['coomer.st/'],\r\n            target: '',\r\n        },\r\n        {\r\n            source: ['coomer.st/:source/user/:id'],\r\n            target: '/:source/:id',\r\n        },\r\n    ],\r\n    name: 'Posts',\r\n    maintainers: ['nczitzk', 'AiraNadih'],\r\n    handler,\r\n    description: `Sources\r\n\r\n| Posts | OnlyFans | Fansly | CandFans |\r\n| ----- | -------- | ------- | -------- |\r\n| posts | onlyfans | fansly   | candfans |\r\n\r\n::: tip\r\n  When \\`posts\\` is selected as the value of the parameter **source**, the parameter **id** does not take effect.\r\n  There is an optinal parameter **limit** which controls the number of posts to fetch, default value is 25.\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 25;\r\n    const source = ctx.req.param('source') ?? 'posts';\r\n    const id = ctx.req.param('id');\r\n    const isPosts = source === 'posts';\r\n\r\n    const rootUrl = 'https://coomer.st';\r\n    const apiUrl = `${rootUrl}/api/v1`;\r\n    const currentUrl = isPosts ? `${apiUrl}/posts` : `${apiUrl}/${source}/user/${id}/posts`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: currentUrl,\r\n        headers,\r\n    });\r\n    const responseData = isPosts ? response.data.posts : response.data;\r\n\r\n    const author = isPosts ? '' : await getAuthor(`${apiUrl}/${source}/user/${id}`);\r\n    const title = isPosts ? 'Coomer Posts' : `Posts of ${author} from ${source} | Coomer`;\r\n    const image = isPosts ? `${rootUrl}/favicon.ico` : `https://img.coomer.st/icons/${source}/${id}`;\r\n    const items = responseData\r\n        .filter((i) => i.content || i.attachments)\r\n        .slice(0, limit)\r\n        .map((i) => {\r\n            i.files = [];\r\n            if ('path' in i.file) {\r\n                i.files.push({\r\n                    name: i.file.name,\r\n                    path: i.file.path,\r\n                    extension: i.file.path.replace(/.*\\./, '').toLowerCase(),\r\n                });\r\n            }\r\n            for (const attachment of i.attachments) {\r\n                i.files.push({\r\n                    name: attachment.name,\r\n                    path: attachment.path,\r\n                    extension: attachment.path.replace(/.*\\./, '').toLowerCase(),\r\n                });\r\n            }\r\n            const filesHTML = art(path.join(__dirname, 'templates/source.art'), { i });\r\n            let $ = load(filesHTML);\r\n            const coomerFiles = $('img, a, audio, video').map(function () {\r\n                return $(this).prop('outerHTML')!;\r\n            });\r\n            let desc = '';\r\n            if (i.content) {\r\n                desc += `<div>${i.content}</div>`;\r\n            }\r\n            $ = load(desc);\r\n            let count = 0;\r\n            const regex = /downloads.fanbox.cc/;\r\n            $('a').each(function () {\r\n                const link = $(this).attr('href');\r\n                if (regex.test(link!)) {\r\n                    count++;\r\n                    $(this).replaceWith(coomerFiles[count]);\r\n                }\r\n            });\r\n            desc = (coomerFiles.length > 0 ? coomerFiles[0] : '') + $.html();\r\n            for (const coomerFile of coomerFiles.slice(count + 1)) {\r\n                desc += coomerFile;\r\n            }\r\n\r\n            let enclosureInfo = {};\r\n            load(desc)('audio source, video source').each(function () {\r\n                const src = $(this).attr('src') ?? '';\r\n                const mimeType =\r\n                    {\r\n                        m4a: 'audio/mp4',\r\n                        mp3: 'audio/mpeg',\r\n                        mp4: 'video/mp4',\r\n                    }[src.replace(/.*\\./, '').toLowerCase()] || null;\r\n\r\n                if (mimeType === null) {\r\n                    return;\r\n                }\r\n\r\n                enclosureInfo = {\r\n                    enclosure_url: new URL(src, rootUrl).toString(),\r\n                    enclosure_type: mimeType,\r\n                };\r\n            });\r\n\r\n            return {\r\n                title: i.title || parseDate(i.published),\r\n                description: desc,\r\n                author,\r\n                pubDate: parseDate(i.published),\r\n                guid: `coomer:${i.service}:${i.user}:post:${i.id}`,\r\n                link: `${rootUrl}/${i.service}/user/${i.user}/post/${i.id}`,\r\n                ...enclosureInfo,\r\n            };\r\n        });\r\n\r\n    return {\r\n        title,\r\n        image,\r\n        link: isPosts ? `${rootUrl}/posts` : `${rootUrl}/${source}/user/${id}`,\r\n        item: items,\r\n    };\r\n}\r\n\r\nasync function getAuthor(currentUrl) {\r\n    const profileResponse = await got({\r\n        method: 'get',\r\n        url: `${currentUrl}/profile`,\r\n        headers,\r\n    });\r\n    return profileResponse.data.name;\r\n}\r\n"],"mappings":"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"}