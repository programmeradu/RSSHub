{"version":3,"file":"literature-1BGw-Hng.js","names":["route: Route","ofetch"],"sources":["../../lib/routes/inspirehep/literature.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { LiteratureResponse } from './types';\r\n\r\nimport { baseUrl, parseLiterature } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: '/literature/:q',\r\n    example: '/inspirehep/literature/Physics',\r\n    parameters: { q: 'Search keyword' },\r\n    name: 'Literature Search',\r\n    maintainers: ['TonyRL'],\r\n    radar: [\r\n        {\r\n            source: ['inspirehep.net/literature'],\r\n            target: (_params, url) => `/inspirehep/literature/${new URL(url).searchParams.get('q')}`,\r\n        },\r\n    ],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const q = ctx.req.param('q');\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 25;\r\n\r\n    const response = await ofetch<LiteratureResponse>(`${baseUrl}/api/literature`, {\r\n        query: {\r\n            sort: 'mostrecent',\r\n            size: limit,\r\n            page: 1,\r\n            q,\r\n        },\r\n    });\r\n\r\n    const items = parseLiterature(response.hits.hits);\r\n\r\n    return {\r\n        title: 'Literature Search - INSPIRE',\r\n        link: `${baseUrl}/literature?sort=mostrecent&size=${limit}&page=1&q=${q}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"+QAMA,MAAaA,EAAe,CACxB,KAAM,iBACN,QAAS,iCACT,WAAY,CAAE,EAAG,kBACjB,KAAM,oBACN,YAAa,CAAC,UACd,MAAO,CACH,CACI,OAAQ,CAAC,6BACT,QAAS,EAAS,IAAQ,0BAA0B,IAAI,IAAI,GAAK,aAAa,IAAI,SAG1F,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAI,EAAI,IAAI,MAAM,KAClB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,GAE3E,EAAW,MAAMC,EAA2B,GAAG,EAAQ,iBAAkB,CAC3E,MAAO,CACH,KAAM,aACN,KAAM,EACN,KAAM,EACN,OAIF,EAAQ,EAAgB,EAAS,KAAK,MAE5C,MAAO,CACH,MAAO,8BACP,KAAM,GAAG,EAAQ,mCAAmC,EAAM,YAAY,IACtE,KAAM"}