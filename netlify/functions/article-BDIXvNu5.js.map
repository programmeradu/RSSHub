{"version":3,"file":"article-BDIXvNu5.js","names":["route: Route","InvalidParameterError","got","cache","response"],"sources":["../../lib/routes/acfun/article.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\nconst baseUrl = 'https://www.acfun.cn';\r\nconst categoryMap = {\r\n    184: {\r\n        title: '二次元画师',\r\n        realmId: 'realmId=18' + '&realmId=14' + '&realmId=51',\r\n    },\r\n    110: {\r\n        title: '综合',\r\n        realmId: 'realmId=5' + '&realmId=22' + '&realmId=28' + '&realmId=3' + '&realmId=4',\r\n    },\r\n    73: {\r\n        title: '生活情感',\r\n        realmId: 'realmId=50' + '&realmId=25' + '&realmId=34' + '&realmId=7' + '&realmId=6' + '&realmId=17' + '&realmId=1' + '&realmId=2' + '&realmId=49',\r\n    },\r\n    164: {\r\n        title: '游戏',\r\n        realmId: 'realmId=8' + '&realmId=53' + '&realmId=52' + '&realmId=11' + '&realmId=43' + '&realmId=44' + '&realmId=45' + '&realmId=46' + '&realmId=47',\r\n    },\r\n    74: {\r\n        title: '动漫文化',\r\n        realmId: 'realmId=13' + '&realmId=31' + '&realmId=48',\r\n    },\r\n    75: {\r\n        title: '漫画文学',\r\n        realmId: 'realmId=15' + '&realmId=23' + '&realmId=16',\r\n    },\r\n};\r\nconst sortTypeEnum = new Set(['createTime', 'lastCommentTime', 'hotScore']);\r\nconst timeRangeEnum = new Set(['all', 'oneDay', 'threeDay', 'oneWeek', 'oneMonth']);\r\n\r\nexport const route: Route = {\r\n    path: '/article/:categoryId/:sortType?/:timeRange?',\r\n    categories: ['anime'],\r\n    view: ViewType.Articles,\r\n    example: '/acfun/article/110',\r\n    parameters: {\r\n        categoryId: {\r\n            description: '分区 ID',\r\n            options: Object.keys(categoryMap).map((id) => ({ value: id, label: categoryMap[id].title })),\r\n        },\r\n        sortType: {\r\n            description: '排序',\r\n            options: [\r\n                { value: 'createTime', label: '最新发表' },\r\n                { value: 'lastCommentTime', label: '最新动态' },\r\n                { value: 'hotScore', label: '最热文章' },\r\n            ],\r\n            default: 'createTime',\r\n        },\r\n        timeRange: {\r\n            description: '时间范围，仅在排序是 `hotScore` 有效',\r\n            options: [\r\n                { value: 'all', label: '时间不限' },\r\n                { value: 'oneDay', label: '24 小时' },\r\n                { value: 'threeDay', label: '三天' },\r\n                { value: 'oneWeek', label: '一周' },\r\n                { value: 'oneMonth', label: '一个月' },\r\n            ],\r\n            default: 'all',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '文章',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n    description: `| 二次元画师 | 综合 | 生活情感 | 游戏 | 动漫文化 | 漫画文学 |\r\n| ---------- | ---- | -------- | ---- | -------- | -------- |\r\n| 184        | 110  | 73       | 164  | 74       | 75       |\r\n\r\n| 最新发表   | 最新动态        | 最热文章 |\r\n| ---------- | --------------- | -------- |\r\n| createTime | lastCommentTime | hotScore |\r\n\r\n| 时间不限 | 24 小时 | 三天     | 一周    | 一个月   |\r\n| -------- | ------- | -------- | ------- | -------- |\r\n| all      | oneDay  | threeDay | oneWeek | oneMonth |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { categoryId, sortType = 'createTime', timeRange = 'all' } = ctx.req.param();\r\n    if (!categoryMap[categoryId]) {\r\n        throw new InvalidParameterError(`Invalid category Id: ${categoryId}`);\r\n    }\r\n    if (!sortTypeEnum.has(sortType)) {\r\n        throw new InvalidParameterError(`Invalid sort type: ${sortType}`);\r\n    }\r\n    if (!timeRangeEnum.has(timeRange)) {\r\n        throw new InvalidParameterError(`Invalid time range: ${timeRange}`);\r\n    }\r\n\r\n    const url = `${baseUrl}/v/list${categoryId}/index.htm`;\r\n    const response = await got.post(\r\n        `${baseUrl}/rest/pc-direct/article/feed` +\r\n            '?cursor=first_page' +\r\n            '&onlyOriginal=false' +\r\n            '&limit=10' +\r\n            `&sortType=${sortType}` +\r\n            `&timeRange=${sortType === 'hotScore' ? timeRange : 'all'}` +\r\n            `&${categoryMap[categoryId].realmId}`,\r\n        {\r\n            headers: {\r\n                referer: url,\r\n            },\r\n        }\r\n    );\r\n\r\n    const list = response.data.data.map((item) => ({\r\n        title: item.title,\r\n        link: `${baseUrl}/a/ac${item.articleId}`,\r\n        author: item.userName,\r\n        pubDate: parseDate(item.createTime, 'x'),\r\n        category: item.realmName,\r\n    }));\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const response = await got(item.link, {\r\n                    headers: {\r\n                        referer: url,\r\n                    },\r\n                });\r\n                const $ = load(response.data);\r\n                const articleInfo = $('.main script')\r\n                    .text()\r\n                    .match(/window.articleInfo = (.*);\\n\\s*window.likeDomain/)[1];\r\n                const data = JSON.parse(articleInfo);\r\n\r\n                item.description = data.parts[0].content;\r\n                if (data.tagList) {\r\n                    item.category = [item.category, ...data.tagList.map((tag) => tag.name)];\r\n                }\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: categoryMap[categoryId].title,\r\n        link: url,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"meAOA,MAAM,EAAU,uBACV,EAAc,CAChB,IAAK,CACD,MAAO,QACP,QAAS,oCAEb,IAAK,CACD,MAAO,KACP,QAAS,uDAEb,GAAI,CACA,MAAO,OACP,QAAS,kGAEb,IAAK,CACD,MAAO,KACP,QAAS,qGAEb,GAAI,CACA,MAAO,OACP,QAAS,oCAEb,GAAI,CACA,MAAO,OACP,QAAS,qCAGX,EAAe,IAAI,IAAI,CAAC,aAAc,kBAAmB,aACzD,EAAgB,IAAI,IAAI,CAAC,MAAO,SAAU,WAAY,UAAW,aAE1DA,EAAe,CACxB,KAAM,8CACN,WAAY,CAAC,SACb,KAAM,EAAS,SACf,QAAS,qBACT,WAAY,CACR,WAAY,CACR,YAAa,QACb,QAAS,OAAO,KAAK,GAAa,IAAK,IAAQ,CAAE,MAAO,EAAI,MAAO,EAAY,GAAI,UAEvF,SAAU,CACN,YAAa,KACb,QAAS,CACL,CAAE,MAAO,aAAc,MAAO,QAC9B,CAAE,MAAO,kBAAmB,MAAO,QACnC,CAAE,MAAO,WAAY,MAAO,SAEhC,QAAS,cAEb,UAAW,CACP,YAAa,2BACb,QAAS,CACL,CAAE,MAAO,MAAO,MAAO,QACvB,CAAE,MAAO,SAAU,MAAO,SAC1B,CAAE,MAAO,WAAY,MAAO,MAC5B,CAAE,MAAO,UAAW,MAAO,MAC3B,CAAE,MAAO,WAAY,MAAO,QAEhC,QAAS,QAGjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,KACN,YAAa,CAAC,UACd,UACA,YAAa;;;;;;;;;;yDAajB,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,aAAY,WAAW,aAAc,YAAY,OAAU,EAAI,IAAI,QAC3E,GAAI,CAAC,EAAY,GACb,MAAM,IAAIC,EAAsB,wBAAwB,KAE5D,GAAI,CAAC,EAAa,IAAI,GAClB,MAAM,IAAIA,EAAsB,sBAAsB,KAE1D,GAAI,CAAC,EAAc,IAAI,GACnB,MAAM,IAAIA,EAAsB,uBAAuB,KAG3D,IAAM,EAAM,GAAG,EAAQ,SAAS,EAAW,YACrC,EAAW,MAAMC,EAAI,KACvB,GAAG,EAAQ,sFAIM,EAAA,aACC,IAAa,WAAa,EAAY,MAAA,GAChD,EAAY,GAAY,UAChC,CACI,QAAS,CACL,QAAS,KAKf,EAAO,EAAS,KAAK,KAAK,IAAK,IAAU,CAC3C,MAAO,EAAK,MACZ,KAAM,GAAG,EAAQ,OAAO,EAAK,YAC7B,OAAQ,EAAK,SACb,QAAS,EAAU,EAAK,WAAY,KACpC,SAAU,EAAK,aAGb,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAMC,EAAW,MAAMF,EAAI,EAAK,KAAM,CAClC,QAAS,CACL,QAAS,KAGX,EAAI,EAAKE,EAAS,MAClB,EAAc,EAAE,gBACjB,OACA,MAAM,oDAAoD,GACzD,EAAO,KAAK,MAAM,GAOxB,MALA,GAAK,YAAc,EAAK,MAAM,GAAG,QAC7B,EAAK,UACL,EAAK,SAAW,CAAC,EAAK,SAAU,GAAG,EAAK,QAAQ,IAAK,GAAQ,EAAI,QAG9D,MAKnB,MAAO,CACH,MAAO,EAAY,GAAY,MAC/B,KAAM,EACN,KAAM"}