{"version":3,"file":"kemono-C3EinlFt.js","names":[],"sources":["../../lib/routes/kemono/const.ts","../../lib/routes/kemono/index.ts"],"sourcesContent":["const KEMONO_ROOT_URL = 'https://kemono.cr';\r\nconst KEMONO_API_URL = `${KEMONO_ROOT_URL}/api/v1`;\r\nconst MIME_TYPE_MAP = {\r\n    m4a: 'audio/mp4',\r\n    mp3: 'audio/mpeg',\r\n    mp4: 'video/mp4',\r\n} as const;\r\n\r\nexport { KEMONO_API_URL, KEMONO_ROOT_URL, MIME_TYPE_MAP };\r\n","import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { KEMONO_API_URL, KEMONO_ROOT_URL, MIME_TYPE_MAP } from './const';\r\nimport { KemonoPost, KemonoFile, DiscordMessage } from './types';\r\n\r\nconst headers = { Accept: 'text/css' };\r\n\r\nexport const route: Route = {\r\n    path: '/:source?/:id?/:type?',\r\n    categories: ['anime'],\r\n    example: '/kemono',\r\n    parameters: {\r\n        source: 'Source, see below, Posts by default',\r\n        id: 'User id, can be found in URL',\r\n        type: 'Content type: announcements or fancards',\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n        nsfw: true,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['kemono.cr/'],\r\n            target: '',\r\n        },\r\n        {\r\n            source: ['kemono.cr/:source/user/:id'],\r\n            target: '/:source/:id',\r\n        },\r\n        {\r\n            source: ['kemono.cr/:source/user/:id/announcements'],\r\n            target: '/:source/:id/announcements',\r\n        },\r\n        {\r\n            source: ['kemono.cr/:source/user/:id/fancards'],\r\n            target: '/:source/:id/fancards',\r\n        },\r\n        {\r\n            source: ['kemono.cr/discord/server/:id'],\r\n            target: '/discord/:id',\r\n        },\r\n    ],\r\n    name: 'Posts',\r\n    maintainers: ['nczitzk', 'AiraNadih'],\r\n    handler,\r\n    description: `Sources\r\n\r\n| Posts | Patreon | Pixiv Fanbox | Gumroad | SubscribeStar | DLsite | Discord | Fantia |\r\n| ----- | ------- | ------------ | ------- | ------------- | ------ | ------- | ------ |\r\n| posts | patreon | fanbox       | gumroad | subscribestar | dlsite | discord | fantia |\r\n\r\n::: tip\r\n  When \\`posts\\` is selected as the value of the parameter **source**, the parameter **id** does not take effect.\r\n  There is an optinal parameter **limit** which controls the number of posts to fetch, default value is 25.\r\n  \r\n  Support for announcements and fancards:\r\n  - Use \\`/:source/:id/announcements\\` to get announcements\r\n  - Use \\`/:source/:id/fancards\\` to get fancards\r\n:::`,\r\n};\r\n\r\nfunction parseJsonField(field: any): any {\r\n    if (typeof field !== 'string') {\r\n        return field;\r\n    }\r\n\r\n    try {\r\n        let parsedData = JSON.parse(field);\r\n        if (typeof parsedData === 'string') {\r\n            parsedData = JSON.parse(parsedData);\r\n        }\r\n        return parsedData;\r\n    } catch {\r\n        return field;\r\n    }\r\n}\r\n\r\nfunction buildApiUrl(source: string, userId?: string, contentType?: string): string {\r\n    if (source === 'posts') {\r\n        return `${KEMONO_API_URL}/posts`;\r\n    }\r\n\r\n    if (source === 'discord' && userId) {\r\n        return `${KEMONO_API_URL}/discord/channel/lookup/${userId}`;\r\n    }\r\n\r\n    if (!userId) {\r\n        throw new Error('User ID is required for non-posts sources');\r\n    }\r\n\r\n    const basePath = `${KEMONO_API_URL}/${source}/user/${userId}`;\r\n    return contentType ? `${basePath}/${contentType}` : `${basePath}/posts`;\r\n}\r\n\r\nfunction buildFrontendUrl(source: string, userId?: string, contentType?: string): string {\r\n    if (source === 'posts') {\r\n        return `${KEMONO_ROOT_URL}/posts`;\r\n    }\r\n\r\n    if (source === 'discord' && userId) {\r\n        return `${KEMONO_ROOT_URL}/${source}/server/${userId}`;\r\n    }\r\n\r\n    if (!userId) {\r\n        throw new Error('User ID is required for non-posts sources');\r\n    }\r\n\r\n    const basePath = `${KEMONO_ROOT_URL}/${source}/user/${userId}`;\r\n    return contentType ? `${basePath}/${contentType}` : basePath;\r\n}\r\n\r\nasync function fetchUserProfile(source: string, userId: string): Promise<string> {\r\n    try {\r\n        const profileUrl = `${KEMONO_API_URL}/${source}/user/${userId}/profile`;\r\n        const response = await got({ method: 'get', url: profileUrl, headers });\r\n        return response.data.name || 'Unknown User';\r\n    } catch {\r\n        return 'Unknown User';\r\n    }\r\n}\r\n\r\nfunction processPostFiles(post: KemonoPost): KemonoFile[] {\r\n    const files: KemonoFile[] = [];\r\n\r\n    if (post.file) {\r\n        const parsedFile = parseJsonField(post.file);\r\n        if (parsedFile && typeof parsedFile === 'object' && 'path' in parsedFile) {\r\n            files.push({\r\n                name: parsedFile.name || 'Unnamed File',\r\n                path: parsedFile.path,\r\n                extension: extractFileExtension(parsedFile.path),\r\n            });\r\n        }\r\n    }\r\n\r\n    if (Array.isArray(post.attachments)) {\r\n        for (const attachment of post.attachments) {\r\n            const parsedAttachment = parseJsonField(attachment);\r\n            if (parsedAttachment && typeof parsedAttachment === 'object' && 'path' in parsedAttachment) {\r\n                files.push({\r\n                    name: parsedAttachment.name || 'Unnamed Attachment',\r\n                    path: parsedAttachment.path,\r\n                    extension: extractFileExtension(parsedAttachment.path),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nfunction extractFileExtension(filePath: string): string {\r\n    return filePath.replace(/.*\\./, '').toLowerCase();\r\n}\r\n\r\nfunction generateEnclosureInfo(htmlContent: string): { enclosure_url?: string; enclosure_type?: string } {\r\n    const $ = load(htmlContent);\r\n    let enclosureInfo = {};\r\n\r\n    $('audio source, video source').each(function () {\r\n        const src = $(this).attr('src');\r\n        if (!src) {\r\n            return;\r\n        }\r\n\r\n        const extension = extractFileExtension(src);\r\n        const mimeType = MIME_TYPE_MAP[extension as keyof typeof MIME_TYPE_MAP];\r\n\r\n        if (mimeType) {\r\n            enclosureInfo = {\r\n                enclosure_url: new URL(src, KEMONO_ROOT_URL).toString(),\r\n                enclosure_type: mimeType,\r\n            };\r\n            return false;\r\n        }\r\n    });\r\n\r\n    return enclosureInfo;\r\n}\r\n\r\nasync function processDiscordMessages(channels: any[], limit: number) {\r\n    const items = await Promise.all(\r\n        channels.map((channel) =>\r\n            cache.tryGet(`discord_${channel.id}`, async () => {\r\n                const channelResponse = await got({\r\n                    method: 'get',\r\n                    url: `${KEMONO_ROOT_URL}/api/v1/discord/channel/${channel.id}?o=0`,\r\n                    headers,\r\n                });\r\n\r\n                return channelResponse.data\r\n                    .filter((message: DiscordMessage) => message.content || message.attachments)\r\n                    .sort((a, b) => b.id.localeCompare(a.id))\r\n                    .slice(0, limit)\r\n                    .map((message: DiscordMessage) => ({\r\n                        title: message.content || 'Discord Message',\r\n                        description: art(path.join(__dirname, 'templates/discord.art'), { i: message }),\r\n                        author: `${message.author.username}#${message.author.discriminator}`,\r\n                        pubDate: parseDate(message.published),\r\n                        category: channel.name,\r\n                        guid: `kemono:discord:${message.server}:${message.channel}:${message.id}`,\r\n                        link: `https://discord.com/channels/${message.server}/${message.channel}/${message.id}`,\r\n                    }));\r\n            })\r\n        )\r\n    );\r\n\r\n    return items.flat();\r\n}\r\n\r\nfunction processAnnouncements(announcements: any[], authorName: string, source: string, userId: string, limit: number) {\r\n    return announcements.slice(0, limit).map((announcement) => ({\r\n        title: `Announcement from ${announcement.published ? parseDate(announcement.published).toDateString() : 'Unknown Date'}`,\r\n        description: `<div>${announcement.content || ''}</div>`,\r\n        author: authorName,\r\n        pubDate: parseDate(announcement.published),\r\n        guid: `kemono:${source}:${userId}:announcement:${announcement.hash}`,\r\n        link: `${KEMONO_ROOT_URL}/${source}/user/${userId}/announcements`,\r\n    }));\r\n}\r\n\r\nfunction processFancards(fancards: any[], authorName: string, source: string, userId: string, limit: number) {\r\n    return fancards.slice(0, limit).map((fancard) => {\r\n        const imageUrl = `${fancard.server}${fancard.path}`;\r\n\r\n        return {\r\n            title: `Fancard ${fancard.id}`,\r\n            description: `<img src=\"${imageUrl}\" alt=\"Fancard ${fancard.id}\" />`,\r\n            author: authorName,\r\n            pubDate: parseDate(fancard.added),\r\n            guid: `kemono:${source}:${userId}:fancard:${fancard.id}`,\r\n            link: imageUrl,\r\n            enclosure_url: imageUrl,\r\n            enclosure_type: fancard.mime,\r\n        };\r\n    });\r\n}\r\n\r\nfunction processPosts(posts: KemonoPost[], authorName: string, limit: number) {\r\n    return posts\r\n        .filter((post) => post.content || post.attachments)\r\n        .slice(0, limit)\r\n        .map((post) => {\r\n            const files = processPostFiles(post);\r\n            const postWithFiles = { ...post, files };\r\n\r\n            const filesHtml = art(path.join(__dirname, 'templates/source.art'), { i: postWithFiles });\r\n            let description = post.content ? `<div>${post.content}</div>` : '';\r\n\r\n            const $ = load(description);\r\n            const kemonoFileElements = load(filesHtml)('img, a, audio, video')\r\n                .toArray()\r\n                .map((el) => $(el).prop('outerHTML')!);\r\n\r\n            let replacementCount = 0;\r\n            const fanboxRegex = /downloads\\.fanbox\\.cc/;\r\n            $('a').each(function () {\r\n                const link = $(this).attr('href');\r\n                if (link && fanboxRegex.test(link)) {\r\n                    $(this).replaceWith(kemonoFileElements[replacementCount] || '');\r\n                    replacementCount++;\r\n                }\r\n            });\r\n\r\n            description = (kemonoFileElements[0] || '') + $.html();\r\n            for (const fileElement of kemonoFileElements.slice(replacementCount + 1)) {\r\n                description += fileElement;\r\n            }\r\n\r\n            return {\r\n                title: post.title || 'Untitled Post',\r\n                description,\r\n                author: authorName,\r\n                pubDate: parseDate(post.published),\r\n                guid: `kemono:${post.service}:${post.user}:post:${post.id}`,\r\n                link: `${KEMONO_ROOT_URL}/${post.service}/user/${post.user}/post/${post.id}`,\r\n                ...generateEnclosureInfo(description),\r\n            };\r\n        });\r\n}\r\n\r\nasync function handler(ctx) {\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 25;\r\n    const source = ctx.req.param('source') || 'posts';\r\n    const userId = ctx.req.param('id');\r\n    const contentType = ctx.req.param('type');\r\n\r\n    const isPostsMode = source === 'posts';\r\n    const isDiscordMode = source === 'discord';\r\n\r\n    try {\r\n        const apiUrl = buildApiUrl(source, userId, contentType);\r\n        const frontendUrl = buildFrontendUrl(source, userId, contentType);\r\n\r\n        const response = await got({ method: 'get', url: apiUrl, headers });\r\n\r\n        const authorName = isPostsMode || isDiscordMode || !userId ? '' : await fetchUserProfile(source, userId);\r\n\r\n        const iconUrl = isPostsMode || isDiscordMode ? `${KEMONO_ROOT_URL}/favicon.ico` : `https://img.kemono.cr/icons/${source}/${userId}`;\r\n\r\n        let items: any[];\r\n        let title: string;\r\n\r\n        if (isDiscordMode) {\r\n            title = `Posts of ${userId} from Discord | Kemono`;\r\n            items = await processDiscordMessages(response.data, limit);\r\n        } else if (contentType === 'announcements') {\r\n            title = `Announcements of ${authorName} from ${source} | Kemono`;\r\n            items = processAnnouncements(response.data, authorName, source, userId, limit);\r\n        } else if (contentType === 'fancards') {\r\n            title = `Fancards of ${authorName} from ${source} | Kemono`;\r\n            items = processFancards(response.data, authorName, source, userId, limit);\r\n        } else {\r\n            title = isPostsMode ? 'Kemono Posts' : `Posts of ${authorName} from ${source} | Kemono`;\r\n            const posts = isPostsMode ? response.data.posts : response.data;\r\n            items = processPosts(posts, authorName, limit);\r\n        }\r\n\r\n        return {\r\n            title,\r\n            image: iconUrl,\r\n            link: frontendUrl,\r\n            item: items,\r\n        };\r\n    } catch (error) {\r\n        throw new Error(`Failed to fetch data from Kemono: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n}\r\n"],"mappings":"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"}