{"version":3,"file":"pulls-BYd-HhDf.js","names":["MarkdownIt","route: Route","ofetch"],"sources":["../../lib/routes/github/pulls.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { config } from '@/config';\r\nimport MarkdownIt from 'markdown-it';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n    linkify: true,\r\n});\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/pull/:user/:repo/:state?/:labels?',\r\n    categories: ['programming'],\r\n    example: '/github/pull/DIYgod/RSSHub',\r\n    parameters: { user: 'User name', repo: 'Repo name', state: 'the state of pull requests. Can be either `open`, `closed`, or `all`. Default: `open`.', labels: 'a list of comma separated label names' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['github.com/:user/:repo/pulls', 'github.com/:user/:repo/pulls/:id', 'github.com/:user/:repo'],\r\n            target: '/pull/:user/:repo',\r\n        },\r\n    ],\r\n    name: 'Repo Pull Requests',\r\n    maintainers: ['hashman', 'TonyRL'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const user = ctx.req.param('user');\r\n    const repo = ctx.req.param('repo');\r\n    const state = ctx.req.param('state') ?? 'open';\r\n    const labels = ctx.req.param('labels');\r\n\r\n    const host = `https://github.com/${user}/${repo}/pulls`;\r\n    const url = `https://api.github.com/repos/${user}/${repo}/issues`; // every PR is also an issue\r\n\r\n    const headers = { Accept: 'application/vnd.github.v3+json' };\r\n    if (config.github && config.github.access_token) {\r\n        headers.Authorization = `token ${config.github.access_token}`;\r\n    }\r\n    const response = await ofetch(url, {\r\n        query: {\r\n            state,\r\n            labels,\r\n            sort: 'created',\r\n            direction: 'desc',\r\n            per_page: ctx.req.query('limit') ? Math.min(Number.parseInt(ctx.req.query('limit')), 100) : 100,\r\n        },\r\n        headers,\r\n    });\r\n    const data = response.filter((item) => item.pull_request);\r\n\r\n    return {\r\n        allowEmpty: true,\r\n        title: `${user}/${repo} Pull requests`,\r\n        link: host,\r\n        item: data.map((item) => ({\r\n            title: item.title,\r\n            author: item.user.login,\r\n            description: item.body ? md.render(item.body) : 'No description',\r\n            pubDate: parseDate(item.created_at),\r\n            link: item.html_url,\r\n        })),\r\n    };\r\n}\r\n"],"mappings":"4QAIA,MAAM,EAAKA,EAAW,CAClB,KAAM,GACN,QAAS,KAIAC,EAAe,CACxB,KAAM,qCACN,WAAY,CAAC,eACb,QAAS,6BACT,WAAY,CAAE,KAAM,YAAa,KAAM,YAAa,MAAO,yFAA0F,OAAQ,yCAC7J,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,+BAAgC,mCAAoC,0BAC7E,OAAQ,sBAGhB,KAAM,qBACN,YAAa,CAAC,UAAW,UACzB,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,EAAI,IAAI,MAAM,QACrB,EAAO,EAAI,IAAI,MAAM,QACrB,EAAQ,EAAI,IAAI,MAAM,UAAY,OAClC,EAAS,EAAI,IAAI,MAAM,UAEvB,EAAO,sBAAsB,EAAK,GAAG,EAAK,QAC1C,EAAM,gCAAgC,EAAK,GAAG,EAAK,SAEnD,EAAU,CAAE,OAAQ,kCACtB,EAAO,QAAU,EAAO,OAAO,eAC/B,EAAQ,cAAgB,SAAS,EAAO,OAAO,gBAEnD,IAAM,EAAW,MAAMC,EAAO,EAAK,CAC/B,MAAO,CACH,QACA,SACA,KAAM,UACN,UAAW,OACX,SAAU,EAAI,IAAI,MAAM,SAAW,KAAK,IAAI,OAAO,SAAS,EAAI,IAAI,MAAM,UAAW,KAAO,KAEhG,YAEE,EAAO,EAAS,OAAQ,GAAS,EAAK,cAE5C,MAAO,CACH,WAAY,GACZ,MAAO,GAAG,EAAK,GAAG,EAAK,gBACvB,KAAM,EACN,KAAM,EAAK,IAAK,IAAU,CACtB,MAAO,EAAK,MACZ,OAAQ,EAAK,KAAK,MAClB,YAAa,EAAK,KAAO,EAAG,OAAO,EAAK,MAAQ,iBAChD,QAAS,EAAU,EAAK,YACxB,KAAM,EAAK"}