{"version":3,"file":"search-l32jo5lp.js","names":[],"sources":["../../lib/routes/18comic/search.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { apiMapCategory, defaultDomain, getApiUrl, getRootUrl, processApiItems } from './utils';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport cache from '@/utils/cache';\r\n\r\nexport const route: Route = {\r\n    path: '/search/:option?/:category?/:keyword?/:time?/:order?',\r\n    categories: ['anime'],\r\n    example: '/18comic/search/photos/all/NTR',\r\n    parameters: {\r\n        option: '选项，可选 `video` 和 `photos`，默认为 `photos`',\r\n        category: '分类，同上表，默认为 `all` 即全部',\r\n        keyword: '关键字，同上表，默认为空',\r\n        time: '时间范围，同上表，默认为 `a` 即全部',\r\n        order: '排列顺序，同上表，默认为 `mr` 即最新',\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['jmcomic.group/'],\r\n            target: '/:category?/:time?/:order?/:keyword?',\r\n        },\r\n    ],\r\n    name: '搜索',\r\n    maintainers: [],\r\n    handler,\r\n    url: 'jmcomic.group/',\r\n    description: `::: tip\r\n  关键字必须超过两个字，这是来自网站的限制。\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const option = ctx.req.param('option') ?? 'photos';\r\n    const category = ctx.req.param('category') ?? 'all';\r\n    const keyword = ctx.req.param('keyword') ?? '';\r\n    const time = ctx.req.param('time') ?? 'a';\r\n    const { domain = defaultDomain } = ctx.req.query();\r\n    const rootUrl = getRootUrl(domain);\r\n    let order = ctx.req.param('order') ?? 'mr';\r\n    const currentUrl = `${rootUrl}/search/${option}${category === 'all' ? '' : `/${category}`}${keyword ? `?search_query=${keyword}` : '?'}${time === 'a' ? '' : `&t=${time}`}${order === 'mr' ? '' : `&o=${order}`}`;\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 20;\r\n\r\n    let apiUrl = getApiUrl();\r\n    order = time === 'a' ? order : `${order}_${time}`;\r\n    apiUrl = `${apiUrl}/search?search_query=${keyword}&o=${order}`;\r\n    let apiResult = await processApiItems(apiUrl);\r\n    let filteredItemsByCategory = apiResult.content;\r\n    // Filter items by category if not 'all'\r\n    if (category !== 'all') {\r\n        filteredItemsByCategory = apiResult.content.filter((item) => item.category.title === apiMapCategory(category));\r\n    }\r\n    filteredItemsByCategory = filteredItemsByCategory.slice(0, limit);\r\n    const results = await Promise.all(\r\n        filteredItemsByCategory.map((item) =>\r\n            cache.tryGet(`18comic:search:${item.id}`, async () => {\r\n                const result = {};\r\n                result.title = item.name;\r\n                result.link = `${rootUrl}/album/${item.id}`;\r\n                result.guid = `18comic:/album/${item.id}`;\r\n                result.updated = parseDate(item.update_at);\r\n                apiUrl = `${getApiUrl()}/album?id=${item.id}`;\r\n                apiResult = await processApiItems(apiUrl);\r\n                result.pubDate = new Date(apiResult.addtime * 1000);\r\n                result.category = apiResult.tags.map((tag) => tag);\r\n                result.author = apiResult.author.map((a) => a).join(', ');\r\n                result.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                    introduction: apiResult.description,\r\n                    images: [\r\n                        `https://cdn-msp3.${domain}/media/albums/${item.id}_3x4.jpg`,\r\n                        // 取得的预览图片会被分割排序，所以先只取封面图\r\n                        // `https://cdn-msp3.${domain}/media/photos/${item.id}/00001.webp`,\r\n                        // `https://cdn-msp3.${domain}/media/photos/${item.id}/00002.webp`,\r\n                        // `https://cdn-msp3.${domain}/media/photos/${item.id}/00003.webp`,\r\n                    ],\r\n                    cover: `https://cdn-msp3.${domain}/media/albums/${item.id}_3x4.jpg`,\r\n                    category: result.category,\r\n                });\r\n                return result;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `Search Results For '${keyword}' - 禁漫天堂`,\r\n        link: currentUrl.replace(/\\?$/, ''),\r\n        item: results,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"gmBAOA,MAAa,EAAe,CACxB,KAAM,uDACN,WAAY,CAAC,SACb,QAAS,iCACT,WAAY,CACR,OAAQ,wCACR,SAAU,uBACV,QAAS,eACT,KAAM,uBACN,MAAO,yBAEX,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,kBACT,OAAQ,yCAGhB,KAAM,KACN,YAAa,GACb,UACA,IAAK,iBACL,YAAa;;MAKjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAS,EAAI,IAAI,MAAM,WAAa,SACpC,EAAW,EAAI,IAAI,MAAM,aAAe,MACxC,EAAU,EAAI,IAAI,MAAM,YAAc,GACtC,EAAO,EAAI,IAAI,MAAM,SAAW,IAChC,CAAE,SAAS,GAAkB,EAAI,IAAI,QACrC,EAAU,EAAW,GACvB,EAAQ,EAAI,IAAI,MAAM,UAAY,KAChC,EAAa,GAAG,EAAQ,UAAU,IAAS,IAAa,MAAQ,GAAK,IAAI,MAAa,EAAU,iBAAiB,IAAY,MAAM,IAAS,IAAM,GAAK,MAAM,MAAS,IAAU,KAAO,GAAK,MAAM,MAClM,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,GAE7E,EAAS,IACb,EAAQ,IAAS,IAAM,EAAQ,GAAG,EAAM,GAAG,IAC3C,EAAS,GAAG,EAAO,uBAAuB,EAAQ,KAAK,IACvD,IAAI,EAAY,MAAM,EAAgB,GAClC,EAA0B,EAAU,QAEpC,IAAa,QACb,EAA0B,EAAU,QAAQ,OAAQ,GAAS,EAAK,SAAS,QAAU,EAAe,KAExG,EAA0B,EAAwB,MAAM,EAAG,GAC3D,IAAM,EAAU,MAAM,QAAQ,IAC1B,EAAwB,IAAK,GACzB,EAAM,OAAO,kBAAkB,EAAK,KAAM,SAAY,CAClD,IAAM,EAAS,GAsBf,MArBA,GAAO,MAAQ,EAAK,KACpB,EAAO,KAAO,GAAG,EAAQ,SAAS,EAAK,KACvC,EAAO,KAAO,kBAAkB,EAAK,KACrC,EAAO,QAAU,EAAU,EAAK,WAChC,EAAS,GAAG,IAAY,YAAY,EAAK,KACzC,EAAY,MAAM,EAAgB,GAClC,EAAO,QAAU,IAAI,KAAK,EAAU,QAAU,KAC9C,EAAO,SAAW,EAAU,KAAK,IAAK,GAAQ,GAC9C,EAAO,OAAS,EAAU,OAAO,IAAK,GAAM,GAAG,KAAK,MACpD,EAAO,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACxE,aAAc,EAAU,YACxB,OAAQ,CACJ,oBAAoB,EAAO,gBAAgB,EAAK,GAAG,WAMvD,MAAO,oBAAoB,EAAO,gBAAgB,EAAK,GAAG,UAC1D,SAAU,EAAO,WAEd,MAKnB,MAAO,CACH,MAAO,uBAAuB,EAAQ,UACtC,KAAM,EAAW,QAAQ,MAAO,IAChC,KAAM,EACN,WAAY"}