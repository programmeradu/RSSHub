{"version":3,"file":"announcements-DJPKMT_h.js","names":["cache","ofetch","preliminaryItems: DataItem[]","preliminaryItem: DataItem","items: DataItem[]","route: Route"],"sources":["../../lib/routes/bfl/announcements.ts"],"sourcesContent":["import { Route, DataItem, Data } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport cache from '@/utils/cache';\r\n\r\nconst ROOT_URL = 'https://bfl.ai'; // 根 URL 定义为常量\r\n\r\n/**\r\n * 辅助函数：获取并解析单个公告详情页，提取正文内容，并使用缓存。\r\n */\r\nconst fetchDescription = (item: DataItem): Promise<DataItem> =>\r\n    cache.tryGet(item.link!, async () => {\r\n        const detailPageHtml = await ofetch(item.link!, {\r\n            // 不再手动指定 User-Agent，让 RSSHub 自行处理\r\n        });\r\n        const $detailPage = load(detailPageHtml);\r\n        const detailContentSelector = 'div.max-w-3xl.mx-auto.px-6';\r\n        const fullDescription = $detailPage(detailContentSelector).html()?.trim();\r\n\r\n        // 将从列表页获取的 item 与详情页的描述合并后返回\r\n        // 整个对象将被缓存\r\n        return {\r\n            ...item,\r\n            description: fullDescription || item.description, // 如果获取不到全文，则回退到列表页的摘要\r\n        };\r\n    });\r\n\r\n/**\r\n * 主路由处理函数\r\n */\r\nasync function handler(): Promise<Data> {\r\n    const listPageUrl = `${ROOT_URL}/announcements`;\r\n\r\n    const listPageHtml = await ofetch(listPageUrl); // 不再手动指定 User-Agent\r\n    const $ = load(listPageHtml);\r\n\r\n    const feedTitle = $('head title').text().trim() || 'BFL AI Announcements';\r\n    const feedDescription = $('head meta[name=\"description\"]').attr('content')?.trim() || 'Latest announcements from Black Forest Labs (bfl.ai).';\r\n\r\n    const listItemsSelector = 'div.flex.flex-col.max-w-3xl.mx-auto.space-y-8 > a[href^=\"/announcements/\"]';\r\n    const announcementLinks = $(listItemsSelector);\r\n\r\n    // 从列表页初步提取每个条目的信息\r\n    const preliminaryItems: DataItem[] = announcementLinks\r\n        .toArray()\r\n        .map((anchorElement) => {\r\n            const $anchor = $(anchorElement);\r\n\r\n            const relativeLink = $anchor.attr('href');\r\n            const link = relativeLink ? `${ROOT_URL}${relativeLink}` : undefined;\r\n            const title = $anchor.find('h2[class*=\"text-xl\"]').text().trim();\r\n\r\n            const $timeElement = $anchor.find('time');\r\n            const datetimeAttr = $timeElement.attr('datetime');\r\n            const timeText = $timeElement.text().trim();\r\n            const pubDate = datetimeAttr ? parseDate(datetimeAttr) : timeText ? parseDate(timeText) : undefined;\r\n\r\n            const summaryDescription = $anchor.find('p[class*=\"line-clamp-3\"]').html()?.trim() || '';\r\n            const author = 'Black Forest Labs';\r\n\r\n            // 只有包含有效标题和链接的条目才被认为是初步有效的\r\n            if (!title || !link) {\r\n                return null;\r\n            }\r\n\r\n            // 构造初步的 item 对象\r\n            const preliminaryItem: DataItem = {\r\n                title,\r\n                link,\r\n                description: summaryDescription,\r\n                author,\r\n            };\r\n\r\n            if (pubDate) {\r\n                preliminaryItem.pubDate = pubDate.toUTCString();\r\n            }\r\n\r\n            return preliminaryItem;\r\n        })\r\n        .filter((item): item is DataItem => item !== null && item.link !== undefined);\r\n\r\n    // 并行获取所有文章的完整描述\r\n    const items: DataItem[] = await Promise.all(preliminaryItems.map((item) => fetchDescription(item)));\r\n\r\n    return {\r\n        title: feedTitle,\r\n        link: listPageUrl,\r\n        description: feedDescription,\r\n        item: items,\r\n        language: 'en',\r\n    };\r\n}\r\n\r\n/**\r\n * 定义并导出RSSHub路由对象\r\n */\r\nexport const route: Route = {\r\n    // 路径相对于命名空间 /bfl，所以完整路径是 /bfl/announcements\r\n    path: '/announcements',\r\n    // 按照要求，只指定一个分类\r\n    categories: ['multimedia'],\r\n    example: '/bfl/announcements',\r\n    parameters: {},\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['bfl.ai/announcements'],\r\n            // target 也要相应修改\r\n            target: '/announcements',\r\n            title: 'Announcements',\r\n        },\r\n    ],\r\n    name: 'Announcements',\r\n    maintainers: ['thirteenkai'],\r\n    handler,\r\n    // url 不包含协议名\r\n    url: 'bfl.ai/announcements',\r\n    description: 'Fetches the latest announcements from Black Forest Labs (bfl.ai). Provides full article content by default with caching.',\r\n};\r\n"],"mappings":"mTAMA,MAAM,EAAW,iBAKX,EAAoB,GACtBA,EAAM,OAAO,EAAK,KAAO,SAAY,CACjC,IAAM,EAAiB,MAAMC,EAAO,EAAK,KAAO,IAG1C,EAAc,EAAK,GAEnB,EAAkB,EAAY,8BAAuB,QAAQ,OAInE,MAAO,CACH,GAAG,EACH,YAAa,GAAmB,EAAK,eAOjD,eAAe,GAAyB,CACpC,IAAM,EAAc,GAAG,EAAS,gBAE1B,EAAe,MAAMA,EAAO,GAC5B,EAAI,EAAK,GAET,EAAY,EAAE,cAAc,OAAO,QAAU,uBAC7C,EAAkB,EAAE,iCAAiC,KAAK,YAAY,QAAU,wDAGhF,EAAoB,EAAE,8EAGtBC,EAA+B,EAChC,UACA,IAAK,GAAkB,CACpB,IAAM,EAAU,EAAE,GAEZ,EAAe,EAAQ,KAAK,QAC5B,EAAO,EAAe,GAAG,IAAW,IAAiB,IAAA,GACrD,EAAQ,EAAQ,KAAK,wBAAwB,OAAO,OAEpD,EAAe,EAAQ,KAAK,QAC5B,EAAe,EAAa,KAAK,YACjC,EAAW,EAAa,OAAO,OAC/B,EAAU,EAAe,EAAU,GAAgB,EAAW,EAAU,GAAY,IAAA,GAEpF,EAAqB,EAAQ,KAAK,4BAA4B,QAAQ,QAAU,GAItF,GAAI,CAAC,GAAS,CAAC,EACX,OAAO,KAIX,IAAMC,EAA4B,CAC9B,QACA,OACA,YAAa,EACb,4BAOJ,OAJI,IACA,EAAgB,QAAU,EAAQ,eAG/B,IAEV,OAAQ,GAA2B,IAAS,MAAQ,EAAK,OAAS,IAAA,IAGjEC,EAAoB,MAAM,QAAQ,IAAI,EAAiB,IAAK,GAAS,EAAiB,KAE5F,MAAO,CACH,MAAO,EACP,KAAM,EACN,YAAa,EACb,KAAM,EACN,SAAU,MAOlB,MAAaC,EAAe,CAExB,KAAM,iBAEN,WAAY,CAAC,cACb,QAAS,qBACT,WAAY,GACZ,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,wBAET,OAAQ,iBACR,MAAO,kBAGf,KAAM,gBACN,YAAa,CAAC,eACd,UAEA,IAAK,uBACL,YAAa"}