{"version":3,"file":"ehapi-Bo_it2g6.js","names":["got","cache"],"sources":["../../lib/routes/ehentai/ehapi.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport logger from '@/utils/logger';\r\nimport timezone from '@/utils/timezone';\r\nimport { load } from 'cheerio';\r\nimport path from 'node:path';\r\nimport { config } from '@/config';\r\n\r\nconst headers = {};\r\nconst has_cookie = config.ehentai.ipb_member_id && config.ehentai.ipb_pass_hash && config.ehentai.sk;\r\nconst from_ex = has_cookie && config.ehentai.igneous;\r\nif (has_cookie) {\r\n    if (from_ex) {\r\n        const { ipb_member_id, ipb_pass_hash, sk, igneous } = config.ehentai;\r\n        headers.cookie = `ipb_member_id=${ipb_member_id};ipb_pass_hash=${ipb_pass_hash};sk=${sk};igneous=${igneous}`;\r\n    } else {\r\n        const { ipb_member_id, ipb_pass_hash, sk } = config.ehentai;\r\n        headers.cookie = `ipb_member_id=${ipb_member_id};ipb_pass_hash=${ipb_pass_hash};sk=${sk}`;\r\n    }\r\n}\r\n\r\nif (config.ehentai.star) {\r\n    headers.cookie += `;star=${config.ehentai.star}`;\r\n}\r\n\r\nfunction ehgot(url) {\r\n    return from_ex ? got({ method: 'get', url: `https://exhentai.org/${url}`, headers }) : got({ method: 'get', url: `https://e-hentai.org/${url}`, headers });\r\n}\r\n\r\nfunction ehgot_thumb(cache, thumb_url) {\r\n    return cache.tryGet(thumb_url, async () => {\r\n        try {\r\n            const buffer = await got({ method: 'get', url: thumb_url, headers });\r\n            const data = new Buffer.from(buffer.rawBody).toString('base64');\r\n            const ext = path.extname(thumb_url).slice(1);\r\n            return `data:image/${ext};base64,${data}`;\r\n        } catch (error) {\r\n            logger.warn('Cannot download thumbnail: ' + thumb_url, error);\r\n            return thumb_url;\r\n        }\r\n    });\r\n}\r\n\r\nasync function parsePage(cache, data, get_bittorrent = false, embed_thumb = false) {\r\n    const $ = load(data);\r\n    // \"m\" for Minimal\r\n    // \"p\" for Minimal+\r\n    // \"l\" for Compact\r\n    // \"e\" for Extended\r\n    // \"t\" for Thumbnail\r\n    let layout = 't';\r\n\r\n    // \"itg gld\" for Thumbnail\r\n    let galleries = $('div[class^=\"itg gld\"]');\r\n    // \"itg gltm\" for Minimal or Minimal+\r\n    if (galleries.length <= 0) {\r\n        galleries = $('table[class^=\"itg gltm\"] tbody');\r\n        layout = 'm';\r\n    }\r\n    // \"itg gltc\" for Compact\r\n    if (galleries.length <= 0) {\r\n        galleries = $('table[class^=\"itg gltc\"] tbody');\r\n        layout = 'l';\r\n    }\r\n    // \"itg glte\" for Extended\r\n    if (galleries.length <= 0) {\r\n        galleries = $('table[class^=\"itg glte\"] tbody');\r\n        layout = 'e';\r\n    }\r\n    if (galleries.length <= 0) {\r\n        return [];\r\n    }\r\n\r\n    async function parseElement(cache, element) {\r\n        const el = $(element);\r\n        const title = el.find('div.glink').html();\r\n        const rawDate = el.find('div[id^=\"posted_\"]').text();\r\n        const pubDate = rawDate ? timezone(rawDate, 0) : rawDate;\r\n        let el_a;\r\n        let el_img;\r\n        // match layout\r\n        if ('mpl'.includes(layout)) {\r\n            // Minimal, Minimal+, Compact\r\n            el_a = el.find('td[class^=\"gl3\"] a');\r\n            el_img = el.find('td[class^=gl2] div.glthumb div img');\r\n        } else if (layout === 'e') {\r\n            // Extended\r\n            el_a = el.find('td[class^=\"gl1\"] a');\r\n            el_img = el_a.find('img');\r\n        } else if (layout === 't') {\r\n            // Thumbnail\r\n            el_a = el.find('div[class^=\"gl3t\"] a');\r\n            el_img = el_a.find('img');\r\n        }\r\n        const link = el_a.attr('href');\r\n        let thumbnail = el_img.data('src') ?? el_img.attr('src');\r\n        if (config.ehentai.img_proxy && thumbnail) {\r\n            const url = new URL(thumbnail);\r\n            thumbnail = config.ehentai.img_proxy + url.pathname + url.search;\r\n        }\r\n        if (embed_thumb && thumbnail) {\r\n            thumbnail = await ehgot_thumb(cache, thumbnail);\r\n        }\r\n        const description = `<img src='${thumbnail}' alt='thumbnail'>`;\r\n        if (title && link) {\r\n            const item = { title, description, pubDate, link };\r\n            if (get_bittorrent) {\r\n                const el_down = el.find('div.gldown');\r\n                const bittorrent_page_url = el_down.find('a').attr('href');\r\n                if (bittorrent_page_url) {\r\n                    const bittorrent_url = await getBittorrent(cache, bittorrent_page_url);\r\n                    if (bittorrent_url) {\r\n                        item.enclosure_url = bittorrent_url;\r\n                        item.enclosure_type = 'application/x-bittorrent';\r\n                        item.bittorrent_page_url = bittorrent_page_url;\r\n                    }\r\n                }\r\n            }\r\n            if ('le'.includes(layout)) {\r\n                // artist tags will only show in Compact or Extended layout\r\n                // get artist names as author\r\n                item.author = $(el)\r\n                    .find('div.gt[title^=\"artist:\"]')\r\n                    .toArray()\r\n                    .map((tag) => $(tag).text())\r\n                    .join(' / ');\r\n            }\r\n            return item;\r\n        }\r\n    }\r\n\r\n    const item_Promises = [];\r\n    galleries.children().each((index, element) => {\r\n        item_Promises.push(parseElement(cache, element));\r\n    });\r\n    const items_with_null = await Promise.all(item_Promises);\r\n\r\n    const items = [];\r\n    for (const item of items_with_null) {\r\n        if (item) {\r\n            items.push(item);\r\n        }\r\n    }\r\n    return items;\r\n}\r\n\r\nlet p = '';\r\n\r\nfunction getBittorrent(cache, bittorrent_page_url) {\r\n    return cache.tryGet(bittorrent_page_url, async () => {\r\n        try {\r\n            const response = await got({ method: 'get', url: bittorrent_page_url, headers });\r\n            const $ = load(response.data);\r\n            const el_forms = $('form').toArray();\r\n            let bittorrent_url;\r\n            for (const el_form of el_forms) {\r\n                const el_a = $(el_form).find('a');\r\n                const onclick = el_a.attr('onclick');\r\n                if (onclick) {\r\n                    const match = onclick.match(/'(.*?)'/);\r\n                    if (match) {\r\n                        bittorrent_url = match[1];\r\n                        const match_p = bittorrent_url.match(/torrent\\?p=(.*?)$/);\r\n                        if (match_p) {\r\n                            p = match_p[1];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return bittorrent_url;\r\n        } catch {\r\n            return;\r\n        }\r\n    });\r\n}\r\n\r\nfunction updateBittorrent_url(cache, items) {\r\n    // 下种子文件需要动态密码，密码每几次请求就更新一次\r\n    for (const item of items) {\r\n        if (item.enclosure_url) {\r\n            item.enclosure_url = item.enclosure_url.replace(/torrent\\?p=.*$/, `torrent?p=${p}`);\r\n            cache.set(item.bittorrent_page_url, item.enclosure_url);\r\n        }\r\n    }\r\n    return items;\r\n}\r\n\r\nasync function gatherItemsByPage(cache, url, get_bittorrent = false, embed_thumb = false) {\r\n    const response = await ehgot(url);\r\n    const items = await parsePage(cache, response.data, get_bittorrent, embed_thumb);\r\n    return updateBittorrent_url(cache, items);\r\n}\r\n\r\nasync function getFavoritesItems(cache, favcat, inline_set, page, get_bittorrent = false, embed_thumb = false) {\r\n    const response = await ehgot(`favorites.php?favcat=${favcat}&inline_set=${inline_set}`);\r\n    if (page) {\r\n        return gatherItemsByPage(cache, `favorites.php?favcat=${favcat}&next=${page}`, get_bittorrent, embed_thumb);\r\n    } else {\r\n        const items = await parsePage(cache, response.data, get_bittorrent, embed_thumb);\r\n        return updateBittorrent_url(cache, items);\r\n    }\r\n}\r\n\r\nfunction getSearchItems(cache, params, page, get_bittorrent = false, embed_thumb = false) {\r\n    return page ? gatherItemsByPage(cache, `?${params}&next=${page}`, get_bittorrent, embed_thumb) : gatherItemsByPage(cache, `?${params}`, get_bittorrent, embed_thumb);\r\n}\r\n\r\nfunction getTagItems(cache, tag, page, get_bittorrent = false, embed_thumb = false) {\r\n    return page ? gatherItemsByPage(cache, `tag/${tag}?next=${page}`, get_bittorrent, embed_thumb) : gatherItemsByPage(cache, `tag/${tag}`, get_bittorrent, embed_thumb);\r\n}\r\n\r\nexport default { getFavoritesItems, getSearchItems, getTagItems, has_cookie, from_ex };\r\n"],"mappings":"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"}