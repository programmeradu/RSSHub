{"version":3,"file":"mmda-DR_h_SpH.js","names":[],"sources":["../../lib/routes/booru/mmda.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport queryString from 'query-string';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport cache from '@/utils/cache';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/mmda/tags/:tags?',\r\n    categories: ['picture'],\r\n    example: '/booru/mmda/tags/full_body%20blue_eyes',\r\n    parameters: { tags: '标签，多个标签使用 `%20` 连接，如需根据作者查询则在 `user:` 后接上作者名，如：`user:xxxx`' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['mmda.booru.org/index.php'],\r\n        },\r\n    ],\r\n    name: 'MMDArchive 标签查询',\r\n    maintainers: ['N78Wy'],\r\n    handler,\r\n    description: `For example:\r\n\r\n  -   默认查询 (什么 tag 都不加)：\\`/booru/mmda/tags\\`\r\n  -   默认查询单个 tag：\\`/booru/mmda/tags/full_body\\`\r\n  -   默认查询多个 tag：\\`/booru/mmda/tags/full_body%20blue_eyes\\`\r\n  -   默认查询根据作者查询：\\`/booru/mmda/tags/user:xxxx\\``,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const baseUrl = 'https://mmda.booru.org';\r\n    const tags = ctx.req.param('tags');\r\n\r\n    const query = queryString.stringify(\r\n        {\r\n            tags,\r\n            page: 'post',\r\n            s: 'list',\r\n        },\r\n        {\r\n            skipNull: true,\r\n        }\r\n    );\r\n\r\n    const { data: response } = await got(`${baseUrl}/index.php`, {\r\n        searchParams: query,\r\n    });\r\n\r\n    const $ = load(response);\r\n    const list = $('#post-list > div.content > div > div:nth-child(3) span')\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n            const a = item.find('a').first();\r\n\r\n            const scriptStr = item.find('script[type=\"text/javascript\"]').first().text();\r\n            const user = scriptStr.match(/user':'(.*?)'/)?.[1] ?? '';\r\n\r\n            const title = a.find('img').first().attr('title') ?? '';\r\n            const imageSrc = a.find('img').first().attr('src') ?? '';\r\n\r\n            return {\r\n                title,\r\n                link: `${baseUrl}/${a.attr('href')}`,\r\n                image: imageSrc,\r\n                author: user,\r\n                description: art(path.join(__dirname, 'templates/description.art'), {\r\n                    title,\r\n                    image: imageSrc,\r\n                    by: user,\r\n                }),\r\n            };\r\n        });\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const { data: response } = await got(item.link);\r\n                const $ = load(response);\r\n\r\n                // 获取左侧的Statistics统计信息\r\n                const statisticsTages = $('#tag_list > ul');\r\n                statisticsTages.find('li, br, strong').remove();\r\n                const statisticsStr = statisticsTages.text();\r\n\r\n                const regex = /(?<key>[^\\s:]+)\\s*:\\s*(?<value>.+)/gm;\r\n                const result = {};\r\n                for (const match of statisticsStr.matchAll(regex)) {\r\n                    const { key, value } = match.groups ?? ({} as { key: string; value: string });\r\n                    result[key.trim().toLocaleLowerCase()] = value.trim();\r\n                }\r\n\r\n                // 获取大图\r\n                const bigImage = $('#image').attr('src');\r\n\r\n                // 获取发布时间\r\n                if (result.posted) {\r\n                    item.pubDate = parseDate(result.posted);\r\n                }\r\n\r\n                item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                    title: item.title,\r\n                    image: bigImage ?? item.image,\r\n                    posted: item.pubDate ?? '',\r\n                    by: result.by,\r\n                    source: result.source,\r\n                    rating: result.rating,\r\n                    score: result.score,\r\n                });\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: tags,\r\n        link: `${baseUrl}/index.php?${query}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"ofAUA,MAAa,EAAe,CACxB,KAAM,oBACN,WAAY,CAAC,WACb,QAAS,yCACT,WAAY,CAAE,KAAM,8DACpB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,aAAc,GACd,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,8BAGjB,KAAM,kBACN,YAAa,CAAC,SACd,UACA,YAAa,uNAQjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAU,yBACV,EAAO,EAAI,IAAI,MAAM,QAErB,EAAQ,EAAY,UACtB,CACI,OACA,KAAM,OACN,EAAG,QAEP,CACI,SAAU,KAIZ,CAAE,KAAM,GAAa,MAAM,EAAI,GAAG,EAAQ,YAAa,CACzD,aAAc,IAGZ,EAAI,EAAK,GACT,EAAO,EAAE,0DACV,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GACT,IAAM,EAAI,EAAK,KAAK,KAAK,QAEnB,EAAY,EAAK,KAAK,kCAAkC,QAAQ,OAChE,EAAO,EAAU,MAAM,mBAAmB,IAAM,GAEhD,EAAQ,EAAE,KAAK,OAAO,QAAQ,KAAK,UAAY,GAC/C,EAAW,EAAE,KAAK,OAAO,QAAQ,KAAK,QAAU,GAEtD,MAAO,CACH,QACA,KAAM,GAAG,EAAQ,GAAG,EAAE,KAAK,UAC3B,MAAO,EACP,OAAQ,EACR,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,QACA,MAAO,EACP,GAAI,OAKd,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACN,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,GAAM,CAAE,KAAM,GAAa,MAAM,EAAI,EAAK,MACpC,EAAI,EAAK,GAGT,EAAkB,EAAE,kBAC1B,EAAgB,KAAK,kBAAkB,SACvC,IAAM,EAAgB,EAAgB,OAEhC,EAAQ,uCACR,EAAS,GACf,IAAK,IAAM,KAAS,EAAc,SAAS,GAAQ,CAC/C,GAAM,CAAE,MAAK,SAAU,EAAM,QAAW,GACxC,EAAO,EAAI,OAAO,qBAAuB,EAAM,OAInD,IAAM,EAAW,EAAE,UAAU,KAAK,OAiBlC,OAdI,EAAO,SACP,EAAK,QAAU,EAAU,EAAO,SAGpC,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,MAAO,EAAK,MACZ,MAAO,GAAY,EAAK,MACxB,OAAQ,EAAK,SAAW,GACxB,GAAI,EAAO,GACX,OAAQ,EAAO,OACf,OAAQ,EAAO,OACf,MAAO,EAAO,QAGX,MAKnB,MAAO,CACH,MAAO,EACP,KAAM,GAAG,EAAQ,aAAa,IAC9B,KAAM"}