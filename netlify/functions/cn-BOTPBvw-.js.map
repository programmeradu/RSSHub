{"version":3,"file":"cn-BOTPBvw-.js","names":["q","p","route: Route"],"sources":["../../lib/routes/linkedin/cn/renderer.ts","../../lib/routes/linkedin/cn/utils.ts","../../lib/routes/linkedin/cn/index.ts"],"sourcesContent":["const text_tag = {\r\n    LINE_BREAK: 0,\r\n    INLINE_CODE: 1,\r\n    LEGACY_PUBLISHING_EMPHASIS: 2,\r\n    LIST_ITEM: 3,\r\n    LIST: 4,\r\n    STRIKETHROUGH: 5,\r\n    SUBSCRIPT: 6,\r\n    SUPERSCRIPT: 7,\r\n    UNDERLINE: 8,\r\n    BOLD: 9,\r\n    ITALIC: 10,\r\n    PARAGRAPH: 11,\r\n};\r\n\r\nclass TreeNode {\r\n    constructor(attr) {\r\n        this.attr = attr;\r\n        this.start = attr.start;\r\n        this.end = attr.start + attr.length;\r\n        this.children = [];\r\n    }\r\n}\r\nclass Ucs2Text {\r\n    constructor(text) {\r\n        if (Array.isArray(text)) {\r\n            this.string = null;\r\n            this.codePoints = text;\r\n        } else {\r\n            this.string = text;\r\n            const k = text.length;\r\n            const d = [];\r\n\r\n            let l,\r\n                e,\r\n                m = 0;\r\n            while (m < k) {\r\n                l = text.charCodeAt(m++);\r\n                if (l >= 55296 && l <= 56319 && m < k) {\r\n                    e = text.charCodeAt(m++);\r\n                    if (56320 === (64512 & e)) {\r\n                        d.push(((1023 & l) << 10) + (1023 & e) + 65536);\r\n                    } else {\r\n                        d.push(l);\r\n                        m--;\r\n                    }\r\n                } else {\r\n                    d.push(l);\r\n                }\r\n            }\r\n\r\n            this.codePoints = d;\r\n        }\r\n        this.length = this.codePoints.length;\r\n    }\r\n    substring(start, end) {\r\n        let _len = this.length,\r\n            _start = start,\r\n            _end = end;\r\n        if (_end === 0) {\r\n            return new Ucs2Text('');\r\n        }\r\n        if (((Number.isNaN(_start) || 0 > _start) && (_start = 0), (Number.isNaN(_end) || 0 > _end) && (_end = _len), _start > _len && (_start = _len), _end > _len && (_end = _len), _end < _start)) {\r\n            _len = [_start, _end];\r\n            _end = _len[0];\r\n            _start = _len[1];\r\n        }\r\n        return new Ucs2Text(_start === _end ? '' : this.codePoints.slice(_start, _end));\r\n    }\r\n    slice(a, b) {\r\n        return this.substring(a, b).toString();\r\n    }\r\n    toString() {\r\n        return null === this.string\r\n            ? this.codePoints\r\n                  .map((a) => {\r\n                      let b = '';\r\n                      return (65535 < a && ((b += String.fromCharCode((((a -= 65536) >>> 10) & 1023) | 55296)), (a = 1023 & (56320 | a))), b + String.fromCharCode(a));\r\n                  })\r\n                  .join('')\r\n            : this.string;\r\n    }\r\n}\r\n\r\nconst renderSingle = (node) => {\r\n    const style = node?.attr?.detailData?.style;\r\n    switch (style) {\r\n        case 'BOLD':\r\n            return `<b>${node.text}</b>`;\r\n        case 'LINE_BREAK':\r\n            return `<br>`;\r\n        case 'LIST_ITEM':\r\n            return `<li>${node.text}</li>`;\r\n        case 'LIST':\r\n            return `<ul>${node.text}</ul>`;\r\n        case 'INLINE_CODE':\r\n            return `<code>${node.text}</code>`;\r\n        case 'LEGACY_PUBLISHING_EMPHASIS':\r\n            return `<em>${node.text}</em>`;\r\n        case 'STRIKETHROUGH':\r\n            return `<s>${node.text}</s>`;\r\n        case 'SUBSCRIPT':\r\n            return `<sub>${node.text}</sub>`;\r\n        case 'SUPERSCRIPT':\r\n            return `<sup>${node.text}</sup>`;\r\n        case 'UNDERLINE':\r\n            return `<u>${node.text}</u>`;\r\n        case 'ITALIC':\r\n            return `<i>${node.text}</i>`;\r\n        case 'PARAGRAPH':\r\n            return `<p>${node.text}</p>`;\r\n        default:\r\n            return node.text || node;\r\n    }\r\n};\r\n\r\nconst parseAttr = (description) => {\r\n    const { attributes, text } = description;\r\n    const attrs = [...attributes];\r\n    attrs.sort((b, d) => {\r\n        const f = b.start + b.length,\r\n            e = d.start + d.length;\r\n        return f === e ? text_tag[b.detailData.style] - text_tag[d.detailData.style] : f - e;\r\n    });\r\n    const n = [];\r\n    for (const q of attrs) {\r\n        const p = new TreeNode(q);\r\n        const w = q.start;\r\n        while (0 < n.length && n.at(-1).attr.start >= w) {\r\n            p.children.push(n.pop());\r\n        }\r\n        p.children.reverse();\r\n        n.push(p);\r\n    }\r\n\r\n    const m = new Ucs2Text(text);\r\n\r\n    const render = (node) => {\r\n        // DFS render\r\n        if (node.children.length === 0) {\r\n            node.text = m.slice(node.start, node.end);\r\n            return renderSingle(node);\r\n        }\r\n        const res = [];\r\n        let s = node.start;\r\n        for (const child of node.children) {\r\n            if (s < child.start) {\r\n                res.push(m.slice(s, child.start)); // added text before 1st child node\r\n            }\r\n            s = child.end;\r\n            res.push(render(child));\r\n        }\r\n\r\n        if (s < node.end) {\r\n            res.push(m.slice(s, node.end)); // added text after the last child node\r\n        }\r\n        node.text = res.join('');\r\n        return renderSingle(node);\r\n    };\r\n\r\n    const q = [];\r\n    let p = 0;\r\n    for (const e of n) {\r\n        // BFS render\r\n        if (e.start > p) {\r\n            q.push(m.slice(p, e.start));\r\n        }\r\n        p = e.end;\r\n        q.push(render(e));\r\n    }\r\n    if (p < m.length) {\r\n        q.push(m.slice(p));\r\n    }\r\n    return q.join('');\r\n};\r\n\r\nexport { parseAttr };\r\n","import cache from '@/utils/cache';\r\nimport crypto from 'node:crypto';\r\nimport path from 'node:path';\r\nimport { art } from '@/utils/render';\r\nimport got from '@/utils/got';\r\nimport { parseAttr } from './renderer';\r\n\r\nconst apiUrl = 'https://www.linkedin.cn/karpos/api/graphql';\r\nconst searchHitQueryId = 'searchSearchHitsByJob.be362cd720abd0ebf89b4bbc3253047f';\r\nconst jobPostingQueryId = 'jobsJobPostingsById.3b9573e88687a86607ddb74ff013ef50';\r\n\r\nconst makeHeader = () => {\r\n    const sessionId = crypto.randomBytes(8).toString('hex').slice(0, 8);\r\n    const headers = {\r\n        Accept: '*/*',\r\n        Cookie: `JSESSIONID=\"ajax:${sessionId}\"`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Referer: 'https://www.linkedin.cn/incareer/jobs/search',\r\n        'csrf-token': `ajax:${sessionId}`,\r\n        'x-http-method-override': 'GET',\r\n        'x-restli-protocol-version': '2.0.0',\r\n    };\r\n    return headers;\r\n};\r\n\r\nconst period = {\r\n    1: 'r86400',\r\n    7: 'r604800',\r\n    30: 'r2592000',\r\n};\r\n\r\nconst location = {\r\n    china: '102890883',\r\n    shanghai: '102772228',\r\n    beijing: '103873152',\r\n};\r\n\r\nconst makeVariables = (variables) =>\r\n    '(' +\r\n    Object.entries(variables)\r\n        .filter(([, v]) => v)\r\n        .map(([k, v]) => `${k}:${encodeURIComponent(v)}`)\r\n        .join(',') +\r\n    ')';\r\n\r\nconst makeBody = (body) => {\r\n    let output = '';\r\n    for (const [index, [key, value]] of Object.entries(body).entries()) {\r\n        output += `${key}=${value}`;\r\n        if (index < Object.keys(body).length - 1) {\r\n            output += '&';\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\nconst ctxToTitle = (ctx) => {\r\n    const keywords = ctx.req.param('keywords');\r\n    const { geo, remote, location, period, relevant } = ctx.req.query();\r\n    const g = location || geo || 'China';\r\n    const r = remote ? '远程' : '';\r\n    const p = period ? `近${period}天` : '';\r\n    const o = relevant ? '相关' : '最新';\r\n    return `${o}${p}在${g}的${keywords || ''}${r}工作机会`;\r\n};\r\n\r\nconst parseSearchHit = async (ctx) => {\r\n    const variables = {\r\n        origin: 'jserp',\r\n        isForRemoteJobsPage: !!ctx.req.query('remote'),\r\n        isChinaMultiNationalCorporation: false,\r\n        count: ctx.req.query('limit') || 20,\r\n        start: '0',\r\n        geoUrn: `urn:li:ks_geo:${location[ctx.req.query('location')] || ctx.req.query('geo') || location.china}`,\r\n        keywords: decodeURIComponent(ctx.req.param('keywords') || ''),\r\n        f_TPR: period[ctx.req.query('period')] || '',\r\n        sortType: ctx.req.query('relevant') ? '' : 'DATE_DESCENDING',\r\n    };\r\n\r\n    const resp = await got.post(apiUrl, {\r\n        headers: makeHeader(),\r\n        body: makeBody({\r\n            operationName: 'searchSearchHitsByJob',\r\n            variables: makeVariables(variables),\r\n            queryId: searchHitQueryId,\r\n        }),\r\n    });\r\n\r\n    return {\r\n        jobs: resp.data.data.searchSearchHitsByJob.elements.map((e) => e.target.jobPosting),\r\n        title: ctxToTitle(ctx),\r\n    };\r\n};\r\n\r\nconst parseJobPosting = (ctx, jobPosting) => {\r\n    const entityUrn = jobPosting.entityUrn;\r\n    return cache.tryGet(`linkedincn:${entityUrn}`, async () => {\r\n        const resp = await got.post(apiUrl, {\r\n            headers: makeHeader(),\r\n            body: makeBody({\r\n                operationName: 'jobViewPage',\r\n                variables: makeVariables({\r\n                    jobPostingUrn: entityUrn,\r\n                }),\r\n                queryId: jobPostingQueryId,\r\n            }),\r\n        });\r\n        const job = resp.data.data.jobsJobPostingsById;\r\n        job.desc = parseAttr(job.description);\r\n        return {\r\n            title: `${jobPosting.companyName} 正在找 ${jobPosting.title}`,\r\n            link: `https://www.linkedin.cn/incareer/jobs/view/${entityUrn.split(':').pop()}`,\r\n            guid: `linkedincn:${entityUrn}`,\r\n            description: art(path.join(__dirname, '../templates/cn/posting.art'), job),\r\n            pubDate: jobPosting.listedAt,\r\n        };\r\n    });\r\n};\r\n\r\nexport { parseSearchHit, parseJobPosting };\r\n","import { Route } from '@/types';\r\nimport { parseSearchHit, parseJobPosting } from './utils';\r\n\r\nconst siteUrl = 'https://www.linkedin.cn/incareer/jobs/search';\r\n\r\nexport const route: Route = {\r\n    path: '/cn/jobs/:keywords?',\r\n    categories: ['other'],\r\n    example: '/linkedin/cn/jobs/Software',\r\n    parameters: { keywords: '搜索关键字' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Jobs',\r\n    maintainers: ['bigfei'],\r\n    handler,\r\n    description: `另外，可以通过添加额外的以下 query 参数来输出满足特定要求的工作职位：\r\n\r\n| 参数       | 描述                                              | 举例                                                    | 默认值  |\r\n| ---------- | ------------------------------------------------- | ------------------------------------------------------- | ------- |\r\n| \\`geo\\`      | geo 编码                                          | 102890883（中国）、102772228（上海）、103873152（北京） | 空      |\r\n| \\`remote\\`   | 是否只显示远程工作                                | \\`true/false\\`                                            | \\`false\\` |\r\n| \\`location\\` | 工作地点                                          | \\`china/shanghai/beijing\\`                                | 空      |\r\n| \\`relevant\\` | 排序方式 (true: 按相关性排序，false： 按日期排序) | \\`true/false\\`                                            | \\`false\\` |\r\n| \\`period\\`   | 发布时间                                          | \\`1/7/30\\`                                                | 空      |\r\n\r\n  例如：\r\n  [\\`/linkedin/cn/jobs/Software?location=shanghai&period=1\\`](https://rsshub.app/linkedin/cn/jobs/Software?location=shanghai\\&period=1): 查找所有在上海的今日发布的所有 Software 工作\r\n\r\n  **为了方便起见，建议您在 [LinkedIn.cn](https://www.linkedin.cn/incareer/jobs/search) 上进行搜索，并使用 [RSSHub Radar](https://github.com/DIYgod/RSSHub-Radar) 加载特定的 feed。**`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { title, jobs } = await parseSearchHit(ctx);\r\n    const items = await Promise.all(jobs.map((job) => parseJobPosting(ctx, job)));\r\n    return {\r\n        title: `领英 - ${title}`,\r\n        link: siteUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"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"}