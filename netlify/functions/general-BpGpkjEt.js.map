{"version":3,"file":"general-BpGpkjEt.js","names":[],"sources":["../../lib/routes/gov/general/general.ts"],"sourcesContent":["import { getSubPath } from '@/utils/common-utils';\r\nimport cache from '@/utils/cache';\r\n// 来人拯救一下啊( >﹏<。)\r\n// 待做功能：\r\n// 1. 传入和处理\r\n//         [] index.php?c=category&id=12\r\n// 2. 处理其他网站链接\r\n//         [] 其他政府网站\r\n// 3. 添加视频内容\r\n//         [] 示例1: http://www.dianbai.gov.cn/ywdt/dbyw/content/post_1091433.html\r\n// 4. 处理网站功能\r\n//        [] hdjlpt 互动交流\r\n\r\n// 使用方法\r\n// import { gdgov } from '../general/general';\r\n//\r\n// export default async (ctx) => {\r\n//     const info = {\r\n//         pathstartat: 1,                                              // 网站放到子目录时使用，默认为0。如 www.yunfu.gov.cn/yfsrmzf/jcxxgk/zcfg/zcjd 为一层子目录则使用 1。\r\n//         defaultPath: 'zwgk/zcjd/',                                   // 默认路径。假设网址是 a.b.gov.cn/c/d/ 则输入 c/d/。访问 gov/b/a/ 时使用默认路径，访问 gov/b/a/c/d/ 则为指定路径。\r\n//         name_element: 'SiteName, ColumnName',                        // 网站名，默认使用网页标题。\r\n//         name_match_type: 'meta',                                     // 网站名类型。可选 meta（从 <meta> 中获取 content 里面的内容）、name（name_element 就是网站名）、element（选择元素从中获取文本）。\r\n//         name_match: '(.*)',                                          // 网站名类型为 element 时使用的匹配内容。\r\n//         name_join: '—',                                             // 网站名为 meta 或 element 时，如有多个选择器找到内容，将这里的字符串放到这些内容之间。\r\n//         list_element: '.news_list li a',                             // 页面列表中选择具体到 a。element 都是填写 CSS 选择器。\r\n//         list_include: 'site',                                        // 筛选列表中的页面，会生成选择器添加到 list_element 中。可选 all（包含全部）、site（仅限本站）。\r\n//         title_element: '.content_title',                             // 正文的标题，默认使用 <meta name=\"ArticleTitle\" content=\"*\">\r\n//         title_match: '(.*)',                                         // 使用正则匹配选择器获取到的文本。match 都是填写正则表达式。\r\n//         description_element: '#zoomcon',                             // 正文。\r\n//         author_element: undefined,                                   // 正文来源，一般是某某网站、某某媒体，默认使用 <meta name=\"ContentSource\" content=\"*\">。\r\n//         author_match: undefined,                                     // 匹配正文来源。\r\n//         authorisme: '茂名市电白区人民政府网',                        // 作者是 本网 等内容时改成这里的文本。\r\n//         pubDate_element: 'publishtime',                              // 发布时间，默认使用 <meta name=\"PubDate\" content=\"*\">。\r\n//         pubDate_match: '(.*)',                                       // 匹配发布时间。\r\n//         pubDate_format: undefined                                    // 发布时间的格式。\r\n//     };\r\n//     await gdgov(info, ctx);\r\n// };\r\n\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nimport { art } from '@/utils/render';\r\nimport { finishArticleItem } from '@/utils/wechat-mp';\r\n\r\nconst gdgov = async (info, ctx) => {\r\n    const path = getSubPath(ctx)\r\n        .split('/')\r\n        .filter((item) => item !== '');\r\n    const [site, branch] = path;\r\n\r\n    // 网站\r\n    const pathstartat = info.pathstartat === undefined ? 0 : info.pathstartat;\r\n    let rootUrl = 'http://' + branch + '.' + site + '.gov.cn';\r\n    for (let index = 0; index < pathstartat; index++) {\r\n        const element = path[index + 2];\r\n        rootUrl = rootUrl + '/' + element;\r\n    }\r\n\r\n    // 默认路径\r\n    const defaultPath = info.defaultPath;\r\n\r\n    // 网站名\r\n    let name_element = info.name_element;\r\n    const name_match_type = info.name_match_type;\r\n    const name_match = info.name_match;\r\n    const name_join = info.name_join;\r\n\r\n    // 列表元素\r\n    let list_element = info.list_element;\r\n    let list_include = info.list_include;\r\n    if (list_element === undefined) {\r\n        list_element = 'a[href*=\"content\"]';\r\n        list_include = 'site';\r\n    }\r\n    if (list_include === 'site') {\r\n        list_element = list_element.split(',').filter((item) => item !== '');\r\n        for (let index = 0; index < list_element.length; index++) {\r\n            list_element[index] += '[href*=\"' + rootUrl.slice(7) + '\"]';\r\n        }\r\n        list_element = list_element.join(',');\r\n    }\r\n\r\n    // 标题元素\r\n    let title_element = info.title_element;\r\n    let title_match = info.title_match;\r\n\r\n    // 作者（来源）元素\r\n    const author_element = info.author_element;\r\n    const author_match = info.author_match;\r\n    const authorisme = info.authorisme;\r\n\r\n    // 正文\r\n    let description_element = info.description_element;\r\n\r\n    // 发布时间元素\r\n    let pubDate_element = info.pubDate_element;\r\n    let pubDate_match = info.pubDate_match;\r\n    let pubDate_format = info.pubDate_format;\r\n\r\n    path.splice(0, 2 + pathstartat);\r\n    let pathname = path.join('/');\r\n    pathname = pathname === '' ? defaultPath : pathname.endsWith('/') ? pathname : pathname + '/';\r\n    const currentUrl = `${rootUrl}/${pathname}`;\r\n\r\n    let $ = '';\r\n    let name = '';\r\n    let list = '';\r\n    // 判断是否处于特殊目录\r\n    if (pathname.startsWith('gkmlpt')) {\r\n        title_element = undefined;\r\n        title_match = undefined;\r\n        description_element = 'div[class=\"article-content\"]';\r\n        pubDate_element = undefined;\r\n        pubDate_match = undefined;\r\n        pubDate_format = undefined;\r\n\r\n        const res = await got(`${rootUrl}/gkmlpt/api/all/0`);\r\n        name = authorisme + '政府信息公开平台';\r\n        list = res.data.articles.filter((item) => item.url.includes('content'));\r\n    } else {\r\n        const res = await got(currentUrl);\r\n        const dataArray = res.data;\r\n        $ = load(dataArray);\r\n        switch (name_match_type) {\r\n            case 'name':\r\n                name = name_element;\r\n                break;\r\n            case 'meta':\r\n                name_element = name_element.split(',').filter((item) => item !== '');\r\n                for (let index = 0; index < name_element.length; index++) {\r\n                    name_element[index] = $('meta[name=\"' + name_element[index].trim() + '\"]').attr('content');\r\n                }\r\n                name = name_element.join(name_join);\r\n                break;\r\n            case 'element':\r\n                name_element = name_element.split(',').filter((item) => item !== '');\r\n                for (let index = 0; index < name_element.length; index++) {\r\n                    name_element[index] = $(name_element[index].trim()).text().match(name_match)[1];\r\n                }\r\n                name = name_element.join(name_join);\r\n                break;\r\n            default:\r\n                name = $('head title').text();\r\n                break;\r\n        }\r\n        list = $(list_element);\r\n    }\r\n\r\n    const lists = list.map((i, item) => {\r\n        let link = '';\r\n\r\n        if (pathname.startsWith('gkmlpt')) {\r\n            link = i.url;\r\n        } else {\r\n            link = $(item).attr('href');\r\n            // 判断获取到的链接是否完整，不完整则补全。\r\n            if (!link.startsWith('http')) {\r\n                link.startsWith('/') ? (link = `${rootUrl}${link}`) : (link = `${rootUrl}/${link}`);\r\n            }\r\n        }\r\n\r\n        return link;\r\n    });\r\n\r\n    const items = await Promise.all(\r\n        lists.map((link) => {\r\n            const idlink = new URL(link);\r\n\r\n            if (idlink.pathname === '/zcjdpt') {\r\n                // http://www.dg.gov.cn/zcjdpt?id=4798\r\n                // http://smzj.maoming.gov.cn/zcjdpt?id=4595\r\n                // http://fgj.maoming.gov.cn/zcjdpt?id=4993\r\n                // https://zcjd.cloud.gd.gov.cn/api/home/article?id=4993\r\n                return cache.tryGet(link, async () => {\r\n                    const zcjdlink = 'https://zcjd.cloud.gd.gov.cn/api/home/article' + idlink.search;\r\n                    const response = await got(zcjdlink);\r\n                    const data = response.data.data;\r\n                    for (let index = 0; index < data.jie_du_items.length; index++) {\r\n                        data.jie_du_items[index].jd_content = data.jie_du_items[index].jd_content.replaceAll(/((\\n {4})|(\\n))/g, '</p><p style=\"font-size: 16px;line-height: 32px;text-indent: 2em;\">');\r\n                    }\r\n\r\n                    return {\r\n                        link,\r\n                        title: data.art_title,\r\n                        description: art(path.join(__dirname, 'templates/zcjdpt.art'), data),\r\n                        pubDate: timezone(parseDate(data.pub_time), +8),\r\n                        author: /(本|本网|本站)/.test(data.pub_unite) ? authorisme : data.pub_unite,\r\n                    };\r\n                });\r\n            } else if (idlink.host === 'mp.weixin.qq.com') {\r\n                return finishArticleItem({ link });\r\n            } else {\r\n                return cache.tryGet(link, async () => {\r\n                    // 获取网页\r\n                    const { data: res } = await got(link);\r\n                    const content = load(res);\r\n\r\n                    // 获取来源\r\n                    let author = '';\r\n                    author = author_element === undefined ? content('meta[name=\"ContentSource\"]').attr('content') : content(author_element).text().trim().match(author_match)[1].trim().replaceAll(/(-*$)/g, '');\r\n\r\n                    // 获取发布时间\r\n                    let pubDate = '';\r\n                    pubDate = pubDate_element === undefined ? content('meta[name=\"PubDate\"]').attr('content') : content(pubDate_element).text().trim().match(pubDate_match)[1].trim().replaceAll(/(-*$)/g, '');\r\n\r\n                    // 获取标题\r\n                    let title = '';\r\n                    title = title_element === undefined ? content('meta[name=\"ArticleTitle\"]').attr('content') : content(title_element).text().trim().match(title_match)[1];\r\n                    // 获取正文\r\n                    const description_content = description_element.split(',').filter((item) => item !== '');\r\n                    for (let index = 0; index < description_content.length; index++) {\r\n                        description_content[index] = content(description_content[index].trim()).html();\r\n                    }\r\n                    const description = description_content.join('');\r\n\r\n                    return {\r\n                        link,\r\n                        title,\r\n                        description,\r\n                        pubDate: timezone(parseDate(pubDate, pubDate_format), +8),\r\n                        author: /本|本网|本站/.test(author) ? authorisme : author,\r\n                    };\r\n                });\r\n            }\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: name,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n};\r\n\r\nexport { gdgov };\r\n"],"mappings":"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"}