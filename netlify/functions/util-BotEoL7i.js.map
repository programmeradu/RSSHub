{"version":3,"file":"util-BotEoL7i.js","names":["got"],"sources":["../../lib/routes/gov/chinamine-safety/util.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst rootUrl = 'https://www.chinamine-safety.gov.cn';\r\n\r\n/**\r\n * Process the item list and return the resulting array.\r\n *\r\n * @param {Object[]} items - The items to process.\r\n * @param {Function} tryGet - The tryGet function that handles the retrieval process.\r\n * @returns {Promise<Object[]>} - A promise that resolves to an array of processed items.\r\n */\r\nconst processItems = async (items, tryGet) =>\r\n    await Promise.all(\r\n        items.map((item) =>\r\n            tryGet(item.link, async () => {\r\n                if (!item.link.endsWith('html')) {\r\n                    return item;\r\n                }\r\n\r\n                const { data: detailResponse } = await got(item.link);\r\n\r\n                const content = load(detailResponse);\r\n\r\n                item.title = item.title || content('title').text();\r\n                item.description = content('div.TRS_Editor, div.TRS_UEDITOR, div.content').html();\r\n                item.author = content('meta[name=\"ContentSource\"]').prop('content');\r\n                item.category = [\r\n                    ...new Set(\r\n                        [\r\n                            ...(content('meta[name=\"keywords\"]').prop('content')?.split(/,/) ?? []),\r\n                            content('meta[name=\"ColumnName\"]').prop('content'),\r\n                            ...(content('meta[name=\"ColumnKeywords\"]').prop('content')?.split(/,/) ?? []),\r\n                            content('meta[name=\"ColumnType\"]').prop('content'),\r\n                        ].filter(Boolean)\r\n                    ),\r\n                ];\r\n                item.pubDate = timezone(parseDate(content('meta[name=\"PubDate\"]').prop('content')), +8);\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n/**\r\n * Fetch data from the specified URL.\r\n *\r\n * @param {cheerio.CheerioAPI} $ - The cheerio.CheerioAPI.\r\n * @param {string} url - The URL to fetch data from.\r\n * @returns {Promise<Object>} A promise that resolves to an object containing the fetched data\r\n *                            to be added into `ctx.state.data`.\r\n */\r\nconst fetchData = ($, currentUrl) => {\r\n    const image = new URL('zfxxgk/images/P020210105557462473306.png', rootUrl).href;\r\n    const icon = new URL($('link[rel=\"shortcut icon\"]').prop('href'), currentUrl).href;\r\n\r\n    return {\r\n        title: $('title').text(),\r\n        link: currentUrl,\r\n        description: $('meta[name=\"ColumnDescription\"]').prop('content') || $('meta[name=\"Description\"]').prop('content'),\r\n        language: 'zh',\r\n        image,\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('meta[name=\"ColumnName\"]').prop('content'),\r\n        author: $('meta[name=\"SiteName\"]').prop('content'),\r\n    };\r\n};\r\n\r\nexport { rootUrl, processItems, fetchData };\r\n"],"mappings":"sLAKA,MAAM,EAAU,sCASV,EAAe,MAAO,EAAO,IAC/B,MAAM,QAAQ,IACV,EAAM,IAAK,GACP,EAAO,EAAK,KAAM,SAAY,CAC1B,GAAI,CAAC,EAAK,KAAK,SAAS,QACpB,OAAO,EAGX,GAAM,CAAE,KAAM,GAAmB,MAAMA,EAAI,EAAK,MAE1C,EAAU,EAAK,GAiBrB,MAfA,GAAK,MAAQ,EAAK,OAAS,EAAQ,SAAS,OAC5C,EAAK,YAAc,EAAQ,gDAAgD,OAC3E,EAAK,OAAS,EAAQ,8BAA8B,KAAK,WACzD,EAAK,SAAW,CACZ,GAAG,IAAI,IACH,CACI,GAAI,EAAQ,yBAAyB,KAAK,YAAY,MAAM,MAAQ,GACpE,EAAQ,2BAA2B,KAAK,WACxC,GAAI,EAAQ,+BAA+B,KAAK,YAAY,MAAM,MAAQ,GAC1E,EAAQ,2BAA2B,KAAK,YAC1C,OAAO,WAGjB,EAAK,QAAU,EAAS,EAAU,EAAQ,wBAAwB,KAAK,YAAa,GAE7E,MAajB,GAAa,EAAG,IAAe,CACjC,IAAM,EAAQ,IAAI,IAAI,2CAA4C,GAAS,KACrE,EAAO,IAAI,IAAI,EAAE,6BAA6B,KAAK,QAAS,GAAY,KAE9E,MAAO,CACH,MAAO,EAAE,SAAS,OAClB,KAAM,EACN,YAAa,EAAE,kCAAkC,KAAK,YAAc,EAAE,4BAA4B,KAAK,WACvG,SAAU,KACV,QACA,OACA,KAAM,EACN,SAAU,EAAE,2BAA2B,KAAK,WAC5C,OAAQ,EAAE,yBAAyB,KAAK"}