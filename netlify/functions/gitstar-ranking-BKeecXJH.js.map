{"version":3,"file":"gitstar-ranking-BKeecXJH.js","names":[],"sources":["../../lib/routes/gitstar-ranking/index.ts"],"sourcesContent":["import { type Data, type DataItem, type Route, ViewType } from '@/types';\r\n\r\nimport { art } from '@/utils/render';\r\nimport ofetch from '@/utils/ofetch';\r\n\r\nimport { type CheerioAPI, type Cheerio, load } from 'cheerio';\r\nimport type { Element } from 'domhandler';\r\nimport { type Context } from 'hono';\r\nimport path from 'node:path';\r\n\r\nexport const handler = async (ctx: Context): Promise<Data> => {\r\n    const { category = 'repositories' } = ctx.req.param();\r\n    const limit: number = Number.parseInt(ctx.req.query('limit') ?? '100', 10);\r\n\r\n    const baseUrl: string = 'https://gitstar-ranking.com';\r\n    const targetUrl: string = new URL(category, baseUrl).href;\r\n\r\n    const response = await ofetch(targetUrl);\r\n    const $: CheerioAPI = load(response);\r\n    const language = $('html').attr('lang') ?? 'en';\r\n\r\n    const items: DataItem[] = $('a.list-group-item')\r\n        .slice(0, limit)\r\n        .toArray()\r\n        .map((el): Element => {\r\n            const $el: Cheerio<Element> = $(el);\r\n\r\n            const stargazersCount: number = Number($el.find('span.stargazers_count').text()?.trim());\r\n            const title: string = $el.find('span.hidden-xs').text()?.trim();\r\n            const image: string | undefined = $el.find('img.avatar_image_big').attr('src');\r\n            const language: string | undefined = $el.find('div.repo-language').text()?.trim();\r\n            const description: string | undefined = art(path.join(__dirname, 'templates/description.art'), {\r\n                images: image\r\n                    ? [\r\n                          {\r\n                              src: image,\r\n                              alt: title,\r\n                          },\r\n                      ]\r\n                    : undefined,\r\n                stargazersCount,\r\n                language,\r\n                description: $el.find('div.repo-description').text()?.trim(),\r\n            });\r\n            const linkUrl: string | undefined = $el.attr('href');\r\n            const categories: string[] = language ? [language] : [];\r\n            const guid: string = `gitstar-ranking-${title}-${stargazersCount}`;\r\n\r\n            const processedItem: DataItem = {\r\n                title: `${title} ‚≠ê${stargazersCount}`,\r\n                description,\r\n                link: linkUrl ? new URL(linkUrl, baseUrl).href : undefined,\r\n                category: categories,\r\n                guid,\r\n                id: guid,\r\n                content: {\r\n                    html: description,\r\n                    text: description,\r\n                },\r\n                image,\r\n                banner: image,\r\n                language,\r\n            };\r\n\r\n            return processedItem;\r\n        });\r\n\r\n    const title: string = $('title').text();\r\n\r\n    return {\r\n        title,\r\n        description: title.split(/-/)[0],\r\n        link: targetUrl,\r\n        item: items,\r\n        allowEmpty: true,\r\n        author: title.split(/-/).pop()?.trim(),\r\n        language,\r\n        id: $('meta[property=\"og:url\"]').attr('content'),\r\n    };\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/:category?',\r\n    name: 'Ranking',\r\n    url: 'gitstar-ranking.com',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    example: '/gitstar-ranking/repositories',\r\n    parameters: {\r\n        category: {\r\n            description: 'Category, Repositories by default',\r\n            options: [\r\n                {\r\n                    label: 'Users',\r\n                    value: 'users',\r\n                },\r\n                {\r\n                    label: 'Organizations',\r\n                    value: 'organizations',\r\n                },\r\n                {\r\n                    label: 'Repositories',\r\n                    value: 'repositories',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    description: `:::tip\r\nTo subscribe to [Repositories](https://gitstar-ranking.com/repositories), where the source URL is \\`https://gitstar-ranking.com/repositories\\`, extract the certain parts from this URL to be used as parameters, resulting in the route as [\\`/gitstar-ranking/repositories\\`](https://rsshub.app/gitstar-ranking/repositories).\r\n:::\r\n\r\n| Category                                                   | ID                                                                |\r\n| ---------------------------------------------------------- | ----------------------------------------------------------------- |\r\n| [Users](https://gitstar-ranking.com/users)                 | [users](https://rsshub.app/gitstar-ranking/users)                 |\r\n| [Organizations](https://gitstar-ranking.com/organizations) | [organizations](https://rsshub.app/gitstar-ranking/organizations) |\r\n| [Repositories](https://gitstar-ranking.com/repositories)   | [repositories](https://rsshub.app/gitstar-ranking/repositories)   |\r\n`,\r\n    categories: ['programming'],\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['gitstar-ranking.com/:category'],\r\n            target: '/:category',\r\n        },\r\n        {\r\n            title: 'Users',\r\n            source: ['gitstar-ranking.com/users'],\r\n            target: '/users',\r\n        },\r\n        {\r\n            title: 'Organizations',\r\n            source: ['gitstar-ranking.com/organizations'],\r\n            target: '/organizations',\r\n        },\r\n        {\r\n            title: 'Repositories',\r\n            source: ['gitstar-ranking.com/repositories'],\r\n            target: '/repositories',\r\n        },\r\n    ],\r\n    view: ViewType.Articles,\r\n};\r\n"],"mappings":"yWAUA,MAAa,EAAU,KAAO,IAAgC,CAC1D,GAAM,CAAE,WAAW,gBAAmB,EAAI,IAAI,QACxC,EAAgB,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,MAAO,IAEjE,EAAkB,8BAClB,EAAoB,IAAI,IAAI,EAAU,GAAS,KAE/C,EAAW,MAAM,EAAO,GACxB,EAAgB,EAAK,GACrB,EAAW,EAAE,QAAQ,KAAK,SAAW,KAErC,EAAoB,EAAE,qBACvB,MAAM,EAAG,GACT,UACA,IAAK,GAAgB,CAClB,IAAM,EAAwB,EAAE,GAE1B,EAA0B,OAAO,EAAI,KAAK,yBAAyB,QAAQ,QAC3E,EAAgB,EAAI,KAAK,kBAAkB,QAAQ,OACnD,EAA4B,EAAI,KAAK,wBAAwB,KAAK,OAClE,EAA+B,EAAI,KAAK,qBAAqB,QAAQ,OACrE,EAAkC,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAC3F,OAAQ,EACF,CACI,CACI,IAAK,EACL,IAAK,IAGb,IAAA,GACN,kBACA,SAAA,EACA,YAAa,EAAI,KAAK,wBAAwB,QAAQ,SAEpD,EAA8B,EAAI,KAAK,QACvC,EAAuB,EAAW,CAAC,GAAY,GAC/C,EAAe,mBAAmB,EAAM,GAAG,IAE3C,EAA0B,CAC5B,MAAO,GAAG,EAAM,IAAI,IACpB,cACA,KAAM,EAAU,IAAI,IAAI,EAAS,GAAS,KAAO,IAAA,GACjD,SAAU,EACV,OACA,GAAI,EACJ,QAAS,CACL,KAAM,EACN,KAAM,GAEV,QACA,OAAQ,EACR,SAAA,GAGJ,OAAO,IAGT,EAAgB,EAAE,SAAS,OAEjC,MAAO,CACH,QACA,YAAa,EAAM,MAAM,KAAK,GAC9B,KAAM,EACN,KAAM,EACN,WAAY,GACZ,OAAQ,EAAM,MAAM,KAAK,OAAO,OAChC,WACA,GAAI,EAAE,2BAA2B,KAAK,aAIjC,EAAe,CACxB,KAAM,cACN,KAAM,UACN,IAAK,sBACL,YAAa,CAAC,WACd,UACA,QAAS,gCACT,WAAY,CACR,SAAU,CACN,YAAa,oCACb,QAAS,CACL,CACI,MAAO,QACP,MAAO,SAEX,CACI,MAAO,gBACP,MAAO,iBAEX,CACI,MAAO,eACP,MAAO,mBAKvB,YAAa;;;;;;;;;EAUb,WAAY,CAAC,eACb,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,aAAc,GACd,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,iCACT,OAAQ,cAEZ,CACI,MAAO,QACP,OAAQ,CAAC,6BACT,OAAQ,UAEZ,CACI,MAAO,gBACP,OAAQ,CAAC,qCACT,OAAQ,kBAEZ,CACI,MAAO,eACP,OAAQ,CAAC,oCACT,OAAQ,kBAGhB,KAAM,EAAS"}