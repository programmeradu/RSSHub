{"version":3,"file":"zhuanlan-D1S8m117.js","names":["route: Route","got","description","item","$","title","pubDate: Date"],"sources":["../../lib/routes/zhihu/zhuanlan.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { getSignedHeader, header } from './utils';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/zhuanlan/:id',\r\n    categories: ['social-media'],\r\n    example: '/zhihu/zhuanlan/googledevelopers',\r\n    parameters: { id: '专栏 id，可在专栏主页 URL 中找到' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'ZHIHU_COOKIES',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['zhuanlan.zhihu.com/:id'],\r\n        },\r\n    ],\r\n    name: '专栏',\r\n    maintainers: ['DIYgod'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    // 知乎专栏链接存在两种格式, 一种以 'zhuanlan.' 开头, 另一种新增的以 'c_' 结尾\r\n    let url = `https://zhuanlan.zhihu.com/${id}`;\r\n    if (id.search('c_') === 0) {\r\n        url = `https://www.zhihu.com/column/${id}`;\r\n    }\r\n\r\n    const signedHeader = await getSignedHeader(url, `/api/v4/columns/${id}/items`);\r\n    const listRes = await got({\r\n        method: 'get',\r\n        url: `https://www.zhihu.com/api/v4/columns/${id}/items`,\r\n        headers: {\r\n            ...signedHeader,\r\n            Referer: `https://zhuanlan.zhihu.com/${id}`,\r\n        },\r\n    });\r\n\r\n    const pinnedRes = await got({\r\n        method: 'get',\r\n        url: `https://www.zhihu.com/api/v4/columns/${id}/pinned-items/v2`,\r\n        headers: {\r\n            ...header,\r\n            ...signedHeader,\r\n            Referer: `https://zhuanlan.zhihu.com/${id}`,\r\n        },\r\n    });\r\n\r\n    listRes.data.data = [...listRes.data.data, ...pinnedRes.data.data];\r\n\r\n    const infoRes = await got(url, {\r\n        headers: {\r\n            ...signedHeader,\r\n            Referer: url,\r\n        },\r\n    });\r\n    const $ = load(infoRes.data);\r\n    const title = $('.css-zyehvu').text();\r\n    const description = $('.css-1bnklpv').text();\r\n\r\n    const item = listRes.data.data.map((item) => {\r\n        // 当专栏内文章内容不含任何文字时, 返回空字符, 以免直接报错\r\n        let description = '';\r\n        if (item.content) {\r\n            const $ = load(item.content);\r\n            description = $.html();\r\n        }\r\n        $('img').css('max-width', '100%');\r\n\r\n        let title = '';\r\n        let link = '';\r\n        let author = '';\r\n        let pubDate: Date;\r\n\r\n        switch (item.type) {\r\n            case 'answer':\r\n                title = item.question.title;\r\n                author = item.question.author ? item.question.author.name : '';\r\n                link = `https://www.zhihu.com/question/${item.question.id}/answer/${item.id}`;\r\n                pubDate = parseDate(item.created_time * 1000);\r\n\r\n                break;\r\n\r\n            case 'article':\r\n                title = item.title;\r\n                link = item.url;\r\n                author = item.author.name;\r\n                pubDate = parseDate(item.created * 1000);\r\n\r\n                break;\r\n\r\n            case 'zvideo':\r\n                // 如果类型是zvideo，id即为视频地址参数\r\n                title = item.title;\r\n                link = `https://www.zhihu.com/zvideo/${item.id}`;\r\n                author = item.author.name;\r\n                pubDate = parseDate(item.created_at * 1000);\r\n                // 判断是否存在视频简介\r\n                description = item.description ? `${item.description} <br> <br> <a href=\"${link}\">视频内容请跳转至原页面观看</a>` : `<a href=\"${link}\">视频内容请跳转至原页面观看</a>`;\r\n\r\n                break;\r\n\r\n            default:\r\n                throw new Error(`Unknown type: ${item.type}`);\r\n        }\r\n        return {\r\n            title,\r\n            link,\r\n            description,\r\n            pubDate,\r\n            author,\r\n        };\r\n    });\r\n\r\n    return {\r\n        description,\r\n        item,\r\n        title: `知乎专栏-${title}`,\r\n        link: url,\r\n    };\r\n}\r\n"],"mappings":"4aAMA,MAAaA,EAAe,CACxB,KAAM,gBACN,WAAY,CAAC,gBACb,QAAS,mCACT,WAAY,CAAE,GAAI,wBAClB,SAAU,CACN,cAAe,CACX,CACI,KAAM,gBACN,YAAa,KAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,4BAGjB,KAAM,KACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MAErB,EAAM,8BAA8B,IACpC,EAAG,OAAO,QAAU,IACpB,EAAM,gCAAgC,KAG1C,IAAM,EAAe,MAAM,EAAgB,EAAK,mBAAmB,EAAG,SAChE,EAAU,MAAMC,EAAI,CACtB,OAAQ,MACR,IAAK,wCAAwC,EAAG,QAChD,QAAS,CACL,GAAG,EACH,QAAS,8BAA8B,OAIzC,EAAY,MAAMA,EAAI,CACxB,OAAQ,MACR,IAAK,wCAAwC,EAAG,kBAChD,QAAS,CACL,GAAG,EACH,GAAG,EACH,QAAS,8BAA8B,OAI/C,EAAQ,KAAK,KAAO,CAAC,GAAG,EAAQ,KAAK,KAAM,GAAG,EAAU,KAAK,MAE7D,IAAM,EAAU,MAAMA,EAAI,EAAK,CAC3B,QAAS,CACL,GAAG,EACH,QAAS,KAGX,EAAI,EAAK,EAAQ,MACjB,EAAQ,EAAE,eAAe,OACzB,EAAc,EAAE,gBAAgB,OAEhC,EAAO,EAAQ,KAAK,KAAK,IAAK,GAAS,CAEzC,IAAIC,EAAc,GAClB,GAAIC,EAAK,QAAS,CACd,IAAMC,EAAI,EAAKD,EAAK,SACpB,EAAcC,EAAE,OAEpB,EAAE,OAAO,IAAI,YAAa,QAE1B,IAAIC,EAAQ,GACR,EAAO,GACP,EAAS,GACTC,EAEJ,OAAQH,EAAK,KAAb,CACI,IAAK,SACD,EAAQA,EAAK,SAAS,MACtB,EAASA,EAAK,SAAS,OAASA,EAAK,SAAS,OAAO,KAAO,GAC5D,EAAO,kCAAkCA,EAAK,SAAS,GAAG,UAAUA,EAAK,KACzE,EAAU,EAAUA,EAAK,aAAe,KAExC,MAEJ,IAAK,UACD,EAAQA,EAAK,MACb,EAAOA,EAAK,IACZ,EAASA,EAAK,OAAO,KACrB,EAAU,EAAUA,EAAK,QAAU,KAEnC,MAEJ,IAAK,SAED,EAAQA,EAAK,MACb,EAAO,gCAAgCA,EAAK,KAC5C,EAASA,EAAK,OAAO,KACrB,EAAU,EAAUA,EAAK,WAAa,KAEtC,EAAcA,EAAK,YAAc,GAAGA,EAAK,YAAY,sBAAsB,EAAK,qBAAuB,YAAY,EAAK,qBAExH,MAEJ,QACI,MAAU,MAAM,iBAAiBA,EAAK,QAE9C,MAAO,CACH,MAAA,EACA,OACA,YAAA,EACA,UACA,YAIR,MAAO,CACH,cACA,OACA,MAAO,QAAQ,IACf,KAAM"}