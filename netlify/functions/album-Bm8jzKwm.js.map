{"version":3,"file":"album-Bm8jzKwm.js","names":[],"sources":["../../lib/routes/18comic/album.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { defaultDomain, getApiUrl, getRootUrl, processApiItems } from './utils';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport cache from '@/utils/cache';\r\n\r\nexport const route: Route = {\r\n    path: '/album/:id',\r\n    categories: ['anime'],\r\n    example: '/18comic/album/292282',\r\n    parameters: { id: '专辑 id，可在专辑页 URL 中找到' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['jmcomic.group/'],\r\n        },\r\n    ],\r\n    name: '专辑',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    url: 'jmcomic.group/',\r\n    description: `::: tip\r\n  专辑 id 不包括 URL 中标题的部分。\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const { domain = defaultDomain } = ctx.req.query();\r\n    const rootUrl = getRootUrl(domain);\r\n    const currentUrl = `${rootUrl}/album/${id}`;\r\n\r\n    const apiUrl = `${getApiUrl()}/album?id=${id}`;\r\n\r\n    const apiResult = await processApiItems(apiUrl);\r\n\r\n    const category = apiResult.tags;\r\n    const author = apiResult.author.join(', ');\r\n    const description = apiResult.description;\r\n    const addTime = apiResult.addtime;\r\n    let results: any[] = [];\r\n    if (apiResult.series.length === 0) {\r\n        results.push({\r\n            title: apiResult.name,\r\n            link: `${rootUrl}/photo/${id}`,\r\n            guid: `${rootUrl}/photo/${id}`,\r\n            updated: new Date(addTime * 1000),\r\n            pubDate: new Date(addTime * 1000),\r\n            category,\r\n            author,\r\n            description: art(path.join(__dirname, 'templates/description.art'), {\r\n                introduction: description,\r\n                // 不取图片，因为专辑的图片会被分割排序，所以只取封面图\r\n                images: [`https://cdn-msp3.${domain}/media/albums/${id}_3x4.jpg`],\r\n                cover: `https://cdn-msp3.${domain}/media/albums/${id}_3x4.jpg`,\r\n                category,\r\n            }),\r\n        });\r\n    } else {\r\n        results = await Promise.all(\r\n            apiResult.series.map((item, index) =>\r\n                cache.tryGet(`18comic:album:${item.id}`, async () => {\r\n                    const chapterApiUrl = `${getApiUrl()}/chapter?id=${item.id}`;\r\n                    const chapterResult = await processApiItems(chapterApiUrl);\r\n                    const result = {};\r\n                    const chapterNum = index + 1;\r\n                    result.title = `第${String(chapterNum)}話 ${item.name === '' ? `${String(chapterNum)}` : item.name}`;\r\n                    result.link = `${rootUrl}/photo/${item.id}`;\r\n                    result.guid = `${rootUrl}/photo/${item.id}`;\r\n                    result.updated = new Date(chapterResult.addtime * 1000);\r\n                    result.pubDate = addTime;\r\n                    result.category = category;\r\n                    result.author = author;\r\n                    result.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                        introduction: description,\r\n                        // 不取图片，因为专辑的图片会被分割排序，所以只取封面图\r\n                        images: [`https://cdn-msp3.${domain}/media/albums/${item.id}_3x4.jpg`],\r\n                        cover: `https://cdn-msp3.${domain}/media/albums/${item.id}_3x4.jpg`,\r\n                        category,\r\n                    });\r\n                    return result;\r\n                })\r\n            )\r\n        );\r\n        results = results.toReversed();\r\n    }\r\n\r\n    return {\r\n        title: `${apiResult.name} - 禁漫天堂`,\r\n        link: currentUrl.replace(/\\?$/, ''),\r\n        item: results,\r\n        allowEmpty: true,\r\n        description,\r\n    };\r\n}\r\n"],"mappings":"wjBAMA,MAAa,EAAe,CACxB,KAAM,aACN,WAAY,CAAC,SACb,QAAS,wBACT,WAAY,CAAE,GAAI,uBAClB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,oBAGjB,KAAM,KACN,YAAa,CAAC,WACd,UACA,IAAK,iBACL,YAAa;;MAKjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MACnB,CAAE,SAAS,GAAkB,EAAI,IAAI,QACrC,EAAU,EAAW,GACrB,EAAa,GAAG,EAAQ,SAAS,IAEjC,EAAS,GAAG,IAAY,YAAY,IAEpC,EAAY,MAAM,EAAgB,GAElC,EAAW,EAAU,KACrB,EAAS,EAAU,OAAO,KAAK,MAC/B,EAAc,EAAU,YACxB,EAAU,EAAU,QACtB,EAAiB,GA+CrB,OA9CI,EAAU,OAAO,SAAW,EAC5B,EAAQ,KAAK,CACT,MAAO,EAAU,KACjB,KAAM,GAAG,EAAQ,SAAS,IAC1B,KAAM,GAAG,EAAQ,SAAS,IAC1B,QAAS,IAAI,KAAK,EAAU,KAC5B,QAAS,IAAI,KAAK,EAAU,KAC5B,WACA,SACA,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,aAAc,EAEd,OAAQ,CAAC,oBAAoB,EAAO,gBAAgB,EAAG,WACvD,MAAO,oBAAoB,EAAO,gBAAgB,EAAG,UACrD,gBAIR,EAAU,MAAM,QAAQ,IACpB,EAAU,OAAO,KAAK,EAAM,IACxB,EAAM,OAAO,iBAAiB,EAAK,KAAM,SAAY,CACjD,IAAM,EAAgB,GAAG,IAAY,cAAc,EAAK,KAClD,EAAgB,MAAM,EAAgB,GACtC,EAAS,GACT,EAAa,EAAQ,EAe3B,MAdA,GAAO,MAAQ,IAAI,OAAO,GAAY,IAAI,EAAK,OAAS,GAAK,GAAG,OAAO,KAAgB,EAAK,OAC5F,EAAO,KAAO,GAAG,EAAQ,SAAS,EAAK,KACvC,EAAO,KAAO,GAAG,EAAQ,SAAS,EAAK,KACvC,EAAO,QAAU,IAAI,KAAK,EAAc,QAAU,KAClD,EAAO,QAAU,EACjB,EAAO,SAAW,EAClB,EAAO,OAAS,EAChB,EAAO,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACxE,aAAc,EAEd,OAAQ,CAAC,oBAAoB,EAAO,gBAAgB,EAAK,GAAG,WAC5D,MAAO,oBAAoB,EAAO,gBAAgB,EAAK,GAAG,UAC1D,aAEG,MAInB,EAAU,EAAQ,cAGf,CACH,MAAO,GAAG,EAAU,KAAK,SACzB,KAAM,EAAW,QAAQ,MAAO,IAChC,KAAM,EACN,WAAY,GACZ"}