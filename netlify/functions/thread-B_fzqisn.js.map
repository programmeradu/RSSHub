{"version":3,"file":"thread-B_fzqisn.js","names":[],"sources":["../../lib/routes/lkong/thread.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nimport { viewThread, countReplies } from './query';\r\n\r\nexport const route: Route = {\r\n    path: '/thread/:id',\r\n    radar: [\r\n        {\r\n            source: ['lkong.com/thread/:id', 'lkong.com/'],\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: ['nczitzk', 'ma6254'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n\r\n    const rootUrl = 'https://www.lkong.com';\r\n    const apiUrl = 'https://api.lkong.com/api';\r\n    const currentUrl = `${rootUrl}/thread/${id}`;\r\n\r\n    const countResponse = await got({\r\n        method: 'post',\r\n        url: apiUrl,\r\n        json: countReplies(id),\r\n    });\r\n\r\n    if (countResponse.data.errors) {\r\n        throw new Error(countResponse.data.errors[0].message);\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'post',\r\n        url: apiUrl,\r\n        json: viewThread(id, Math.ceil(countResponse.data.data.thread.replies / 20)),\r\n    });\r\n\r\n    const items = response.data.data.posts.map((item) => ({\r\n        guid: item.pid,\r\n        author: item.user.name,\r\n        title: `#${item.lou} ${item.user.name}`,\r\n        link: `${rootUrl}/thread/${id}?pid=${item.pid}`,\r\n        pubDate: parseDate(item.dateline),\r\n        description:\r\n            (item.quote\r\n                ? art(path.join(__dirname, 'templates/quote.art'), {\r\n                      target: `${rootUrl}/thread/${id}?pid=${item.quote.pid}`,\r\n                      author: item.quote.author.name,\r\n                      content: art(path.join(__dirname, 'templates/content.art'), {\r\n                          content: JSON.parse(item.quote.content),\r\n                      }),\r\n                  })\r\n                : '') +\r\n            art(path.join(__dirname, 'templates/content.art'), {\r\n                content: JSON.parse(item.content),\r\n            }),\r\n    }));\r\n\r\n    return {\r\n        title: `${response.data.data.thread.title} - 龙空`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"wcASA,MAAa,EAAe,CACxB,KAAM,cACN,MAAO,CACH,CACI,OAAQ,CAAC,uBAAwB,gBAGzC,KAAM,UACN,YAAa,CAAC,UAAW,UACzB,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MAEnB,EAAU,wBACV,EAAS,4BACT,EAAa,GAAG,EAAQ,UAAU,IAElC,EAAgB,MAAM,EAAI,CAC5B,OAAQ,OACR,IAAK,EACL,KAAM,EAAa,KAGvB,GAAI,EAAc,KAAK,OACnB,MAAU,MAAM,EAAc,KAAK,OAAO,GAAG,SAGjD,IAAM,EAAW,MAAM,EAAI,CACvB,OAAQ,OACR,IAAK,EACL,KAAM,EAAW,EAAI,KAAK,KAAK,EAAc,KAAK,KAAK,OAAO,QAAU,OAGtE,EAAQ,EAAS,KAAK,KAAK,MAAM,IAAK,IAAU,CAClD,KAAM,EAAK,IACX,OAAQ,EAAK,KAAK,KAClB,MAAO,IAAI,EAAK,IAAI,GAAG,EAAK,KAAK,OACjC,KAAM,GAAG,EAAQ,UAAU,EAAG,OAAO,EAAK,MAC1C,QAAS,EAAU,EAAK,UACxB,aACK,EAAK,MACA,EAAI,EAAA,KAAA,EAAA,gCAA6C,CAC7C,OAAQ,GAAG,EAAQ,UAAU,EAAG,OAAO,EAAK,MAAM,MAClD,OAAQ,EAAK,MAAM,OAAO,KAC1B,QAAS,EAAI,EAAA,KAAA,EAAA,kCAA+C,CACxD,QAAS,KAAK,MAAM,EAAK,MAAM,aAGvC,IACN,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAC/C,QAAS,KAAK,MAAM,EAAK,cAIrC,MAAO,CACH,MAAO,GAAG,EAAS,KAAK,KAAK,OAAO,MAAM,OAC1C,KAAM,EACN,KAAM"}