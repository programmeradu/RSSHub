{"version":3,"file":"jobs-CTEtqCzI.js","names":["route: Route","ofetch"],"sources":["../../lib/routes/linkedin/jobs.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { EXP_LEVELS, EXP_LEVELS_QUERY_KEY, JOB_TYPES, JOB_TYPES_QUERY_KEY, KEYWORDS_QUERY_KEY, parseJobSearch, parseParamsToSearchParams, parseParamsToString, parseRouteParam } from './utils';\r\n\r\nconst BASE_URL = 'https://www.linkedin.com/';\r\nconst JOB_SEARCH_PATH = '/jobs-guest/jobs/api/seeMoreJobPostings/search';\r\n\r\nexport const route: Route = {\r\n    path: '/jobs/:job_types/:exp_levels/:keywords?/:routeParams?',\r\n    categories: ['social-media'],\r\n    view: ViewType.Notifications,\r\n    example: '/linkedin/jobs/C-P/1/software engineer',\r\n    parameters: {\r\n        job_types: \"See the following table for details, use '-' as delimiter\",\r\n        exp_levels: \"See the following table for details, use '-' as delimiter\",\r\n        keywords: 'keywords',\r\n        routeParams: 'additional query parameters, see the table below',\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.linkedin.com/jobs/search'],\r\n            // Migrate from https://github.com/DIYgod/RSSHub-Radar/blob/096589db99f993c262ec8edb51a5676325439bc5/src/lib/radar-rules.ts#L15501\r\n            target: (params, url) => {\r\n                const searchParams = new URLSearchParams(new URL(url).search);\r\n                const fJT = parseRouteParam(searchParams.get('f_JT'));\r\n                const fE = parseRouteParam(searchParams.get('f_E'));\r\n                const keywords = encodeURIComponent(searchParams.get('keywords') || '');\r\n\r\n                const newSearchParams = new URLSearchParams();\r\n                // Copy non-existent key-value pairs from searchParams to newSearchParams\r\n                for (const [key, value] of searchParams.entries()) {\r\n                    if (!['f_JT', 'f_E', 'keywords'].includes(key)) {\r\n                        newSearchParams.append(key, value);\r\n                    }\r\n                }\r\n                return `/linkedin/jobs/${fJT}/${fE}/${keywords}/?${newSearchParams.toString()}`;\r\n            },\r\n        },\r\n    ],\r\n    name: 'Jobs',\r\n    maintainers: ['BrandNewLifeJackie26', 'zhoukuncheng'],\r\n    handler,\r\n    description: `#### \\`job_types\\` list\r\n\r\n| Full Time | Part Time | Contractor | All |\r\n| --------- | --------- | ---------- | --- |\r\n| F         | P         | C          | all |\r\n\r\n#### \\`exp_levels\\` list\r\n\r\n| Intership | Entry Level | Associate | Mid-Senior Level | Director | All |\r\n| --------- | ----------- | --------- | ---------------- | -------- | --- |\r\n| 1         | 2           | 3         | 4                | 5        | all |\r\n\r\n#### \\`routeParams\\` additional query parameters\r\n\r\n##### \\`f_WT\\` list\r\n\r\n| Onsite | Remote | Hybrid |\r\n| ------ | ------- | ------ |\r\n|    1   |    2    |   3    |\r\n\r\n##### \\`geoId\\`\r\n\r\n  Geographic location ID. You can find this ID in the URL of a LinkedIn job search page that is filtered by location.\r\n\r\n  For example:\r\n  91000012 is the ID of East Asia.\r\n\r\n##### \\`f_TPR\\`\r\n\r\n  Time posted range. Here are some possible values:\r\n\r\n  *   \\`r86400\\`: Past 24 hours\r\n  *   \\`r604800\\`: Past week\r\n  *   \\`r2592000\\`: Past month\r\n\r\n  For example:\r\n\r\n  1.  If we want to search software engineer jobs of all levels and all job types, use \\`/linkedin/jobs/all/all/software engineer\\`\r\n  2.  If we want to search all entry level contractor/part time software engineer jobs, use \\`/linkedin/jobs/P-C/2/software engineer\\`\r\n  3.  If we want to search remote mid-senior level software engineer jobs in APAC posted within the last month, use \\`/linkedin/jobs/F/4/software%20engineer/f_WT=2&geoId=91000003&f_TPR=r2592000\\`\r\n\r\n  **To make it easier, the recommended way is to start a search on [LinkedIn](https://www.linkedin.com/jobs/search) and use [RSSHub Radar](https://github.com/DIYgod/RSSHub-Radar) to load the specific feed.**`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const jobTypesParam = parseParamsToSearchParams(ctx.req.param('job_types'), JOB_TYPES);\r\n    const expLevelsParam = parseParamsToSearchParams(ctx.req.param('exp_levels'), EXP_LEVELS);\r\n    const routeParams = new URLSearchParams(ctx.req.param('routeParams'));\r\n\r\n    let url = new URL(JOB_SEARCH_PATH, BASE_URL);\r\n\r\n    // keep for backward compatibility\r\n    url.searchParams.append(KEYWORDS_QUERY_KEY, ctx.req.param('keywords') || '');\r\n    url.searchParams.append(JOB_TYPES_QUERY_KEY, jobTypesParam); // see JOB_TYPES in utils.js\r\n    url.searchParams.append(EXP_LEVELS_QUERY_KEY, expLevelsParam); // see EXPERIENCE_LEVELS in utils.js\r\n\r\n    // Add route params to URL\r\n    for (const [key, value] of routeParams) {\r\n        if (!url.searchParams.has(key)) {\r\n            url.searchParams.append(key, value);\r\n        }\r\n    }\r\n    url = url.toString();\r\n\r\n    // Parse job search page\r\n    const response = await ofetch(url);\r\n    const jobs = parseJobSearch(response);\r\n\r\n    const jobTypes = parseParamsToString(ctx.req.param('job_types'), JOB_TYPES);\r\n    const expLevels = parseParamsToString(ctx.req.param('exp_levels'), EXP_LEVELS);\r\n    const feedTitle = 'LinkedIn Job Listing' + (jobTypes ? ` | Job Types: ${jobTypes}` : '') + (expLevels ? ` | Experience Levels: ${expLevels}` : '') + (ctx.req.param('keywords') ? ` | Keywords: ${ctx.req.param('keywords')}` : '');\r\n\r\n    return {\r\n        title: feedTitle,\r\n        link: url,\r\n        description: 'This feed gets LinkedIn job posts',\r\n        item: jobs.map((job) => {\r\n            const title = `${job.company} is hiring ${job.title}`;\r\n            const description = `Title: ${job.title} | Company: ${job.company} | Location: ${job.location} `;\r\n\r\n            return {\r\n                title, // item title\r\n                description, // job description\r\n                pubDate: parseDate(job.pubDate), // data publish date\r\n                link: job.link, // job source link\r\n            };\r\n        }),\r\n    };\r\n}\r\n"],"mappings":"2fAKA,MAGaA,EAAe,CACxB,KAAM,wDACN,WAAY,CAAC,gBACb,KAAM,EAAS,cACf,QAAS,yCACT,WAAY,CACR,UAAW,4DACX,WAAY,4DACZ,SAAU,WACV,YAAa,oDAEjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,gCAET,QAAS,EAAQ,IAAQ,CACrB,IAAM,EAAe,IAAI,gBAAgB,IAAI,IAAI,GAAK,QAChD,EAAM,EAAgB,EAAa,IAAI,SACvC,EAAK,EAAgB,EAAa,IAAI,QACtC,EAAW,mBAAmB,EAAa,IAAI,aAAe,IAE9D,EAAkB,IAAI,gBAE5B,IAAK,GAAM,CAAC,EAAK,KAAU,EAAa,UAC/B,CAAC,OAAQ,MAAO,YAAY,SAAS,IACtC,EAAgB,OAAO,EAAK,GAGpC,MAAO,kBAAkB,EAAI,GAAG,EAAG,GAAG,EAAS,IAAI,EAAgB,gBAI/E,KAAM,OACN,YAAa,CAAC,uBAAwB,gBACtC,UACA,YAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kNA4CjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAgB,EAA0B,EAAI,IAAI,MAAM,aAAc,GACtE,EAAiB,EAA0B,EAAI,IAAI,MAAM,cAAe,GACxE,EAAc,IAAI,gBAAgB,EAAI,IAAI,MAAM,gBAElD,EAAM,IAAI,IAAI,iDAAiB,6BAGnC,EAAI,aAAa,OAAO,EAAoB,EAAI,IAAI,MAAM,aAAe,IACzE,EAAI,aAAa,OAAO,EAAqB,GAC7C,EAAI,aAAa,OAAO,EAAsB,GAG9C,IAAK,GAAM,CAAC,EAAK,KAAU,EAClB,EAAI,aAAa,IAAI,IACtB,EAAI,aAAa,OAAO,EAAK,GAGrC,EAAM,EAAI,WAGV,IAAM,EAAW,MAAMC,EAAO,GACxB,EAAO,EAAe,GAEtB,EAAW,EAAoB,EAAI,IAAI,MAAM,aAAc,GAC3D,EAAY,EAAoB,EAAI,IAAI,MAAM,cAAe,GAC7D,EAAY,wBAA0B,EAAW,iBAAiB,IAAa,KAAO,EAAY,yBAAyB,IAAc,KAAO,EAAI,IAAI,MAAM,YAAc,gBAAgB,EAAI,IAAI,MAAM,cAAgB,IAEhO,MAAO,CACH,MAAO,EACP,KAAM,EACN,YAAa,oCACb,KAAM,EAAK,IAAK,GAAQ,CACpB,IAAM,EAAQ,GAAG,EAAI,QAAQ,aAAa,EAAI,QACxC,EAAc,UAAU,EAAI,MAAM,cAAc,EAAI,QAAQ,eAAe,EAAI,SAAS,GAE9F,MAAO,CACH,QACA,cACA,QAAS,EAAU,EAAI,SACvB,KAAM,EAAI"}