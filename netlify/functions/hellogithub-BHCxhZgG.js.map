{"version":3,"file":"hellogithub-BHCxhZgG.js","names":["route: Route","got"],"sources":["../../lib/routes/hellogithub/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\n\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst sorts = {\r\n    featured: '精选',\r\n    all: '全部',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/home/:sort?/:id?',\r\n    categories: ['programming'],\r\n    example: '/hellogithub/home',\r\n    parameters: { sort: '排序方式，见下表，默认为 `featured`，即精选', id: '标签 id，可在对应标签页 URL 中找到，默认为全部标签' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '开源项目',\r\n    maintainers: ['moke8', 'nczitzk', 'CaoMeiYouRen'],\r\n    handler,\r\n    description: `| 精选 | 全部 |\r\n| ---- | ---- |\r\n| featured  | all |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const sort = ctx.req.param('sort') ?? 'featured';\r\n    const id = ctx.req.param('id') ?? '';\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 20;\r\n\r\n    const rootUrl = 'https://hellogithub.com';\r\n    const apiRootUrl = 'https://api.hellogithub.com';\r\n    const currentUrl = `${rootUrl}/?sort_by=${sort}${id ? `&tid=${id}` : ''}`;\r\n    const apiUrl = `${apiRootUrl}/v1/?sort_by=${sort}${id ? `&tid=${id}` : ''}&page=1`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: apiUrl,\r\n    });\r\n\r\n    let tag;\r\n    if (id) {\r\n        const tagUrl = `${rootUrl}/tags/${id}`;\r\n\r\n        const tagResponse = await got({\r\n            method: 'get',\r\n            url: tagUrl,\r\n        });\r\n\r\n        const $ = load(tagResponse.data);\r\n\r\n        tag = $('meta[property=\"og:title\"]')?.attr('content')?.split(' ').pop();\r\n    }\r\n\r\n    const items = response.data.data.slice(0, limit).map((item) => ({\r\n        guid: item.item_id,\r\n        title: `${item.name}: ${item.title}`,\r\n        author: item.author,\r\n        link: `${rootUrl}/repository/${item.item_id}`,\r\n        pubDate: parseDate(item.updated_at),\r\n        name: `${item.author}/${item.name}`,\r\n        description: item.summary,\r\n        language: item.primary_lang,\r\n    }));\r\n\r\n    return {\r\n        title: `HelloGithub - ${sorts[sort]}${tag || ''}开源项目`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"oTAMA,MAAM,EAAQ,CACV,SAAU,KACV,IAAK,MAGIA,EAAe,CACxB,KAAM,oBACN,WAAY,CAAC,eACb,QAAS,oBACT,WAAY,CAAE,KAAM,8BAA+B,GAAI,iCACvD,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,OACN,YAAa,CAAC,QAAS,UAAW,gBAClC,UACA,YAAa;;sBAKjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,EAAI,IAAI,MAAM,SAAW,WAChC,EAAK,EAAI,IAAI,MAAM,OAAS,GAC5B,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,GAE3E,EAAU,0BAEV,EAAa,GAAG,EAAQ,YAAY,IAAO,EAAK,QAAQ,IAAO,KAC/D,EAAS,2CAA6B,IAAO,EAAK,QAAQ,IAAO,GAAG,SAEpE,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,IAGL,EACJ,GAAI,EAAI,CACJ,IAAM,EAAS,GAAG,EAAQ,QAAQ,IAE5B,EAAc,MAAMA,EAAI,CAC1B,OAAQ,MACR,IAAK,IAGH,EAAI,EAAK,EAAY,MAE3B,EAAM,EAAE,8BAA8B,KAAK,YAAY,MAAM,KAAK,MAGtE,IAAM,EAAQ,EAAS,KAAK,KAAK,MAAM,EAAG,GAAO,IAAK,IAAU,CAC5D,KAAM,EAAK,QACX,MAAO,GAAG,EAAK,KAAK,IAAI,EAAK,QAC7B,OAAQ,EAAK,OACb,KAAM,GAAG,EAAQ,cAAc,EAAK,UACpC,QAAS,EAAU,EAAK,YACxB,KAAM,GAAG,EAAK,OAAO,GAAG,EAAK,OAC7B,YAAa,EAAK,QAClB,SAAU,EAAK,gBAGnB,MAAO,CACH,MAAO,iBAAiB,EAAM,KAAQ,GAAO,GAAG,MAChD,KAAM,EACN,KAAM"}