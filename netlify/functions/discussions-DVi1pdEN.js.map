{"version":3,"file":"discussions-DVi1pdEN.js","names":["MarkdownIt","route: Route","ConfigNotFoundError","response","got","answered: boolean | null","closed: boolean | null","locked: boolean | null"],"sources":["../../lib/routes/github/discussions.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport MarkdownIt from 'markdown-it';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n    linkify: true,\r\n});\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/discussion/:user/:repo/:state?/:category?',\r\n    categories: ['programming'],\r\n    example: '/github/discussion/DIYgod/RSSHub',\r\n    parameters: {\r\n        user: 'User name',\r\n        repo: 'Repo name',\r\n        state: {\r\n            description: 'The state of discussions',\r\n            default: 'open',\r\n            options: [\r\n                {\r\n                    label: 'Open',\r\n                    value: 'open',\r\n                },\r\n                {\r\n                    label: 'Closed',\r\n                    value: 'closed',\r\n                },\r\n                {\r\n                    label: 'Answered',\r\n                    value: 'answered',\r\n                },\r\n                {\r\n                    label: 'Unanswered',\r\n                    value: 'unanswered',\r\n                },\r\n                {\r\n                    label: 'Locked',\r\n                    value: 'locked',\r\n                },\r\n                {\r\n                    label: 'Unlocked',\r\n                    value: 'unlocked',\r\n                },\r\n                {\r\n                    label: 'All',\r\n                    value: 'all',\r\n                },\r\n            ],\r\n        },\r\n        category: 'Category Name (case-sensitive). Default: `null`.',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'GITHUB_ACCESS_TOKEN',\r\n                description: 'GitHub Access Token',\r\n            },\r\n        ],\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['github.com/:user/:repo/discussions', 'github.com/:user/:repo/discussions/:id', 'github.com/:user/:repo'],\r\n            target: '/discussion/:user/:repo',\r\n        },\r\n    ],\r\n    name: 'Repo Discussions',\r\n    maintainers: ['waynzh'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    if (!config.github || !config.github.access_token) {\r\n        throw new ConfigNotFoundError('GitHub Discussions RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n    const { user, repo, limit, state = 'open', category = null } = ctx.req.param();\r\n    const { answered, closed, locked } = mapStateToBooleans(state);\r\n    const perPage = Math.min(Number.parseInt(limit) || 100, 100);\r\n\r\n    const host = `https://github.com/${user}/${repo}/discussions`;\r\n    const url = 'https://api.github.com/graphql';\r\n\r\n    let filters = `first: ${perPage}`;\r\n    if (answered !== null) {\r\n        filters += `, answered: ${answered}`;\r\n    }\r\n    if (category !== null) {\r\n        const response = await got({\r\n            method: 'post',\r\n            url,\r\n            headers: {\r\n                Authorization: `bearer ${config.github.access_token}`,\r\n            },\r\n            json: {\r\n                query: `\r\n                {\r\n                    repository(owner: \"${user}\", name: \"${repo}\") {\r\n                        discussionCategories(first: 25) {\r\n                            nodes {\r\n                                id,\r\n                                name,\r\n                            }\r\n                        },\r\n                    }\r\n                  }\r\n                `,\r\n            },\r\n        });\r\n        const categoryItem = response.data.data.repository.discussionCategories.nodes.find((item) => item.name === category);\r\n        filters += categoryItem?.id ? `, categoryId: \"${categoryItem.id}\"` : '';\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'post',\r\n        url,\r\n        headers: {\r\n            Authorization: `bearer ${config.github.access_token}`,\r\n        },\r\n        json: {\r\n            query: `\r\n            {\r\n                repository(owner: \"${user}\", name: \"${repo}\") {\r\n                    discussions(${filters}) {\r\n                        nodes {\r\n                            title,\r\n                            author {\r\n                                login\r\n                            },\r\n                            createdAt,\r\n                            closed,\r\n                            isAnswered,\r\n                            locked,\r\n                            body,\r\n                            url\r\n                        }\r\n                  },\r\n                }\r\n              }\r\n            `,\r\n        },\r\n    });\r\n\r\n    const data = response.data.data.repository.discussions.nodes.filter((item) => (closed === null ? item : item.closed === closed)).filter((item) => (locked === null ? item : item.locked === locked));\r\n\r\n    return {\r\n        allowEmpty: true,\r\n        title: `${user}/${repo} Discussions`,\r\n        link: host,\r\n        item: data.map((item) => ({\r\n            title: item.title,\r\n            author: item.author?.login ?? 'ghost',\r\n            description: item.body ? md.render(item.body) : 'No description',\r\n            pubDate: parseDate(item.createdAt),\r\n            link: item.url,\r\n        })),\r\n    };\r\n}\r\n\r\nfunction mapStateToBooleans(state: string) {\r\n    // 初始化布尔值\r\n    let answered: boolean | null = null;\r\n    let closed: boolean | null = null;\r\n    let locked: boolean | null = null;\r\n\r\n    // 设置布尔值，根据 state 的值\r\n    switch (state) {\r\n        case 'answered':\r\n            answered = true;\r\n            break;\r\n        case 'unanswered':\r\n            answered = false;\r\n            break;\r\n        case 'closed':\r\n            closed = true;\r\n            break;\r\n        case 'open':\r\n            closed = false;\r\n            break;\r\n        case 'locked':\r\n            locked = true;\r\n            break;\r\n        case 'unlocked':\r\n            locked = false;\r\n            break;\r\n        case 'all':\r\n        default:\r\n            // 保持 answered, closed, locked 为 null\r\n            break;\r\n    }\r\n\r\n    return { answered, closed, locked };\r\n}\r\n"],"mappings":"2YAKA,MAAM,EAAKA,EAAW,CAClB,KAAM,GACN,QAAS,KAIAC,EAAe,CACxB,KAAM,6CACN,WAAY,CAAC,eACb,QAAS,mCACT,WAAY,CACR,KAAM,YACN,KAAM,YACN,MAAO,CACH,YAAa,2BACb,QAAS,OACT,QAAS,CACL,CACI,MAAO,OACP,MAAO,QAEX,CACI,MAAO,SACP,MAAO,UAEX,CACI,MAAO,WACP,MAAO,YAEX,CACI,MAAO,aACP,MAAO,cAEX,CACI,MAAO,SACP,MAAO,UAEX,CACI,MAAO,WACP,MAAO,YAEX,CACI,MAAO,MACP,MAAO,SAInB,SAAU,oDAEd,SAAU,CACN,cAAe,CACX,CACI,KAAM,sBACN,YAAa,yBAIzB,MAAO,CACH,CACI,OAAQ,CAAC,qCAAsC,yCAA0C,0BACzF,OAAQ,4BAGhB,KAAM,mBACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAI,CAAC,EAAO,QAAU,CAAC,EAAO,OAAO,aACjC,MAAM,IAAIC,EAAoB,2JAElC,GAAM,CAAE,OAAM,OAAM,QAAO,QAAQ,OAAQ,WAAW,MAAS,EAAI,IAAI,QACjE,CAAE,WAAU,SAAQ,UAAW,EAAmB,GAClD,EAAU,KAAK,IAAI,OAAO,SAAS,IAAU,IAAK,KAElD,EAAO,sBAAsB,EAAK,GAAG,EAAK,cAC1C,EAAM,iCAER,EAAU,UAAU,IAIxB,GAHI,IAAa,OACb,GAAW,eAAe,KAE1B,IAAa,KAAM,CACnB,IAAMC,EAAW,MAAMC,EAAI,CACvB,OAAQ,OACR,MACA,QAAS,CACL,cAAe,UAAU,EAAO,OAAO,gBAE3C,KAAM,CACF,MAAO;;yCAEkB,EAAK,YAAY,EAAK;;;;;;;;;qBAYjD,EAAeD,EAAS,KAAK,KAAK,WAAW,qBAAqB,MAAM,KAAM,GAAS,EAAK,OAAS,GAC3G,GAAW,GAAc,GAAK,kBAAkB,EAAa,GAAG,GAAK,GAGzE,IAAM,EAAW,MAAMC,EAAI,CACvB,OAAQ,OACR,MACA,QAAS,CACL,cAAe,UAAU,EAAO,OAAO,gBAE3C,KAAM,CACF,MAAO;;qCAEkB,EAAK,YAAY,EAAK;kCACzB,EAAQ;;;;;;;;;;;;;;;;iBAoBhC,EAAO,EAAS,KAAK,KAAK,WAAW,YAAY,MAAM,OAAQ,GAAU,IAAW,KAAO,EAAO,EAAK,SAAW,GAAS,OAAQ,GAAU,IAAW,KAAO,EAAO,EAAK,SAAW,GAE5L,MAAO,CACH,WAAY,GACZ,MAAO,GAAG,EAAK,GAAG,EAAK,cACvB,KAAM,EACN,KAAM,EAAK,IAAK,IAAU,CACtB,MAAO,EAAK,MACZ,OAAQ,EAAK,QAAQ,OAAS,QAC9B,YAAa,EAAK,KAAO,EAAG,OAAO,EAAK,MAAQ,iBAChD,QAAS,EAAU,EAAK,WACxB,KAAM,EAAK,QAKvB,SAAS,EAAmB,EAAe,CAEvC,IAAIC,EAA2B,KAC3BC,EAAyB,KACzBC,EAAyB,KAG7B,OAAQ,EAAR,CACI,IAAK,WACD,EAAW,GACX,MACJ,IAAK,aACD,EAAW,GACX,MACJ,IAAK,SACD,EAAS,GACT,MACJ,IAAK,OACD,EAAS,GACT,MACJ,IAAK,SACD,EAAS,GACT,MACJ,IAAK,WACD,EAAS,GACT,MACJ,IAAK,MACL,QAEI,MAGR,MAAO,CAAE,WAAU,SAAQ"}