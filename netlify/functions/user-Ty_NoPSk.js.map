{"version":3,"file":"user-Ty_NoPSk.js","names":[],"sources":["../../lib/routes/rattibha/user.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { config } from '@/config';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport path from 'node:path';\r\nimport { getCurrentPath } from '@/utils/helpers';\r\nimport { art } from '@/utils/render';\r\n\r\nconst __dirname = getCurrentPath(import.meta.url);\r\n\r\nexport const route: Route = {\r\n    path: '/user/:user',\r\n    categories: ['social-media'],\r\n    example: '/rattibha/user/elonmusk',\r\n    parameters: { user: 'Twitter username, without @' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['rattibha.com/:user'],\r\n        },\r\n    ],\r\n    name: 'User Threads',\r\n    maintainers: ['yshalsager'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const baseUrl = 'https://rattibha.com';\r\n    const { user: twitterUser } = ctx.req.param();\r\n\r\n    const userData = await cache.tryGet(`rattibha:user:${twitterUser}`, async () => {\r\n        const data = await ofetch(`${baseUrl}/user`, {\r\n            query: { id: twitterUser },\r\n        });\r\n        return data.user;\r\n    });\r\n\r\n    const userThreads = await cache.tryGet(\r\n        `rattibha:userThreads:${twitterUser}`,\r\n        () =>\r\n            ofetch(`${baseUrl}/u_threads`, {\r\n                query: {\r\n                    id: userData.account_user_id,\r\n                    page: 0,\r\n                    post_type: 0,\r\n                },\r\n            }),\r\n        config.cache.routeExpire,\r\n        false\r\n    );\r\n\r\n    // extract the relevant data from the API response\r\n    const items = userThreads.map((item) => ({\r\n        title: item.thread.t.info.text.split('\\n')[0],\r\n        link: `${baseUrl}/thread/${item.thread_id}`,\r\n        pubDate: parseDate(item.thread.created_at),\r\n        updated: parseDate(item.thread.updated_at),\r\n        author: userData.name,\r\n        category: item.thread.categories.map((category) => category.tag.name),\r\n        description: art(path.join(__dirname, 'templates/description.art'), {\r\n            text: item.thread.t.info.text.replaceAll('\\n', '<br>'),\r\n            media: item.thread.m,\r\n        }),\r\n    }));\r\n\r\n    return {\r\n        title: `سلاسل تغريدات ${twitterUser}`,\r\n        link: `${baseUrl}/${twitterUser}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"gaASA,MAAM,EAAY,EAAe,OAAO,KAAK,KAEhC,EAAe,CACxB,KAAM,cACN,WAAY,CAAC,gBACb,QAAS,0BACT,WAAY,CAAE,KAAM,+BACpB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,wBAGjB,KAAM,eACN,YAAa,CAAC,cACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAU,uBACV,CAAE,KAAM,GAAgB,EAAI,IAAI,QAEhC,EAAW,MAAM,EAAM,OAAO,iBAAiB,IAAe,SAAY,CAC5E,IAAM,EAAO,MAAM,EAAO,GAAG,EAAQ,OAAQ,CACzC,MAAO,CAAE,GAAI,KAEjB,OAAO,EAAK,OAGV,EAAc,MAAM,EAAM,OAC5B,wBAAwB,QAEpB,EAAO,GAAG,EAAQ,YAAa,CAC3B,MAAO,CACH,GAAI,EAAS,gBACb,KAAM,EACN,UAAW,KAGvB,EAAO,MAAM,YACb,IAIE,EAAQ,EAAY,IAAK,IAAU,CACrC,MAAO,EAAK,OAAO,EAAE,KAAK,KAAK,MAAM;GAAM,GAC3C,KAAM,GAAG,EAAQ,UAAU,EAAK,YAChC,QAAS,EAAU,EAAK,OAAO,YAC/B,QAAS,EAAU,EAAK,OAAO,YAC/B,OAAQ,EAAS,KACjB,SAAU,EAAK,OAAO,WAAW,IAAK,GAAa,EAAS,IAAI,MAChE,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,KAAM,EAAK,OAAO,EAAE,KAAK,KAAK,WAAW;EAAM,QAC/C,MAAO,EAAK,OAAO,OAI3B,MAAO,CACH,MAAO,iBAAiB,IACxB,KAAM,GAAG,EAAQ,GAAG,IACpB,KAAM"}