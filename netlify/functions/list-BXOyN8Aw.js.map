{"version":3,"file":"list-BXOyN8Aw.js","names":["route: Route","ConfigNotFoundError","ofetch"],"sources":["../../lib/routes/readwise/list.ts"],"sourcesContent":["import ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { Route } from '@/types';\r\nimport { config } from '@/config';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/list/:routeParams?',\r\n    categories: ['reading'],\r\n    example: '/readwise/list/location=new&category=article',\r\n    parameters: { routeParams: 'Parameter combinations, see the description above.' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'READWISE_ACCESS_TOKEN',\r\n                optional: false,\r\n                description: 'Visit `https://readwise.io/access_token` to get your access token.',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['read.readwise.io'],\r\n            target: '/list',\r\n        },\r\n    ],\r\n    name: 'Reader Document List',\r\n    maintainers: ['xbot'],\r\n    handler,\r\n    description: `Specify options (in the format of query string) in parameter \\`routeParams\\` to filter documents.\r\n\r\n| Parameter                  | Description                                                                            |   Values                                                                                    |  Default                             |\r\n| -------------------------- | -------------------------------------------------------------------------------------- |   ----------------------------------------------------------------------------------------- |  ----------------------------------- |\r\n| \\`location\\`               | The document's location.                                                               |   \\`new\\`/\\`later\\`/\\`shortlist\\`/\\`archive\\`/\\`feed\\`                                      |                                      |\r\n| \\`category\\`               | The document's category.                                                               |   \\`article\\`/\\`email\\`/\\`rss\\`/\\`highlight\\`/\\`note\\`/\\`pdf\\`/\\`epub\\`/\\`tweet\\`/\\`video\\` |                                      |\r\n| \\`updatedAfter\\`           | Fetch only documents updated after this date.                                          |   string (formatted as ISO 8601 date)                                                       ||\r\n| \\`tag\\`                    | The document's tag, can be specified once or multiple times.                           |||\r\n| \\`tagStrategy\\`            | If multiple tags are specified, should the documents match all of them or any of them. |   \\`any\\`/\\`all\\`                                                                           |  \\`any\\`                             |\r\n\r\nCustomise parameter values to fetch specific documents, for example:\r\n\r\n\\`\\`\\`\r\nhttps://rsshub.app/readwise/list/location=new&category=article\r\n\\`\\`\\`\r\n\r\nfetches articles in the Inbox.\r\n\r\n\\`\\`\\`\r\nhttps://rsshub.app/readwise/list/category=article&tag=shortlist&tag=AI&tagStrategy=all\r\n\\`\\`\\`\r\n\r\nfetches articles tagged both by \\`shortlist\\` and \\`AI\\`. `,\r\n};\r\n\r\nconst TAG_STRATEGY_ALL = 'all'; // Items with tags matching all the given ones can then be returned.\r\nconst TAG_STRATEGY_ANY = 'any'; // Items with tags matching any of the given ones can be returned.\r\n\r\nasync function handler(ctx) {\r\n    if (!config.readwise || !config.readwise.accessToken) {\r\n        throw new ConfigNotFoundError('Readwise access token is missing');\r\n    }\r\n\r\n    let apiUrl = 'https://readwise.io/api/v3/list/?';\r\n    let tag, tagStrategy;\r\n\r\n    if (ctx.req.param('routeParams')) {\r\n        const urlSearchParams = new URLSearchParams(ctx.req.param('routeParams'));\r\n\r\n        const location = urlSearchParams.get('location');\r\n        const category = urlSearchParams.get('category');\r\n        const updatedAfter = urlSearchParams.get('updatedAfter');\r\n\r\n        tag = urlSearchParams.get('tag');\r\n        tagStrategy = urlSearchParams.get('tagStrategy') === TAG_STRATEGY_ANY || urlSearchParams.get('tagStrategy') === TAG_STRATEGY_ALL ? urlSearchParams.get('tagStrategy') : TAG_STRATEGY_ANY;\r\n\r\n        if (location) {\r\n            apiUrl += `location=${location}&`;\r\n        }\r\n        if (category) {\r\n            apiUrl += `category=${category}&`;\r\n        }\r\n        if (updatedAfter) {\r\n            apiUrl += `updatedAfter=${updatedAfter}&`;\r\n        }\r\n    }\r\n\r\n    const fullData = [];\r\n\r\n    async function fetchNextPage(url) {\r\n        const response = await ofetch(url, {\r\n            headers: {\r\n                Authorization: `Token ${config.readwise.accessToken}`,\r\n            },\r\n        });\r\n\r\n        fullData.push(...response.results);\r\n\r\n        if (response.nextPageCursor) {\r\n            await fetchNextPage(apiUrl + `pageCursor=${response.nextPageCursor}`);\r\n        }\r\n    }\r\n\r\n    await fetchNextPage(apiUrl);\r\n\r\n    const items = fullData\r\n        .filter((item) => {\r\n            if (!tag) {\r\n                return true; // No tag filter applied\r\n            }\r\n\r\n            // Check if item.tags exist and match the criteria based on tagStrategy\r\n            const itemTags = item.tags;\r\n\r\n            if (!itemTags) {\r\n                return false; // If item has no tags and tag filter is applied, exclude it\r\n            }\r\n\r\n            if (Array.isArray(tag)) {\r\n                if (tagStrategy === TAG_STRATEGY_ANY) {\r\n                    // Filter if any of the tags match\r\n                    return tag.some((t) => Object.values(itemTags).some((tagObj) => tagObj.name === t));\r\n                } else if (tagStrategy === TAG_STRATEGY_ALL) {\r\n                    // Filter if all tags match\r\n                    return tag.every((t) => Object.values(itemTags).some((tagObj) => tagObj.name === t));\r\n                }\r\n            } else {\r\n                const tagName = tag;\r\n                return Object.values(itemTags).some((tagObj) => tagObj.name === tagName);\r\n            }\r\n\r\n            return false;\r\n        })\r\n        .map((item) => ({\r\n            title: item.title,\r\n            link: item.source_url,\r\n            description: item.summary,\r\n            pubDate: parseDate(item.created_at),\r\n            author: item.author,\r\n        }));\r\n\r\n    return {\r\n        allowEmpty: true,\r\n        title: 'Readwise Reader',\r\n        link: 'https://read.readwise.io',\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"2TAMA,MAAaA,EAAe,CACxB,KAAM,sBACN,WAAY,CAAC,WACb,QAAS,+CACT,WAAY,CAAE,YAAa,sDAC3B,SAAU,CACN,cAAe,CACX,CACI,KAAM,wBACN,SAAU,GACV,YAAa,uEAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,oBACT,OAAQ,UAGhB,KAAM,uBACN,YAAa,CAAC,QACd,UACA,YAAa,s9DA4BjB,eAAe,EAAQ,EAAK,CACxB,GAAI,CAAC,EAAO,UAAY,CAAC,EAAO,SAAS,YACrC,MAAM,IAAIC,EAAoB,oCAGlC,IAAI,EAAS,oCACT,EAAK,EAET,GAAI,EAAI,IAAI,MAAM,eAAgB,CAC9B,IAAM,EAAkB,IAAI,gBAAgB,EAAI,IAAI,MAAM,gBAEpD,EAAW,EAAgB,IAAI,YAC/B,EAAW,EAAgB,IAAI,YAC/B,EAAe,EAAgB,IAAI,gBAEzC,EAAM,EAAgB,IAAI,OAC1B,EAAc,EAAgB,IAAI,iBAAmB,OAAoB,EAAgB,IAAI,iBAAmB,MAAmB,EAAgB,IAAI,eAAiB,MAEpK,IACA,GAAU,YAAY,EAAS,IAE/B,IACA,GAAU,YAAY,EAAS,IAE/B,IACA,GAAU,gBAAgB,EAAa,IAI/C,IAAM,EAAW,GAEjB,eAAe,EAAc,EAAK,CAC9B,IAAM,EAAW,MAAMC,EAAO,EAAK,CAC/B,QAAS,CACL,cAAe,SAAS,EAAO,SAAS,iBAIhD,EAAS,KAAK,GAAG,EAAS,SAEtB,EAAS,gBACT,MAAM,EAAc,EAAS,cAAc,EAAS,kBAI5D,MAAM,EAAc,GAEpB,IAAM,EAAQ,EACT,OAAQ,GAAS,CACd,GAAI,CAAC,EACD,MAAO,GAIX,IAAM,EAAW,EAAK,KAEtB,GAAI,CAAC,EACD,MAAO,GAGX,GAAI,MAAM,QAAQ,GACd,IAAI,IAAgB,MAEhB,OAAO,EAAI,KAAM,GAAM,OAAO,OAAO,GAAU,KAAM,GAAW,EAAO,OAAS,OACzE,IAAgB,MAEvB,OAAO,EAAI,MAAO,GAAM,OAAO,OAAO,GAAU,KAAM,GAAW,EAAO,OAAS,QAElF,CACH,IAAM,EAAU,EAChB,OAAO,OAAO,OAAO,GAAU,KAAM,GAAW,EAAO,OAAS,GAGpE,MAAO,KAEV,IAAK,IAAU,CACZ,MAAO,EAAK,MACZ,KAAM,EAAK,WACX,YAAa,EAAK,QAClB,QAAS,EAAU,EAAK,YACxB,OAAQ,EAAK,UAGrB,MAAO,CACH,WAAY,GACZ,MAAO,kBACP,KAAM,2BACN,KAAM"}