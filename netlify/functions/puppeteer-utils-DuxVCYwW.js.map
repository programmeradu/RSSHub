{"version":3,"file":"puppeteer-utils-DuxVCYwW.js","names":[],"sources":["../../lib/utils/puppeteer-utils.ts"],"sourcesContent":["/**\r\n * Get Cookie-header-style cookie string from a puppeteer-style cookie array\r\n *\r\n * @param {import('puppeteer').Protocol.Network.CookieParam[]} cookies Puppeteer-style cookie array\r\n * @param {RegExp | string} domainFilter Filter cookies by domain or RegExp\r\n * @return {string} Cookie-header-style cookie string (e.g. \"foobar; foo=bar; baz=qux\")\r\n */\r\nconst parseCookieArray = (cookies, domainFilter?: string | RegExp) => {\r\n    if (typeof domainFilter === 'string') {\r\n        const dotDomain = '.' + domainFilter;\r\n        cookies = cookies.filter(({ domain }) => domain === domainFilter || domain.endsWith(dotDomain));\r\n    } else if (domainFilter && domainFilter.test !== undefined) {\r\n        cookies = cookies.filter(({ domain }) => domainFilter.test(domain));\r\n    }\r\n    // {name: '', value: 'foobar'} => 'foobar' // https://stackoverflow.com/questions/42531198/cookie-without-a-name\r\n    // {name: 'foo', value: 'bar'} => 'foo=bar'\r\n    return cookies.map(({ name, value }) => (name ? `${name}=${value}` : value)).join('; ');\r\n};\r\n\r\n/**\r\n * Construct a puppeteer-style cookie array from a Cookie-header-style cookie string\r\n *\r\n * @param {string} cookieStr Cookie-header-style cookie string (e.g. \"foobar; foo=bar; baz=qux\")\r\n * @param {string} domain Domain to set for each cookie\r\n * @return {import('puppeteer').Protocol.Network.CookieParam[]} Puppeteer-style cookie array\r\n */\r\nconst constructCookieArray = (cookieStr, domain) =>\r\n    cookieStr.split('; ').map((item) => {\r\n        const [name, value] = item.split('=');\r\n        return value === undefined ? { name: '', value: name, domain } : { name, value, domain };\r\n    });\r\n\r\n/**\r\n * Set cookies for a page\r\n *\r\n * @param {import('puppeteer').Page} page Puppeteer Page object\r\n * @param {string} cookieStr Cookie-header-style cookie string (e.g. \"foobar; foo=bar; baz=qux\")\r\n * @param {string} domain Domain to set for each cookie\r\n * @return {Promise<void>}\r\n */\r\nconst setCookies = async (page, cookieStr, domain) => {\r\n    const cookies = constructCookieArray(cookieStr, domain);\r\n    await page.setCookie(...cookies);\r\n};\r\n\r\n/**\r\n * Get Cookie-header-style cookie string from a page\r\n *\r\n * @param {import('puppeteer').Page} page Puppeteer Page object\r\n * @param {RegExp | string} domainFilter Filter cookies by domain or RegExp\r\n * @return {Promise<string>} Cookie-header-style cookie string\r\n */\r\nconst getCookies = async (page, domainFilter?: string) => {\r\n    const cookies = await page.cookies();\r\n    return parseCookieArray(cookies, domainFilter);\r\n};\r\n\r\nexport { parseCookieArray, constructCookieArray, setCookies, getCookies };\r\n"],"mappings":"AAOA,MAAM,GAAoB,EAAS,IAAmC,CAClE,GAAI,OAAO,GAAiB,SAAU,CAClC,IAAM,EAAY,IAAM,EACxB,EAAU,EAAQ,QAAQ,CAAE,YAAa,IAAW,GAAgB,EAAO,SAAS,SAC7E,GAAgB,EAAa,OAAS,IAAA,KAC7C,EAAU,EAAQ,QAAQ,CAAE,YAAa,EAAa,KAAK,KAI/D,OAAO,EAAQ,KAAK,CAAE,OAAM,WAAa,EAAO,GAAG,EAAK,GAAG,IAAU,GAAQ,KAAK,OAUhF,GAAwB,EAAW,IACrC,EAAU,MAAM,MAAM,IAAK,GAAS,CAChC,GAAM,CAAC,EAAM,GAAS,EAAK,MAAM,KACjC,OAAO,IAAU,IAAA,GAAY,CAAE,KAAM,GAAI,MAAO,EAAM,UAAW,CAAE,OAAM,QAAO,YAWlF,EAAa,MAAO,EAAM,EAAW,IAAW,CAClD,IAAM,EAAU,EAAqB,EAAW,GAChD,MAAM,EAAK,UAAU,GAAG,IAUtB,EAAa,MAAO,EAAM,IAA0B,CACtD,IAAM,EAAU,MAAM,EAAK,UAC3B,OAAO,EAAiB,EAAS"}