{"version":3,"file":"categories-V7fLvpAI.js","names":["route: Route","ofetch","cache"],"sources":["../../lib/routes/javtrailers/categories.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport ofetch from '@/utils/ofetch';\r\nimport cache from '@/utils/cache';\r\nimport { baseUrl, getItem, headers, parseList } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: '/categories/:category',\r\n    categories: ['multimedia'],\r\n    example: '/javtrailers/categories/50001755',\r\n    parameters: { category: 'Category name, can be found in the URL of the category page' },\r\n    radar: [\r\n        {\r\n            source: ['javtrailers.com/categories/:category'],\r\n        },\r\n    ],\r\n    name: 'Categories',\r\n    maintainers: ['TonyRL'],\r\n    url: 'javtrailers.com/categories',\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category } = ctx.req.param();\r\n\r\n    const response = await ofetch(`${baseUrl}/api/categories/${category}?page=0`, {\r\n        headers,\r\n    });\r\n\r\n    const list = parseList(response.videos);\r\n\r\n    const items = await Promise.all(list.map((item) => cache.tryGet(item.link, () => getItem(item))));\r\n\r\n    return {\r\n        title: `Watch ${response.category.name} Jav Online | Japanese Adult Video - JavTrailers.com`,\r\n        description: `Watch ${response.category.name} Jav videoâ€™s free, we have the largest Jav collections with high definition`,\r\n        link: `${baseUrl}/categories/${category}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"oXAMA,MAAaA,EAAe,CACxB,KAAM,wBACN,WAAY,CAAC,cACb,QAAS,mCACT,WAAY,CAAE,SAAU,+DACxB,MAAO,CACH,CACI,OAAQ,CAAC,0CAGjB,KAAM,aACN,YAAa,CAAC,UACd,IAAK,6BACL,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,YAAa,EAAI,IAAI,QAEvB,EAAW,MAAMC,EAAO,GAAG,EAAQ,kBAAkB,EAAS,SAAU,CAC1E,YAGE,EAAO,EAAU,EAAS,QAE1B,EAAQ,MAAM,QAAQ,IAAI,EAAK,IAAK,GAASC,EAAM,OAAO,EAAK,SAAY,EAAQ,MAEzF,MAAO,CACH,MAAO,SAAS,EAAS,SAAS,KAAK,sDACvC,YAAa,SAAS,EAAS,SAAS,KAAK,6EAC7C,KAAM,GAAG,EAAQ,cAAc,IAC/B,KAAM"}