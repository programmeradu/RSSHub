{"version":3,"file":"book-D7COhq5C.js","names":["got"],"sources":["../../lib/routes/creative-comic/utils.ts","../../lib/routes/creative-comic/book.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst apiHost = 'https://api.creative-comic.tw';\r\nconst device = 'web_desktop';\r\nconst DEFAULT_TOKEN = 'freeforccc2020reading';\r\n\r\nconst getBook = (bookId, uuid) =>\r\n    got(`${apiHost}/book/${bookId}/info`, {\r\n        headers: {\r\n            device,\r\n            uuid,\r\n        },\r\n    });\r\n\r\nconst getChapter = (id, uuid) =>\r\n    got(`${apiHost}/book/chapter/${id}`, {\r\n        headers: {\r\n            device,\r\n            uuid,\r\n        },\r\n    });\r\n\r\nconst getChapters = (bookId, uuid) =>\r\n    got(`${apiHost}/book/${bookId}/chapter`, {\r\n        headers: {\r\n            device,\r\n            uuid,\r\n        },\r\n    });\r\n\r\nconst getImgEncrypted = async (pageId, quality) => {\r\n    const { data: res } = await got(`https://storage.googleapis.com/ccc-www/fs/chapter_content/encrypt/${pageId}/${quality}`, {\r\n        headers: {\r\n            device,\r\n        },\r\n        responseType: 'buffer',\r\n    });\r\n    return Buffer.from(res).toString('base64');\r\n};\r\n\r\nconst getImgKey = (pageId, uuid) =>\r\n    got(`${apiHost}/book/chapter/image/${pageId}`, {\r\n        headers: {\r\n            device,\r\n            uuid,\r\n        },\r\n    });\r\n\r\nconst getUuid = (tryGet) =>\r\n    tryGet('creative-comic:uuid', async () => {\r\n        const { data } = await got(`${apiHost}/guest`, {\r\n            headers: {\r\n                device,\r\n            },\r\n        });\r\n        return data.data;\r\n    });\r\n\r\nconst decrypt = (encrypted, secrets) =>\r\n    CryptoJS.AES.decrypt(encrypted, CryptoJS.enc.Hex.parse(secrets.key), {\r\n        iv: CryptoJS.enc.Hex.parse(secrets.iv),\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n    }).toString(CryptoJS.enc.Utf8);\r\n\r\nconst token2Key = (token) => {\r\n    const t = CryptoJS.SHA512(token).toString();\r\n    return {\r\n        key: t.slice(0, 64),\r\n        iv: t.slice(30, 62), // t.substr(30, 32)\r\n    };\r\n};\r\n\r\nconst getRealKey = (imgKey, token = DEFAULT_TOKEN) => {\r\n    const secrets = token2Key(token);\r\n    const key = decrypt(imgKey, secrets);\r\n    const realKey = key.split(':');\r\n    return {\r\n        key: realKey[0],\r\n        iv: realKey[1],\r\n    };\r\n};\r\n\r\nexport { apiHost, getBook, getChapter, getChapters, getImgEncrypted, getImgKey, getUuid, decrypt, token2Key, getRealKey };\r\n","import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { getUuid, getBook, getChapter, getChapters, getImgEncrypted, getImgKey, decrypt, getRealKey, apiHost } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: '/book/:id/:coverOnly?/:quality?',\r\n    categories: ['anime'],\r\n    example: '/creative-comic/book/117',\r\n    parameters: { id: '漫畫 ID，可在 URL 中找到', coverOnly: '僅獲取封面，非 `true` 時將獲取**全部**頁面，預設 `true`', quality: '閱讀品質，標準畫質 `1`，高畫質 `2`，預設 `1`' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['creative-comic.tw/book/:id/*'],\r\n            target: '/:id',\r\n        },\r\n    ],\r\n    name: '漫畫',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { id, coverOnly = 'true', quality = '1' } = ctx.req.param();\r\n    const uuid = await getUuid(cache.tryGet);\r\n    const {\r\n        data: { data: book },\r\n    } = await getBook(id, uuid);\r\n    const {\r\n        data: { data: chapters },\r\n    } = await getChapters(id, uuid);\r\n\r\n    const items = await Promise.all(\r\n        chapters.chapters\r\n            .sort((a, b) => b.idx - a.idx)\r\n            .slice(0, ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 3)\r\n            .map(async (c) => {\r\n                let pages;\r\n                if (coverOnly !== 'true' && coverOnly !== '1') {\r\n                    const {\r\n                        data: { data: chapter },\r\n                    } = await getChapter(c.id, uuid);\r\n\r\n                    if (chapter.chapter.free_day === null || chapter.chapter.free_day === 0) {\r\n                        pages = await Promise.all(\r\n                            chapter.chapter.proportion.map(async (p) => {\r\n                                let { data: imgKey } = await getImgKey(p.id, uuid);\r\n                                imgKey = imgKey.data.key;\r\n\r\n                                const realKey = getRealKey(imgKey);\r\n                                const encrypted = await getImgEncrypted(p.id, quality);\r\n\r\n                                return cache.tryGet(`${apiHost}/fs/chapter_content/encrypt/${p.id}/${quality}`, () => decrypt(encrypted, realKey));\r\n                            })\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    title: c.vol_name,\r\n                    description: art(path.join(__dirname, 'templates/chapter.art'), {\r\n                        chapter: c,\r\n                        pages,\r\n                        cover: c.image1,\r\n                    }),\r\n                    pubDate: parseDate(c.online_at),\r\n                    updated: parseDate(c.updated_at),\r\n                    link: `https://www.creative-comic.tw/reader_comic/${c.id}`,\r\n                    author: book.author.map((author) => author.name).join(', '),\r\n                    category: book.tags.map((tag) => tag.name),\r\n                };\r\n            })\r\n    );\r\n\r\n    return {\r\n        title: `${book.name} | CCC創作集`,\r\n        description: `${book.brief} ${book.description}`,\r\n        link: book.share_link,\r\n        image: book.image1,\r\n        item: items,\r\n        language: 'zh-hant',\r\n    };\r\n}\r\n"],"mappings":"kdAGA,MAAA,EAAA,gCACA,EAAA,cAGA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,OAAA,CAAA,QAAA,oBAQA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,gBAAA,IAAA,CAAA,QAAA,oBAQA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,QAAA,EAAA,UAAA,CAAA,QAAA,oBAQA,EAAA,MAAA,EAAA,IAAA,+IAOI,OAAA,OAAA,KAAA,GAAA,SAAA,WAGJ,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,sBAAA,IAAA,CAAA,QAAA,oBAQA,EAAA,GAAA,EAAA,sBAAA,SAAA,wDAOQ,OAAA,EAAA,OAGR,GAAA,EAAA,IAAA,EAAA,IAAA,QAAA,EAAA,EAAA,IAAA,IAAA,MAAA,EAAA,KAAA,qFAOA,EAAA,GAAA,8BAEI,MAAA,uCAMJ,GAAA,EAAA,EAAA,0BAAA,oCAII,MAAA,oBCtES,EAAe,CACxB,KAAM,kCACN,WAAY,CAAC,SACb,QAAS,2BACT,WAAY,CAAE,GAAI,mBAAoB,UAAW,wCAAyC,QAAS,gCACnG,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,gCACT,OAAQ,SAGhB,KAAM,KACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,KAAI,YAAY,OAAQ,UAAU,KAAQ,EAAI,IAAI,QACpD,EAAO,MAAM,EAAQ,EAAM,QAC3B,CACF,KAAM,CAAE,KAAM,IACd,MAAM,EAAQ,EAAI,GAChB,CACF,KAAM,CAAE,KAAM,IACd,MAAM,EAAY,EAAI,GAEpB,EAAQ,MAAM,QAAQ,IACxB,EAAS,SACJ,MAAM,EAAG,IAAM,EAAE,IAAM,EAAE,KACzB,MAAM,EAAG,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAChF,IAAI,KAAO,IAAM,CACd,IAAI,EACJ,GAAI,IAAc,QAAU,IAAc,IAAK,CAC3C,GAAM,CACF,KAAM,CAAE,KAAM,IACd,MAAM,EAAW,EAAE,GAAI,IAEvB,EAAQ,QAAQ,WAAa,MAAQ,EAAQ,QAAQ,WAAa,KAClE,EAAQ,MAAM,QAAQ,IAClB,EAAQ,QAAQ,WAAW,IAAI,KAAO,IAAM,CACxC,GAAI,CAAE,KAAM,GAAW,MAAM,EAAU,EAAE,GAAI,GAC7C,EAAS,EAAO,KAAK,IAErB,IAAM,EAAU,EAAW,GACrB,EAAY,MAAM,EAAgB,EAAE,GAAI,GAE9C,OAAO,EAAM,OAAO,GAAG,EAAQ,8BAA8B,EAAE,GAAG,GAAG,QAAiB,EAAQ,EAAW,QAMzH,MAAO,CACH,MAAO,EAAE,SACT,YAAa,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAC5D,QAAS,EACT,QACA,MAAO,EAAE,SAEb,QAAS,EAAU,EAAE,WACrB,QAAS,EAAU,EAAE,YACrB,KAAM,8CAA8C,EAAE,KACtD,OAAQ,EAAK,OAAO,IAAK,GAAW,EAAO,MAAM,KAAK,MACtD,SAAU,EAAK,KAAK,IAAK,GAAQ,EAAI,UAKrD,MAAO,CACH,MAAO,GAAG,EAAK,KAAK,WACpB,YAAa,GAAG,EAAK,MAAM,GAAG,EAAK,cACnC,KAAM,EAAK,WACX,MAAO,EAAK,OACZ,KAAM,EACN,SAAU"}