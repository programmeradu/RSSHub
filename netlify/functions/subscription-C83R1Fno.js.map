{"version":3,"file":"subscription-C83R1Fno.js","names":["route: Route","ConfigNotFoundError","item","got"],"sources":["../../lib/routes/miniflux/subscription.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nexport const route: Route = {\r\n    path: '/subscription/:parameters?',\r\n    description: `\r\n1. If no specific parameters are specified, all subscription sources will be output by default.\r\n2. Please obtain the Category ID or Subscription Source ID on the \\`Category\\` (shortcut \\`g\\` \\`c\\`) or \\`Source\\` (shortcut \\`g\\` \\`f\\`) page. The URL of each category (or subscription source) will display its ID information.\r\n3. Support for category names and category IDs, to output multiple categories, please repeat entering \\`category=\\` and connect with \\`&\\`, or directly use **English** commas between different category names. For example, you can subscribe through \\`/miniflux/subscription/category=technology&category=1\\` or \\`/miniflux/subscription/categories=technology,1\\`.\r\n4. Support specifying the subscription source name or subscription source ID, similar to setting categories. For example, you can subscribe through \\`/miniflux/subscription/feed=1&feed=Archdaily\\` or \\`/miniflux/subscription/feeds=1,Archdaily\\`.\r\n5. Support simultaneously specifying subscription source information and category information; it will output subscription sources that meet the selected categories' criteria. Consider an example: by using \\`/miniflux/subscription/feeds=1,archdaily&category=art,7\\`, if the Subscription Source ID is 1 or the Subscription Source Name is ArchDaily indeed falls under Category 'art' or has a Category ID of 7, then output that subscription source information.\r\n    `,\r\n    categories: ['other'],\r\n    example: '/miniflux/subscription/categories=test',\r\n    parameters: {\r\n        parameters: 'Category name or category ID or/and subscription source name or subscription source ID',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'MINIFLUX_INSTANCE',\r\n                description: 'The instance used by the user, by default, is the official MiniFlux [paid service address](https://reader.miniflux.app)',\r\n            },\r\n            {\r\n                name: 'MINIFLUX_TOKEN',\r\n                description: \"User's API key, please log in to the instance used and go to `Settings` -> `API Key` -> `Create a new API key` to obtain.\",\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Subscriptions',\r\n    maintainers: ['emdoe', 'DIYgod'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const instance = config.miniflux.instance;\r\n    const token = config.miniflux.token;\r\n\r\n    if (!token) {\r\n        throw new ConfigNotFoundError('This RSS feed is disabled due to its incorrect configuration: the token is missing.');\r\n    }\r\n\r\n    function set(item) {\r\n        if (item.search('=') === -1) {\r\n            return '';\r\n        }\r\n        const filter = item.slice(0, item.indexOf('='));\r\n        const option = item.slice(item.lastIndexOf('=') + 1);\r\n        if (filter.search('categor') !== -1) {\r\n            option.split(',').map((item) => categories.push(item.toString().toLowerCase()));\r\n            return filter;\r\n        }\r\n        if (filter.search('feed') === -1) {\r\n            return '';\r\n        } else {\r\n            option.split(',').map((item) => feeds.push(item.toString().toLowerCase()));\r\n            return filter;\r\n        }\r\n    }\r\n\r\n    function addFeed(item) {\r\n        subscription.push({\r\n            title: item.title,\r\n            link: item.site_url,\r\n            pubData: item.last_modified_header,\r\n            description: 'Feed URL: ' + `<a href=${item.feed_url}>${item.feed_url}</a>`,\r\n        });\r\n    }\r\n\r\n    const response = await got.get(`${instance}/v1/feeds`, {\r\n        headers: { 'X-Auth-Token': token },\r\n    });\r\n\r\n    const subscription = [];\r\n    const categories = [];\r\n    const feeds = [];\r\n    const feedsList = response.data;\r\n\r\n    const parameters = ctx.req\r\n        .param('parameters')\r\n        ?.split('&')\r\n        .map((parameter) => set(parameter))\r\n        .join('');\r\n\r\n    if (parameters) {\r\n        for (const item of feedsList) {\r\n            if (categories.length && feeds.length) {\r\n                const categoryTitle = item.category.title.toLowerCase();\r\n                const categoryID = item.category.id.toString();\r\n                const feedID = item.id.toString();\r\n                const feedTitle = item.title.toLowerCase();\r\n                if ((categories.includes(categoryID) || categories.includes(categoryTitle)) && (feeds.includes(feedID) || feeds.includes(feedTitle))) {\r\n                    addFeed(item);\r\n                }\r\n            } else if (categories.length) {\r\n                const categoryTitle = item.category.title.toLowerCase();\r\n                const categoryID = item.category.id.toString();\r\n                if (categories.includes(categoryID) || categories.includes(categoryTitle)) {\r\n                    addFeed(item);\r\n                }\r\n            } else if (feeds.length) {\r\n                const feedID = item.id.toString();\r\n                const feedTitle = item.title.toLowerCase();\r\n                if (feeds.includes(feedID) || feeds.includes(feedTitle)) {\r\n                    addFeed(item);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (const item of feedsList) {\r\n            addFeed(item);\r\n        }\r\n    }\r\n\r\n    return {\r\n        title: `MiniFlux | Subscription List`,\r\n        link: instance,\r\n        description: `A subscription tracking feed.`,\r\n        item: subscription,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"2TAKA,MAAaA,EAAe,CACxB,KAAM,6BACN,YAAa,i2CAOb,WAAY,CAAC,SACb,QAAS,yCACT,WAAY,CACR,WAAY,0FAEhB,SAAU,CACN,cAAe,CACX,CACI,KAAM,oBACN,YAAa,2HAEjB,CACI,KAAM,iBACN,YAAa,8HAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,gBACN,YAAa,CAAC,QAAS,UACvB,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAW,EAAO,SAAS,SAC3B,EAAQ,EAAO,SAAS,MAE9B,GAAI,CAAC,EACD,MAAM,IAAIC,EAAoB,uFAGlC,SAAS,EAAI,EAAM,CACf,GAAI,EAAK,OAAO,OAAS,GACrB,MAAO,GAEX,IAAM,EAAS,EAAK,MAAM,EAAG,EAAK,QAAQ,MACpC,EAAS,EAAK,MAAM,EAAK,YAAY,KAAO,GAS9C,OARA,EAAO,OAAO,aAAe,GAI7B,EAAO,OAAO,UAAY,GACnB,IAEP,EAAO,MAAM,KAAK,IAAK,GAAS,EAAM,KAAKC,EAAK,WAAW,gBACpD,IAPP,EAAO,MAAM,KAAK,IAAK,GAAS,EAAW,KAAKA,EAAK,WAAW,gBACzD,GAUf,SAAS,EAAQ,EAAM,CACnB,EAAa,KAAK,CACd,MAAO,EAAK,MACZ,KAAM,EAAK,SACX,QAAS,EAAK,qBACd,YAAa,qBAA0B,EAAK,SAAS,GAAG,EAAK,SAAS,QAI9E,IAAM,EAAW,MAAMC,EAAI,IAAI,GAAG,EAAS,WAAY,CACnD,QAAS,CAAE,eAAgB,KAGzB,EAAe,GACf,EAAa,GACb,EAAQ,GACR,EAAY,EAAS,KAErB,EAAa,EAAI,IAClB,MAAM,eACL,MAAM,KACP,IAAK,GAAc,EAAI,IACvB,KAAK,IAEV,GAAI,OACK,IAAM,KAAQ,EACf,GAAI,EAAW,QAAU,EAAM,OAAQ,CACnC,IAAM,EAAgB,EAAK,SAAS,MAAM,cACpC,EAAa,EAAK,SAAS,GAAG,WAC9B,EAAS,EAAK,GAAG,WACjB,EAAY,EAAK,MAAM,eACxB,EAAW,SAAS,IAAe,EAAW,SAAS,MAAoB,EAAM,SAAS,IAAW,EAAM,SAAS,KACrH,EAAQ,WAEL,EAAW,OAAQ,CAC1B,IAAM,EAAgB,EAAK,SAAS,MAAM,cACpC,EAAa,EAAK,SAAS,GAAG,YAChC,EAAW,SAAS,IAAe,EAAW,SAAS,KACvD,EAAQ,WAEL,EAAM,OAAQ,CACrB,IAAM,EAAS,EAAK,GAAG,WACjB,EAAY,EAAK,MAAM,eACzB,EAAM,SAAS,IAAW,EAAM,SAAS,KACzC,EAAQ,SAKpB,IAAK,IAAM,KAAQ,EACf,EAAQ,GAIhB,MAAO,CACH,MAAO,+BACP,KAAM,EACN,YAAa,gCACb,KAAM,EACN,WAAY"}