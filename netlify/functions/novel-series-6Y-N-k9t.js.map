{"version":3,"file":"novel-series-6Y-N-k9t.js","names":["baseUrl","got","ConfigNotFoundError","cache","pixivUtils","got","pixivUtils","route: Route"],"sources":["../../lib/routes/pixiv/novel-api/series/nsfw.ts","../../lib/routes/pixiv/novel-api/series/sfw.ts","../../lib/routes/pixiv/novel-series.ts"],"sourcesContent":["import got from '../../pixiv-got';\r\nimport { maskHeader } from '../../constants';\r\nimport { getNSFWNovelContent } from '../content/nsfw';\r\nimport pixivUtils from '../../utils';\r\nimport { AppNovelSeries, SeriesDetail, SeriesFeed } from './types';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport { getToken } from '../../token';\r\nimport { config } from '@/config';\r\nimport cache from '@/utils/cache';\r\nimport queryString from 'query-string';\r\n\r\nconst baseUrl = 'https://www.pixiv.net';\r\n\r\nasync function getNovelSeries(seriesId: string, offset: number, token: string): Promise<AppNovelSeries> {\r\n    const rsp = await got('https://app-api.pixiv.net/v2/novel/series', {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        searchParams: queryString.stringify({\r\n            series_id: seriesId,\r\n            last_order: offset,\r\n        }),\r\n    });\r\n    return rsp.data as AppNovelSeries;\r\n}\r\n\r\nexport async function getNSFWSeriesNovels(seriesId: string, limit: number = 10): Promise<SeriesFeed> {\r\n    if (limit > 30) {\r\n        limit = 30;\r\n    }\r\n\r\n    if (!config.pixiv || !config.pixiv.refreshToken) {\r\n        throw new ConfigNotFoundError('This user is an R18 creator, PIXIV_REFRESHTOKEN is required.\\npixiv RSS is disabled due to the lack of relevant config.\\n該用戶爲 R18 創作者，需要 PIXIV_REFRESHTOKEN。');\r\n    }\r\n\r\n    const token = await getToken(cache.tryGet);\r\n    if (!token) {\r\n        throw new ConfigNotFoundError('pixiv not login');\r\n    }\r\n\r\n    const seriesResponse = await got(`${baseUrl}/ajax/novel/series/${seriesId}`, {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n    });\r\n    const seriesData = seriesResponse.data as SeriesDetail;\r\n\r\n    let offset = seriesData.body.total - limit;\r\n    if (offset < 0) {\r\n        offset = 0;\r\n    }\r\n    const appSeriesData = await getNovelSeries(seriesId, offset, token);\r\n\r\n    const items = await Promise.all(\r\n        appSeriesData.novels.map(async (novel) => {\r\n            const novelContent = await getNSFWNovelContent(novel.id, token);\r\n            return {\r\n                title: novel.title,\r\n                description: `\r\n                    <img src=\"${pixivUtils.getProxiedImageUrl(novelContent.coverUrl)}\" />\r\n                    <div>\r\n                    <p>${novelContent.description}</p>\r\n                    <hr>\r\n                    ${novelContent.content}\r\n                    </div>\r\n                `,\r\n                link: `${baseUrl}/novel/show.php?id=${novel.id}`,\r\n                pubDate: novel.create_date,\r\n                author: novel.user.name,\r\n                category: novelContent.tags,\r\n            };\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: appSeriesData.novel_series_detail.title,\r\n        description: appSeriesData.novel_series_detail.caption,\r\n        link: `${baseUrl}/novel/series/${seriesId}`,\r\n        image: pixivUtils.getProxiedImageUrl(seriesData.body.cover.urls.original),\r\n        item: items,\r\n    };\r\n}\r\n","import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { getSFWNovelContent } from '../content/sfw';\r\nimport pixivUtils from '../../utils';\r\nimport { SeriesContentResponse, SeriesFeed } from './types';\r\n\r\nconst baseUrl = 'https://www.pixiv.net';\r\n\r\nexport async function getSFWSeriesNovels(seriesId: string, limit: number = 10): Promise<SeriesFeed> {\r\n    const seriesPage = await got(`${baseUrl}/novel/series/${seriesId}`);\r\n    const $ = load(seriesPage.data);\r\n\r\n    const title = $('meta[property=\"og:title\"]').attr('content') || '';\r\n    const description = $('meta[property=\"og:description\"]').attr('content') || '';\r\n    const image = $('meta[property=\"og:image\"]').attr('content') || '';\r\n\r\n    const response = await got(`${baseUrl}/ajax/novel/series/${seriesId}/content_titles`, {\r\n        headers: {\r\n            referer: `${baseUrl}/novel/series/${seriesId}`,\r\n        },\r\n    });\r\n\r\n    const data = response.data as SeriesContentResponse;\r\n\r\n    if (data.error) {\r\n        throw new Error(data.message || 'Failed to get series data');\r\n    }\r\n\r\n    const chapters = data.body.slice(-Math.abs(limit));\r\n    const chapterStartNum = Math.max(data.body.length - limit + 1, 1);\r\n\r\n    const items = await Promise.all(\r\n        chapters\r\n            .map(async (chapter, index) => {\r\n                if (!chapter.available) {\r\n                    return {\r\n                        title: `#${chapterStartNum + index} ${chapter.title}`,\r\n                        description: `PIXIV_REFRESHTOKEN is required to view the full content.<br>需要 PIXIV_REFRESHTOKEN 才能查看完整內文。`,\r\n                        link: `${baseUrl}/novel/show.php?id=${chapter.id}`,\r\n                    };\r\n                }\r\n\r\n                const novelContent = await getSFWNovelContent(chapter.id);\r\n                return {\r\n                    title: `#${chapterStartNum + index} ${novelContent.title}`,\r\n                    description: `\r\n                    <img src=\"${pixivUtils.getProxiedImageUrl(novelContent.coverUrl)}\" />\r\n                    <div>\r\n                    <p>${novelContent.description}</p>\r\n                    <hr>\r\n                    ${novelContent.content}\r\n                    </div>\r\n                `,\r\n                    link: `${baseUrl}/novel/show.php?id=${novelContent.id}`,\r\n                    pubDate: novelContent.createDate,\r\n                    author: novelContent.userName || `User ID: ${novelContent.userId}`,\r\n                    category: novelContent.tags,\r\n                };\r\n            })\r\n            .toReversed()\r\n    );\r\n\r\n    return {\r\n        title,\r\n        description,\r\n        image: pixivUtils.getProxiedImageUrl(image),\r\n        link: `${baseUrl}/novel/series/${seriesId}`,\r\n        item: items,\r\n    };\r\n}\r\n","import { Data, Route } from '@/types';\r\nimport { config } from '@/config';\r\nimport { getNSFWSeriesNovels } from './novel-api/series/nsfw';\r\nimport { getSFWSeriesNovels } from './novel-api/series/sfw';\r\n\r\nexport const route: Route = {\r\n    path: '/novel/series/:id',\r\n    categories: ['social-media'],\r\n    example: '/pixiv/novel/series/11586857',\r\n    parameters: {\r\n        id: 'Series id, can be found in URL',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'PIXIV_REFRESHTOKEN',\r\n                optional: true,\r\n                description: `\r\nrefresh_token after Pixiv login, required for accessing R18 novels\r\nPixiv 登錄後的 refresh_token，用於獲取 R18 小說\r\n[https://docs.rsshub.app/deploy/config#pixiv](https://docs.rsshub.app/deploy/config#pixiv)`,\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Novel Series',\r\n    maintainers: ['SnowAgar25', 'keocheung'],\r\n    handler,\r\n    radar: [\r\n        {\r\n            source: ['www.pixiv.net/novel/series/:id'],\r\n            target: '/novel/series/:id',\r\n        },\r\n    ],\r\n};\r\n\r\nconst hasPixivAuth = () => Boolean(config.pixiv && config.pixiv.refreshToken);\r\n\r\nasync function handler(ctx): Promise<Data> {\r\n    const id = ctx.req.param('id');\r\n    const { limit } = ctx.req.query();\r\n\r\n    if (hasPixivAuth()) {\r\n        return await getNSFWSeriesNovels(id, limit);\r\n    }\r\n\r\n    return await getSFWSeriesNovels(id, limit);\r\n}\r\n"],"mappings":"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"}