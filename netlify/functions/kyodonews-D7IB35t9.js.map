{"version":3,"file":"kyodonews-D7IB35t9.js","names":[],"sources":["../../lib/routes/kyodonews/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\nconst resolveRelativeLink = (link, baseUrl) => (link.startsWith('http') ? link : `${baseUrl}${link}`);\r\n\r\nexport const route: Route = {\r\n    path: '/:language?/:keyword?',\r\n    categories: ['traditional-media'],\r\n    example: '/kyodonews',\r\n    parameters: { language: '语言: `china` = 简体中文 (默认), `tchina` = 繁體中文', keyword: '关键词' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '最新报道',\r\n    maintainers: ['Rongronggg9'],\r\n    handler,\r\n    description: `\\`keyword\\` 为关键词，由于共同网有许多关键词并不在主页列出，此处不一一列举，可从关键词页的 URL 的最后一级路径中提取。如 \\`日中关系\\` 的关键词页 URL 为 \\`https://china.kyodonews.net/news/japan-china_relationship\\`, 则将 \\`japan-china_relationship\\` 填入 \\`keyword\\`。特别地，当填入 \\`rss\\` 时，将从共同网官方 RSS 中抓取文章；略去时，将从首页抓取最新报道 (注意：首页更新可能比官方 RSS 稍慢)。`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const language = ctx.req.param('language') ?? 'china';\r\n    const keyword = ctx.req.param('keyword') === 'RSS' ? 'rss' : (ctx.req.param('keyword') ?? '');\r\n\r\n    // raise error for invalid languages\r\n    if (!['china', 'tchina'].includes(language)) {\r\n        throw new ConfigNotFoundError('Invalid language');\r\n    }\r\n\r\n    const rootUrl = `https://${language}.kyodonews.net`;\r\n    const currentUrl = `${rootUrl}/${keyword ? (keyword === 'rss' ? 'rss/news.xml' : `news/${keyword}`) : ''}`;\r\n\r\n    let response;\r\n    try {\r\n        response = await got(currentUrl);\r\n    } catch (error) {\r\n        throw error.response && error.response.statusCode === 404 ? new InvalidParameterError('Invalid keyword') : error;\r\n    }\r\n\r\n    const $ = load(response.data, { xmlMode: keyword === 'rss' });\r\n\r\n    let title, description, image, items;\r\n    image = `${rootUrl}/apple-touch-icon-180x180.png`;\r\n\r\n    if (keyword === 'rss') {\r\n        title = $('channel > title').text();\r\n        description = $('channel > description').text();\r\n        items = $('item')\r\n            .toArray()\r\n            .map((item) => {\r\n                const $item = $(item);\r\n                const link = $item.find('link').text();\r\n                // const pubDate = $item.find('pubDate').text();\r\n                return {\r\n                    link,\r\n                    // pubDate,  // no need to normalize because it's from a valid RSS feed\r\n                };\r\n            });\r\n    } else {\r\n        title = $('head > title').text();\r\n        description = $('meta[name=\"description\"]').attr('content');\r\n        image = resolveRelativeLink($('head > link[rel=\"apple-touch-icon\"]').attr('href'), rootUrl) || image;\r\n        items = $('div.sec-latest > ul > li')\r\n            .toArray()\r\n            .map((item) => {\r\n                item = $(item);\r\n                const link = item.find('a').attr('href');\r\n                return {\r\n                    link: resolveRelativeLink(link, rootUrl),\r\n                };\r\n            });\r\n    }\r\n\r\n    items = await Promise.all(\r\n        items.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const detailResponse = await got(item.link);\r\n\r\n                const $ = load(detailResponse.data);\r\n                item.title = $('head > title').text();\r\n                item.author = $('meta[name=\"author\"]').attr('content');\r\n\r\n                // add main pic\r\n                const mainPicArea = $('div.mainpic');\r\n                mainPicArea.find('div').each((_, elem) => {\r\n                    elem = $(elem);\r\n                    elem.css('text-align', 'center');\r\n                });\r\n                // moving `data-src` to `src`\r\n                mainPicArea.find('img').each((_, img) => {\r\n                    img = $(img);\r\n                    img.attr('src', img.attr('data-src'));\r\n                    img.removeAttr('data-src');\r\n                    img.wrap('<div>');\r\n                });\r\n                let mainPic = mainPicArea.html();\r\n                mainPic = mainPic ? mainPic.trim() : '';\r\n\r\n                // add article body\r\n                let articleBody = $('div.article-body').html();\r\n                articleBody = articleBody ? articleBody.trim().replace(/（完）(?=<\\/p>\\s*$)/m, '') : '';\r\n\r\n                // render description\r\n                item.description = art(path.join(__dirname, 'templates/article.art'), {\r\n                    mainPic,\r\n                    articleBody,\r\n                });\r\n\r\n                const ldJson = $('script[type=\"application/ld+json\"]').html();\r\n                const pubDate_match = ldJson && ldJson.match(/\"datePublished\":\"([\\d\\s-:]*?)\"/);\r\n                const updated_match = ldJson && ldJson.match(/\"dateModified\":\"([\\d\\s-:]*?)\"/);\r\n                if (pubDate_match) {\r\n                    item.pubDate = timezone(parseDate(pubDate_match[1]), 9);\r\n                }\r\n                if (updated_match) {\r\n                    item.updated = timezone(parseDate(updated_match[1]), 9);\r\n                }\r\n\r\n                item.category = $('p.credit > a')\r\n                    .toArray()\r\n                    .map((a) => $(a).text());\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title,\r\n        description,\r\n        link: currentUrl,\r\n        item: items,\r\n        image,\r\n    };\r\n}\r\n"],"mappings":"gqBAYA,MAAM,GAAuB,EAAM,IAAa,EAAK,WAAW,QAAU,EAAO,GAAG,IAAU,IAEjF,EAAe,CACxB,KAAM,wBACN,WAAY,CAAC,qBACb,QAAS,aACT,WAAY,CAAE,SAAU,2CAA4C,QAAS,OAC7E,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,OACN,YAAa,CAAC,eACd,UACA,YAAa,yQAGjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAW,EAAI,IAAI,MAAM,aAAe,QACxC,EAAU,EAAI,IAAI,MAAM,aAAe,MAAQ,MAAS,EAAI,IAAI,MAAM,YAAc,GAG1F,GAAI,CAAC,CAAC,QAAS,UAAU,SAAS,GAC9B,MAAM,IAAI,EAAoB,oBAGlC,IAAM,EAAU,WAAW,EAAS,gBAC9B,EAAa,GAAG,EAAQ,GAAG,EAAW,IAAY,MAAQ,eAAiB,QAAQ,IAAa,KAElG,EACJ,GAAI,CACA,EAAW,MAAM,EAAI,SAChB,EAAO,CACZ,MAAM,EAAM,UAAY,EAAM,SAAS,aAAe,IAAM,IAAI,EAAsB,mBAAqB,EAG/G,IAAM,EAAI,EAAK,EAAS,KAAM,CAAE,QAAS,IAAY,QAEjD,EAAO,EAAa,EAAO,EAqF/B,MApFA,GAAQ,GAAG,EAAQ,+BAEf,IAAY,OACZ,EAAQ,EAAE,mBAAmB,OAC7B,EAAc,EAAE,yBAAyB,OACzC,EAAQ,EAAE,QACL,UACA,IAAK,GAAS,CACX,IAAM,EAAQ,EAAE,GACV,EAAO,EAAM,KAAK,QAAQ,OAEhC,MAAO,CACH,YAKZ,EAAQ,EAAE,gBAAgB,OAC1B,EAAc,EAAE,4BAA4B,KAAK,WACjD,EAAQ,EAAoB,EAAE,uCAAuC,KAAK,QAAS,IAAY,EAC/F,EAAQ,EAAE,4BACL,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GACT,IAAM,EAAO,EAAK,KAAK,KAAK,KAAK,QACjC,MAAO,CACH,KAAM,EAAoB,EAAM,OAKhD,EAAQ,MAAM,QAAQ,IAClB,EAAM,IAAK,GACP,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAM,EAAiB,MAAM,EAAI,EAAK,MAEhC,EAAI,EAAK,EAAe,MAC9B,EAAK,MAAQ,EAAE,gBAAgB,OAC/B,EAAK,OAAS,EAAE,uBAAuB,KAAK,WAG5C,IAAM,EAAc,EAAE,eACtB,EAAY,KAAK,OAAO,MAAM,EAAG,IAAS,CACtC,EAAO,EAAE,GACT,EAAK,IAAI,aAAc,YAG3B,EAAY,KAAK,OAAO,MAAM,EAAG,IAAQ,CACrC,EAAM,EAAE,GACR,EAAI,KAAK,MAAO,EAAI,KAAK,aACzB,EAAI,WAAW,YACf,EAAI,KAAK,WAEb,IAAI,EAAU,EAAY,OAC1B,EAAU,EAAU,EAAQ,OAAS,GAGrC,IAAI,EAAc,EAAE,oBAAoB,OACxC,EAAc,EAAc,EAAY,OAAO,QAAQ,oBAAqB,IAAM,GAGlF,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAClE,UACA,gBAGJ,IAAM,EAAS,EAAE,sCAAsC,OACjD,EAAgB,GAAU,EAAO,MAAM,kCACvC,EAAgB,GAAU,EAAO,MAAM,iCAW7C,OAVI,IACA,EAAK,QAAU,EAAS,EAAU,EAAc,IAAK,IAErD,IACA,EAAK,QAAU,EAAS,EAAU,EAAc,IAAK,IAGzD,EAAK,SAAW,EAAE,gBACb,UACA,IAAK,GAAM,EAAE,GAAG,QACd,MAKZ,CACH,QACA,cACA,KAAM,EACN,KAAM,EACN"}