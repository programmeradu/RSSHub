{"version":3,"file":"utils-BUsUVSmr.js","names":["cache","got"],"sources":["../../lib/routes/chikubi/utils.ts"],"sourcesContent":["import { DataItem } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst CONTENT_TYPES = {\r\n    doujin: {\r\n        title: '.doujin-title',\r\n        description: ['.doujin-detail', '.section', '.area-buy > a.btn'],\r\n    },\r\n    video: {\r\n        title: '.video-title',\r\n        description: ['.video-data', '.section', '.lp-samplearea a.btn'],\r\n    },\r\n    article: {\r\n        title: '.article_title',\r\n        description: ['.article_icatch', '.article_contents'],\r\n    },\r\n};\r\n\r\nfunction getContentType(link: string): keyof typeof CONTENT_TYPES {\r\n    const typePatterns = {\r\n        doujin: ['/cg/', '/comic/', '/voice/'],\r\n        video: ['/nipple-video/'],\r\n        article: ['/post-'],\r\n    };\r\n\r\n    for (const [type, patterns] of Object.entries(typePatterns)) {\r\n        if (patterns.some((pattern) => link.includes(pattern))) {\r\n            return type as keyof typeof CONTENT_TYPES;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Unknown content type for link: ${link}`);\r\n}\r\n\r\nexport async function processItems(list): Promise<DataItem[]> {\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const detailResponse = await got(item.link);\r\n                const $ = load(detailResponse.data);\r\n\r\n                const contentType = getContentType(item.link);\r\n                const selectors = CONTENT_TYPES[contentType];\r\n\r\n                const title = $(selectors.title).text().trim() || item.title;\r\n                const description = processDescription(selectors.description.map((selector) => $(selector).prop('outerHTML')).join(''));\r\n\r\n                const pubDateStr = $('meta[property=\"article:published_time\"]').attr('content');\r\n                const pubDate = pubDateStr ? parseDate(pubDateStr) : undefined;\r\n\r\n                return {\r\n                    title,\r\n                    description,\r\n                    link: item.link,\r\n                    pubDate,\r\n                } as DataItem;\r\n            })\r\n        )\r\n    );\r\n\r\n    return items.filter((item): item is DataItem => item !== null);\r\n}\r\n\r\nfunction processDescription(description: string): string {\r\n    const $ = load(description);\r\n    return $('body')\r\n        .children()\r\n        .toArray()\r\n        .map((el) => $(el).clone().wrap('<div>').parent().html())\r\n        .join('');\r\n}\r\n\r\nconst WP_REST_API_URL = 'https://chikubi.jp/wp-json/wp/v2';\r\n\r\nexport async function getPosts(ids?: string[]): Promise<DataItem[]> {\r\n    const url = `${WP_REST_API_URL}/posts${ids?.length ? `?include=${ids.join(',')}` : ''}`;\r\n\r\n    const cachedData = await cache.tryGet(url, async () => {\r\n        const response = await got(url);\r\n        const data = JSON.parse(response.body);\r\n\r\n        if (!Array.isArray(data)) {\r\n            throw new TypeError('No posts found for the given IDs');\r\n        }\r\n\r\n        return data.map(({ title, link, date, content }) => ({\r\n            title: title.rendered,\r\n            link,\r\n            pubDate: parseDate(date),\r\n            description: processDescription(content.rendered),\r\n        }));\r\n    });\r\n\r\n    return (Array.isArray(cachedData) ? cachedData : []).filter((item): item is DataItem => item !== null);\r\n}\r\n\r\nconst API_TYPES = {\r\n    tag: 'tags',\r\n    category: 'categories',\r\n};\r\n\r\nexport async function getBySlug<T extends keyof typeof API_TYPES>(type: T, slug: string): Promise<{ id: number; name: string }> {\r\n    const url = `${WP_REST_API_URL}/${API_TYPES[type]}?slug=${encodeURIComponent(slug)}`;\r\n    const { body } = await got(url);\r\n    const data = JSON.parse(body);\r\n\r\n    if (data?.[0]) {\r\n        const { id, name } = data[0];\r\n        return { id, name };\r\n    }\r\n    throw new Error(`No ${type} found for slug: ${slug}`);\r\n}\r\n\r\nexport async function getPostsBy<T extends keyof typeof API_TYPES>(type: T, id: number): Promise<DataItem[]> {\r\n    const url = `${WP_REST_API_URL}/posts?${API_TYPES[type]}=${id}`;\r\n    const cachedData = await cache.tryGet(url, async () => {\r\n        const { body } = await got(url);\r\n        const data = JSON.parse(body);\r\n\r\n        if (Array.isArray(data) && data.length > 0) {\r\n            return data.map(({ title, link, date, content }) => ({\r\n                title: title.rendered,\r\n                link,\r\n                pubDate: parseDate(date),\r\n                description: processDescription(content.rendered),\r\n            }));\r\n        }\r\n        return [];\r\n    });\r\n\r\n    return (Array.isArray(cachedData) ? cachedData : []).filter((item): item is DataItem => item !== null);\r\n}\r\n"],"mappings":"wLAMA,MAAM,EAAgB,CAClB,OAAQ,CACJ,MAAO,gBACP,YAAa,CAAC,iBAAkB,WAAY,sBAEhD,MAAO,CACH,MAAO,eACP,YAAa,CAAC,cAAe,WAAY,yBAE7C,QAAS,CACL,MAAO,iBACP,YAAa,CAAC,kBAAmB,uBAIzC,SAAS,EAAe,EAA0C,CAC9D,IAAM,EAAe,CACjB,OAAQ,CAAC,OAAQ,UAAW,WAC5B,MAAO,CAAC,kBACR,QAAS,CAAC,WAGd,IAAK,GAAM,CAAC,EAAM,KAAa,OAAO,QAAQ,GAC1C,GAAI,EAAS,KAAM,GAAY,EAAK,SAAS,IACzC,OAAO,EAIf,MAAU,MAAM,kCAAkC,KAGtD,eAAsB,EAAa,EAA2B,CAC1D,IAAM,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNA,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAM,EAAiB,MAAMC,EAAI,EAAK,MAChC,EAAI,EAAK,EAAe,MAExB,EAAc,EAAe,EAAK,MAClC,EAAY,EAAc,GAE1B,EAAQ,EAAE,EAAU,OAAO,OAAO,QAAU,EAAK,MACjD,EAAc,EAAmB,EAAU,YAAY,IAAK,GAAa,EAAE,GAAU,KAAK,cAAc,KAAK,KAE7G,EAAa,EAAE,2CAA2C,KAAK,WAC/D,EAAU,EAAa,EAAU,GAAc,IAAA,GAErD,MAAO,CACH,QACA,cACA,KAAM,EAAK,KACX,eAMhB,OAAO,EAAM,OAAQ,GAA2B,IAAS,MAG7D,SAAS,EAAmB,EAA6B,CACrD,IAAM,EAAI,EAAK,GACf,OAAO,EAAE,QACJ,WACA,UACA,IAAK,GAAO,EAAE,GAAI,QAAQ,KAAK,SAAS,SAAS,QACjD,KAAK,IAGd,MAAM,EAAkB,mCAExB,eAAsB,EAAS,EAAqC,CAChE,IAAM,EAAM,GAAG,EAAgB,QAAQ,GAAK,OAAS,YAAY,EAAI,KAAK,OAAS,KAE7E,EAAa,MAAMD,EAAM,OAAO,EAAK,SAAY,CACnD,IAAM,EAAW,MAAMC,EAAI,GACrB,EAAO,KAAK,MAAM,EAAS,MAEjC,GAAI,CAAC,MAAM,QAAQ,GACf,MAAU,UAAU,oCAGxB,OAAO,EAAK,KAAK,CAAE,QAAO,OAAM,OAAM,cAAe,CACjD,MAAO,EAAM,SACb,OACA,QAAS,EAAU,GACnB,YAAa,EAAmB,EAAQ,eAIhD,OAAQ,MAAM,QAAQ,GAAc,EAAa,IAAI,OAAQ,GAA2B,IAAS,MAGrG,MAAM,EAAY,CACd,IAAK,OACL,SAAU,cAGd,eAAsB,EAA4C,EAAS,EAAqD,CAC5H,IAAM,EAAM,GAAG,EAAgB,GAAG,EAAU,GAAM,QAAQ,mBAAmB,KACvE,CAAE,QAAS,MAAMA,EAAI,GACrB,EAAO,KAAK,MAAM,GAExB,GAAI,IAAO,GAAI,CACX,GAAM,CAAE,KAAI,QAAS,EAAK,GAC1B,MAAO,CAAE,KAAI,QAEjB,MAAU,MAAM,MAAM,EAAK,mBAAmB,KAGlD,eAAsB,EAA6C,EAAS,EAAiC,CACzG,IAAM,EAAM,GAAG,EAAgB,SAAS,EAAU,GAAM,GAAG,IACrD,EAAa,MAAMD,EAAM,OAAO,EAAK,SAAY,CACnD,GAAM,CAAE,QAAS,MAAMC,EAAI,GACrB,EAAO,KAAK,MAAM,GAUxB,OARI,MAAM,QAAQ,IAAS,EAAK,OAAS,EAC9B,EAAK,KAAK,CAAE,QAAO,OAAM,OAAM,cAAe,CACjD,MAAO,EAAM,SACb,OACA,QAAS,EAAU,GACnB,YAAa,EAAmB,EAAQ,aAGzC,KAGX,OAAQ,MAAM,QAAQ,GAAc,EAAa,IAAI,OAAQ,GAA2B,IAAS"}