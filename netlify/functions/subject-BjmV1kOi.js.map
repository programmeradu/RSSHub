{"version":3,"file":"subject-BjmV1kOi.js","names":["ofetch","ofetch","route: Route","getEps","getComments","getFromAPI","InvalidParameterError"],"sources":["../../lib/routes/bangumi.tv/subject/comments.ts","../../lib/routes/bangumi.tv/subject/utils.ts","../../lib/routes/bangumi.tv/subject/offcial-subject-api.ts","../../lib/routes/bangumi.tv/subject/ep.ts","../../lib/routes/bangumi.tv/subject/index.ts"],"sourcesContent":["import ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport { parseDate, parseRelativeDate } from '@/utils/parse-date';\r\n\r\nconst getComments = async (subjectID, minLength) => {\r\n    // bangumi.tv未提供获取“吐槽（comments）”的API，因此仍需要通过抓取网页来获取\r\n    const link = `https://bgm.tv/subject/${subjectID}/comments`;\r\n    const html = await ofetch(link);\r\n    const $ = load(html);\r\n    const title = $('.nameSingle').find('a').text();\r\n    const comments = $('.item')\r\n        .toArray()\r\n        .map((el) => {\r\n            const $el = $(el);\r\n            const $rateEl = $el.find('.starlight');\r\n            let rate = null;\r\n            if ($rateEl.length > 0) {\r\n                rate = $rateEl.attr('class').match(/stars(\\d)/)[1];\r\n            }\r\n\r\n            const dateString = $el.find('small.grey').text().slice(2);\r\n\r\n            const date = dateString.includes('ago')\r\n                ? parseRelativeDate(dateString) // 处理表示相对日期的字符串\r\n                : parseDate(dateString); // 表示绝对日期的字符串\r\n\r\n            return {\r\n                user: $el.find('.l').text(),\r\n                rate: rate || '无',\r\n                content: $el.find('p').text(),\r\n                date,\r\n            };\r\n        })\r\n        .filter((obj) => obj.content.length >= minLength);\r\n\r\n    return {\r\n        title: `${title}的 Bangumi 吐槽箱`,\r\n        link,\r\n        item: comments.map((c) => ({\r\n            title: `${c.user}的吐槽`,\r\n            description: `【评分：${c.rate}】  ${c.content}`,\r\n            guid: `${link}#${c.user}`,\r\n            pubDate: c.date,\r\n            link,\r\n        })),\r\n    };\r\n};\r\nexport default getComments;\r\n","const getLocalName = (obj, showOriginalName) => (showOriginalName ? obj.name || obj.name_cn : obj.name_cn || obj.name);\r\n\r\nexport { getLocalName };\r\n","import ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { getLocalName } from './utils';\r\n\r\nconst getFromAPI = (type) => {\r\n    const mapping = {\r\n        blog: {\r\n            en: 'reviews',\r\n            cn: '评论',\r\n        },\r\n        topic: {\r\n            en: 'board',\r\n            cn: '讨论',\r\n        },\r\n    };\r\n\r\n    return async (subjectID, showOriginalName) => {\r\n        // 官方提供的条目API文档见 https://github.com/bangumi/api/blob/3f3fa6390c468816f9883d24be488e41f8946159/docs-raw/Subject-API.md\r\n        const url = `https://api.bgm.tv/subject/${subjectID}?responseGroup=large`;\r\n        const subjectInfo = await ofetch(url);\r\n        return {\r\n            title: `${getLocalName(subjectInfo, showOriginalName)}的 Bangumi ${mapping[type].cn}`,\r\n            link: `https://bgm.tv/subject/${subjectInfo.id}/${mapping[type].en}`,\r\n            item: subjectInfo[type].map((article) => ({\r\n                title: `${article.user.nickname}：${article.title}`,\r\n                description: article.summary || '',\r\n                link: article.url.replace('http:', 'https:'),\r\n                pubDate: parseDate(article.timestamp, 'X'),\r\n                author: article.user.nickname,\r\n            })),\r\n        };\r\n    };\r\n};\r\nexport default getFromAPI;\r\n","import ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { getLocalName } from './utils';\r\n\r\nconst getEps = async (subjectID, showOriginalName) => {\r\n    const url = `https://api.bgm.tv/subject/${subjectID}?responseGroup=large`;\r\n    const epsInfo = await ofetch(url);\r\n    const activeEps = epsInfo.eps.filter((e) => e.status === 'Air');\r\n\r\n    return {\r\n        title: getLocalName(epsInfo, showOriginalName),\r\n        link: `https://bgm.tv/subject/${subjectID}`,\r\n        description: epsInfo.summary,\r\n        item: activeEps.map((e) => ({\r\n            title: `ep.${e.sort} ${getLocalName(e, showOriginalName)}`,\r\n            description: art(path.join(__dirname, '../templates/ep.art'), {\r\n                e,\r\n                epsInfo,\r\n            }),\r\n            pubDate: parseDate(e.airdate),\r\n            link: e.url.replace('http:', 'https:'),\r\n        })),\r\n    };\r\n};\r\nexport default getEps;\r\n","import { Route } from '@/types';\r\nimport getComments from './comments';\r\nimport getFromAPI from './offcial-subject-api';\r\nimport getEps from './ep';\r\nimport { queryToBoolean } from '@/utils/readable-social';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\nexport const route: Route = {\r\n    path: '/subject/:id/:type?/:showOriginalName?',\r\n    categories: ['anime'],\r\n    example: '/bangumi.tv/subject/328609/ep/true',\r\n    parameters: { id: '条目 id, 在条目页面的地址栏查看', type: '条目类型，可选值为 `ep`, `comments`, `blogs`, `topics`，默认为 `ep`', showOriginalName: '显示番剧标题原名，可选值 0/1/false/true，默认为 false' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['bgm.tv/subject/:id'],\r\n            target: '/tv/subject/:id',\r\n        },\r\n    ],\r\n    name: '条目的通用路由格式',\r\n    maintainers: ['JimenezLi'],\r\n    handler,\r\n    description: `::: warning\r\n  此通用路由仅用于对路由参数的描述，具体信息请查看下方与条目相关的路由\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const type = ctx.req.param('type') || 'ep';\r\n    const showOriginalName = queryToBoolean(ctx.req.param('showOriginalName'));\r\n    let response;\r\n    switch (type) {\r\n        case 'ep':\r\n            response = await getEps(id, showOriginalName);\r\n            break;\r\n        case 'comments':\r\n            response = await getComments(id, Number(ctx.req.query('minLength')) || 0);\r\n            break;\r\n        case 'blogs':\r\n            response = await getFromAPI('blog')(id, showOriginalName);\r\n            break;\r\n        case 'topics':\r\n            response = await getFromAPI('topic')(id, showOriginalName);\r\n            break;\r\n        default:\r\n            throw new InvalidParameterError(`暂不支持对${type}的订阅`);\r\n    }\r\n    return response;\r\n}\r\n"],"mappings":"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"}