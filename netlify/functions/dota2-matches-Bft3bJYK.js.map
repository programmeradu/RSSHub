{"version":3,"file":"dota2-matches-Bft3bJYK.js","names":["route: Route","got"],"sources":["../../lib/routes/liquipedia/dota2-matches.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/dota2/matches/:id',\r\n    categories: ['game'],\r\n    example: '/liquipedia/dota2/matches/Team_Aster',\r\n    parameters: { id: '战队名称，可在url中找到。例如:https://liquipedia.net/dota2/Team_Aster' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['liquipedia.net/dota2/:id'],\r\n        },\r\n    ],\r\n    name: 'Dota2 战队最近比赛结果',\r\n    maintainers: ['wzekin'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const team = ctx.req.param('id');\r\n    const url = `https://liquipedia.net/dota2/${team}`;\r\n    const response = await got({\r\n        method: 'get',\r\n        url,\r\n    });\r\n\r\n    const data = response.data;\r\n\r\n    const $ = load(data);\r\n    const list = $('div.recent-matches > table > tbody > tr[style]');\r\n\r\n    return {\r\n        title: `Liquipedia Dota2 ${team} Matches`,\r\n        link: url,\r\n        item: list?.toArray().map((item) => {\r\n            item = $(item);\r\n            let message = '';\r\n            if (item.attr('style') === 'background:rgb(240, 255, 240)') {\r\n                message = '胜';\r\n            } else if (item.attr('style') === 'background:rgb(249, 240, 242)') {\r\n                message = '败';\r\n            } else {\r\n                message = '平';\r\n            }\r\n            const date = item.find('td:nth-child(1)').text();\r\n            const time = item.find('td:nth-child(2)').text();\r\n            const tournament = item.find('td:nth-child(6) > a').text();\r\n            const dateTime = parseDate(date + ' ' + time);\r\n            const score = item.find('td:nth-child(7)').text();\r\n            const vs_team = item.find('td:nth-child(8) > span > span.team-template-text > a').text();\r\n\r\n            return {\r\n                title: `[${message}] ${score} ${vs_team}`,\r\n                description: `At ${tournament},  ${team} ${score} ${vs_team}`,\r\n                pubDate: dateTime,\r\n                link: url,\r\n                guid: url + dateTime,\r\n            };\r\n        }),\r\n    };\r\n}\r\n"],"mappings":"oTAKA,MAAaA,EAAe,CACxB,KAAM,qBACN,WAAY,CAAC,QACb,QAAS,uCACT,WAAY,CAAE,GAAI,4DAClB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,8BAGjB,KAAM,iBACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,EAAI,IAAI,MAAM,MACrB,EAAM,gCAAgC,IACtC,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,QAGE,EAAO,EAAS,KAEhB,EAAI,EAAK,GACT,EAAO,EAAE,kDAEf,MAAO,CACH,MAAO,oBAAoB,EAAK,UAChC,KAAM,EACN,KAAM,GAAM,UAAU,IAAK,GAAS,CAChC,EAAO,EAAE,GACT,IAAI,EAAU,GACd,AAKI,EALA,EAAK,KAAK,WAAa,gCACb,IACH,EAAK,KAAK,WAAa,gCACpB,IAEA,IAEd,IAAM,EAAO,EAAK,KAAK,mBAAmB,OACpC,EAAO,EAAK,KAAK,mBAAmB,OACpC,EAAa,EAAK,KAAK,uBAAuB,OAC9C,EAAW,EAAU,EAAO,IAAM,GAClC,EAAQ,EAAK,KAAK,mBAAmB,OACrC,EAAU,EAAK,KAAK,wDAAwD,OAElF,MAAO,CACH,MAAO,IAAI,EAAQ,IAAI,EAAM,GAAG,IAChC,YAAa,MAAM,EAAW,KAAK,EAAK,GAAG,EAAM,GAAG,IACpD,QAAS,EACT,KAAM,EACN,KAAM,EAAM"}