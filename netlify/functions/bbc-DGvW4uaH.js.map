{"version":3,"file":"bbc-DGvW4uaH.js","names":["route: Route","parser","cache","ofetch","utils"],"sources":["../../lib/routes/bbc/utils.ts","../../lib/routes/bbc/index.ts"],"sourcesContent":["const ProcessFeed = ($) => {\r\n    // by default treat it as a hybrid news with video and story-body__inner\r\n    let content = $('#main-content article');\r\n\r\n    if (content.length === 0) {\r\n        // it's a video news with video and story-body\r\n        content = $('div.story-body');\r\n    }\r\n\r\n    if (content.length === 0) {\r\n        // chinese version has different structure\r\n        content = $('main[role=\"main\"]');\r\n    }\r\n\r\n    // remove useless DOMs\r\n    content.find('header, section, [data-testid=\"bbc-logo-wrapper\"]').remove();\r\n\r\n    content.find('noscript').each((i, e) => {\r\n        $(e).parent().html($(e).html());\r\n    });\r\n\r\n    content.find('img').each((i, e) => {\r\n        if (!$(e).attr('src') && $(e).attr('srcSet')) {\r\n            const srcs = $(e).attr('srcSet').split(', ');\r\n            const lastSrc = srcs.at(-1);\r\n            $(e).attr('src', lastSrc.split(' ')[0]);\r\n        }\r\n    });\r\n\r\n    content.find('[data-component=\"media-block\"] figcaption').prepend('<span>View video in browser: </span>');\r\n\r\n    return content.html();\r\n};\r\n\r\nexport default { ProcessFeed };\r\n","import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport parser from '@/utils/rss-parser';\r\nimport { load } from 'cheerio';\r\nimport utils from './utils';\r\nimport ofetch from '@/utils/ofetch';\r\nexport const route: Route = {\r\n    path: '/:site?/:channel?',\r\n    name: 'News',\r\n    maintainers: ['HenryQW', 'DIYgod', 'pseudoyu'],\r\n    handler,\r\n    example: '/bbc/world-asia',\r\n    parameters: {\r\n        site: '语言，简体或繁体中文',\r\n        channel: 'channel, default to `top stories`',\r\n    },\r\n    categories: ['traditional-media'],\r\n    description: `Provides a better reading experience (full text articles) over the official ones.\r\n\r\n    Support major channels, refer to [BBC RSS feeds](https://www.bbc.co.uk/news/10628494). Eg, \\`business\\` for \\`https://feeds.bbci.co.uk/news/business/rss.xml\\`.\r\n\r\n    -   Channel contains sub-directories, such as \\`https://feeds.bbci.co.uk/news/world/asia/rss.xml\\`, replace \\`/\\` with \\`-\\`, \\`/bbc/world-asia\\`.`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    let feed, title, link;\r\n\r\n    // 为了向下兼容，这里 site 对应的是中文网文档中的 lang，英文网文档中的 channel\r\n    // 英文网不会用到 channel\r\n    const { site, channel } = ctx.req.param();\r\n\r\n    if (site) {\r\n        switch (site.toLowerCase()) {\r\n            case 'chinese':\r\n                title = 'BBC News 中文网';\r\n\r\n                feed = await (channel ? parser.parseURL(`https://www.bbc.co.uk/zhongwen/simp/${channel}/index.xml`) : parser.parseURL('https://www.bbc.co.uk/zhongwen/simp/index.xml'));\r\n                break;\r\n\r\n            case 'traditionalchinese':\r\n                title = 'BBC News 中文網';\r\n\r\n                feed = await (channel ? parser.parseURL(`https://www.bbc.co.uk/zhongwen/trad/${channel}/index.xml`) : parser.parseURL('https://www.bbc.co.uk/zhongwen/trad/index.xml'));\r\n                link = 'https://www.bbc.com/zhongwen/trad';\r\n                break;\r\n\r\n            // default to bbc.com\r\n            default:\r\n                feed = await parser.parseURL(`https://feeds.bbci.co.uk/news/${site.split('-').join('/')}/rss.xml`);\r\n                title = `BBC News ${site}`;\r\n                link = `https://www.bbc.co.uk/news/${site.split('-').join('/')}`;\r\n                break;\r\n        }\r\n    } else {\r\n        feed = await parser.parseURL('https://feeds.bbci.co.uk/news/rss.xml');\r\n        title = 'BBC News Top Stories';\r\n        link = 'https://www.bbc.co.uk/news';\r\n    }\r\n\r\n    const items = await Promise.all(\r\n        feed.items\r\n            .filter((item) => item && item.link)\r\n            .map((item) =>\r\n                cache.tryGet(item.link, async () => {\r\n                    try {\r\n                        const linkURL = new URL(item.link);\r\n                        if (linkURL.hostname === 'www.bbc.com') {\r\n                            linkURL.hostname = 'www.bbc.co.uk';\r\n                        }\r\n\r\n                        const response = await ofetch(linkURL.href, {\r\n                            retryStatusCodes: [403],\r\n                        });\r\n\r\n                        const $ = load(response);\r\n\r\n                        const path = linkURL.pathname;\r\n\r\n                        let description;\r\n\r\n                        switch (true) {\r\n                            case path.startsWith('/sport'):\r\n                                description = item.content;\r\n                                break;\r\n                            case path.startsWith('/sounds/play'):\r\n                                description = item.content;\r\n                                break;\r\n                            case path.startsWith('/news/live'):\r\n                                description = item.content;\r\n                                break;\r\n                            default:\r\n                                description = utils.ProcessFeed($);\r\n                        }\r\n\r\n                        return {\r\n                            title: item.title || '',\r\n                            description: description || '',\r\n                            pubDate: item.pubDate || new Date().toUTCString(),\r\n                            link: item.link,\r\n                        };\r\n                    } catch {\r\n                        return {} as Record<string, any>;\r\n                    }\r\n                })\r\n            )\r\n    );\r\n\r\n    return {\r\n        title,\r\n        link,\r\n        image: 'https://www.bbc.com/favicon.ico',\r\n        description: title,\r\n        item: items.filter((item) => Object.keys(item).length > 0),\r\n    };\r\n}\r\n"],"mappings":"4TAAA,MAAM,EAAe,GAAM,CAEvB,IAAI,EAAU,EAAE,yBA6BhB,OA3BI,EAAQ,SAAW,IAEnB,EAAU,EAAE,mBAGZ,EAAQ,SAAW,IAEnB,EAAU,EAAE,sBAIhB,EAAQ,KAAK,qDAAqD,SAElE,EAAQ,KAAK,YAAY,MAAM,EAAG,IAAM,CACpC,EAAE,GAAG,SAAS,KAAK,EAAE,GAAG,UAG5B,EAAQ,KAAK,OAAO,MAAM,EAAG,IAAM,CAC/B,GAAI,CAAC,EAAE,GAAG,KAAK,QAAU,EAAE,GAAG,KAAK,UAAW,CAC1C,IAAM,EAAO,EAAE,GAAG,KAAK,UAAU,MAAM,MACjC,EAAU,EAAK,GAAG,IACxB,EAAE,GAAG,KAAK,MAAO,EAAQ,MAAM,KAAK,OAI5C,EAAQ,KAAK,6CAA6C,QAAQ,wCAE3D,EAAQ,QAGnB,IAAA,EAAe,CAAE,eC5BjB,MAAaA,EAAe,CACxB,KAAM,oBACN,KAAM,OACN,YAAa,CAAC,UAAW,SAAU,YACnC,UACA,QAAS,kBACT,WAAY,CACR,KAAM,aACN,QAAS,qCAEb,WAAY,CAAC,qBACb,YAAa,0YAOjB,eAAe,EAAQ,EAAK,CACxB,IAAI,EAAM,EAAO,EAIX,CAAE,OAAM,WAAY,EAAI,IAAI,QAElC,GAAI,EACA,OAAQ,EAAK,cAAb,CACI,IAAK,UACD,EAAQ,eAER,EAAO,MAAO,EAAUC,EAAO,SAAS,uCAAuC,EAAQ,aAAeA,EAAO,SAAS,kDACtH,MAEJ,IAAK,qBACD,EAAQ,eAER,EAAO,MAAO,EAAUA,EAAO,SAAS,uCAAuC,EAAQ,aAAeA,EAAO,SAAS,kDACtH,EAAO,oCACP,MAGJ,QACI,EAAO,MAAMA,EAAO,SAAS,iCAAiC,EAAK,MAAM,KAAK,KAAK,KAAK,WACxF,EAAQ,YAAY,IACpB,EAAO,8BAA8B,EAAK,MAAM,KAAK,KAAK,OAC1D,WAGR,EAAO,MAAMA,EAAO,SAAS,yCAC7B,EAAQ,uBACR,EAAO,6BAGX,IAAM,EAAQ,MAAM,QAAQ,IACxB,EAAK,MACA,OAAQ,GAAS,GAAQ,EAAK,MAC9B,IAAK,GACFC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,GAAI,CACA,IAAM,EAAU,IAAI,IAAI,EAAK,MACzB,EAAQ,WAAa,gBACrB,EAAQ,SAAW,iBAGvB,IAAM,EAAW,MAAMC,EAAO,EAAQ,KAAM,CACxC,iBAAkB,CAAC,OAGjB,EAAI,EAAK,GAET,EAAO,EAAQ,SAEjB,EAEJ,OAAQ,GAAR,CACI,KAAK,EAAK,WAAW,UACjB,EAAc,EAAK,QACnB,MACJ,KAAK,EAAK,WAAW,gBACjB,EAAc,EAAK,QACnB,MACJ,KAAK,EAAK,WAAW,cACjB,EAAc,EAAK,QACnB,MACJ,QACI,EAAcC,EAAM,YAAY,GAGxC,MAAO,CACH,MAAO,EAAK,OAAS,GACrB,YAAa,GAAe,GAC5B,QAAS,EAAK,SAAW,IAAI,OAAO,cACpC,KAAM,EAAK,WAEX,CACJ,MAAO,QAM3B,MAAO,CACH,QACA,OACA,MAAO,kCACP,YAAa,EACb,KAAM,EAAM,OAAQ,GAAS,OAAO,KAAK,GAAM,OAAS"}