{"version":3,"file":"source-D3N7f-pS.js","names":["route: Route","cache","ofetch"],"sources":["../../lib/routes/daily/source.ts"],"sourcesContent":["import { DataItem, Route } from '@/types';\r\nimport { baseUrl, getBuildId, getData, getList } from './utils';\r\nimport ofetch from '@/utils/ofetch';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\n\r\ninterface Source {\r\n    id: string;\r\n    name: string;\r\n    handle: string;\r\n    image: string;\r\n    permalink: string;\r\n    description: string;\r\n    type: string;\r\n}\r\n\r\nconst sourceFeedQuery = `\r\nquery SourceFeed($source: ID!, $loggedIn: Boolean! = false, $first: Int, $after: String, $ranking: Ranking, $supportedTypes: [String!]) {\r\n  page: sourceFeed(\r\n    source: $source\r\n    first: $first\r\n    after: $after\r\n    ranking: $ranking\r\n    supportedTypes: $supportedTypes\r\n  ) {\r\n    ...FeedPostConnection\r\n  }\r\n}\r\n\r\nfragment FeedPostConnection on PostConnection {\r\n  pageInfo {\r\n    hasNextPage\r\n    endCursor\r\n  }\r\n  edges {\r\n    node {\r\n      ...FeedPost\r\n      pinnedAt\r\n      contentHtml\r\n      ...UserPost @include(if: $loggedIn)\r\n    }\r\n  }\r\n}\r\n\r\nfragment FeedPost on Post {\r\n  ...FeedPostInfo\r\n  sharedPost {\r\n    id\r\n    title\r\n    image\r\n    readTime\r\n    permalink\r\n    commentsPermalink\r\n    createdAt\r\n    type\r\n    tags\r\n    source {\r\n      id\r\n      handle\r\n      permalink\r\n      image\r\n    }\r\n    slug\r\n  }\r\n  trending\r\n  feedMeta\r\n  collectionSources {\r\n    handle\r\n    image\r\n  }\r\n  numCollectionSources\r\n  updatedAt\r\n  slug\r\n}\r\n\r\nfragment FeedPostInfo on Post {\r\n  id\r\n  title\r\n  image\r\n  readTime\r\n  permalink\r\n  commentsPermalink\r\n  createdAt\r\n  commented\r\n  bookmarked\r\n  views\r\n  numUpvotes\r\n  numComments\r\n  summary\r\n  bookmark {\r\n    remindAt\r\n  }\r\n  author {\r\n    id\r\n    name\r\n    image\r\n    username\r\n    permalink\r\n  }\r\n  type\r\n  tags\r\n  source {\r\n    id\r\n    handle\r\n    name\r\n    permalink\r\n    image\r\n    type\r\n  }\r\n  userState {\r\n    vote\r\n    flags {\r\n      feedbackDismiss\r\n    }\r\n  }\r\n  slug\r\n}\r\n\r\nfragment UserPost on Post {\r\n  read\r\n  upvoted\r\n  commented\r\n  bookmarked\r\n  downvoted\r\n}`;\r\n\r\nexport const route: Route = {\r\n    path: '/source/:sourceId/:innerSharedContent?',\r\n    example: '/daily/source/hn',\r\n    parameters: {\r\n        sourceId: 'The source id',\r\n        innerSharedContent: {\r\n            description: 'Where to Fetch inner Shared Posts instead of original',\r\n            default: 'false',\r\n            options: [\r\n                { value: 'false', label: 'False' },\r\n                { value: 'true', label: 'True' },\r\n            ],\r\n        },\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['app.daily.dev/sources/:sourceId'],\r\n        },\r\n    ],\r\n    name: 'Source Posts',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n    url: 'app.daily.dev',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const sourceId = ctx.req.param('sourceId');\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 10;\r\n    const innerSharedContent = ctx.req.param('innerSharedContent') ? JSON.parse(ctx.req.param('innerSharedContent')) : false;\r\n\r\n    const link = `${baseUrl}/sources/${sourceId}`;\r\n    const buildId = await getBuildId();\r\n\r\n    const userData = (await cache.tryGet(`daily:source:${sourceId}`, async () => {\r\n        const response = await ofetch(`${baseUrl}/_next/data/${buildId}/en/sources/${sourceId}.json`);\r\n        return response.pageProps.source;\r\n    })) as Source;\r\n\r\n    const items = await cache.tryGet(\r\n        `daily:source:${sourceId}:posts`,\r\n        async () => {\r\n            const edges = await getData({\r\n                query: sourceFeedQuery,\r\n                variables: {\r\n                    source: sourceId,\r\n                    supportedTypes: ['article', 'video:youtube', 'collection'],\r\n                    period: 30,\r\n                    first: limit,\r\n                    after: '',\r\n                    loggedIn: false,\r\n                },\r\n            });\r\n            return getList(edges, innerSharedContent, true);\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    );\r\n\r\n    return {\r\n        title: `${userData.name} posts on daily.dev`,\r\n        description: userData.description,\r\n        link,\r\n        item: items as DataItem[],\r\n        image: userData.image,\r\n        logo: userData.image,\r\n        icon: userData.image,\r\n        language: 'en-us',\r\n    };\r\n}\r\n"],"mappings":"sYAgBA,MA8GaA,EAAe,CACxB,KAAM,yCACN,QAAS,mBACT,WAAY,CACR,SAAU,gBACV,mBAAoB,CAChB,YAAa,wDACb,QAAS,QACT,QAAS,CACL,CAAE,MAAO,QAAS,MAAO,SACzB,CAAE,MAAO,OAAQ,MAAO,WAIpC,MAAO,CACH,CACI,OAAQ,CAAC,qCAGjB,KAAM,eACN,YAAa,CAAC,UACd,UACA,IAAK,iBAGT,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAW,EAAI,IAAI,MAAM,YACzB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAC/E,EAAqB,EAAI,IAAI,MAAM,sBAAwB,KAAK,MAAM,EAAI,IAAI,MAAM,uBAAyB,GAE7G,EAAO,GAAG,EAAQ,WAAW,IAC7B,EAAU,MAAM,IAEhB,EAAY,MAAMC,EAAM,OAAO,gBAAgB,IAAY,SAAY,CACzE,IAAM,EAAW,MAAMC,EAAO,GAAG,EAAQ,cAAc,EAAQ,cAAc,EAAS,QACtF,OAAO,EAAS,UAAU,SAGxB,EAAQ,MAAMD,EAAM,OACtB,gBAAgB,EAAS,QACzB,SAAY,CACR,IAAM,EAAQ,MAAM,EAAQ,CACxB,MAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GACP,UAAW,CACP,OAAQ,EACR,eAAgB,CAAC,UAAW,gBAAiB,cAC7C,OAAQ,GACR,MAAO,EACP,MAAO,GACP,SAAU,MAGlB,OAAO,EAAQ,EAAO,EAAoB,KAE9C,EAAO,MAAM,YACb,IAGJ,MAAO,CACH,MAAO,GAAG,EAAS,KAAK,qBACxB,YAAa,EAAS,YACtB,OACA,KAAM,EACN,MAAO,EAAS,MAChB,KAAM,EAAS,MACf,KAAM,EAAS,MACf,SAAU"}