{"version":3,"file":"tags-BctQcY3_.js","names":["cache","ofetch","node","route: Route"],"sources":["../../lib/routes/matters/tags.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport * as cheerio from 'cheerio';\r\nimport cache from '@/utils/cache';\r\nimport { baseUrl, gqlEndpoint, parseItem } from './utils';\r\n\r\ninterface Tag {\r\n    type: string;\r\n    generated: boolean;\r\n    id: string;\r\n    typename: string;\r\n}\r\n\r\nconst getTagId = (tid: string) =>\r\n    cache.tryGet(`matters:tags:${tid}`, async () => {\r\n        const response = await ofetch(`${baseUrl}/tags/${tid}`);\r\n        const $ = cheerio.load(response);\r\n        const nextData = JSON.parse($('script#__NEXT_DATA__').text());\r\n\r\n        const node = Object.entries(nextData.props.apolloState.data.ROOT_QUERY)\r\n            .find(([key]) => key.startsWith('node'))\r\n            ?.pop() as Tag;\r\n\r\n        return node?.id.split(':')[1];\r\n    });\r\n\r\nconst handler = async (ctx) => {\r\n    const { tid } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 20;\r\n\r\n    const tagId = await getTagId(tid);\r\n\r\n    const gqlResponse = await ofetch(gqlEndpoint, {\r\n        method: 'POST',\r\n        body: {\r\n            query: `{\r\n                node(input: {id: \"${tagId}\"}) {\r\n                  ... on Tag {\r\n                    content\r\n                    description\r\n                    articles(input: {first: ${limit}}) {\r\n                      edges {\r\n                        node {\r\n                          title\r\n                          shortHash\r\n                          content\r\n                          createdAt\r\n                          author {\r\n                            displayName\r\n                          }\r\n                          tags {\r\n                            content\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }`,\r\n        },\r\n    });\r\n\r\n    const node = gqlResponse.data.node;\r\n\r\n    return {\r\n        title: `Matters | ${node.content}`,\r\n        link: `${baseUrl}/tags/${tid}`,\r\n        description: node.description,\r\n        item: node.articles.edges.map(({ node }) => parseItem(node)),\r\n    };\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/tags/:tid',\r\n    name: 'Tags',\r\n    example: '/matters/tags/972-哲學',\r\n    parameters: { tid: 'Tag id, can be found in the url of the tag page' },\r\n    maintainers: ['Cerebrater'],\r\n    handler,\r\n    radar: [\r\n        {\r\n            source: ['matters.town/tags/:tid'],\r\n        },\r\n    ],\r\n};\r\n"],"mappings":"wWAaA,MAAM,EAAY,GACdA,EAAM,OAAO,gBAAgB,IAAO,SAAY,CAC5C,IAAM,EAAW,MAAMC,EAAO,GAAG,EAAQ,QAAQ,KAC3C,EAAI,EAAQ,KAAK,GACjB,EAAW,KAAK,MAAM,EAAE,wBAAwB,QAEhD,EAAO,OAAO,QAAQ,EAAS,MAAM,YAAY,KAAK,YACvD,MAAM,CAAC,KAAS,EAAI,WAAW,UAC9B,MAEN,OAAO,GAAM,GAAG,MAAM,KAAK,KAG7B,EAAU,KAAO,IAAQ,CAC3B,GAAM,CAAE,OAAQ,EAAI,IAAI,QAClB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAE/E,EAAQ,MAAM,EAAS,GAEvB,EAAc,MAAMA,EAAO,EAAa,CAC1C,OAAQ,OACR,KAAM,CACF,MAAO;oCACiB,EAAM;;;;8CAII,EAAM;;;;;;;;;;;;;;;;;;oBAsB1C,EAAO,EAAY,KAAK,KAE9B,MAAO,CACH,MAAO,aAAa,EAAK,UACzB,KAAM,GAAG,EAAQ,QAAQ,IACzB,YAAa,EAAK,YAClB,KAAM,EAAK,SAAS,MAAM,KAAK,CAAE,KAAA,KAAW,EAAUC,MAIjDC,EAAe,CACxB,KAAM,aACN,KAAM,OACN,QAAS,uBACT,WAAY,CAAE,IAAK,mDACnB,YAAa,CAAC,cACd,UACA,MAAO,CACH,CACI,OAAQ,CAAC"}