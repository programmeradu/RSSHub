{"version":3,"file":"ndss-BT4NFTZS.js","names":["route: Route","got","items","cache","$"],"sources":["../../lib/routes/ndss-symposium/ndss.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nconst url = 'https://www.ndss-symposium.org';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/ndss',\r\n    categories: ['journal'],\r\n    example: '/ndss-symposium/ndss',\r\n    parameters: {},\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['ndss-symposium.org/'],\r\n        },\r\n    ],\r\n    name: 'Accepted papers',\r\n    maintainers: ['ZeddYu'],\r\n    handler,\r\n    url: 'ndss-symposium.org/',\r\n    description: `Return results from 2020`,\r\n};\r\n\r\nasync function handler() {\r\n    // use wordpress api to get data\r\n    const { data } = await got(`${url}/wp-json/wp/v2/pages?slug=accepted-papers`);\r\n\r\n    const items = await Promise.all(\r\n        data.map(async (elem) => {\r\n            const $ = load(elem.content.rendered);\r\n            const link = elem.link;\r\n            const pubDate = parseDate(elem.date);\r\n\r\n            const divMatch = $('div h3')\r\n                .toArray()\r\n                .map((item) => {\r\n                    item = $(item);\r\n                    const title = item.text().trim();\r\n                    return {\r\n                        title,\r\n                        author: item.siblings().text().trim().replaceAll('\\n', '').replaceAll(/\\s+/g, ' '),\r\n                        link: item.siblings('a').attr('href'),\r\n                        pubDate,\r\n                    };\r\n                });\r\n            if (divMatch.length > 0) {\r\n                const items = await Promise.all(\r\n                    divMatch.map((item) => {\r\n                        if (item.link) {\r\n                            return cache.tryGet(item.link, async () => {\r\n                                // some titles and authos are not complete\r\n                                const response = await got(item.link);\r\n                                const $ = load(response.body);\r\n                                item.description = $('.paper-data').text().trim().replaceAll('\\n', '');\r\n                                item.title = $('h1.entry-title').text().trim().replaceAll('\\n', '').replaceAll(/\\s+/g, ' ');\r\n                                item.author = $('h1.entry-title').siblings().text().trim().replaceAll('\\n', '').replaceAll(/\\s+/g, ' ');\r\n                                return item;\r\n                            });\r\n                        } else {\r\n                            item.link = `${link}#${item.title}`;\r\n                            return item;\r\n                        }\r\n                    })\r\n                );\r\n                return items;\r\n            } else {\r\n                const pMatch = $('p strong')\r\n                    .toArray()\r\n                    .map((item) => {\r\n                        item = $(item);\r\n                        const title = item.text().trim();\r\n                        return {\r\n                            title,\r\n                            author: item\r\n                                .parent()\r\n                                .contents()\r\n                                .filter((_, e) => e.nodeType === 3)\r\n                                .text()\r\n                                .trim()\r\n                                .replaceAll('\\n', '')\r\n                                .replaceAll(/\\s+/g, ' '),\r\n                            link: `${link}#${title}`,\r\n                            pubDate,\r\n                        };\r\n                    });\r\n                return pMatch;\r\n            }\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: 'NDSS',\r\n        link: url,\r\n        description: 'The Network and Distributed System Security (NDSS) Symposium Accpeted Papers',\r\n        allowEmpty: true,\r\n        item: items.flat(),\r\n    };\r\n}\r\n"],"mappings":"wWAIA,MAAM,EAAM,iCAGCA,EAAe,CACxB,KAAM,QACN,WAAY,CAAC,WACb,QAAS,uBACT,WAAY,GACZ,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,yBAGjB,KAAM,kBACN,YAAa,CAAC,UACd,UACA,IAAK,sBACL,YAAa,4BAGjB,eAAe,GAAU,CAErB,GAAM,CAAE,QAAS,MAAMC,EAAI,GAAG,EAAI,4CAE5B,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAI,KAAO,IAAS,CACrB,IAAM,EAAI,EAAK,EAAK,QAAQ,UACtB,EAAO,EAAK,KACZ,EAAU,EAAU,EAAK,MAEzB,EAAW,EAAE,UACd,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GACT,IAAM,EAAQ,EAAK,OAAO,OAC1B,MAAO,CACH,QACA,OAAQ,EAAK,WAAW,OAAO,OAAO,WAAW;EAAM,IAAI,WAAW,OAAQ,KAC9E,KAAM,EAAK,SAAS,KAAK,KAAK,QAC9B,aAGZ,GAAI,EAAS,OAAS,EAAG,CACrB,IAAMC,EAAQ,MAAM,QAAQ,IACxB,EAAS,IAAK,GACN,EAAK,KACEC,EAAM,OAAO,EAAK,KAAM,SAAY,CAEvC,IAAM,EAAW,MAAMF,EAAI,EAAK,MAC1BG,EAAI,EAAK,EAAS,MAIxB,MAHA,GAAK,YAAcA,EAAE,eAAe,OAAO,OAAO,WAAW;EAAM,IACnE,EAAK,MAAQA,EAAE,kBAAkB,OAAO,OAAO,WAAW;EAAM,IAAI,WAAW,OAAQ,KACvF,EAAK,OAASA,EAAE,kBAAkB,WAAW,OAAO,OAAO,WAAW;EAAM,IAAI,WAAW,OAAQ,KAC5F,KAGX,EAAK,KAAO,GAAG,EAAK,GAAG,EAAK,QACrB,KAInB,OAAOF,MACJ,CACH,IAAM,EAAS,EAAE,YACZ,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GACT,IAAM,EAAQ,EAAK,OAAO,OAC1B,MAAO,CACH,QACA,OAAQ,EACH,SACA,WACA,QAAQ,EAAG,IAAM,EAAE,WAAa,GAChC,OACA,OACA,WAAW;EAAM,IACjB,WAAW,OAAQ,KACxB,KAAM,GAAG,EAAK,GAAG,IACjB,aAGZ,OAAO,MAKnB,MAAO,CACH,MAAO,OACP,KAAM,EACN,YAAa,+EACb,WAAY,GACZ,KAAM,EAAM"}