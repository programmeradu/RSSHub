{"version":3,"file":"topics-D8lU_X_j.js","names":["route: Route","got","cache","$","author"],"sources":["../../lib/routes/cbc/topics.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\n\r\nexport const route: Route = {\r\n    path: '/topics/:topic?',\r\n    categories: ['traditional-media'],\r\n    example: '/cbc/topics',\r\n    parameters: { topic: 'Channel,`Top Stories` by default. For secondary channel like `canada/toronto`, use `-` to replace `/`' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['cbc.ca/news'],\r\n            target: '/topics',\r\n        },\r\n    ],\r\n    name: 'News',\r\n    maintainers: ['wb14123'],\r\n    handler,\r\n    url: 'cbc.ca/news',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const baseUrl = 'https://www.cbc.ca';\r\n    const topic = ctx.req.param('topic') || '';\r\n    const url = `${baseUrl}/news${topic ? `/${topic.replace('-', '/')}` : ''}`;\r\n\r\n    const response = await got(url);\r\n\r\n    const data = response.data;\r\n\r\n    const $ = load(data);\r\n    const links = [];\r\n\r\n    function pushLinks(index, item) {\r\n        const link = item.attribs.href;\r\n        if (link.startsWith('/')) {\r\n            links.push(baseUrl + link);\r\n        }\r\n    }\r\n\r\n    $('a.contentWrapper').each(pushLinks);\r\n    $('a.card').each(pushLinks);\r\n\r\n    const out = await Promise.all(\r\n        links.map((link) =>\r\n            cache.tryGet(link, async () => {\r\n                const result = await got(link);\r\n\r\n                const $ = load(result.data);\r\n\r\n                const head = JSON.parse($('script[type=\"application/ld+json\"]').first().text());\r\n                if (!head) {\r\n                    return [];\r\n                }\r\n\r\n                const title = head.headline;\r\n                let author = '';\r\n                if (head.author) {\r\n                    author = head.author.map((author) => author.name).join(' & ');\r\n                }\r\n                const pubDate = head.datePublished;\r\n                const descriptionDom = $('div[data-cy=storyWrapper]');\r\n                descriptionDom.find('div[class=share]').remove();\r\n                const description = descriptionDom.html();\r\n\r\n                return { title, author, pubDate, description, link };\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: $('title').text(),\r\n        link: url,\r\n        item: out.filter((x) => x.title),\r\n    };\r\n}\r\n"],"mappings":"mTAKA,MAAaA,EAAe,CACxB,KAAM,kBACN,WAAY,CAAC,qBACb,QAAS,cACT,WAAY,CAAE,MAAO,yGACrB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,eACT,OAAQ,YAGhB,KAAM,OACN,YAAa,CAAC,WACd,UACA,IAAK,eAGT,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAU,qBACV,EAAQ,EAAI,IAAI,MAAM,UAAY,GAClC,EAAM,GAAG,EAAQ,OAAO,EAAQ,IAAI,EAAM,QAAQ,IAAK,OAAS,KAEhE,EAAW,MAAMC,EAAI,GAErB,EAAO,EAAS,KAEhB,EAAI,EAAK,GACT,EAAQ,GAEd,SAAS,EAAU,EAAO,EAAM,CAC5B,IAAM,EAAO,EAAK,QAAQ,KACtB,EAAK,WAAW,MAChB,EAAM,KAAK,EAAU,GAI7B,EAAE,oBAAoB,KAAK,GAC3B,EAAE,UAAU,KAAK,GAEjB,IAAM,EAAM,MAAM,QAAQ,IACtB,EAAM,IAAK,GACPC,EAAM,OAAO,EAAM,SAAY,CAC3B,IAAM,EAAS,MAAMD,EAAI,GAEnBE,EAAI,EAAK,EAAO,MAEhB,EAAO,KAAK,MAAMA,EAAE,sCAAsC,QAAQ,QACxE,GAAI,CAAC,EACD,MAAO,GAGX,IAAM,EAAQ,EAAK,SACf,EAAS,GACT,EAAK,SACL,EAAS,EAAK,OAAO,IAAK,GAAWC,EAAO,MAAM,KAAK,QAE3D,IAAM,EAAU,EAAK,cACf,EAAiBD,EAAE,6BACzB,EAAe,KAAK,oBAAoB,SACxC,IAAM,EAAc,EAAe,OAEnC,MAAO,CAAE,QAAO,SAAQ,UAAS,cAAa,YAK1D,MAAO,CACH,MAAO,EAAE,SAAS,OAClB,KAAM,EACN,KAAM,EAAI,OAAQ,GAAM,EAAE"}