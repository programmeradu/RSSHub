{"version":3,"file":"utils-ClHazoih.js","names":["category: string[]","got","cache","name"],"sources":["../../lib/routes/weibo/utils.ts"],"sourcesContent":["import cache from '@/utils/cache';\r\nimport querystring from 'node:querystring';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { fallback, queryToBoolean, queryToInteger } from '@/utils/readable-social';\r\n\r\nconst weiboUtils = {\r\n    formatTitle: (html) =>\r\n        html\r\n            .replaceAll(/<span class=[\"']url-icon[\"']><img\\s[^>]*?alt=[\"']?([^>]+?)[\"']?\\s[^>]*?\\/?><\\/span>/g, '$1') // 表情转换\r\n            .replaceAll(/<span class=[\"']url-icon[\"']>(<img\\s[^>]*>)<\\/span>/g, '') // 去掉所有图标\r\n            .replaceAll(/<img\\s[^<]*>/g, '[图片]')\r\n            // impossible to have inline script in weibo posts, but CodeQL complains about it\r\n            // Dismiss it through the UI: https://github.com/github/codeql/issues/11427\r\n            .replaceAll(/<[^<]*>/g, '')\r\n            .replaceAll('\\n', ' ')\r\n            .trim(),\r\n    formatExtended: (ctx, status, uid, params = {}, picsPrefixes = []) => {\r\n        // `uid = undefined` to explicitly mark it as optional, avoiding IDEs prompting warnings\r\n\r\n        // undefined and strings like \"1\" is also safely parsed, so no if branch is needed\r\n        const routeParams = querystring.parse(ctx.req.param('routeParams'));\r\n\r\n        const mergedParams = {\r\n            readable: fallback(params.readable, queryToBoolean(routeParams.readable), false),\r\n            authorNameBold: fallback(params.authorNameBold, queryToBoolean(routeParams.authorNameBold), false),\r\n            showAuthorInTitle: fallback(params.showAuthorInTitle, queryToBoolean(routeParams.showAuthorInTitle), false),\r\n            showAuthorInDesc: fallback(params.showAuthorInDesc, queryToBoolean(routeParams.showAuthorInDesc), false),\r\n            showAuthorAvatarInDesc: fallback(params.showAuthorAvatarInDesc, queryToBoolean(routeParams.showAuthorAvatarInDesc), false),\r\n            showAtBeforeAuthor: fallback(params.showAtBeforeAuthor, null, false),\r\n            showEmojiForRetweet: fallback(params.showEmojiForRetweet, queryToBoolean(routeParams.showEmojiForRetweet), false),\r\n            showRetweetTextInTitle: fallback(params.showRetweetTextInTitle, queryToBoolean(routeParams.showRetweetTextInTitle), true),\r\n            addLinkForPics: fallback(params.addLinkForPics, queryToBoolean(routeParams.addLinkForPics), false),\r\n            showTimestampInDescription: fallback(params.showTimestampInDescription, queryToBoolean(routeParams.showTimestampInDescription), false),\r\n\r\n            widthOfPics: fallback(params.widthOfPics, queryToInteger(routeParams.widthOfPics), -1),\r\n            heightOfPics: fallback(params.heightOfPics, queryToInteger(routeParams.heightOfPics), -1),\r\n            sizeOfAuthorAvatar: fallback(params.sizeOfAuthorAvatar, queryToInteger(routeParams.sizeOfAuthorAvatar), 48),\r\n            showEmojiInDescription: fallback(params.showEmojiInDescription, queryToInteger(routeParams.showEmojiInDescription), true),\r\n            showLinkIconInDescription: fallback(params.showLinkIconInDescription, queryToInteger(routeParams.showLinkIconInDescription), true),\r\n            preferMobileLink: fallback(params.preferMobileLink, queryToBoolean(routeParams.preferMobileLink), false),\r\n        };\r\n\r\n        params = mergedParams;\r\n\r\n        const {\r\n            readable,\r\n            authorNameBold,\r\n            showAuthorInTitle,\r\n            showAuthorInDesc,\r\n            showAuthorAvatarInDesc,\r\n            showAtBeforeAuthor,\r\n            showEmojiForRetweet,\r\n            showRetweetTextInTitle,\r\n            addLinkForPics,\r\n            showTimestampInDescription,\r\n\r\n            widthOfPics,\r\n            heightOfPics,\r\n            sizeOfAuthorAvatar,\r\n            showEmojiInDescription,\r\n            showLinkIconInDescription,\r\n            preferMobileLink,\r\n        } = params;\r\n\r\n        let retweeted = '';\r\n        // 长文章的处理\r\n        let htmlNewLineUnreplaced = (status.longText && status.longText.longTextContent) || status.text || '';\r\n        // 表情图标转换为文字\r\n        if (!showEmojiInDescription) {\r\n            htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll(/<span class=[\"']?url-icon[\"']?><img\\s[^>]*?alt=[\"']?([^>]+?)[\"']?\\s[^>]*?\\/><\\/span>/g, '$1');\r\n        }\r\n        // 去掉链接的图标，保留 a 标签链接\r\n        if (!showLinkIconInDescription) {\r\n            htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll(/(<a\\s[^>]*>)<span class=[\"']?url-icon[\"']?><img\\s[^>]*><\\/span>[^<>]*?<span class=[\"']?surl-text[\"']?>([^<>]*?)<\\/span><\\/a>/g, '$1$2</a>');\r\n        }\r\n\r\n        // 提取 话题作为 category\r\n        const category: string[] = htmlNewLineUnreplaced.match(/<span class=[\"']?surl-text[\"']?>#([^<>]*?)#<\\/span>/g)?.map((e) => e?.match(/#([^#]+)#/)?.[1]);\r\n\r\n        // 去掉乱七八糟的图标  // 不需要，上述的替换应该已经把所有的图标都替换掉了，且这条 regex 会破坏上述替换不发生时的输出\r\n        // htmlNewLineUnreplaced = htmlNewLineUnreplaced.replace(/<span class=[\"']?url-icon[\"']?>(<img\\s[^>]*?>)<\\/span>/g, '');\r\n        // 将行内图标的高度设置为一行，改善阅读体验。但有些阅读器删除了 style 属性，无法生效  // 不需要，微博已经作此设置\r\n        // htmlNewLineUnreplaced = htmlNewLineUnreplaced.replace(/(?<=<span class=[\"']?url-icon[\"']?>)<img/g, '<img style=\"height: 1em\"');\r\n        // 去掉全文\r\n        htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll('全文<br>', '<br>');\r\n        htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll(/<a href=\"(.*?)\">全文<\\/a>/g, '');\r\n\r\n        // 处理外部链接\r\n        htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll(/\"https:\\/\\/weibo\\.cn\\/sinaurl.*?[&?]u=(http.*?)\"/g, (match, p1) => `\"${decodeURIComponent(p1)}\"`);\r\n\r\n        // 处理图片的链接\r\n        htmlNewLineUnreplaced = htmlNewLineUnreplaced.replaceAll(/<a\\s+href=\"https?:\\/\\/[^\"]+\\.(jpg|png|gif)\"/g, (match) => `${match} data-rsshub-image=\"href\"`);\r\n\r\n        let html = htmlNewLineUnreplaced.replaceAll('\\n', '<br>');\r\n\r\n        // 添加用户名和头像\r\n        if (showAuthorInDesc) {\r\n            let usernameAndAvatar = `<a href=\"https://weibo.com/${status.user.id}\" target=\"_blank\">`;\r\n            if (showAuthorAvatarInDesc) {\r\n                usernameAndAvatar += `<img width=\"${sizeOfAuthorAvatar}\" height=\"${sizeOfAuthorAvatar}\" src=\"${status.user.profile_image_url}\" ${readable ? 'hspace=\"8\" vspace=\"8\" align=\"left\"' : ''} />`;\r\n            }\r\n            let name = status.user.screen_name;\r\n            if (showAtBeforeAuthor) {\r\n                name = '@' + name;\r\n            }\r\n            usernameAndAvatar += authorNameBold ? `<strong>${name}</strong></a>:&ensp;` : `${name}</a>:&ensp;`;\r\n            html = usernameAndAvatar + html;\r\n        }\r\n\r\n        // status.pics can be either an array or an object:\r\n        // array: [ object, object, ... ]\r\n        // object: { '0': object, '1': object, ... }  // REALLY AMAZING data structure\r\n        if (status.pics && !Array.isArray(status.pics) && typeof status.pics === 'object') {\r\n            status.pics = Object.values(status.pics);\r\n        }\r\n\r\n        // 添加文章头图，此处不需要回落到被转发的微博，后续处理被转发的微博时，还会执行到这里\r\n        if (status.page_info && status.page_info.type === 'article' && status.page_info.page_pic && status.page_info.page_pic.url) {\r\n            // 如果以后后续流程会用到其他字段，记得修改这里\r\n            const pagePic = {\r\n                large: {\r\n                    url: status.page_info.page_pic.url,\r\n                },\r\n            };\r\n            // 文章微博一般不会有配图，但也有可能有：https://weibo.com/6882481489/Lh85BkS3m\r\n            if (status.pics) {\r\n                status.pics.push(pagePic);\r\n            } else {\r\n                status.pics = [pagePic];\r\n            }\r\n        }\r\n\r\n        // drop live photo\r\n        const livePhotoCount = status.pics ? status.pics.filter((pic) => pic.type === 'livephoto').length : 0;\r\n        const pics = status.pics && status.pics.filter((pic) => pic.type !== 'livephoto');\r\n\r\n        // 添加微博配图\r\n        if (pics) {\r\n            if (readable) {\r\n                html += '<br clear=\"both\" /><div style=\"clear: both\"></div>';\r\n            }\r\n\r\n            // 一些RSS Reader会识别所有<img>标签作为内含图片显示，我们不想要头像也作为内含图片之一\r\n            // 让所有配图在description的最前面再次出现一次，但宽高设为0\r\n            let picsPrefix = '';\r\n            for (const item of pics) {\r\n                picsPrefix += `<img width=\"0\" height=\"0\" hidden=\"true\" src=\"${item.large.url}\">`;\r\n            }\r\n            picsPrefixes.push(picsPrefix);\r\n\r\n            for (const item of pics) {\r\n                if (addLinkForPics) {\r\n                    html += '<a href=\"' + item.large.url + '\">';\r\n                }\r\n\r\n                let style = '';\r\n                html += '<img ';\r\n                html += readable ? 'vspace=\"8\" hspace=\"4\"' : '';\r\n                if (widthOfPics >= 0) {\r\n                    html += ` width=\"${widthOfPics}\"`;\r\n                    style += `width: ${widthOfPics}px;`;\r\n                }\r\n                if (heightOfPics >= 0) {\r\n                    html += ` height=\"${heightOfPics}\"`;\r\n                    style += `height: ${heightOfPics}px;`;\r\n                }\r\n                html += ` style=\"${style}\"` + ' src=\"' + item.large.url + '\">';\r\n\r\n                if (addLinkForPics) {\r\n                    html += '</a>';\r\n                }\r\n\r\n                htmlNewLineUnreplaced += '<img src=\"\" />';\r\n            }\r\n        }\r\n\r\n        // 处理转发的微博\r\n        if (status.retweeted_status) {\r\n            html += readable\r\n                ? `<br clear=\"both\" /><div style=\"clear: both\"></div><blockquote style=\"background: #80808010;border-top:1px solid #80808030;border-bottom:1px solid #80808030;margin:0;padding:5px 20px;\">`\r\n                : `<br><blockquote> - 转发 `;\r\n            if (!status.retweeted_status.user) {\r\n                // 当转发的微博被删除时user为null\r\n                status.retweeted_status.user = {\r\n                    profile_image_url: '',\r\n                    screen_name: '[原微博不可访问]',\r\n                    id: 'sorry',\r\n                };\r\n            }\r\n            // 插入转发的微博\r\n            const retweetedParams = Object.assign({}, params);\r\n            retweetedParams.showAuthorInDesc = true;\r\n            retweetedParams.showAuthorAvatarInDesc = false;\r\n            retweetedParams.showAtBeforeAuthor = true;\r\n            retweeted += weiboUtils.formatExtended(ctx, status.retweeted_status, undefined, retweetedParams, picsPrefixes).description;\r\n\r\n            html += retweeted;\r\n\r\n            if (readable) {\r\n                html += `<br><small>原博：<a href=\"https://weibo.com/${status.retweeted_status.user.id}/${status.retweeted_status.bid}\" target=\"_blank\" rel=\"noopener noreferrer\">https://weibo.com/${status.retweeted_status.user.id}/${status.retweeted_status.bid}</a></small>`;\r\n            }\r\n            if (showTimestampInDescription) {\r\n                html += `<br><small>` + new Date(status.retweeted_status.created_at).toLocaleString() + `</small>`;\r\n            }\r\n            if (readable) {\r\n                html += `<br clear=\"both\" /><div style=\"clear: both\"></div>`;\r\n            }\r\n\r\n            html += '</blockquote>';\r\n        }\r\n\r\n        if (showAuthorInDesc && showAuthorAvatarInDesc) {\r\n            html = picsPrefixes.join('') + html;\r\n        }\r\n\r\n        let title = '';\r\n        if (showAuthorInTitle) {\r\n            title += status.user.screen_name + ': ';\r\n        }\r\n        if (!status.retweeted_status || showRetweetTextInTitle) {\r\n            title += weiboUtils.formatTitle(htmlNewLineUnreplaced);\r\n        }\r\n        if (status.retweeted_status) {\r\n            title += showEmojiForRetweet ? '🔁 ' : ' - 转发 ';\r\n            title += weiboUtils.formatTitle(retweeted);\r\n        }\r\n        if (livePhotoCount > 0) {\r\n            title += ' ';\r\n            title += Array.from({ length: livePhotoCount + 1 }).join('[Live Photo]');\r\n        }\r\n        if (status.page_info && status.page_info === 'video') {\r\n            title += ' [视频]';\r\n        }\r\n\r\n        uid = uid || status.user?.id;\r\n        const bid = status.bid || status.id;\r\n        const guid = uid ? `https://weibo.com/${uid}/${bid}` : `https://m.weibo.cn/status/${bid}`;\r\n        const link = preferMobileLink ? `https://m.weibo.cn/status/${bid}` : guid;\r\n\r\n        const author = [\r\n            {\r\n                name: status.user?.screen_name,\r\n                url: `https://weibo.com/${uid}`,\r\n                avatar: status.user?.avatar_hd,\r\n            },\r\n        ];\r\n        const pubDate = status.created_at;\r\n\r\n        return { description: html, title, link, guid, author, pubDate, category };\r\n    },\r\n    getShowData: async (uid, bid) => {\r\n        const link = `https://m.weibo.cn/statuses/show?id=${bid}`;\r\n        const itemResponse = await got.get(link, {\r\n            headers: {\r\n                Referer: `https://m.weibo.cn/u/${uid}`,\r\n                'MWeibo-Pwa': 1,\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\r\n            },\r\n        });\r\n        return itemResponse.data.data;\r\n    },\r\n    formatVideo: (itemDesc, status) => {\r\n        const pageInfo = status.page_info;\r\n        const livePhotos = status.pics && status.pics.filter((pic) => pic.type === 'livephoto' && pic.videoSrc);\r\n        let video = '<br clear=\"both\" /><div style=\"clear: both\"></div>';\r\n        let anyVideo = false;\r\n        if (livePhotos) {\r\n            for (const livePhoto of livePhotos) {\r\n                video += `<video controls=\"controls\" poster=\"${(livePhoto.large && livePhoto.large.url) || livePhoto.url}\" src=\"${livePhoto.videoSrc}\" style=\"width: 100%\"></video>`;\r\n                anyVideo = true;\r\n            }\r\n        }\r\n        if (pageInfo && pageInfo.type === 'video') {\r\n            const pagePic = pageInfo.page_pic;\r\n            const posterUrl = pagePic ? pagePic.url : '';\r\n            const pageUrl = pageInfo.page_url; // video page url\r\n            const mediaInfo = pageInfo.media_info || {}; // stream_url, stream_url_hd; deprecated: mp4_720p_mp4, mp4_hd_url, mp4_sd_url\r\n            const urls = pageInfo.urls || {}; // mp4_720p_mp4, mp4_hd_mp4, hevc_mp4_hd, mp4_ld_mp4\r\n\r\n            const video720p = urls.mp4_720p_mp4 || mediaInfo.mp4_720p_mp4 || '';\r\n            const videoHd = urls.mp4_hd_mp4 || mediaInfo.mp4_hd_url || mediaInfo.stream_url_hd || '';\r\n            const videoHdHevc = urls.hevc_mp4_hd || '';\r\n            const videoLd = urls.mp4_ld_mp4 || mediaInfo.mp4_sd_url || mediaInfo.stream_url || '';\r\n\r\n            const hasVideo = video720p || videoHd || videoHdHevc || videoLd;\r\n\r\n            if (hasVideo) {\r\n                video += `<video controls=\"controls\" poster=\"${posterUrl}\" style=\"width: 100%\">`;\r\n                if (video720p) {\r\n                    video += `<source src=\"${video720p}\">`;\r\n                }\r\n                if (videoHd) {\r\n                    video += `<source src=\"${videoHd}\">`;\r\n                }\r\n                if (videoHdHevc) {\r\n                    video += `<source src=\"${videoHdHevc}\">`;\r\n                }\r\n                if (videoLd) {\r\n                    video += `<source src=\"${videoLd}\">`;\r\n                }\r\n                if (pageUrl) {\r\n                    video += `<p>视频无法显示，请前往<a href=\"${pageUrl}\" target=\"_blank\" rel=\"noopener noreferrer\">微博视频</a>观看。</p>`;\r\n                }\r\n                video += '</video>';\r\n                anyVideo = true;\r\n            }\r\n        }\r\n        if (anyVideo) {\r\n            itemDesc += video;\r\n        }\r\n        return itemDesc;\r\n    },\r\n    formatArticle: async (ctx, itemDesc, status) => {\r\n        const pageInfo = status.page_info;\r\n        if (pageInfo && pageInfo.type === 'article' && pageInfo.page_url) {\r\n            const pageUrl = pageInfo.page_url;\r\n            const articleIdMatch = pageUrl.match(/id=(\\d+)/);\r\n            if (!articleIdMatch) {\r\n                return itemDesc;\r\n            }\r\n            const articleId = articleIdMatch[1];\r\n            const link = `https://card.weibo.com/article/m/aj/detail?id=${articleId}`;\r\n            const response = await cache.tryGet(link, async () => {\r\n                const _response = await got.get(link, {\r\n                    headers: {\r\n                        Referer: `https://card.weibo.com/article/m/show/id/${articleId}`,\r\n                        'MWeibo-Pwa': 1,\r\n                        'X-Requested-With': 'XMLHttpRequest',\r\n                        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\r\n                    },\r\n                });\r\n                return _response.data;\r\n            }); // cache it!\r\n            const article = response.data;\r\n            if (article && article.title && article.content) {\r\n                const title = article.title;\r\n                const content = article.content;\r\n                const summary = article.summary;\r\n                const createAt = article.create_at;\r\n                const readCount = article.read_count;\r\n                const isOriginal = article.is_original;\r\n                const isArticleNonFree = article.is_article_free; // 微博起错了字段名，它为 1 时才是收费文章\r\n\r\n                // 许多微博文章都给文字设置了白色背景，这里也只好使用白色背景了\r\n                let html = '<br clear=\"both\" /><br clear=\"both\" />';\r\n                html += '<div style=\"clear: both\"></div><div style=\"background: #fff;border:5px solid #80808030;margin:0;padding:3% 5%;overflow-wrap: break-word\">';\r\n\r\n                html += `<h1 style=\"font-size: 1.5rem;line-height: 1.25;color: #333;\">${title}</h1>`; // 加入标题\r\n\r\n                // 加入文章信息\r\n                const iconStyle =\r\n                    'display: inline-block;margin-inline: 0.25rem;width: 2.25rem; height: 1.125rem; background: #eee; border-radius: 2px; box-sizing: border-box; text-align: center; line-height: 1.0625rem; font-size: 0.75rem; color: #aaa;';\r\n                let articleMeta = '<p style=\"line-height: 1.66; color: #999;margin: 0 0 0.75rem;font-size: 0.75rem;padding: 0\">';\r\n                if (isArticleNonFree) {\r\n                    articleMeta += `<span style=\"${iconStyle}\">试读</span> `;\r\n                }\r\n                if (isOriginal) {\r\n                    articleMeta += `<span style=\"${iconStyle}\">原创</span> `;\r\n                }\r\n                articleMeta += `<span style=\"margin-inline: 0.25rem;\">发布时间: ${createAt}</span> `; // 发布时间\r\n                articleMeta += `<span style=\"margin-inline: 0.25rem;\">阅读量: ${readCount}</span> `; // 阅读量\r\n                articleMeta += '</p>';\r\n                html += articleMeta;\r\n\r\n                if (summary) {\r\n                    html += `<p style=\"color: #999;line-height: 1.5rem;padding: 0.0625rem 0 0.875rem;margin: 0\">${summary}</p>`; // 摘要\r\n                }\r\n\r\n                html += '<div style=\"height: 0;border-bottom: 1px dashed #999;margin-bottom: 0.75rem;\"></div>'; // 分割线\r\n\r\n                // 正文处理，加入一些在微博文章页的 CSS 中定义的不可或缺的样式\r\n                const $ = load(content);\r\n                $('p').each((_, elem) => {\r\n                    elem = $(elem);\r\n                    let style = elem.attr('style') || '';\r\n                    style = 'margin: 0;padding: 0;border: 0;' + style;\r\n                    elem.attr('style', style);\r\n                });\r\n                $('.image').each((_, elem) => {\r\n                    elem = $(elem);\r\n                    let style = elem.attr('style') || '';\r\n                    style = 'display: table;text-align: center;margin-left: auto;margin-right: auto;clear: both;min-width: 50px;' + style;\r\n                    elem.attr('style', style);\r\n                });\r\n                $('img').each((_, elem) => {\r\n                    elem = $(elem);\r\n                    let style = elem.attr('style') || '';\r\n                    style = 'display: block;max-width: 100%;margin-left: auto;margin-right: auto;min-width: 50px;' + style;\r\n                    elem.attr('style', style);\r\n                });\r\n                const contentHtml = $.html();\r\n                html += `<div style=\"line-height: 1.59;text-align: justify;font-size: 1.0625rem;color: #333;\">${contentHtml}</div>`; // 正文\r\n\r\n                html += '</div>';\r\n                itemDesc += html;\r\n            }\r\n        }\r\n        return itemDesc;\r\n    },\r\n    formatComments: async (ctx, itemDesc, status, showBloggerIcons) => {\r\n        if (status && status.comments_count && status.id && status.mid) {\r\n            const id = status.id;\r\n            const mid = status.mid;\r\n            const link = `https://m.weibo.cn/comments/hotflow?id=${id}&mid=${mid}&max_id_type=0`;\r\n            const response = await cache.tryGet(link, async () => {\r\n                const _response = await got.get(link, {\r\n                    headers: {\r\n                        Referer: `https://m.weibo.cn/detail/${id}`,\r\n                        'MWeibo-Pwa': 1,\r\n                        'X-Requested-With': 'XMLHttpRequest',\r\n                        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1',\r\n                    },\r\n                });\r\n                return _response.data;\r\n            });\r\n            if (response.data && response.data.data) {\r\n                const comments = response.data.data;\r\n                itemDesc += `<br clear=\"both\" /><div style=\"clear: both\"></div><div style=\"background: #80808010;border-top:1px solid #80808030;border-bottom:1px solid #80808030;margin:0;padding:5px 20px;\">`;\r\n                itemDesc += '<h3>热门评论</h3>';\r\n                for (const comment of comments) {\r\n                    itemDesc += '<p style=\"margin-bottom: 0.5em;margin-top: 0.5em\">';\r\n                    let name = comment.user.screen_name;\r\n                    if (showBloggerIcons === '1' && comment.blogger_icons) {\r\n                        name += comment.blogger_icons[0].name;\r\n                    }\r\n                    itemDesc += `<a href=\"https://weibo.com/${comment.user.id}\" target=\"_blank\">${name}</a>: ${comment.text}`;\r\n                    // 带有图片的评论直接输出图片\r\n                    if ('pic' in comment) {\r\n                        itemDesc += `<br><img src=\"${comment.pic.url}\">`;\r\n                    }\r\n                    if (comment.comments) {\r\n                        itemDesc += '<blockquote style=\"border-left:0.2em solid #80808080; margin-left: 0.3em; padding-left: 0.5em; margin-bottom: 0.5em; margin-top: 0.25em\">';\r\n                        for (const com of comment.comments) {\r\n                            // 评论的带有图片的评论直接输出图片\r\n                            const pattern = /<a\\s+href=\"https:\\/\\/weibo\\.cn\\/sinaurl\\?u=([^\"]+)\"[^>]*><span class='url-icon'><img[^>]*><\\/span><span class=\"surl-text\">(查看图片|评论配图|查看动图)<\\/span><\\/a>/g;\r\n                            const matches = com.text.match(pattern);\r\n                            if (matches) {\r\n                                for (const match of matches) {\r\n                                    const hrefMatch = match.match(/href=\"https:\\/\\/weibo\\.cn\\/sinaurl\\?u=([^\"]+)\"/);\r\n                                    if (hrefMatch) {\r\n                                        // 获取并解码 href 中的图片 URL\r\n                                        const imgSrc = decodeURIComponent(hrefMatch[1]);\r\n                                        const imgTag = `<img src=\"${imgSrc}\" style=\"width: 1rem; height: 1rem;\">`;\r\n                                        // 用替换后的 img 标签替换原来的 <a> 标签部分\r\n                                        com.text = com.text.replaceAll(match, imgTag);\r\n                                    }\r\n                                }\r\n                            }\r\n                            itemDesc += '<div style=\"font-size: 0.9em\">';\r\n                            let name = com.user.screen_name;\r\n                            if (showBloggerIcons === '1' && com.blogger_icons) {\r\n                                name += com.blogger_icons[0].name;\r\n                            }\r\n                            itemDesc += `<a href=\"https://weibo.com/${com.user.id}\" target=\"_blank\">${name}</a>: ${com.text}`;\r\n                            itemDesc += '</div>';\r\n                        }\r\n                        itemDesc += '</blockquote>';\r\n                    }\r\n                    itemDesc += '</p>';\r\n                }\r\n\r\n                itemDesc += '</div>';\r\n            }\r\n        }\r\n        return itemDesc;\r\n    },\r\n    sinaimgTvax: (() => {\r\n        // https://datatracker.ietf.org/doc/html/rfc1808#section-2.4.3\r\n        const regex = /(?<=\\/\\/)wx(?=[1-4]\\.sinaimg\\.cn\\/)/gi;\r\n        // const prefixes = ['tva', 'tvax'];\r\n        // let cnt = 0;\r\n        // const replace = (html) => {\r\n        //     cnt = (cnt + 1) % 2;\r\n        //     return html.replace(regex, prefixes[cnt]);\r\n        // };\r\n        const replace = (html) => html.replaceAll(regex, 'tvax'); // enforce `tvax` as `tva` has a strict WAF\r\n        const replaceKV = (obj, keys) => {\r\n            for (const key of keys) {\r\n                if (obj[key]) {\r\n                    obj[key] = replace(obj[key]);\r\n                }\r\n            }\r\n        };\r\n        const dataKeys = ['description', 'image'];\r\n        const itemKeys = ['description'];\r\n        return (data) => {\r\n            if (data) {\r\n                replaceKV(data, dataKeys);\r\n                if (data.item) {\r\n                    for (const item of data.item) {\r\n                        replaceKV(item, itemKeys);\r\n                    }\r\n                }\r\n            }\r\n            return data;\r\n        };\r\n    })(),\r\n};\r\n\r\nexport default weiboUtils;\r\n"],"mappings":"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"}