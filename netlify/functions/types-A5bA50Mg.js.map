{"version":3,"file":"types-A5bA50Mg.js","names":[],"sources":["../../lib/types.ts"],"sourcesContent":["import type { Context } from 'hono';\r\n\r\n// Make sure it's synchronise with scripts/workflow/data.ts\r\n// and lib/routes/rsshub/routes.ts\r\nexport type Category =\r\n    | 'popular'\r\n    | 'social-media'\r\n    | 'new-media'\r\n    | 'traditional-media'\r\n    | 'bbs'\r\n    | 'blog'\r\n    | 'programming'\r\n    | 'design'\r\n    | 'live'\r\n    | 'multimedia'\r\n    | 'picture'\r\n    | 'anime'\r\n    | 'program-update'\r\n    | 'university'\r\n    | 'forecast'\r\n    | 'travel'\r\n    | 'shopping'\r\n    | 'game'\r\n    | 'reading'\r\n    | 'government'\r\n    | 'study'\r\n    | 'journal'\r\n    | 'finance'\r\n    | 'other';\r\n\r\n// rss\r\nexport type DataItem = {\r\n    title: string;\r\n    description?: string;\r\n    pubDate?: number | string | Date;\r\n    link?: string;\r\n    category?: string[];\r\n    author?:\r\n        | string\r\n        | {\r\n              name: string;\r\n              url?: string;\r\n              avatar?: string;\r\n          }[];\r\n    doi?: string;\r\n    guid?: string;\r\n    id?: string;\r\n    content?: {\r\n        html: string;\r\n        text: string;\r\n    };\r\n    image?: string;\r\n    banner?: string;\r\n    updated?: number | string | Date;\r\n    language?: Language;\r\n    enclosure_url?: string;\r\n    enclosure_type?: string;\r\n    enclosure_title?: string;\r\n    enclosure_length?: number;\r\n    itunes_duration?: number | string;\r\n    itunes_item_image?: string;\r\n    media?: Record<string, Record<string, string>>;\r\n    attachments?: {\r\n        url: string;\r\n        mime_type: string;\r\n        title?: string;\r\n        size_in_bytes?: number;\r\n        duration_in_seconds?: number;\r\n    }[];\r\n\r\n    _extra?: Record<string, any> & {\r\n        links?: {\r\n            url: string;\r\n            type: string;\r\n            content_html?: string;\r\n        }[];\r\n    };\r\n};\r\n\r\nexport type Data = {\r\n    title: string;\r\n    description?: string;\r\n    link?: string;\r\n    item?: DataItem[];\r\n    allowEmpty?: boolean;\r\n    image?: string;\r\n    author?: string;\r\n    language?: Language;\r\n    feedLink?: string;\r\n    lastBuildDate?: string;\r\n    itunes_author?: string;\r\n    itunes_category?: string;\r\n    itunes_explicit?: string | boolean;\r\n    id?: string;\r\n    icon?: string;\r\n    logo?: string;\r\n    atomlink?: string;\r\n    ttl?: number;\r\n};\r\n\r\nexport type Language =\r\n    | 'af'\r\n    | 'ar-DZ'\r\n    | 'ar-IQ'\r\n    | 'ar-KW'\r\n    | 'ar-MA'\r\n    | 'ar-SA'\r\n    | 'ar-TN'\r\n    | 'be'\r\n    | 'bg'\r\n    | 'ca'\r\n    | 'cs'\r\n    | 'da'\r\n    | 'de'\r\n    | 'de-at'\r\n    | 'de-ch'\r\n    | 'de-de'\r\n    | 'de-li'\r\n    | 'de-lu'\r\n    | 'el'\r\n    | 'en'\r\n    | 'en-au'\r\n    | 'en-bz'\r\n    | 'en-ca'\r\n    | 'en-gb'\r\n    | 'en-ie'\r\n    | 'en-jm'\r\n    | 'en-nz'\r\n    | 'en-ph'\r\n    | 'en-tt'\r\n    | 'en-us'\r\n    | 'en-za'\r\n    | 'en-zw'\r\n    | 'es'\r\n    | 'es-ar'\r\n    | 'es-bo'\r\n    | 'es-cl'\r\n    | 'es-co'\r\n    | 'es-cr'\r\n    | 'es-do'\r\n    | 'es-ec'\r\n    | 'es-es'\r\n    | 'es-gt'\r\n    | 'es-hn'\r\n    | 'es-mx'\r\n    | 'es-ni'\r\n    | 'es-pa'\r\n    | 'es-pe'\r\n    | 'es-pr'\r\n    | 'es-py'\r\n    | 'es-sv'\r\n    | 'es-uy'\r\n    | 'es-ve'\r\n    | 'et'\r\n    | 'eu'\r\n    | 'fi'\r\n    | 'fo'\r\n    | 'fr'\r\n    | 'fr-be'\r\n    | 'fr-ca'\r\n    | 'fr-ch'\r\n    | 'fr-fr'\r\n    | 'fr-lu'\r\n    | 'fr-mc'\r\n    | 'ga'\r\n    | 'gd'\r\n    | 'gl'\r\n    | 'haw'\r\n    | 'hi'\r\n    | 'hr'\r\n    | 'hu'\r\n    | 'in'\r\n    | 'is'\r\n    | 'it'\r\n    | 'it-ch'\r\n    | 'it-it'\r\n    | 'ja'\r\n    | 'ko'\r\n    | 'mk'\r\n    | 'ne'\r\n    | 'nl'\r\n    | 'nl-be'\r\n    | 'nl-nl'\r\n    | 'no'\r\n    | 'pl'\r\n    | 'pt'\r\n    | 'pt-br'\r\n    | 'pt-pt'\r\n    | 'ro'\r\n    | 'ro-mo'\r\n    | 'ro-ro'\r\n    | 'ru'\r\n    | 'ru-mo'\r\n    | 'ru-ru'\r\n    | 'sk'\r\n    | 'sl'\r\n    | 'sq'\r\n    | 'sr'\r\n    | 'sv'\r\n    | 'sv-fi'\r\n    | 'sv-se'\r\n    | 'tr'\r\n    | 'uk'\r\n    | 'zh-CN'\r\n    | 'zh-HK'\r\n    | 'zh-TW'\r\n    | 'other';\r\n\r\n// namespace\r\ninterface NamespaceItem {\r\n    /**\r\n     * The human-readable name of the namespace, should be the same as the secondary domain of the main website,\r\n     * which will be used as the level 2 heading in the documentation\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The website URL without protocol that corresponds\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * The classification of the namespace, which will be written into the corresponding classification document\r\n     */\r\n    categories?: Category[];\r\n\r\n    /**\r\n     * Hints and additional explanations for users using this namespace, it will be inserted into the documentation\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * Main Language of the namespace\r\n     */\r\n    lang?: Language;\r\n}\r\n\r\ninterface Namespace extends NamespaceItem {\r\n    /** Documentation in languages other than English, it will be used to generate multilingual documents */\r\n    ja?: NamespaceItem;\r\n    /** Documentation in languages other than English, it will be used to generate multilingual documents */\r\n    zh?: NamespaceItem;\r\n    /** Documentation in languages other than English, it will be used to generate multilingual documents */\r\n    'zh-TW'?: NamespaceItem;\r\n}\r\n\r\nexport type { Namespace };\r\n\r\nexport enum ViewType {\r\n    Articles = 0,\r\n    SocialMedia = 1,\r\n    Pictures = 2,\r\n    Videos = 3,\r\n    Audios = 4,\r\n    Notifications = 5,\r\n}\r\n\r\n// route\r\ninterface RouteItem {\r\n    /**\r\n     * The route path, using [Hono routing](https://hono.dev/api/routing) syntax\r\n     */\r\n    path: string | string[];\r\n\r\n    /**\r\n     * The human-readable name of the route, which will be used as the level 3 heading in the documentation\r\n     * and radar rule title (can be overridden by `RadarRule[].title`)\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The website URL without protocol that corresponds\r\n     */\r\n    url?: string;\r\n\r\n    /**\r\n     * The GitHub handle of the people responsible for maintaining this route\r\n     */\r\n    maintainers: string[];\r\n\r\n    /**\r\n     * The handler function of the route\r\n     */\r\n    handler: (ctx: Context) => Promise<Data | null> | Data | null;\r\n\r\n    /**\r\n     * An example URL of the route\r\n     */\r\n    example: string;\r\n\r\n    /**\r\n     * The description of the route parameters\r\n     */\r\n    parameters?: Record<\r\n        string,\r\n        | string\r\n        | {\r\n              description: string;\r\n              default?: string;\r\n              options?: {\r\n                  value: string;\r\n                  label: string;\r\n              }[];\r\n          }\r\n    >;\r\n\r\n    /**\r\n     * Hints and additional explanations for users using this route, it will be appended after the route component, supports markdown\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * The classification of the route, which will be written into the corresponding classification documentation\r\n     */\r\n    categories?: Category[];\r\n\r\n    /**\r\n     * Special features of the route, such as what configuration items it depends on, whether it is strict anti-crawl, whether it supports a certain function and so on\r\n     */\r\n    features?: {\r\n        /** The extra configuration items required by the route */\r\n        requireConfig?:\r\n            | {\r\n                  /**  The environment variable name */\r\n                  name: string;\r\n                  /**  Whether the environment variable is optional */\r\n                  optional?: boolean;\r\n                  /**  The description of the environment variable */\r\n                  description: string;\r\n              }[]\r\n            | false;\r\n\r\n        /** set to `true` if the feed uses puppeteer */\r\n        requirePuppeteer?: boolean;\r\n\r\n        /** set to `true` if the target website has an anti-crawler mechanism */\r\n        antiCrawler?: boolean;\r\n\r\n        /** set to `true` if the feed has a radar rule */\r\n        supportRadar?: boolean;\r\n\r\n        /** Set to `true` if the feed supports BitTorrent */\r\n        supportBT?: boolean;\r\n\r\n        /** Set to `true` if the feed supports podcasts */\r\n        supportPodcast?: boolean;\r\n\r\n        /** Set to `true` if the feed supports Sci-Hub */\r\n        supportScihub?: boolean;\r\n\r\n        /** Set to `true` if this feed is not safe for work */\r\n        nsfw?: boolean;\r\n    };\r\n\r\n    /**\r\n     * The [RSSHub-Radar](https://github.com/DIYgod/RSSHub-Radar) rule of the route\r\n     */\r\n    radar?: RadarItem[];\r\n\r\n    /**\r\n     * The [Follow](https://github.com/RSSNext/follow) default view of the route, default to `ViewType.Articles`\r\n     */\r\n    view?: ViewType;\r\n}\r\n\r\nexport interface Route extends RouteItem {\r\n    ja?: RouteItem;\r\n    zh?: RouteItem;\r\n    'zh-TW'?: RouteItem;\r\n}\r\n\r\n// radar\r\nexport type RadarItem = {\r\n    /**\r\n     * The overwriting title of the radar rule\r\n     */\r\n    title?: string;\r\n\r\n    /**\r\n     * The URL path to the corresponding documentation\r\n     */\r\n    docs?: string;\r\n\r\n    /**\r\n     * The source URL path of the radar rule\r\n     * @see https://docs.rsshub.app/joinus/new-radar#source\r\n     */\r\n    source: string[];\r\n\r\n    /**\r\n     * The target RSSHub subscription URL path of the radar rule\r\n     *\r\n     * Will use RouteItem.path if not specified\r\n     * @see https://docs.rsshub.app/joinus/new-radar#target\r\n     *\r\n     * Using `target` as a function is deprecated in RSSHub-Radar 2.0.19\r\n     * @see https://github.com/DIYgod/RSSHub-Radar/commit/5a97647f900bb2bca792787a322b2b1ca512e40b#diff-f84e3c1e16af314bc4ed7c706d7189844663cde9b5142463dc5c0db34c2e8d54L10\r\n     * @see https://github.com/DIYgod/RSSHub-Radar/issues/692\r\n     */\r\n    target?:\r\n        | string\r\n        | ((\r\n              /** The parameters matched from the `source` field */\r\n              params: any,\r\n              /** The current webpage URL string */\r\n              url: string,\r\n              /** @deprecated Temporary removed  @see https://github.com/DIYgod/RSSHub-Radar/commit/e6079ea1a8c96e89b1b2c2aa6d13c7967788ca3b */\r\n              document: Document\r\n          ) => string);\r\n};\r\n\r\nexport type RadarDomain = {\r\n    _name: string;\r\n} & {\r\n    [subdomain: string]: RadarItem[];\r\n};\r\n\r\nexport interface APIRoute {\r\n    /**\r\n     * The route path, using [Hono routing](https://hono.dev/api/routing) syntax\r\n     */\r\n    path: string;\r\n\r\n    /**\r\n     * The GitHub handle of the people responsible for maintaining this route\r\n     */\r\n    maintainers: string[];\r\n\r\n    /**\r\n     * The handler function of the route\r\n     */\r\n    handler: (ctx: Context) =>\r\n        | Promise<{\r\n              code: number;\r\n              message?: string;\r\n              data?: any;\r\n          }>\r\n        | {\r\n              code: number;\r\n              message?: string;\r\n              data?: any;\r\n          };\r\n\r\n    /**\r\n     * The description of the route parameters\r\n     */\r\n    parameters?: Record<\r\n        string,\r\n        {\r\n            description: string;\r\n            default?: string;\r\n            options?: {\r\n                value: string;\r\n                label: string;\r\n            }[];\r\n        }\r\n    >;\r\n\r\n    /**\r\n     * Hints and additional explanations for users using this route, it will be appended after the route component, supports markdown\r\n     */\r\n    description?: string;\r\n}\r\n"],"mappings":"AAwPA,IAAY,EAAA,SAAA,EAAL,OACH,GAAA,EAAA,SAAA,GAAA,WACA,EAAA,EAAA,YAAA,GAAA,cACA,EAAA,EAAA,SAAA,GAAA,WACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,cAAA,GAAA"}