{"version":3,"file":"dailyquestion-solution-cn-5aEtRyIN.js","names":["MarkdownIt","route: Route","got"],"sources":["../../lib/routes/leetcode/dailyquestion-solution-cn.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport MarkdownIt from 'markdown-it';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n    breaks: true,\r\n});\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nexport const route: Route = {\r\n    path: '/dailyquestion/solution/cn',\r\n    radar: [\r\n        {\r\n            source: ['leetcode.cn/'],\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n    url: 'leetcode.cn/',\r\n};\r\n\r\nasync function handler() {\r\n    const baseurl = `https://leetcode.cn`;\r\n    const url = `${baseurl}/graphql/`;\r\n    const headers = {\r\n        'content-type': 'application/json',\r\n    };\r\n    const emoji = {\r\n        Medium: '🟡',\r\n        Easy: '🟢',\r\n        Hard: '🔴',\r\n    };\r\n    // 获取每日一题\r\n    const data = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'questionOfToday',\r\n                query: `query questionOfToday {\r\n                            todayRecord {\r\n                                date\r\n                                userStatus\r\n                                question {\r\n                                    questionId\r\n                                    frontendQuestionId: questionFrontendId\r\n                                    difficulty\r\n                                    title\r\n                                    titleCn: translatedTitle\r\n                                    titleSlug\r\n                                }\r\n                            }\r\n                        }`,\r\n                variables: {},\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data;\r\n    const questionTitle = data.todayRecord[0].question.titleSlug;\r\n    const questionUrl = `${baseurl}/problems/${questionTitle}/`;\r\n\r\n    // 获取题目内容\r\n    const question = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'questionData',\r\n                query: `query questionData($titleSlug: String!) {\r\n                            question(titleSlug: $titleSlug) {\r\n                                questionId\r\n                                questionFrontendId\r\n                                categoryTitle\r\n                                boundTopicId\r\n                                title\r\n                                titleSlug\r\n                                content\r\n                                translatedTitle\r\n                                translatedContent\r\n                                isPaidOnly\r\n                                difficulty\r\n                                likes\r\n                            }\r\n                        }`,\r\n                variables: {\r\n                    titleSlug: questionTitle,\r\n                },\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data.question;\r\n    const diffEmoji = emoji[question.difficulty] || '';\r\n    // 获取题解（点赞前3）\r\n    const articles = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'questionSolutionArticles',\r\n                query: `query questionSolutionArticles($questionSlug: String!, $skip: Int, $first: Int, $orderBy: SolutionArticleOrderBy, $userInput: String, $tagSlugs: [String!]) {\r\n                            questionSolutionArticles(questionSlug: $questionSlug, skip: $skip, first: $first, orderBy: $orderBy, userInput: $userInput, tagSlugs: $tagSlugs) {\r\n                                totalNum\r\n                                edges {\r\n                                    node {\r\n                                    ...solutionArticle\r\n                                    __typename\r\n                                    }\r\n                                    __typename\r\n                                }\r\n                                __typename\r\n                            }\r\n                        }\r\n                        fragment solutionArticle on SolutionArticleNode {\r\n                            uuid\r\n                            title\r\n                            slug\r\n                            createdAt\r\n                            thumbnail\r\n                            author {\r\n                                username\r\n                            }\r\n                            summary\r\n                        }`,\r\n                variables: {\r\n                    questionSlug: questionTitle,\r\n                    first: 3,\r\n                    skip: 0,\r\n                    orderBy: 'MOST_UPVOTE',\r\n                },\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data.questionSolutionArticles.edges;\r\n    // 获取题解内容\r\n    const articleContent = (\r\n        await Promise.all(\r\n            articles.map((art) =>\r\n                got({\r\n                    method: 'post',\r\n                    url,\r\n                    json: {\r\n                        operationName: 'solutionDetailArticle',\r\n                        query: `query solutionDetailArticle($slug: String!, $orderBy: SolutionArticleOrderBy!) {\r\n                                    solutionArticle(slug: $slug, orderBy: $orderBy) {\r\n                                        ...solutionArticle\r\n                                        content\r\n                                        question {\r\n                                            questionTitleSlug\r\n                                            __typename\r\n                                        }\r\n                                    }\r\n                                }\r\n                                fragment solutionArticle on SolutionArticleNode {\r\n                                    uuid\r\n                                    title\r\n                                    slug\r\n                                    createdAt\r\n                                    thumbnail\r\n                                    author {\r\n                                        username\r\n                                    }\r\n                                    summary\r\n                                }`,\r\n                        variables: {\r\n                            slug: art.node.slug,\r\n                            orderBy: 'DEFAULT',\r\n                        },\r\n                    },\r\n                    headers,\r\n                })\r\n            )\r\n        )\r\n    ).map((v) => v.data.data.solutionArticle);\r\n\r\n    const handleText = (s) => {\r\n        // 处理多语言代码展示问题\r\n        s = s.replaceAll(/(```)([\\d#+A-Za-z-]+)\\s*?(\\[.*?])?\\n/g, '\\r\\n###$2\\r\\n$1$2\\r\\n');\r\n        return s;\r\n    };\r\n    return {\r\n        title: 'LeetCode 每日一题题解',\r\n        description: 'LeetCode 每日一题题解',\r\n        link: questionUrl,\r\n        item: [\r\n            {\r\n                title: `每日一题-${question.translatedTitle}${diffEmoji}`,\r\n                link: questionUrl,\r\n                description: question.translatedContent,\r\n                pubDate: timezone(parseDate(data.todayRecord[0].date), +8),\r\n            },\r\n            ...articleContent.map((art, i) => ({\r\n                title: art.title,\r\n                link: `${questionUrl}/solution/${art.slug}`,\r\n                description: md.render(handleText(art.content)),\r\n                pubDate: timezone(parseDate(articles[i].node.createdAt), +8),\r\n                author: art.author.username,\r\n            })),\r\n        ],\r\n    };\r\n}\r\n"],"mappings":"kWAGA,MAAM,EAAKA,EAAW,CAClB,KAAM,GACN,OAAQ,KAICC,EAAe,CACxB,KAAM,6BACN,MAAO,CACH,CACI,OAAQ,CAAC,kBAGjB,KAAM,UACN,YAAa,GACb,UACA,IAAK,gBAGT,eAAe,GAAU,CACrB,IAAM,EAAU,sBACV,EAAM,GAAG,EAAQ,WACjB,EAAU,CACZ,eAAgB,oBAEd,EAAQ,CACV,OAAQ,KACR,KAAM,KACN,KAAM,MAGJ,GACF,MAAMC,EAAI,CACN,OAAQ,OACR,MACA,KAAM,CACF,cAAe,kBACf,MAAO;;;;;;;;;;;;;2BAcP,UAAW,IAEf,aAEN,KAAK,KACD,EAAgB,EAAK,YAAY,GAAG,SAAS,UAC7C,EAAc,GAAG,EAAQ,YAAY,EAAc,GAGnD,GACF,MAAMA,EAAI,CACN,OAAQ,OACR,MACA,KAAM,CACF,cAAe,eACf,MAAO;;;;;;;;;;;;;;;2BAgBP,UAAW,CACP,UAAW,IAGnB,aAEN,KAAK,KAAK,SACN,EAAY,EAAM,EAAS,aAAe,GAE1C,GACF,MAAMA,EAAI,CACN,OAAQ,OACR,MACA,KAAM,CACF,cAAe,2BACf,MAAO;;;;;;;;;;;;;;;;;;;;;;;2BAwBP,UAAW,CACP,aAAc,EACd,MAAO,EACP,KAAM,EACN,QAAS,gBAGjB,aAEN,KAAK,KAAK,yBAAyB,MAE/B,GACF,MAAM,QAAQ,IACV,EAAS,IAAK,GACVA,EAAI,CACA,OAAQ,OACR,MACA,KAAM,CACF,cAAe,wBACf,MAAO;;;;;;;;;;;;;;;;;;;;mCAqBP,UAAW,CACP,KAAM,EAAI,KAAK,KACf,QAAS,YAGjB,eAId,IAAK,GAAM,EAAE,KAAK,KAAK,iBAEnB,EAAc,IAEhB,EAAI,EAAE,WAAW,wCAAyC;;;GACnD,GAEX,MAAO,CACH,MAAO,kBACP,YAAa,kBACb,KAAM,EACN,KAAM,CACF,CACI,MAAO,QAAQ,EAAS,kBAAkB,IAC1C,KAAM,EACN,YAAa,EAAS,kBACtB,QAAS,EAAS,EAAU,EAAK,YAAY,GAAG,MAAO,IAE3D,GAAG,EAAe,KAAK,EAAK,KAAO,CAC/B,MAAO,EAAI,MACX,KAAM,GAAG,EAAY,YAAY,EAAI,OACrC,YAAa,EAAG,OAAO,EAAW,EAAI,UACtC,QAAS,EAAS,EAAU,EAAS,GAAG,KAAK,WAAY,GACzD,OAAQ,EAAI,OAAO"}