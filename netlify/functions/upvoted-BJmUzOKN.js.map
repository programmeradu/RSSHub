{"version":3,"file":"upvoted-BJmUzOKN.js","names":["route: Route"],"sources":["../../lib/routes/daily/upvoted.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport { baseUrl, getData, getList, variables } from './utils.js';\r\n\r\nconst query = `\r\n    query MostUpvotedFeed(\r\n    $loggedIn: Boolean! = false\r\n    $first: Int\r\n    $after: String\r\n    $period: Int\r\n    $supportedTypes: [String!] = [\"article\",\"share\",\"freeform\",\"video:youtube\",\"collection\"]\r\n    $source: ID\r\n    $tag: String\r\n  ) {\r\n    page: mostUpvotedFeed(first: $first, after: $after, period: $period, supportedTypes: $supportedTypes, source: $source, tag: $tag) {\r\n      ...FeedPostConnection\r\n    }\r\n  }\r\n  \r\n  fragment FeedPostConnection on PostConnection {\r\n    pageInfo {\r\n      hasNextPage\r\n      endCursor\r\n    }\r\n    edges {\r\n      node {\r\n        ...FeedPost\r\n        contentHtml\r\n        ...UserPost @include(if: $loggedIn)\r\n      }\r\n    }\r\n  }\r\n  \r\n  fragment FeedPost on Post {\r\n    ...FeedPostInfo\r\n    sharedPost {\r\n      id\r\n      title\r\n      image\r\n      readTime\r\n      permalink\r\n      commentsPermalink\r\n      createdAt\r\n      type\r\n      tags\r\n      source {\r\n        id\r\n        handle\r\n        permalink\r\n        image\r\n      }\r\n      slug\r\n      clickbaitTitleDetected\r\n    }\r\n    trending\r\n    feedMeta\r\n    collectionSources {\r\n      handle\r\n      image\r\n    }\r\n    numCollectionSources\r\n    updatedAt\r\n    slug\r\n  }\r\n  \r\n  fragment FeedPostInfo on Post {\r\n    id\r\n    title\r\n    image\r\n    readTime\r\n    permalink\r\n    commentsPermalink\r\n    createdAt\r\n    commented\r\n    bookmarked\r\n    views\r\n    numUpvotes\r\n    numComments\r\n    summary\r\n    bookmark {\r\n      remindAt\r\n    }\r\n    author {\r\n      id\r\n      name\r\n      image\r\n      username\r\n      permalink\r\n    }\r\n    type\r\n    tags\r\n    source {\r\n      id\r\n      handle\r\n      name\r\n      permalink\r\n      image\r\n      type\r\n    }\r\n    userState {\r\n      vote\r\n      flags {\r\n        feedbackDismiss\r\n      }\r\n    }\r\n    slug\r\n    clickbaitTitleDetected\r\n  }\r\n\r\n\r\n  \r\n  fragment UserPost on Post {\r\n    read\r\n    upvoted\r\n    commented\r\n    bookmarked\r\n    downvoted\r\n  }\r\n\r\n`;\r\n\r\nexport const route: Route = {\r\n    path: '/upvoted/:period?/:innerSharedContent?/:dateSort?',\r\n    example: '/daily/upvoted/7',\r\n    view: ViewType.Articles,\r\n    radar: [\r\n        {\r\n            source: ['app.daily.dev/upvoted'],\r\n        },\r\n    ],\r\n    parameters: {\r\n        innerSharedContent: {\r\n            description: 'Where to Fetch inner Shared Posts instead of original',\r\n            default: 'false',\r\n            options: [\r\n                { value: 'false', label: 'False' },\r\n                { value: 'true', label: 'True' },\r\n            ],\r\n        },\r\n        dateSort: {\r\n            description: 'Sort posts by publication date instead of popularity',\r\n            default: 'true',\r\n            options: [\r\n                { value: 'false', label: 'False' },\r\n                { value: 'true', label: 'True' },\r\n            ],\r\n        },\r\n        period: {\r\n            description: 'Period of Lookup',\r\n            default: '7',\r\n            options: [\r\n                { value: '7', label: 'Last Week' },\r\n                { value: '30', label: 'Last Month' },\r\n                { value: '365', label: 'Last Year' },\r\n            ],\r\n        },\r\n    },\r\n    name: 'Most upvoted',\r\n    maintainers: ['Rjnishant530'],\r\n    handler,\r\n    url: 'app.daily.dev/upvoted',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const link = `${baseUrl}/posts/upvoted`;\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 20;\r\n    const innerSharedContent = ctx.req.param('innerSharedContent') ? JSON.parse(ctx.req.param('innerSharedContent')) : false;\r\n    const dateSort = ctx.req.param('dateSort') ? JSON.parse(ctx.req.param('dateSort')) : true;\r\n    const period = ctx.req.param('period') ? Number.parseInt(ctx.req.param('period'), 10) : 7;\r\n\r\n    const data = await getData({\r\n        query,\r\n        variables: {\r\n            ...variables,\r\n            period,\r\n            first: limit,\r\n        },\r\n    });\r\n    const items = getList(data, innerSharedContent, dateSort);\r\n\r\n    return {\r\n        title: 'Most upvoted posts for developers | daily.dev',\r\n        link,\r\n        item: items,\r\n        description: 'Find the most upvoted developer posts on daily.dev. Explore top-rated content in coding, tutorials, and tech news from the largest developer network in the world.',\r\n        logo: `${baseUrl}/favicon-32x32.png`,\r\n        icon: `${baseUrl}/favicon-32x32.png`,\r\n        language: 'en-us',\r\n    };\r\n}\r\n"],"mappings":"kXAGA,MAqHaA,EAAe,CACxB,KAAM,oDACN,QAAS,mBACT,KAAM,EAAS,SACf,MAAO,CACH,CACI,OAAQ,CAAC,2BAGjB,WAAY,CACR,mBAAoB,CAChB,YAAa,wDACb,QAAS,QACT,QAAS,CACL,CAAE,MAAO,QAAS,MAAO,SACzB,CAAE,MAAO,OAAQ,MAAO,UAGhC,SAAU,CACN,YAAa,uDACb,QAAS,OACT,QAAS,CACL,CAAE,MAAO,QAAS,MAAO,SACzB,CAAE,MAAO,OAAQ,MAAO,UAGhC,OAAQ,CACJ,YAAa,mBACb,QAAS,IACT,QAAS,CACL,CAAE,MAAO,IAAK,MAAO,aACrB,CAAE,MAAO,KAAM,MAAO,cACtB,CAAE,MAAO,MAAO,MAAO,gBAInC,KAAM,eACN,YAAa,CAAC,gBACd,UACA,IAAK,yBAGT,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,GAAG,EAAQ,gBAClB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAC/E,EAAqB,EAAI,IAAI,MAAM,sBAAwB,KAAK,MAAM,EAAI,IAAI,MAAM,uBAAyB,GAC7G,EAAW,EAAI,IAAI,MAAM,YAAc,KAAK,MAAM,EAAI,IAAI,MAAM,aAAe,GAC/E,EAAS,EAAI,IAAI,MAAM,UAAY,OAAO,SAAS,EAAI,IAAI,MAAM,UAAW,IAAM,EAElF,EAAO,MAAM,EAAQ,CACvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACA,UAAW,CACP,GAAG,EACH,SACA,MAAO,KAGT,EAAQ,EAAQ,EAAM,EAAoB,GAEhD,MAAO,CACH,MAAO,gDACP,OACA,KAAM,EACN,YAAa,qKACb,KAAM,GAAG,EAAQ,oBACjB,KAAM,GAAG,EAAQ,oBACjB,SAAU"}