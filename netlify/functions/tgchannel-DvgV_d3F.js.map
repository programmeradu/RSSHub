{"version":3,"file":"tgchannel-DvgV_d3F.js","names":["route: Route","got"],"sources":["../../lib/routes/wechat/tgchannel.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { finishArticleItem } from '@/utils/wechat-mp';\r\n\r\nexport const route: Route = {\r\n    path: '/tgchannel/:id/:mpName?/:searchQueryType?',\r\n    categories: ['new-media'],\r\n    example: '/wechat/tgchannel/lifeweek',\r\n    parameters: { id: '公众号绑定频道 id', mpName: '欲筛选的公众号全名（URL-encoded，精确匹配），在频道订阅了多个公众号时可选用', searchQueryType: '搜索查询类型，见下表' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '公众号（Telegram 频道来源）',\r\n    maintainers: ['LogicJake', 'Rongronggg9'],\r\n    handler,\r\n    description: `| 搜索查询类型 | 将使用的搜索关键字 |            适用于           |\r\n| :----------: | :----------------: | :-------------------------: |\r\n|      \\`0\\`     |     (禁用搜索)     |       所有情况 (默认)       |\r\n|      \\`1\\`     |     公众号全名     | 未启用 efb-patch-middleware |\r\n|      \\`2\\`     |     #公众号全名    | 已启用 efb-patch-middleware |\r\n\r\n::: tip\r\n  启用搜索有助于在订阅了过多公众号的频道里有效筛选，不易因为大量公众号同时推送导致一些公众号消息被遗漏，但必须正确选择搜索查询类型，否则会搜索失败。\r\n:::\r\n\r\n::: warning\r\n  该方法需要通过 efb 进行频道绑定，具体操作见 [https://github.com/DIYgod/RSSHub/issues/2172](https://github.com/DIYgod/RSSHub/issues/2172)\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const mpName = ctx.req.param('mpName') ?? '';\r\n    let searchQueryType = ctx.req.param('searchQueryType') ?? '0';\r\n    if (searchQueryType !== '0' && searchQueryType !== '1' && searchQueryType !== '2') {\r\n        searchQueryType = '0';\r\n    }\r\n    searchQueryType = +searchQueryType; // 将字符串转换为数字\r\n\r\n    const channelUrl = `https://t.me/s/${id}`;\r\n    const searchQuery = mpName && searchQueryType ? (searchQueryType === 2 ? `?q=%23${mpName}` : `?q=${mpName}`) : '';\r\n    const { data } = await got.get(`${channelUrl}${searchQuery}`);\r\n    const $ = load(data);\r\n    const list = $('.tgme_widget_message_wrap').slice(-20);\r\n\r\n    const out = await Promise.all(\r\n        list.toArray().map(async (item) => {\r\n            item = $(item);\r\n\r\n            if (searchQuery) {\r\n                // 删除关键字高亮 <mark class=\"highlight\">\r\n                const highlightMarks = item.find('mark.highlight').toArray();\r\n                if (highlightMarks) {\r\n                    for (let mark of highlightMarks) {\r\n                        mark = $(mark);\r\n                        const markInnerHtml = mark.html();\r\n                        mark.replaceWith(markInnerHtml);\r\n                    }\r\n                    item = $(item.html()); // 删除关键字高亮后，相邻的裸文本节点不会被自动合并，重新生成 cheerio 对象以确保后续流程正常运行\r\n                }\r\n            }\r\n\r\n            // [ div.tgme_widget_message_text 格式简略说明 ]\r\n            // 若频道只订阅一个公众号：\r\n            // 第 1 个元素: <a href=\"${用于 link priview 的预览图 url}\"><i><b>🔗</b></i></a>\r\n            // 第 2 个元素: <a href=\"${文章 url}\">${文章标题}</a>\r\n            // (余下是文章简介，一般是裸文本，这里用不到)\r\n            //\r\n            // 若频道订阅多于一个公众号：\r\n            // 第 1 个元素: <i><b>${emoji(标注消息来源于什么 slave，这里是表示微信的💬)}</b></i>\r\n            // 第 2 个元素: <i><b>${emoji(标注对话类型，这里是表示私聊的👤)</b></i>\r\n            // 裸文本: (半角空格)${公众号名}(半角冒号)\r\n            // 第 3 个元素: <br />\r\n            // 第 4 个元素: <a href=\"${用于 link priview 的预览图 url}\"><i><b>🔗</b></i></a>\r\n            // 第 5 个元素: <a href=\"${文章 url}\">${文章标题}</a>\r\n            // (余下是文章简介，一般是裸文本，这里用不到)\r\n            //\r\n            // 若启用 efb-patch-middleware 且频道订阅多于一个公众号：\r\n            // 第 1 个元素: <i><b>${emoji(标注消息来源于什么 slave，这里是表示微信的💬)}</b></i>\r\n            // 第 2 个元素: <i><b>${emoji(标注对话类型，这里是表示私聊的👤)</b></i>\r\n            // 第 3 个元素: <a href=\"${?q=%23url-encoded公众号名}\">#${公众号名}</a>\r\n            // 裸文本: ${公众号名余下部分 (若 hashtag 不合法 (遇到空格、标点) 导致被截断才会有)}(半角冒号)\r\n            // 第 4 个元素: <br />\r\n            // 第 5 个元素: <a href=\"${用于 link priview 的预览图 url}\"><i><b>🔗</b></i></a>\r\n            // 第 6 个元素: <a href=\"${文章 url}\">${文章标题}</a>\r\n            // (余下是文章简介，一般是裸文本，这里用不到)\r\n\r\n            let author = '';\r\n            let titleElemIs3thA = false;\r\n\r\n            const brNode = item.find('.tgme_widget_message_text > br:nth-of-type(1)').get(0); // 获取第一个换行\r\n            const authorNode = brNode && brNode.prev; // brNode 不为 undefined 时获取它的前一个节点\r\n            const authorNodePrev = authorNode && authorNode.prev; // authorNode 不为 undefined 时获取它的前一个节点\r\n            if (authorNode && authorNode.type === 'text') {\r\n                // 只有这个节点是一个裸文本时它才可能是公众号名，开始找寻公众号名\r\n                if (authorNodePrev && authorNodePrev.type === 'tag' && authorNodePrev.name === 'a' && authorNodePrev.attribs.href && authorNodePrev.attribs.href.startsWith('?q=%23')) {\r\n                    // authorNode 前一个节点是链接, 且是个 hashtag，表示启用了 efb-patch-middleware，这个节点是公众号名\r\n                    // 有两种可能：\r\n                    // 带 # 的完整公众号名 (efb-patch-middleware 启用，且 hashtag 完全合法)\r\n                    // 被截断的公众号名前半部分 (efb-patch-middleware 启用，但 hashtag 被空格或标点截断)\r\n                    // (若 efb-patch-middleware 未启用，或 hashtag 完全不合法，不会进入此流程)\r\n                    titleElemIs3thA = true;\r\n                    author += $(authorNodePrev).text();\r\n                }\r\n\r\n                const spaceIndex = authorNode.data.indexOf(' ');\r\n                const colonIndex = authorNode.data.indexOf(':');\r\n                if (authorNode.data.length > 1 && colonIndex !== -1 && (spaceIndex !== -1 || titleElemIs3thA)) {\r\n                    // 有三种可能：\r\n                    // 不带 # 的完整公众号名 (efb-patch-middleware 未启用)\r\n                    // 带 # 的完整公众号名 (efb-patch-middleware 启用，但 hashtag 完全不合法)\r\n                    // 被截断的公众号名后半部分 (efb-patch-middleware 启用，但 hashtag 被空格或标点截断，此时空格有意义)\r\n                    // (若 efb-patch-middleware 启用，且 hashtag 完全合法，不会进入此流程)\r\n                    const sliceStart = titleElemIs3thA ? 0 : spaceIndex + 1;\r\n                    author += authorNode.data.slice(sliceStart, colonIndex); // 提取作者\r\n                }\r\n\r\n                if (author.startsWith('#')) {\r\n                    author = author.slice(1); // 去掉开头的 #\r\n                }\r\n            }\r\n\r\n            // 如果启用了 efb-patch-middleware 且 hashtag (部分)合法，第三个 a 元素会是文章链接，否则是第二个\r\n            const titleElemNth = titleElemIs3thA ? 3 : 2;\r\n            const titleElem = item.find(`.tgme_widget_message_text > a:nth-of-type(${titleElemNth})`);\r\n\r\n            if (titleElem.length === 0) {\r\n                // 获取不到标题 a 元素，这可能是公众号发的服务消息，丢弃它\r\n                return;\r\n            }\r\n\r\n            let title = titleElem.text();\r\n            const link = titleElem.attr('href');\r\n\r\n            if (mpName && author !== mpName) {\r\n                // 指定了要筛选的公众号名，且该文章不是该公众号发的\r\n                return; // 丢弃\r\n            } else if (!mpName && author) {\r\n                // 没有指定要筛选的公众号名，且匹配到了作者\r\n                title = author + ': ' + title; // 给标题里加上获取到的作者\r\n            }\r\n\r\n            const pubDate = new Date(item.find('.tgme_widget_message_date time').attr('datetime')).toUTCString();\r\n\r\n            /*\r\n             * Since 2024/4/20, t.me/s/ mistakenly have every '&' in **hyperlinks** replaced by '&amp;'.\r\n             * wechat-mp will take care of this, so no need to fix it here.\r\n             * However, once the bug is eventually fixed, all guid will be changed again.\r\n             * Considering that this is almost certain to happen, let's break guid consistency now by using\r\n             * normalized URL from wechat-mp as guid to avoid similar issues in the future.\r\n             */\r\n            const single = {\r\n                title,\r\n                pubDate,\r\n                link,\r\n                // guid: link,\r\n            };\r\n\r\n            if (link !== undefined) {\r\n                try {\r\n                    return await finishArticleItem(single);\r\n                } catch {\r\n                    single.description = item.find('.tgme_widget_message_text').html();\r\n                }\r\n            }\r\n            return single;\r\n        })\r\n    );\r\n\r\n    out.reverse();\r\n    return {\r\n        title: mpName || $('.tgme_channel_info_header_title').text(),\r\n        link: `https://t.me/s/${id}`,\r\n        item: out.filter(Boolean),\r\n        allowEmpty: !!mpName,\r\n    };\r\n}\r\n"],"mappings":"wXAKA,MAAaA,EAAe,CACxB,KAAM,4CACN,WAAY,CAAC,aACb,QAAS,6BACT,WAAY,CAAE,GAAI,aAAc,OAAQ,8CAA+C,gBAAiB,cACxG,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,qBACN,YAAa,CAAC,YAAa,eAC3B,UACA,YAAa;;;;;;;;;;;;MAejB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MACnB,EAAS,EAAI,IAAI,MAAM,WAAa,GACtC,EAAkB,EAAI,IAAI,MAAM,oBAAsB,IACtD,IAAoB,KAAO,IAAoB,KAAO,IAAoB,MAC1E,EAAkB,KAEtB,EAAkB,CAAC,EAEnB,IAAM,EAAa,kBAAkB,IAC/B,EAAc,GAAU,EAAmB,IAAoB,EAAI,SAAS,IAAW,MAAM,IAAY,GACzG,CAAE,QAAS,MAAMC,EAAI,IAAI,GAAG,IAAa,KACzC,EAAI,EAAK,GACT,EAAO,EAAE,6BAA6B,MAAM,KAE5C,EAAM,MAAM,QAAQ,IACtB,EAAK,UAAU,IAAI,KAAO,IAAS,CAG/B,GAFA,EAAO,EAAE,GAEL,EAAa,CAEb,IAAM,EAAiB,EAAK,KAAK,kBAAkB,UACnD,GAAI,EAAgB,CAChB,IAAK,IAAI,KAAQ,EAAgB,CAC7B,EAAO,EAAE,GACT,IAAM,EAAgB,EAAK,OAC3B,EAAK,YAAY,GAErB,EAAO,EAAE,EAAK,SA6BtB,IAAI,EAAS,GACT,EAAkB,GAEhB,EAAS,EAAK,KAAK,iDAAiD,IAAI,GACxE,EAAa,GAAU,EAAO,KAC9B,EAAiB,GAAc,EAAW,KAChD,GAAI,GAAc,EAAW,OAAS,OAAQ,CAEtC,GAAkB,EAAe,OAAS,OAAS,EAAe,OAAS,KAAO,EAAe,QAAQ,MAAQ,EAAe,QAAQ,KAAK,WAAW,YAMxJ,EAAkB,GAClB,GAAU,EAAE,GAAgB,QAGhC,IAAM,EAAa,EAAW,KAAK,QAAQ,KACrC,EAAa,EAAW,KAAK,QAAQ,KAC3C,GAAI,EAAW,KAAK,OAAS,GAAK,IAAe,KAAO,IAAe,IAAM,GAAkB,CAM3F,IAAM,EAAa,EAAkB,EAAI,EAAa,EACtD,GAAU,EAAW,KAAK,MAAM,EAAY,GAG5C,EAAO,WAAW,OAClB,EAAS,EAAO,MAAM,IAK9B,IAAM,EAAe,EAAkB,EAAI,EACrC,EAAY,EAAK,KAAK,6CAA6C,EAAa,IAEtF,GAAI,EAAU,SAAW,EAErB,OAGJ,IAAI,EAAQ,EAAU,OAChB,EAAO,EAAU,KAAK,QAE5B,GAAI,GAAU,IAAW,EAErB,OACO,CAAC,GAAU,IAElB,EAAQ,EAAS,KAAO,GAG5B,IAAM,EAAU,IAAI,KAAK,EAAK,KAAK,kCAAkC,KAAK,aAAa,cASjF,EAAS,CACX,QACA,UACA,QAIJ,GAAI,IAAS,IAAA,GACT,GAAI,CACA,OAAO,MAAM,EAAkB,QAC3B,CACJ,EAAO,YAAc,EAAK,KAAK,6BAA6B,OAGpE,OAAO,KAKf,OADA,EAAI,UACG,CACH,MAAO,GAAU,EAAE,mCAAmC,OACtD,KAAM,kBAAkB,IACxB,KAAM,EAAI,OAAO,SACjB,WAAY,CAAC,CAAC"}