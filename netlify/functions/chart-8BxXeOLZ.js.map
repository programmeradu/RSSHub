{"version":3,"file":"chart-8BxXeOLZ.js","names":[],"sources":["../../lib/routes/imdb/chart.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport * as cheerio from 'cheerio';\r\nimport type { Context } from 'hono';\r\nimport { ChartTitleSearchConnection } from './types';\r\nimport path from 'node:path';\r\nimport { art } from '@/utils/render';\r\n\r\nconst render = (data) => art(path.join(__dirname, 'templates/chart.art'), data);\r\n\r\nexport const route: Route = {\r\n    path: '/chart/:chart?',\r\n    categories: ['multimedia'],\r\n    view: ViewType.Notifications,\r\n    parameters: {\r\n        chart: {\r\n            description: 'The chart to display, `top` by default',\r\n            options: [\r\n                { value: 'top', label: 'Top 250 Movies' },\r\n                { value: 'moviemeter', label: 'Most Popular Movies' },\r\n                { value: 'toptv', label: 'Top 250 TV Shows' },\r\n                { value: 'tvmeter', label: 'Most Popular TV Shows' },\r\n            ],\r\n            default: 'top',\r\n        },\r\n    },\r\n    example: '/imdb/chart',\r\n    radar: [\r\n        {\r\n            source: ['www.imdb.com/chart/:chart/'],\r\n        },\r\n    ],\r\n    name: 'Charts',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n    url: 'www.imdb.com/chart/top/',\r\n    description: `| Top 250 Movies | Most Popular Movies | Top 250 TV Shows | Most Popular TV Shows |\r\n| -------------- | ------------------- | ---------------- | --------------------- |\r\n| top            | moviemeter          | toptv            | tvmeter               |`,\r\n};\r\n\r\nasync function handler(ctx: Context) {\r\n    const { chart = 'top' } = ctx.req.param();\r\n    const baseUrl = 'https://www.imdb.com';\r\n    const link = `${baseUrl}/chart/${chart}/`;\r\n\r\n    const response = await ofetch(link);\r\n    const $ = cheerio.load(response);\r\n    const nextData = JSON.parse($('script#__NEXT_DATA__').text());\r\n    const chartTitles = nextData.props.pageProps.pageData.chartTitles as ChartTitleSearchConnection;\r\n\r\n    const items = chartTitles.edges.map(({ currentRank, node }) => ({\r\n        title: `${currentRank}. ${node.titleText.text} (${node.releaseYear.year}${node.releaseYear.endYear ? `-${node.releaseYear.endYear}` : ''})`,\r\n        description: render({\r\n            primaryImage: node.primaryImage,\r\n            originalTitleText: node.originalTitleText,\r\n            certificate: node.certificate,\r\n            ratingsSummary: node.ratingsSummary,\r\n            plot: node.plot,\r\n        }),\r\n        link: `${baseUrl}/title/${node.id}`,\r\n        category: node.titleGenres.genres.map((g) => chartTitles.genres.find((genre) => genre.filterId === g.genre.text)?.text),\r\n    }));\r\n\r\n    return {\r\n        title: $('head title').text(),\r\n        description: $('head meta[name=\"description\"]').attr('content'),\r\n        link,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"oWAQA,MAAM,EAAU,GAAS,EAAI,EAAA,KAAA,EAAA,gCAA6C,GAE7D,EAAe,CACxB,KAAM,iBACN,WAAY,CAAC,cACb,KAAM,EAAS,cACf,WAAY,CACR,MAAO,CACH,YAAa,yCACb,QAAS,CACL,CAAE,MAAO,MAAO,MAAO,kBACvB,CAAE,MAAO,aAAc,MAAO,uBAC9B,CAAE,MAAO,QAAS,MAAO,oBACzB,CAAE,MAAO,UAAW,MAAO,0BAE/B,QAAS,QAGjB,QAAS,cACT,MAAO,CACH,CACI,OAAQ,CAAC,gCAGjB,KAAM,SACN,YAAa,CAAC,UACd,UACA,IAAK,0BACL,YAAa;;sFAKjB,eAAe,EAAQ,EAAc,CACjC,GAAM,CAAE,QAAQ,OAAU,EAAI,IAAI,QAC5B,EAAU,uBACV,EAAO,GAAG,EAAQ,SAAS,EAAM,GAEjC,EAAW,MAAM,EAAO,GACxB,EAAI,EAAQ,KAAK,GACjB,EAAW,KAAK,MAAM,EAAE,wBAAwB,QAChD,EAAc,EAAS,MAAM,UAAU,SAAS,YAEhD,EAAQ,EAAY,MAAM,KAAK,CAAE,cAAa,WAAY,CAC5D,MAAO,GAAG,EAAY,IAAI,EAAK,UAAU,KAAK,IAAI,EAAK,YAAY,OAAO,EAAK,YAAY,QAAU,IAAI,EAAK,YAAY,UAAY,GAAG,GACzI,YAAa,EAAO,CAChB,aAAc,EAAK,aACnB,kBAAmB,EAAK,kBACxB,YAAa,EAAK,YAClB,eAAgB,EAAK,eACrB,KAAM,EAAK,OAEf,KAAM,GAAG,EAAQ,SAAS,EAAK,KAC/B,SAAU,EAAK,YAAY,OAAO,IAAK,GAAM,EAAY,OAAO,KAAM,GAAU,EAAM,WAAa,EAAE,MAAM,OAAO,SAGtH,MAAO,CACH,MAAO,EAAE,cAAc,OACvB,YAAa,EAAE,iCAAiC,KAAK,WACrD,OACA,KAAM"}