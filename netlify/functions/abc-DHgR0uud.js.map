{"version":3,"file":"abc-DHgR0uud.js","names":[],"sources":["../../lib/routes/abc/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/:category{.+}?',\r\n    example: '/wa',\r\n    radar: [\r\n        {\r\n            source: ['abc.net.au/:category*'],\r\n            target: '/:category',\r\n        },\r\n    ],\r\n    parameters: {\r\n        category: 'Category, can be found in the URL, can also be filled in with the `documentId` in the source code of the page, `news/justin` as **Just In** by default',\r\n    },\r\n    name: 'Channel & Topic',\r\n    categories: ['traditional-media'],\r\n    description: `\r\n::: tip\r\n  All Topics in [Topic Library](https://abc.net.au/news/topics) are supported, you can fill in the field after \\`topic\\` in its URL, or fill in the \\`documentId\\`.\r\n\r\n  For example, the URL for [Computer Science](https://www.abc.net.au/news/topic/computer-science) is \\`https://www.abc.net.au/news/topic/computer-science\\`, the \\`category\\` is \\`news/topic/computer-science\\`, and the \\`documentId\\` of the Topic is \\`2302\\`, so the route is [/abc/news/topic/computer-science](https://rsshub.app/abc/news/topic/computer-science) and [/abc/2302](https://rsshub.app/abc/2302).\r\n\r\n  The supported channels are all listed in the table below. For other channels, please find the \\`documentId\\` in the source code of the channel page and fill it in as above.\r\n:::`,\r\n    maintainers: ['nczitzk', 'pseudoyu'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category = 'news/justin' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 30;\r\n\r\n    const rootUrl = 'https://www.abc.net.au';\r\n    const apiUrl = new URL('news-web/api/loader/channelrefetch', rootUrl).href;\r\n\r\n    let currentUrl = '';\r\n    let documentId;\r\n\r\n    if (Number.isNaN(category)) {\r\n        currentUrl = new URL(category, rootUrl).href;\r\n    } else {\r\n        documentId = category;\r\n        const feedUrl = new URL(`news/feed/${documentId}/rss.xml`, rootUrl).href;\r\n\r\n        const feedResponse = await ofetch(feedUrl);\r\n        currentUrl = feedResponse.match(/<link>([\\w-./:?]+)<\\/link>/)[1];\r\n    }\r\n\r\n    const currentResponse = await ofetch(currentUrl);\r\n\r\n    const $ = load(currentResponse);\r\n\r\n    documentId = documentId ?? $('div[data-uri^=\"coremedia://collection/\"]').first().prop('data-uri').split(/\\//).pop();\r\n\r\n    const response = await ofetch(apiUrl, {\r\n        query: {\r\n            name: 'PaginationArticles',\r\n            documentId,\r\n            size: limit,\r\n        },\r\n    });\r\n\r\n    let items = response.collection.slice(0, limit).map((i) => {\r\n        const item = {\r\n            title: i.title.children ?? i.title,\r\n            link: i.link.startsWith('https://') ? i.link : new URL(i.link, rootUrl).href,\r\n            description: art(path.join(__dirname, 'templates/description.art'), {\r\n                image: i.image\r\n                    ? {\r\n                          src: i.image.imgSrc.split(/\\?/)[0],\r\n                          alt: i.image.alt,\r\n                      }\r\n                    : undefined,\r\n            }),\r\n            author: i.newsBylineProps?.authors?.map((a) => a.name).join('/') ?? undefined,\r\n            guid: `abc-${i.id}`,\r\n            pubDate: parseDate(i.dates.firstPublished),\r\n            updated: i.dates.lastUpdated ? parseDate(i.dates.lastUpdated) : undefined,\r\n        };\r\n\r\n        if (i.mediaIndicator) {\r\n            item.enclosure_type = 'audio/mpeg';\r\n            item.itunes_item_image = i.image?.imgSrc.split(/\\?/)[0] ?? undefined;\r\n            item.itunes_duration = i.mediaIndicator.duration;\r\n        }\r\n\r\n        return item;\r\n    });\r\n\r\n    items = await Promise.all(\r\n        items.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                try {\r\n                    const detailResponse = await ofetch(item.link);\r\n\r\n                    const content = load(detailResponse);\r\n\r\n                    content('aside, header, [data-print=\"inline-media\"], [data-component=\"EmbedBlock\"]').remove();\r\n\r\n                    content('#body *, div[data-component=\"FeatureMedia\"]')\r\n                        .children()\r\n                        .each(function () {\r\n                            const element = content(this);\r\n                            if (element.prop('tagName').toLowerCase() === 'figure') {\r\n                                element.replaceWith(\r\n                                    art(path.join(__dirname, 'templates/description.art'), {\r\n                                        image: {\r\n                                            src: element.find('img').prop('src').split(/\\?/)[0],\r\n                                            alt: element.find('figcaption').text().trim(),\r\n                                        },\r\n                                    })\r\n                                );\r\n                            } else {\r\n                                element.removeAttr('id class role data-component data-uri');\r\n                            }\r\n                        });\r\n\r\n                    item.title = content('meta[property=\"og:title\"]').prop('content');\r\n                    item.description = '';\r\n\r\n                    const enclosurePattern = String.raw`\"(?:MIME|content)?Type\":\"([\\w]+/[\\w]+)\".*?\"(?:fileS|s)?ize\":(\\d+),.*?\"url\":\"([\\w-.:/?]+)\"`;\r\n\r\n                    const enclosureMatches = detailResponse.match(new RegExp(enclosurePattern, 'g'));\r\n\r\n                    if (enclosureMatches) {\r\n                        const enclosureMatch = enclosureMatches\r\n                            .map((e) => e.match(new RegExp(enclosurePattern)))\r\n                            .sort((a, b) => Number.parseInt(a[2], 10) - Number.parseInt(b[2], 10))\r\n                            .pop();\r\n\r\n                        item.enclosure_url = enclosureMatch[3];\r\n                        item.enclosure_length = enclosureMatch[2];\r\n                        item.enclosure_type = enclosureMatch[1];\r\n\r\n                        item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                            enclosure: {\r\n                                src: item.enclosure_url,\r\n                                type: item.enclosure_type,\r\n                            },\r\n                        });\r\n                    }\r\n\r\n                    item.description =\r\n                        art(path.join(__dirname, 'templates/description.art'), {\r\n                            description: (content('div[data-component=\"FeatureMedia\"]').html() || '') + (content('#body div[data-component=\"LayoutContainer\"] div').first().html() || ''),\r\n                        }) + item.description;\r\n\r\n                    item.category = content('meta[property=\"article:tag\"]')\r\n                        .toArray()\r\n                        .flatMap((c) =>\r\n                            content(c)\r\n                                .prop('content')\r\n                                .split(/ï¼Œ/)\r\n                                .map((c) => c.trim())\r\n                        );\r\n                    item.guid = `abc-${content('meta[name=\"ContentId\"]').prop('content')}`;\r\n                    item.pubDate = parseDate(content('meta[property=\"article:published_time\"]').prop('content'));\r\n                    item.updated = parseDate(content('meta[property=\"article:modified_time\"]').prop('content'));\r\n                } catch {\r\n                    //\r\n                }\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    const icon = new URL($('link[rel=\"apple-touch-icon\"]').prop('href') || '', rootUrl).href;\r\n\r\n    return {\r\n        item: items,\r\n        title: $('title').first().text(),\r\n        link: currentUrl,\r\n        description: $('meta[property=\"og:description\"]').prop('content'),\r\n        language: $('html').prop('lang'),\r\n        image: $('meta[property=\"og:image\"]').prop('content').split('?')[0],\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('meta[property=\"og:title\"]').prop('content'),\r\n        author: $('meta[name=\"generator\"]').prop('content'),\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"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"}