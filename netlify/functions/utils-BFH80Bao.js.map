{"version":3,"file":"utils-BFH80Bao.js","names":[],"sources":["../../lib/routes/ainvest/utils.ts"],"sourcesContent":["import crypto from 'node:crypto';\r\nimport CryptoJS from 'crypto-js';\r\nimport { KJUR, KEYUTIL, hextob64 } from 'jsrsasign';\r\n\r\nconst publicKey =\r\n    'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCARnxLlrhTK28bEV7s2IROjT73KLSjfqpKIvV8L+Yhe4BrF0Ut4oOH728HZlbSF0C3N0vXZjLAFesoS4v1pYOjVCPXl920Lh2seCv82m0cK78WMGuqZTfA44Nv7JsQMHC3+J6IZm8YD53ft2d8mYBFgKektduucjx8sObe7eRyoQIDAQAB';\r\n\r\nconst randomString = (length: number) => {\r\n    if (length > 32) {\r\n        throw new Error('Max length is 32.');\r\n    }\r\n    return uuidv4().replaceAll('-', '').slice(0, length);\r\n};\r\n\r\nconst uuidv4 = () => crypto.randomUUID();\r\n\r\n/**\r\n * @param {string} str\r\n * @returns {CryptoJS.lib.WordArray}\r\n */\r\nconst MD5 = (str) => CryptoJS.MD5(str);\r\n\r\nconst encryptAES = (data, key) => {\r\n    if (typeof key === 'string') {\r\n        key = MD5(key);\r\n    }\r\n    return CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(data), key, {\r\n        mode: CryptoJS.mode.ECB,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n    }).toString();\r\n};\r\n\r\nconst decryptAES = (data, key) => {\r\n    if (typeof key === 'string') {\r\n        key = MD5(key);\r\n    }\r\n    return CryptoJS.AES.decrypt(data, key, {\r\n        mode: CryptoJS.mode.ECB,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n    }).toString(CryptoJS.enc.Utf8);\r\n};\r\n\r\nconst encryptRSA = (data) => {\r\n    // Original code:\r\n    // var n = new JSEncrypt();\r\n    // n.setPublicKey(pubKey);\r\n    // return n.encrypt(message);\r\n    // Note: Server will reject the public key if it's encrypted using crypto.publicEncrypt().\r\n    let pubKey = `-----BEGIN PUBLIC KEY-----${publicKey}-----END PUBLIC KEY-----`;\r\n    pubKey = KEYUTIL.getKey(pubKey);\r\n    return hextob64(KJUR.crypto.Cipher.encrypt(data, pubKey));\r\n};\r\n\r\nconst getHeaders = (key) => {\r\n    const fingerPrint = uuidv4();\r\n\r\n    return {\r\n        'content-type': 'application/json',\r\n        'ovse-trace': uuidv4(),\r\n        callertype: 'USER',\r\n        fingerprint: encryptAES(fingerPrint, MD5(key)),\r\n        onetimeskey: encryptRSA(key),\r\n        timestamp: encryptAES(Date.now(), key),\r\n        referer: 'https://www.ainvest.com/',\r\n    };\r\n};\r\n\r\nexport { randomString, encryptAES, decryptAES, getHeaders };\r\n"],"mappings":"gHAIA,MAGM,EAAgB,GAAmB,CACrC,GAAI,EAAS,GACT,MAAU,MAAM,qBAEpB,OAAO,IAAS,WAAW,IAAK,IAAI,MAAM,EAAG,IAG3C,MAAe,EAAO,aAMtB,EAAO,GAAQ,EAAS,IAAI,GAE5B,GAAc,EAAM,KAClB,OAAO,GAAQ,WACf,EAAM,EAAI,IAEP,EAAS,IAAI,QAAQ,EAAS,IAAI,KAAK,MAAM,GAAO,EAAK,CAC5D,KAAM,EAAS,KAAK,IACpB,QAAS,EAAS,IAAI,QACvB,YAGD,GAAc,EAAM,KAClB,OAAO,GAAQ,WACf,EAAM,EAAI,IAEP,EAAS,IAAI,QAAQ,EAAM,EAAK,CACnC,KAAM,EAAS,KAAK,IACpB,QAAS,EAAS,IAAI,QACvB,SAAS,EAAS,IAAI,OAGvB,EAAc,GAAS,CAMzB,IAAI,EAAS,6QAEb,MADA,GAAS,EAAQ,OAAO,GACjB,EAAS,EAAK,OAAO,OAAO,QAAQ,EAAM,KAG/C,EAAc,GAAQ,CACxB,IAAM,EAAc,IAEpB,MAAO,CACH,eAAgB,mBAChB,aAAc,IACd,WAAY,OACZ,YAAa,EAAW,EAAa,EAAI,IACzC,YAAa,EAAW,GACxB,UAAW,EAAW,KAAK,MAAO,GAClC,QAAS"}