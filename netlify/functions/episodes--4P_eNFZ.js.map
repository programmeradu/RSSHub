{"version":3,"file":"episodes--4P_eNFZ.js","names":["route: Route","apiKey","got"],"sources":["../../lib/routes/themoviedb/episodes.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport apiKey from './api-key';\r\nimport { handleDescription } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: '/tv/:id/seasons/:seasonNumber/episodes/:lang?',\r\n    categories: ['multimedia'],\r\n    example: '/themoviedb/tv/70593/seasons/1/episodes/en-US',\r\n    parameters: { id: 'TV show ID', seasonNumber: 'Season number', lang: 'Language' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'TV Show Episodes',\r\n    maintainers: ['x2cf'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { id, seasonNumber, lang } = ctx.req.param();\r\n    const searchParams = {\r\n        language: lang,\r\n        api_key: apiKey(),\r\n    };\r\n    const { data: tvShowDetails } = await got(`https://api.themoviedb.org/3/tv/${id}`, { searchParams });\r\n    const { data: seasonDetails } = await got(`https://api.themoviedb.org/3/tv/${id}/season/${seasonNumber}`, { searchParams });\r\n\r\n    return {\r\n        title: `${tvShowDetails.name} ${seasonDetails.name} â€” TMDB`,\r\n        description: seasonDetails.overview.trim(),\r\n        image: `https://image.tmdb.org/t/p/original${seasonDetails.poster_path}`,\r\n        link: `https://www.themoviedb.org/tv/${tvShowDetails.id}/season/${seasonDetails.season_number}`,\r\n        item: seasonDetails.episodes.toReversed().map((item) => ({\r\n            title: `${item.episode_number} ${item.name}`,\r\n            link: `https://www.themoviedb.org/tv/${tvShowDetails.id}/season/${item.season_number}/episode/${item.episode_number}`,\r\n            description: handleDescription(item),\r\n            pubDate: item.air_date ? parseDate(item.air_date) : undefined,\r\n        })),\r\n    };\r\n}\r\n"],"mappings":"+XAMA,MAAaA,EAAe,CACxB,KAAM,gDACN,WAAY,CAAC,cACb,QAAS,gDACT,WAAY,CAAE,GAAI,aAAc,aAAc,gBAAiB,KAAM,YACrE,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,mBACN,YAAa,CAAC,QACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,KAAI,eAAc,QAAS,EAAI,IAAI,QACrC,EAAe,CACjB,SAAU,EACV,QAASC,KAEP,CAAE,KAAM,GAAkB,MAAMC,EAAI,mCAAmC,IAAM,CAAE,iBAC/E,CAAE,KAAM,GAAkB,MAAMA,EAAI,mCAAmC,EAAG,UAAU,IAAgB,CAAE,iBAE5G,MAAO,CACH,MAAO,GAAG,EAAc,KAAK,GAAG,EAAc,KAAK,SACnD,YAAa,EAAc,SAAS,OACpC,MAAO,sCAAsC,EAAc,cAC3D,KAAM,iCAAiC,EAAc,GAAG,UAAU,EAAc,gBAChF,KAAM,EAAc,SAAS,aAAa,IAAK,IAAU,CACrD,MAAO,GAAG,EAAK,eAAe,GAAG,EAAK,OACtC,KAAM,iCAAiC,EAAc,GAAG,UAAU,EAAK,cAAc,WAAW,EAAK,iBACrG,YAAa,EAAkB,GAC/B,QAAS,EAAK,SAAW,EAAU,EAAK,UAAY,IAAA"}