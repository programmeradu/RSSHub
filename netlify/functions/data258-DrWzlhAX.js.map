{"version":3,"file":"data258-DrWzlhAX.js","names":["route: Route","cache","RequestInProgressError","got","wait","response","$"],"sources":["../../lib/routes/wechat/data258.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nimport { finishArticleItem } from '@/utils/wechat-mp';\r\nimport wait from '@/utils/wait';\r\nimport RequestInProgressError from '@/errors/types/request-in-progress';\r\n\r\nconst parsePage = ($item, hyperlinkSelector, timeSelector) => {\r\n    const hyperlink = $item.find(hyperlinkSelector);\r\n    const title = hyperlink.text();\r\n    const link = hyperlink.attr('href');\r\n    const pubDate = timezone(parseDate($item.find(timeSelector).text(), 'YYYY-MM-DD HH:mm'), 8);\r\n    return {\r\n        title,\r\n        link,\r\n        pubDate,\r\n    };\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/data258/:id?',\r\n    radar: [\r\n        {\r\n            source: ['mp.data258.com/', 'mp.data258.com/article/category/:id'],\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: ['Rongronggg9'],\r\n    handler,\r\n    url: 'mp.data258.com/',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    // !!! here we must use a lock to prevent other requests to break the anti-anti-crawler workarounds !!!\r\n    if ((await cache.get('data258:lock', false)) === '1') {\r\n        throw new RequestInProgressError('Another request is in progress, please try again later.');\r\n    }\r\n    // !!! here no need to acquire the lock, because the MP/category page has no crawler detection !!!\r\n\r\n    const id = ctx.req.param('id');\r\n\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 5;\r\n\r\n    const rootUrl = 'https://mp.data258.com';\r\n    const pageUrl = id ? `${rootUrl}/article/category/${id}` : rootUrl;\r\n\r\n    const response = await got(pageUrl);\r\n    const $ = load(response.data);\r\n\r\n    const title = $('head title').text();\r\n    // title = title.endsWith('-微阅读') ? title.slice(0, title.length - 4) : title;\r\n    const description = $('meta[name=\"description\"]').attr('content');\r\n\r\n    const categoryPage = $('ul.fly-list');\r\n\r\n    let items =\r\n        categoryPage && categoryPage.length\r\n            ? $(categoryPage)\r\n                  .find('li')\r\n                  .toArray()\r\n                  .map((item) => parsePage($(item), 'h2 a', '.fly-list-info span')) // got a category page\r\n            : $('ul.jie-row li')\r\n                  .toArray()\r\n                  .map((item) => parsePage($(item), 'a.jie-title', '.layui-hide-xs')); // got an MP page\r\n\r\n    items = items.slice(0, limit); // limit to avoid being anti-crawled\r\n\r\n    // !!! double-check !!!\r\n    if ((await cache.get('data258:lock', false)) === '1') {\r\n        throw new RequestInProgressError('Another request is in progress, please try again later.');\r\n    } else {\r\n        // !!! here we acquire the lock because the jump page has crawler detection !!!\r\n        await cache.set('data258:lock', '1', 60);\r\n    }\r\n\r\n    // !!! here we must use a for-loop to ensure the concurrency is 1 !!!\r\n    // !!! please do note that if you try to increase the concurrency, your IP will be banned for a long time !!!\r\n\r\n    let err; // !!! let RSSHub throw an anti-crawler prompt if the route is empty !!!\r\n\r\n    /* eslint-disable no-await-in-loop */\r\n    for (const item of items) {\r\n        // https://mp.data258.com/wx?id=${id}&t={token}, id is a permanent hex, token is a temporary base64\r\n        const cacheId = item.link.match(/id=([\\da-f]+)/)[1];\r\n        item.link = item.link.startsWith('http') ? item.link : `${rootUrl}${item.link}`;\r\n        const realLink = await cache.tryGet(`data258:${cacheId}`, async () => {\r\n            try {\r\n                // !!! here we must sleep 1s to avoid being anti-crawled !!!\r\n                // !!! please do note that if the interval is less than 1s, your IP will be banned for a long time !!!\r\n                await wait(1000);\r\n\r\n                const response = await got.get(item.link, {\r\n                    headers: {\r\n                        Referer: pageUrl, // essential\r\n                    },\r\n                });\r\n                if (response.data.includes('今日浏览次数已达上限')) {\r\n                    // !!! as long as cache hits, the link will not be crawled and consume the limit !!!\r\n                    // !!! so that's not a big problem if the RSSHub instance is self-hosted !!!\r\n                    err = new got.RequestError(response.data, {}, response.request);\r\n                    return null;\r\n                }\r\n                const $ = load(response.data);\r\n                const jmpJS = $('script')\r\n                    .filter((_, e) => $(e).html().includes('location.href'))\r\n                    .html();\r\n                return jmpJS.match(/location\\.href='([^']+)'/)[1];\r\n            } catch (error) {\r\n                err = error;\r\n                return null;\r\n            }\r\n        });\r\n        if (realLink) {\r\n            item.link = realLink;\r\n        } else {\r\n            break; // being anti-crawled, immediately cancel following operations\r\n        }\r\n    }\r\n    /* eslint-enable no-await-in-loop */\r\n\r\n    // !!! release the lock, let it expire immediately since no need to keep it in cache !!!\r\n    await cache.set('data258:lock', '0', 1);\r\n\r\n    // jump links are valid only for a short period of time, drop those un-jumped items\r\n    // http://mp.weixin.qq.com/s\r\n    items = items.filter((item) => item.link.match(/^https?:\\/\\/mp\\.weixin\\.qq\\.com\\/s/));\r\n\r\n    if (items.length === 0 && err) {\r\n        // !!! if each request is anti-crawled, the filtered items array will be empty !!!\r\n        // !!! let RSSHub throw an anti-crawler prompt !!!\r\n        throw err;\r\n    }\r\n\r\n    await Promise.all(items.map((item) => finishArticleItem(item, !!categoryPage)));\r\n\r\n    return {\r\n        title,\r\n        link: pageUrl,\r\n        description,\r\n        item: items,\r\n    };\r\n}\r\n\r\n// TODO: login? the valid time for cookies seems to be short, and abusing account will probably get banned...\r\n// TODO: fetch full article for the official RSS feed? unless someone who is VIP contributes their RSS feed for test...\r\n"],"mappings":"wlBAUA,MAAM,GAAa,EAAO,EAAmB,IAAiB,CAC1D,IAAM,EAAY,EAAM,KAAK,GACvB,EAAQ,EAAU,OAClB,EAAO,EAAU,KAAK,QACtB,EAAU,EAAS,EAAU,EAAM,KAAK,GAAc,OAAQ,oBAAqB,GACzF,MAAO,CACH,QACA,OACA,YAIKA,EAAe,CACxB,KAAM,gBACN,MAAO,CACH,CACI,OAAQ,CAAC,kBAAmB,yCAGpC,KAAM,UACN,YAAa,CAAC,eACd,UACA,IAAK,mBAGT,eAAe,EAAQ,EAAK,CAExB,GAAK,MAAMC,EAAM,IAAI,eAAgB,MAAY,IAC7C,MAAM,IAAIC,EAAuB,2DAIrC,IAAM,EAAK,EAAI,IAAI,MAAM,MAEnB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,EAE3E,EAAU,yBACV,EAAU,EAAK,GAAG,EAAQ,oBAAoB,IAAO,EAErD,EAAW,MAAMC,EAAI,GACrB,EAAI,EAAK,EAAS,MAElB,EAAQ,EAAE,cAAc,OAExB,EAAc,EAAE,4BAA4B,KAAK,WAEjD,EAAe,EAAE,eAEnB,EACA,GAAgB,EAAa,OACvB,EAAE,GACG,KAAK,MACL,UACA,IAAK,GAAS,EAAU,EAAE,GAAO,OAAQ,wBAC9C,EAAE,iBACG,UACA,IAAK,GAAS,EAAU,EAAE,GAAO,cAAe,mBAK/D,GAHA,EAAQ,EAAM,MAAM,EAAG,GAGlB,MAAMF,EAAM,IAAI,eAAgB,MAAY,IAC7C,MAAM,IAAIC,EAAuB,2DAGjC,MAAMD,EAAM,IAAI,eAAgB,IAAK,IAMzC,IAAI,EAGJ,IAAK,IAAM,KAAQ,EAAO,CAEtB,IAAM,EAAU,EAAK,KAAK,MAAM,iBAAiB,GACjD,EAAK,KAAO,EAAK,KAAK,WAAW,QAAU,EAAK,KAAO,GAAG,IAAU,EAAK,OACzE,IAAM,EAAW,MAAMA,EAAM,OAAO,WAAW,IAAW,SAAY,CAClE,GAAI,CAGA,MAAMG,EAAK,KAEX,IAAMC,EAAW,MAAMF,EAAI,IAAI,EAAK,KAAM,CACtC,QAAS,CACL,QAAS,KAGjB,GAAIE,EAAS,KAAK,SAAS,cAIvB,MADA,GAAM,IAAIF,EAAI,aAAaE,EAAS,KAAM,GAAIA,EAAS,SAChD,KAEX,IAAMC,EAAI,EAAKD,EAAS,MAClB,EAAQC,EAAE,UACX,QAAQ,EAAG,IAAMA,EAAE,GAAG,OAAO,SAAS,kBACtC,OACL,OAAO,EAAM,MAAM,4BAA4B,SAC1C,EAAO,CAEZ,MADA,GAAM,EACC,QAGf,GAAI,EACA,EAAK,KAAO,OAEZ,MAYR,GANA,MAAML,EAAM,IAAI,eAAgB,IAAK,GAIrC,EAAQ,EAAM,OAAQ,GAAS,EAAK,KAAK,MAAM,uCAE3C,EAAM,SAAW,GAAK,EAGtB,MAAM,EAKV,OAFA,MAAM,QAAQ,IAAI,EAAM,IAAK,GAAS,EAAkB,EAAM,CAAC,CAAC,KAEzD,CACH,QACA,KAAM,EACN,cACA,KAAM"}