{"version":3,"file":"subscriptions-CK1YtEQp.js","names":[],"sources":["../../lib/routes/iwara/subscriptions.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { config } from '@/config';\r\nimport { art } from '@/utils/render';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport path from 'node:path';\r\nimport MarkdownIt from 'markdown-it';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n});\r\n\r\nexport const route: Route = {\r\n    path: '/subscriptions',\r\n    categories: ['anime'],\r\n    example: '/iwara/subscriptions',\r\n    parameters: {},\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'IWARA_USERNAME',\r\n                description: '',\r\n            },\r\n            {\r\n                name: 'IWARA_PASSWORD',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['ecchi.iwara.tv/'],\r\n        },\r\n    ],\r\n    name: 'User Subscriptions',\r\n    maintainers: ['FeCCC'],\r\n    handler,\r\n    url: 'ecchi.iwara.tv/',\r\n    description: `::: warning\r\n  This route requires username and password, therefore it's only available when self-hosting, refer to the [Deploy Guide](https://docs.rsshub.app/deploy/config#route-specific-configurations) for route-specific configurations.\r\n:::`,\r\n};\r\n\r\nasync function handler() {\r\n    if (!config.iwara || !config.iwara.username || !config.iwara.password) {\r\n        throw new ConfigNotFoundError('Iwara subscription RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n\r\n    const rootUrl = `https://www.iwara.tv`;\r\n    const username = config.iwara.username;\r\n    const password = config.iwara.password;\r\n\r\n    // get refresh token\r\n    const refreshHeaders = await cache.tryGet(\r\n        'iwara:token',\r\n        async () => {\r\n            const loginResponse = await got({\r\n                method: 'post',\r\n                url: 'https://api.iwara.tv/user/login',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    email: username,\r\n                    password,\r\n                }),\r\n            });\r\n            return {\r\n                authorization: 'Bearer ' + loginResponse.data.token,\r\n            };\r\n        },\r\n        30 * 24 * 60 * 60,\r\n        false\r\n    );\r\n\r\n    // get subscription list\r\n    const videoSubUrl = 'https://api.iwara.tv/videos?page=0&limit=30&subscribed=true';\r\n    const imageSubUrl = 'https://api.iwara.tv/images?page=0&limit=30&subscribed=true';\r\n\r\n    // get access token\r\n    const accessResponse = await got({\r\n        method: 'post',\r\n        url: 'https://api.iwara.tv/user/token',\r\n        headers: refreshHeaders,\r\n    });\r\n\r\n    const authHeaders = {\r\n        authorization: 'Bearer ' + accessResponse.data.accessToken,\r\n    };\r\n\r\n    const videoResponse = await got({\r\n        method: 'get',\r\n        url: videoSubUrl,\r\n        headers: authHeaders,\r\n    });\r\n\r\n    const imageResponse = await got({\r\n        method: 'get',\r\n        url: imageSubUrl,\r\n        headers: authHeaders,\r\n    });\r\n\r\n    const videoList = videoResponse.data.results.map((item) => {\r\n        const img_path = item.private === true ? 'https://i.iwara.tv/image/original/' : 'https://i.iwara.tv/image/thumbnail/';\r\n        const imageUrl = item.file ? img_path + item.file.id.toString().padStart(2, '0') + '/thumbnail-' + item.thumbnail.toString().padStart(2, '0') + '.jpg' : '';\r\n\r\n        return {\r\n            title: item.title,\r\n            author: item.user.name,\r\n            link: rootUrl + '/video/' + item.id,\r\n            category: 'Video',\r\n            imageUrl,\r\n            pubDate: parseDate(item.createdAt),\r\n            private: item.private,\r\n        };\r\n    });\r\n\r\n    const imageList = imageResponse.data.results.map((item) => {\r\n        const imageUrl = item.thumbnail ? 'https://i.iwara.tv/image/thumbnail/' + item.thumbnail.id + '/' + item.thumbnail.id + '.jpg' : '';\r\n        return {\r\n            title: item.title,\r\n            author: item.user.name,\r\n            link: rootUrl + '/image/' + item.id,\r\n            category: 'Image',\r\n            imageUrl,\r\n            pubDate: parseDate(item.createdAt),\r\n        };\r\n    });\r\n\r\n    // fulltext\r\n    const list = [...videoList, ...imageList];\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                let description = art(path.join(__dirname, 'templates/subscriptions.art'), {\r\n                    type: item.category,\r\n                    imageUrl: item.imageUrl,\r\n                });\r\n\r\n                if (item.private === true) {\r\n                    description += 'private';\r\n                    return {\r\n                        title: item.title,\r\n                        author: item.author,\r\n                        link: item.link,\r\n                        category: item.category,\r\n                        pubDate: item.pubDate,\r\n                        description,\r\n                    };\r\n                }\r\n                const link = item.link.replace('www.iwara.tv', 'api.iwara.tv');\r\n                const response = await got({\r\n                    method: 'get',\r\n                    url: link,\r\n                    headers: authHeaders,\r\n                });\r\n                const body = response.data.body ? md.render(response.data.body) : '';\r\n                description += body;\r\n\r\n                return {\r\n                    title: item.title,\r\n                    author: item.author,\r\n                    link: item.link,\r\n                    category: item.category,\r\n                    pubDate: item.pubDate,\r\n                    description,\r\n                };\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `Iwara Subscription`,\r\n        link: rootUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"+iBAUA,MAAM,EAAK,EAAW,CAClB,KAAM,KAGG,EAAe,CACxB,KAAM,iBACN,WAAY,CAAC,SACb,QAAS,uBACT,WAAY,GACZ,SAAU,CACN,cAAe,CACX,CACI,KAAM,iBACN,YAAa,IAEjB,CACI,KAAM,iBACN,YAAa,KAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,qBAGjB,KAAM,qBACN,YAAa,CAAC,SACd,UACA,IAAK,kBACL,YAAa;;MAKjB,eAAe,GAAU,CACrB,GAAI,CAAC,EAAO,OAAS,CAAC,EAAO,MAAM,UAAY,CAAC,EAAO,MAAM,SACzD,MAAM,IAAI,EAAoB,2JAGlC,IAAM,EAAU,uBACV,EAAW,EAAO,MAAM,SACxB,EAAW,EAAO,MAAM,SAGxB,EAAiB,MAAM,EAAM,OAC/B,cACA,SAAY,CACR,IAAM,EAAgB,MAAM,EAAI,CAC5B,OAAQ,OACR,IAAK,kCACL,QAAS,CACL,eAAgB,oBAEpB,KAAM,KAAK,UAAU,CACjB,MAAO,EACP,eAGR,MAAO,CACH,cAAe,UAAY,EAAc,KAAK,QAGtD,IAAU,GAAK,GACf,IAQE,EAAiB,MAAM,EAAI,CAC7B,OAAQ,OACR,IAAK,kCACL,QAAS,IAGP,EAAc,CAChB,cAAe,UAAY,EAAe,KAAK,aAG7C,EAAgB,MAAM,EAAI,CAC5B,OAAQ,MACR,IAAK,8DACL,QAAS,IAGP,EAAgB,MAAM,EAAI,CAC5B,OAAQ,MACR,IAAK,8DACL,QAAS,IAGP,EAAY,EAAc,KAAK,QAAQ,IAAK,GAAS,CACvD,IAAM,EAAW,EAAK,UAAY,GAAO,qCAAuC,sCAC1E,EAAW,EAAK,KAAO,EAAW,EAAK,KAAK,GAAG,WAAW,SAAS,EAAG,KAAO,cAAgB,EAAK,UAAU,WAAW,SAAS,EAAG,KAAO,OAAS,GAEzJ,MAAO,CACH,MAAO,EAAK,MACZ,OAAQ,EAAK,KAAK,KAClB,KAAM,EAAU,UAAY,EAAK,GACjC,SAAU,QACV,WACA,QAAS,EAAU,EAAK,WACxB,QAAS,EAAK,WAIhB,EAAY,EAAc,KAAK,QAAQ,IAAK,GAAS,CACvD,IAAM,EAAW,EAAK,UAAY,sCAAwC,EAAK,UAAU,GAAK,IAAM,EAAK,UAAU,GAAK,OAAS,GACjI,MAAO,CACH,MAAO,EAAK,MACZ,OAAQ,EAAK,KAAK,KAClB,KAAM,EAAU,UAAY,EAAK,GACjC,SAAU,QACV,WACA,QAAS,EAAU,EAAK,cAK1B,EAAO,CAAC,GAAG,EAAW,GAAG,GACzB,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACN,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAI,EAAc,EAAI,EAAA,KAAA,EAAA,wCAAqD,CACvE,KAAM,EAAK,SACX,SAAU,EAAK,WAGnB,GAAI,EAAK,UAAY,GAEjB,MADA,IAAe,UACR,CACH,MAAO,EAAK,MACZ,OAAQ,EAAK,OACb,KAAM,EAAK,KACX,SAAU,EAAK,SACf,QAAS,EAAK,QACd,eAGR,IAAM,EAAO,EAAK,KAAK,QAAQ,eAAgB,gBACzC,EAAW,MAAM,EAAI,CACvB,OAAQ,MACR,IAAK,EACL,QAAS,IAEP,EAAO,EAAS,KAAK,KAAO,EAAG,OAAO,EAAS,KAAK,MAAQ,GAGlE,MAFA,IAAe,EAER,CACH,MAAO,EAAK,MACZ,OAAQ,EAAK,OACb,KAAM,EAAK,KACX,SAAU,EAAK,SACf,QAAS,EAAK,QACd,mBAMhB,MAAO,CACH,MAAO,qBACP,KAAM,EACN,KAAM"}