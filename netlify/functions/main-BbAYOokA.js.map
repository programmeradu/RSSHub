{"version":3,"file":"main-BbAYOokA.js","names":["rootUrl","got"],"sources":["../../lib/routes/oreno3d/get-sec-page-data.ts","../../lib/routes/oreno3d/main.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\n\r\nconst rootUrl = 'https://oreno3d.com';\r\n\r\nasync function sync_detail(link) {\r\n    // 主选择器\r\n    const sec_page_selector = 'article.g-main-video-article';\r\n    // 分条选择器\r\n    const raw_pic_selector = 'header > figure.video-figure > a ';\r\n    const video_name_selector = 'header > h1.video-h1 ';\r\n    const author_selector = 'section:nth-child(4) > a > div.video-center';\r\n    const origins_selector = 'section:nth-child(5) > a > div.video-center';\r\n    const characters_selector = 'section:nth-child(6) > a > div.video-center';\r\n    const tags_selector = 'section:nth-child(7) > ul > li > a div.tag-text'; // 未修复\r\n    const desc_selector = 'section blockquote.video-information-comment';\r\n    const iwara_link_selector = 'header > figure.video-figure > a';\r\n    // 下载\r\n    const response = await got(link);\r\n    const $ = load(response.data);\r\n    // 创建列表\r\n    const tags = [];\r\n    const authors = [];\r\n    const origins = [];\r\n    const characters = [];\r\n    // 筛选\r\n    const raw_pic_link = rootUrl + $(raw_pic_selector).find('img').attr('src');\r\n    const video_name = $(video_name_selector).text();\r\n    // 存为列表\r\n    $(sec_page_selector)\r\n        .find(author_selector)\r\n        .each(function (i) {\r\n            authors[i] = $(this).text();\r\n            authors[i].replace(' ', ''); // 去空格\r\n            authors[i].trim(); // 去首尾空格\r\n        });\r\n    $(sec_page_selector)\r\n        .find(origins_selector)\r\n        .each(function (i) {\r\n            origins[i] = $(this).text();\r\n            origins[i].replace(' ', '');\r\n            origins[i].trim();\r\n        });\r\n    $(sec_page_selector)\r\n        .find(characters_selector)\r\n        .each(function (i) {\r\n            characters[i] = $(this).text();\r\n            characters[i].replace(' ', '');\r\n            characters[i].trim();\r\n        });\r\n    $(sec_page_selector)\r\n        .find(tags_selector)\r\n        .each(function (i) {\r\n            tags[i] = $(this).text();\r\n            tags[i].replace(' ', '');\r\n            tags[i].trim();\r\n        });\r\n    // 筛选\r\n    const desc = $(sec_page_selector).find(desc_selector).text();\r\n    const iwara_link = $(iwara_link_selector).attr('href');\r\n    // 打包\r\n    return {\r\n        raw_pic_link,\r\n        video_name,\r\n        authors: authors.join(' '),\r\n        origins: origins.join(' '),\r\n        characters: characters.join(' '),\r\n        tags: tags.join(' '),\r\n        desc,\r\n        iwara_link,\r\n        oreno3d_link: link,\r\n    };\r\n}\r\n\r\nexport default sync_detail;\r\n","import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { load } from 'cheerio';\r\nimport get_sec_page_data from './get-sec-page-data';\r\n\r\nconst rootUrl = 'https://oreno3d.com';\r\n\r\nconst sortRename = {\r\n    favorites: '高評価',\r\n    hot: '急上昇',\r\n    latest: '新着',\r\n    popularity: '人気',\r\n};\r\n\r\nfunction get_user_url(rootUrl, ctx, sort) {\r\n    let userUrl = '';\r\n    // 判断userurl获取位置\r\n    if (ctx.req.param('keyword')) {\r\n        const keyword = ctx.req.param('keyword');\r\n        userUrl = `${rootUrl}/search?sort=${sort}&keyword=${keyword}`;\r\n    } else if (ctx.req.param('characterid')) {\r\n        const characterid = ctx.req.param('characterid');\r\n        userUrl = `${rootUrl}/characters/${characterid}?sort=${sort}`;\r\n    } else if (ctx.req.param('authorid')) {\r\n        const authorid = ctx.req.param('authorid');\r\n        userUrl = `${rootUrl}/authors/${authorid}?sort=${sort}`;\r\n    } else if (ctx.req.param('tagid')) {\r\n        const tagid = ctx.req.param('tagid');\r\n        userUrl = `${rootUrl}/tags/${tagid}?sort=${sort}`;\r\n    } else if (ctx.req.param('originid')) {\r\n        const originid = ctx.req.param('originid');\r\n        userUrl = `${rootUrl}/origins/${originid}?sort=${sort}`;\r\n    }\r\n    return userUrl;\r\n}\r\nexport const route: Route = {\r\n    path: ['/authors/:authorid/:sort/:pagelimit?', '/characters/:characterid/:sort/:pagelimit?', '/origins/:originid/:sort/:pagelimit?', '/search/:keyword/:sort/:pagelimit?', '/tags/:tagid/:sort/:pagelimit?'],\r\n    categories: ['anime'],\r\n    example: '/oreno3d/authors/3189/latest/1',\r\n    parameters: { authorid: 'Author id, can be found in URL', sort: 'Sort method, see the table above', pagelimit: 'The maximum number of pages to be crawled, the default is 1' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Author Search',\r\n    maintainers: ['xueli_sherryli'],\r\n    handler,\r\n    description: `| favorites | hot | latest | popularity |\r\n| --------- | --- | ------ | ---------- |\r\n| favorites | hot | latest | popularity |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    // 获取视频链接列表及标题\r\n    function getLinksTitle(response) {\r\n        const selector = 'a.box';\r\n        const $ = load(response.data);\r\n        const title = $('div.g-main-list').find('h1.main-h').text();\r\n        const list = $(selector);\r\n        return { title, list };\r\n    }\r\n    // 数据爬取和分析\r\n    async function getData(response) {\r\n        const $ = load(response.data);\r\n        // 第一页，获取搜索主标题\r\n        const title = getLinksTitle(response).title;\r\n        const list = getLinksTitle(response).list;\r\n        const items = await Promise.all(\r\n            list.toArray().map(async (item) => {\r\n                // 第一页，获取搜各视频地址\r\n                const link = $(item).attr('href');\r\n                // 第二页数据分析+缓存\r\n                const sec_data = await get_sec_page_data(link);\r\n                // 传递\r\n                const raw_pic_link = sec_data.raw_pic_link;\r\n                const video_name = sec_data.video_name;\r\n                const authors = sec_data.authors;\r\n                const origins = sec_data.origins;\r\n                const characters = sec_data.characters;\r\n                const tags = sec_data.tags;\r\n                const desc = sec_data.desc;\r\n                const iwara_link = sec_data.iwara_link;\r\n                const oreno3d_link = sec_data.oreno3d_link;\r\n                // 打包,缓存HTML\r\n                const description = art(path.join(__dirname, 'templates/description.art'), {\r\n                    raw_pic_link,\r\n                    video_name,\r\n                    authors,\r\n                    origins,\r\n                    characters,\r\n                    tags,\r\n                    desc,\r\n                    iwara_link,\r\n                    oreno3d_link,\r\n                });\r\n                const title = `${video_name} - ${authors}`;\r\n                const realData = await cache.tryGet(oreno3d_link, () => {\r\n                    const result = {\r\n                        title,\r\n                        author: authors,\r\n                        link: oreno3d_link,\r\n                        category: tags.split(' '),\r\n                        description,\r\n                    };\r\n                    return result;\r\n                });\r\n                return realData;\r\n            })\r\n        );\r\n        return { items, title };\r\n    }\r\n    // 参数定义\r\n    const sort = ctx.req.param('sort');\r\n    let pagelimit = ctx.req.param('pagelimit') ?? 1;\r\n    // 根链接\r\n    const userUrl = get_user_url(rootUrl, ctx, sort);\r\n    // 确认最大页数并比较修改(同时也是获取第一页的内容)\r\n    const response = await got(userUrl);\r\n    const $ = load(response.data);\r\n    const maxPageSelector = 'div.container > main > div.g-main-list > ul.pagination > li:last-child > a';\r\n    // 页码判断\r\n    if ($(maxPageSelector)) {\r\n        const pageLink = new URLSearchParams($(maxPageSelector).attr('href'));\r\n        const actualNum = pageLink.get('page'); // 获取最大页数\r\n        if (Number.parseInt(pagelimit) >= Number.parseInt(actualNum)) {\r\n            pagelimit = actualNum;\r\n        }\r\n    } else {\r\n        pagelimit = 1;\r\n    }\r\n    // 构造网页数据的对应数组\r\n    const responseList = [];\r\n    // 将第一页的数据加入数组\r\n    responseList.push(response);\r\n    // 创建不含第一页链接的数组\r\n    const Links = [];\r\n    for (let i = 1; i < pagelimit; i++) {\r\n        Links.push(`${userUrl}&page=${i + 1}`);\r\n    }\r\n    // 由数组索引添加response\r\n    await Promise.all(\r\n        Links.map(async (link) => {\r\n            const response = await got(link);\r\n            responseList.push(response);\r\n        })\r\n    );\r\n    // 由数组索引获取初步分析数据\r\n    const tempData = [];\r\n    await Promise.all(\r\n        responseList.map(async (response) => {\r\n            const result = await getData(response);\r\n            tempData.push(result);\r\n        })\r\n    );\r\n    // 拼接多页面item\r\n    let realItem = [];\r\n    for (const data of tempData) {\r\n        realItem = [...realItem, ...data.items];\r\n    }\r\n    // 构造最终data\r\n    const data = {\r\n        title: tempData[0].title,\r\n        item: realItem,\r\n    };\r\n    // 生成RSS源码\r\n    return {\r\n        title: `${data.title} - ${sortRename[sort]}(Page 1-${pagelimit})`,\r\n        link: userUrl,\r\n        item: data.item,\r\n    };\r\n}\r\n"],"mappings":"maAKA,eAAA,EAAA,EAAA,8MAwBI,EAAA,GAAA,KAAA,+CAAA,KAAA,SAAA,EAAA,CAGQ,EAAA,GAAA,EAAA,MAAA,OACA,EAAA,GAAA,QAAA,IAAA,IACA,EAAA,GAAA,SAER,EAAA,GAAA,KAAA,+CAAA,KAAA,SAAA,EAAA,CAGQ,EAAA,GAAA,EAAA,MAAA,OACA,EAAA,GAAA,QAAA,IAAA,IACA,EAAA,GAAA,SAER,EAAA,GAAA,KAAA,+CAAA,KAAA,SAAA,EAAA,CAGQ,EAAA,GAAA,EAAA,MAAA,OACA,EAAA,GAAA,QAAA,IAAA,IACA,EAAA,GAAA,SAER,EAAA,GAAA,KAAA,mDAAA,KAAA,SAAA,EAAA,CAGQ,EAAA,GAAA,EAAA,MAAA,OACA,EAAA,GAAA,QAAA,IAAA,IACA,EAAA,GAAA,qIAMR,MAAA,iJAaJ,IAAA,EAAA,ECjEA,MAEM,EAAa,CACf,UAAW,MACX,IAAK,MACL,OAAQ,KACR,WAAY,MAGhB,SAAS,EAAa,EAAS,EAAK,EAAM,CACtC,IAAI,EAAU,GAEd,GAAI,EAAI,IAAI,MAAM,WAAY,CAC1B,IAAM,EAAU,EAAI,IAAI,MAAM,WAC9B,EAAU,GAAG,EAAQ,eAAe,EAAK,WAAW,YAC7C,EAAI,IAAI,MAAM,eAAgB,CACrC,IAAM,EAAc,EAAI,IAAI,MAAM,eAClC,EAAU,GAAG,EAAQ,cAAc,EAAY,QAAQ,YAChD,EAAI,IAAI,MAAM,YAAa,CAClC,IAAM,EAAW,EAAI,IAAI,MAAM,YAC/B,EAAU,GAAG,EAAQ,WAAW,EAAS,QAAQ,YAC1C,EAAI,IAAI,MAAM,SAAU,CAC/B,IAAM,EAAQ,EAAI,IAAI,MAAM,SAC5B,EAAU,GAAG,EAAQ,QAAQ,EAAM,QAAQ,YACpC,EAAI,IAAI,MAAM,YAAa,CAClC,IAAM,EAAW,EAAI,IAAI,MAAM,YAC/B,EAAU,GAAG,EAAQ,WAAW,EAAS,QAAQ,IAErD,OAAO,EAEX,MAAa,EAAe,CACxB,KAAM,CAAC,uCAAwC,6CAA8C,uCAAwC,qCAAsC,kCAC3K,WAAY,CAAC,SACb,QAAS,iCACT,WAAY,CAAE,SAAU,iCAAkC,KAAM,mCAAoC,UAAW,+DAC/G,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,gBACN,YAAa,CAAC,kBACd,UACA,YAAa;;4CAKjB,eAAe,EAAQ,EAAK,CAExB,SAAS,EAAc,EAAU,CAC7B,IACM,EAAI,EAAK,EAAS,MAClB,EAAQ,EAAE,mBAAmB,KAAK,aAAa,OAC/C,EAAO,EAAE,SACf,MAAO,CAAE,QAAO,QAGpB,eAAe,EAAQ,EAAU,CAC7B,IAAM,EAAI,EAAK,EAAS,MAElB,EAAQ,EAAc,GAAU,MAChC,EAAO,EAAc,GAAU,KAC/B,EAAQ,MAAM,QAAQ,IACxB,EAAK,UAAU,IAAI,KAAO,IAAS,CAE/B,IAAM,EAAO,EAAE,GAAM,KAAK,QAEpB,EAAW,MAAM,EAAkB,GAEnC,EAAe,EAAS,aACxB,EAAa,EAAS,WACtB,EAAU,EAAS,QACnB,EAAU,EAAS,QACnB,EAAa,EAAS,WACtB,EAAO,EAAS,KAChB,EAAO,EAAS,KAChB,EAAa,EAAS,WACtB,EAAe,EAAS,aAExB,EAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACvE,eACA,aACA,UACA,UACA,aACA,OACA,OACA,aACA,iBAEE,EAAQ,GAAG,EAAW,KAAK,IAC3B,EAAW,MAAM,EAAM,OAAO,MAAoB,CACpD,IAAM,EAAS,CACX,MAAA,EACA,OAAQ,EACR,KAAM,EACN,SAAU,EAAK,MAAM,KACrB,eAEJ,OAAO,IAEX,OAAO,KAGf,MAAO,CAAE,QAAO,SAGpB,IAAM,EAAO,EAAI,IAAI,MAAM,QACvB,EAAY,EAAI,IAAI,MAAM,cAAgB,EAExC,EAAU,EAAa,sBAAS,EAAK,GAErC,EAAW,MAAM,EAAI,GACrB,EAAI,EAAK,EAAS,MAClB,EAAkB,6EAExB,GAAI,EAAE,GAAkB,CACpB,IAAM,EAAW,IAAI,gBAAgB,EAAE,GAAiB,KAAK,SACvD,EAAY,EAAS,IAAI,QAC3B,OAAO,SAAS,IAAc,OAAO,SAAS,KAC9C,EAAY,QAGhB,EAAY,EAGhB,IAAM,EAAe,GAErB,EAAa,KAAK,GAElB,IAAM,EAAQ,GACd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,IAC3B,EAAM,KAAK,GAAG,EAAQ,QAAQ,EAAI,KAGtC,MAAM,QAAQ,IACV,EAAM,IAAI,KAAO,IAAS,CACtB,IAAM,EAAW,MAAM,EAAI,GAC3B,EAAa,KAAK,MAI1B,IAAM,EAAW,GACjB,MAAM,QAAQ,IACV,EAAa,IAAI,KAAO,IAAa,CACjC,IAAM,EAAS,MAAM,EAAQ,GAC7B,EAAS,KAAK,MAItB,IAAI,EAAW,GACf,IAAK,IAAM,KAAQ,EACf,EAAW,CAAC,GAAG,EAAU,GAAG,EAAK,OAGrC,IAAM,EAAO,CACT,MAAO,EAAS,GAAG,MACnB,KAAM,GAGV,MAAO,CACH,MAAO,GAAG,EAAK,MAAM,KAAK,EAAW,GAAM,UAAU,EAAU,GAC/D,KAAM,EACN,KAAM,EAAK"}