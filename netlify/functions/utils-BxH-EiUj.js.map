{"version":3,"file":"utils-BxH-EiUj.js","names":[],"sources":["../../lib/routes/otobanana/utils.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst domain = 'otobanana.com';\r\nconst apiBase = `https://api.${domain}`;\r\nconst baseUrl = `https://${domain}`;\r\n\r\nconst getUserInfo = (id, tryGet) =>\r\n    tryGet(`otobanana:user:${id}`, async () => {\r\n        const { data } = await got(`${apiBase}/users/${id}/`);\r\n        return data;\r\n    });\r\n\r\nconst renderCast = (cast) => ({\r\n    title: cast.title,\r\n    description: art(path.join(__dirname, 'templates/description.art'), { cast }),\r\n    pubDate: parseDate(cast.created_at),\r\n    link: `https://otobanana.com/cast/${cast.id}`,\r\n    author: `${cast.user.name} (@${cast.user.username})`,\r\n    itunes_item_image: cast.thumbnail_url,\r\n    itunes_duration: cast.duration_time,\r\n    enclosure_url: cast.audio_url,\r\n    enclosure_type: 'audio/x-m4a',\r\n    upvotes: cast.like_count,\r\n    comments: cast.comment_count,\r\n});\r\n\r\nconst renderLive = (live) => ({\r\n    title: live.title,\r\n    description: live.is_open ? '配信中のライブ' : '終了しました',\r\n    pubDate: parseDate(live.created_at),\r\n    link: live.room_url,\r\n    guid: `${live.room_url}#${live.id}`,\r\n    author: `${live.user.name} (@${live.user.username})`,\r\n    upvotes: live.like_count,\r\n    comments: live.comment_count,\r\n});\r\n\r\nconst renderPost = ({ id, type_label: type, cast, /** livestream  */ message /** , event */ }) => {\r\n    switch (type) {\r\n        case 'cast':\r\n            return renderCast(cast);\r\n        case 'message':\r\n            return {\r\n                title: message.text.split('\\n')[0],\r\n                description: message.text.replaceAll('\\n', '<br>'),\r\n                pubDate: parseDate(message.created_at),\r\n                link: `https://otobanana.com/${type}/${id}`,\r\n                author: `${message.user.name} (@${message.user.username})`,\r\n                upvotes: message.like_count,\r\n                comments: message.comment_count,\r\n            };\r\n        default:\r\n            throw new Error(`Unknown post type: ${type}`);\r\n    }\r\n};\r\n\r\nexport { apiBase, baseUrl, getUserInfo, renderCast, renderLive, renderPost };\r\n"],"mappings":"qPAKA,MAAM,EAAS,gBACT,EAAU,eAAe,IACzB,EAAU,WAAW,IAErB,GAAe,EAAI,IACrB,EAAO,kBAAkB,IAAM,SAAY,CACvC,GAAM,CAAE,QAAS,MAAM,EAAI,GAAG,EAAQ,SAAS,EAAG,IAClD,OAAO,IAGT,EAAc,IAAU,CAC1B,MAAO,EAAK,MACZ,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAAE,SACtE,QAAS,EAAU,EAAK,YACxB,KAAM,8BAA8B,EAAK,KACzC,OAAQ,GAAG,EAAK,KAAK,KAAK,KAAK,EAAK,KAAK,SAAS,GAClD,kBAAmB,EAAK,cACxB,gBAAiB,EAAK,cACtB,cAAe,EAAK,UACpB,eAAgB,cAChB,QAAS,EAAK,WACd,SAAU,EAAK,gBAGb,EAAc,IAAU,CAC1B,MAAO,EAAK,MACZ,YAAa,EAAK,QAAU,UAAY,SACxC,QAAS,EAAU,EAAK,YACxB,KAAM,EAAK,SACX,KAAM,GAAG,EAAK,SAAS,GAAG,EAAK,KAC/B,OAAQ,GAAG,EAAK,KAAK,KAAK,KAAK,EAAK,KAAK,SAAS,GAClD,QAAS,EAAK,WACd,SAAU,EAAK,gBAGb,GAAc,CAAE,KAAI,WAAY,EAAM,OAAyB,aAA6B,CAC9F,OAAQ,EAAR,CACI,IAAK,OACD,OAAO,EAAW,GACtB,IAAK,UACD,MAAO,CACH,MAAO,EAAQ,KAAK,MAAM;GAAM,GAChC,YAAa,EAAQ,KAAK,WAAW;EAAM,QAC3C,QAAS,EAAU,EAAQ,YAC3B,KAAM,yBAAyB,EAAK,GAAG,IACvC,OAAQ,GAAG,EAAQ,KAAK,KAAK,KAAK,EAAQ,KAAK,SAAS,GACxD,QAAS,EAAQ,WACjB,SAAU,EAAQ,eAE1B,QACI,MAAU,MAAM,sBAAsB"}