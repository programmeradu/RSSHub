{"version":3,"file":"util-BjzbIVC4.js","names":[],"sources":["../../lib/routes/whu/util.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst domain = 'whu.edu.cn';\r\n\r\n/**\r\n * Process the meta information from the HTML content.\r\n *\r\n * @param {string} text - The HTML content.\r\n * @returns {Object} The meta information extracted from the content.\r\n */\r\nconst processMeta = (text) => {\r\n    const meta = {};\r\n\r\n    text.replaceAll(/<meta name=\"(.*?)\" content=\"(.*?)\"/gi, (_, key, value) => {\r\n        meta[key] = value;\r\n    });\r\n\r\n    return meta;\r\n};\r\n\r\n/**\r\n * Get a specific meta value from the meta object.\r\n *\r\n * @param {Object} metaObject - The meta object.\r\n * @param {string} key        - The key of the meta value to retrieve.\r\n * @returns {string|undefined} The value of the specified meta key, or undefined if not found.\r\n */\r\nconst getMeta = (metaObject, key) => (Object.hasOwn(metaObject, key) ? metaObject[key] : undefined);\r\n\r\n/**\r\n * Retrieves item details from a given link and updates the item object.\r\n * @param {Object} item    - The item object to be updated.\r\n * @param {string} rootUrl - The root URL of the item's link.\r\n * @returns {Promise<object>} The updated item object.\r\n */\r\nconst getItemDetail = async (item, rootUrl) => {\r\n    try {\r\n        const { data: detailResponse } = await got(item.link);\r\n\r\n        const content = load(detailResponse);\r\n\r\n        // Missing the `src` properties for the images.\r\n        // The `src` property should be replaced with the value of `orisrc` to show the image.\r\n        // Replace images in the content with custom art template.\r\n        content('p.vsbcontent_img').each(function () {\r\n            const image = content(this).find('img');\r\n            content(this).replaceWith(\r\n                art(path.join(__dirname, 'templates/description.art'), {\r\n                    image: {\r\n                        src: new URL(image.prop('orisrc'), rootUrl).href,\r\n                        width: image.prop('width'),\r\n                    },\r\n                })\r\n            );\r\n        });\r\n\r\n        // Missing the `src` properties for the videos.\r\n        // The `src` property should be replaced with the value of `vurl` to play the video.\r\n        // Replace videos in the content with custom art template.\r\n        content('script[name=\"_videourl\"]').each(function () {\r\n            const video = content(this);\r\n            video.replaceWith(\r\n                art(path.join(__dirname, 'templates/description.art'), {\r\n                    video: {\r\n                        src: new URL(video.prop('vurl').split('?')[0], rootUrl).href,\r\n                        width: content(video).prop('vwidth'),\r\n                        height: content(video).prop('vheight'),\r\n                    },\r\n                })\r\n            );\r\n        });\r\n\r\n        // Extract the description from the content.\r\n        const description = content('div.v_news_content').html();\r\n\r\n        // Remove unwanted table elements from the content.\r\n        content('form[name=\"_newscontent_fromname\"] table').remove();\r\n\r\n        // Extract attachments from the content.\r\n        const attachments = content('form[name=\"_newscontent_fromname\"] ul li')\r\n            .toArray()\r\n            .map((attachment) => {\r\n                attachment = content(attachment).find('a');\r\n\r\n                return {\r\n                    title: attachment.text(),\r\n                    link: new URL(attachment.prop('href'), rootUrl).href,\r\n                };\r\n            });\r\n\r\n        // Process the meta information from the detail response.\r\n        const meta = processMeta(detailResponse);\r\n\r\n        item.title = getMeta(meta, 'ArticleTitle') ?? item.title;\r\n        item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n            description,\r\n            attachments,\r\n        });\r\n        item.author = getMeta(meta, 'ContentSource');\r\n        item.category = getMeta(meta, 'Keywords')?.split(' ').filter(Boolean) ?? [];\r\n        item.guid = getMeta(meta, 'Url') ?? item.link;\r\n        item.pubDate = getMeta(meta, 'PubDate') ? timezone(parseDate(getMeta(meta, 'PubDate')), +8) : item.pubDate;\r\n\r\n        // Set enclosure information if attachments exist.\r\n        if (attachments.length > 0) {\r\n            item.enclosure_url = attachments[0].link;\r\n            item.enclosure_type = `application/${attachments[0].title.split('.').pop()}`;\r\n        }\r\n    } catch {\r\n        //\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\n/**\r\n * Process items asynchronously.\r\n *\r\n * @param {Array<Object>} items - The array of items to process.\r\n * @param {Function} tryGet     - The function to attempt to get the content of a URL.\r\n * @param {string} rootUrl      - The root URL.\r\n * @returns {Array<Promise<Object>>} An array of promises that resolve to the processed items.\r\n */\r\nconst processItems = async (items, tryGet, rootUrl) =>\r\n    await Promise.all(\r\n        items.map((item) => {\r\n            if (!item.link.includes(domain)) {\r\n                return item;\r\n            }\r\n\r\n            return tryGet(item.link, async () => await getItemDetail(item, rootUrl));\r\n        })\r\n    );\r\n\r\nexport { domain, processMeta, getMeta, processItems };\r\n"],"mappings":"sUAOA,MAAM,EAAS,aAQT,EAAe,GAAS,CAC1B,IAAM,EAAO,GAMb,OAJA,EAAK,WAAW,wCAAyC,EAAG,EAAK,IAAU,CACvE,EAAK,GAAO,IAGT,GAUL,GAAW,EAAY,IAAS,OAAO,OAAO,EAAY,GAAO,EAAW,GAAO,IAAA,GAQnF,EAAgB,MAAO,EAAM,IAAY,CAC3C,GAAI,CACA,GAAM,CAAE,KAAM,GAAmB,MAAM,EAAI,EAAK,MAE1C,EAAU,EAAK,GAKrB,EAAQ,oBAAoB,KAAK,UAAY,CACzC,IAAM,EAAQ,EAAQ,MAAM,KAAK,OACjC,EAAQ,MAAM,YACV,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACnD,MAAO,CACH,IAAK,IAAI,IAAI,EAAM,KAAK,UAAW,GAAS,KAC5C,MAAO,EAAM,KAAK,eASlC,EAAQ,4BAA4B,KAAK,UAAY,CACjD,IAAM,EAAQ,EAAQ,MACtB,EAAM,YACF,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACnD,MAAO,CACH,IAAK,IAAI,IAAI,EAAM,KAAK,QAAQ,MAAM,KAAK,GAAI,GAAS,KACxD,MAAO,EAAQ,GAAO,KAAK,UAC3B,OAAQ,EAAQ,GAAO,KAAK,iBAO5C,IAAM,EAAc,EAAQ,sBAAsB,OAGlD,EAAQ,4CAA4C,SAGpD,IAAM,EAAc,EAAQ,4CACvB,UACA,IAAK,IACF,EAAa,EAAQ,GAAY,KAAK,KAE/B,CACH,MAAO,EAAW,OAClB,KAAM,IAAI,IAAI,EAAW,KAAK,QAAS,GAAS,QAKtD,EAAO,EAAY,GAEzB,EAAK,MAAQ,EAAQ,EAAM,iBAAmB,EAAK,MACnD,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,cACA,gBAEJ,EAAK,OAAS,EAAQ,EAAM,iBAC5B,EAAK,SAAW,EAAQ,EAAM,aAAa,MAAM,KAAK,OAAO,UAAY,GACzE,EAAK,KAAO,EAAQ,EAAM,QAAU,EAAK,KACzC,EAAK,QAAU,EAAQ,EAAM,WAAa,EAAS,EAAU,EAAQ,EAAM,YAAa,GAAM,EAAK,QAG/F,EAAY,OAAS,IACrB,EAAK,cAAgB,EAAY,GAAG,KACpC,EAAK,eAAiB,eAAe,EAAY,GAAG,MAAM,MAAM,KAAK,cAErE,EAIR,OAAO,GAWL,EAAe,MAAO,EAAO,EAAQ,IACvC,MAAM,QAAQ,IACV,EAAM,IAAK,GACF,EAAK,KAAK,SAAS,GAIjB,EAAO,EAAK,KAAM,SAAY,MAAM,EAAc,EAAM,IAHpD"}