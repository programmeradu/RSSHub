{"version":3,"file":"search-8pbgJ0B_.js","names":[],"sources":["../../lib/routes/discord/search.ts"],"sourcesContent":["import path from 'node:path';\r\n\r\nimport { config } from '@/config';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { Route } from '@/types';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport { queryToBoolean } from '@/utils/readable-social';\r\n\r\nimport { baseUrl, getGuild, searchGuildMessages, SearchGuildMessagesParams, HasType, VALID_HAS_TYPES } from './discord-api';\r\n\r\nexport const route: Route = {\r\n    path: '/search/:guildId/:routeParams',\r\n    categories: ['social-media'],\r\n    example: '/discord/search/302094807046684672/content=friendly&has=image,video',\r\n    parameters: {\r\n        guildId: 'Guild ID',\r\n        routeParams: 'Search parameters, support content, author_id, mentions, has, min_id, max_id, channel_id, pinned',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'DISCORD_AUTHORIZATION',\r\n                description: 'Discord authorization header',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Guild Search',\r\n    maintainers: ['NekoAria'],\r\n    handler,\r\n};\r\n\r\nconst parseSearchParams = (routeParams?: string): SearchGuildMessagesParams => {\r\n    const parsed = new URLSearchParams(routeParams);\r\n    const hasTypes = parsed.get('has')?.split(',').filter(Boolean);\r\n    const validHasTypes = hasTypes?.filter((type) => VALID_HAS_TYPES.has(type as HasType)) as HasType[];\r\n\r\n    const params = {\r\n        content: parsed.get('content') ?? undefined,\r\n        author_id: parsed.get('author_id') ?? undefined,\r\n        mentions: parsed.get('mentions') ?? undefined,\r\n        has: validHasTypes?.length ? validHasTypes : undefined,\r\n        min_id: parsed.get('min_id') ?? undefined,\r\n        max_id: parsed.get('max_id') ?? undefined,\r\n        channel_id: parsed.get('channel_id') ?? undefined,\r\n        pinned: parsed.has('pinned') ? queryToBoolean(parsed.get('pinned')) : undefined,\r\n    };\r\n\r\n    return Object.fromEntries(Object.entries(params).filter(([, value]) => value !== undefined));\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { authorization } = config.discord || {};\r\n    if (!authorization) {\r\n        throw new ConfigNotFoundError('Discord RSS is disabled due to the lack of authorization config');\r\n    }\r\n\r\n    const { guildId } = ctx.req.param();\r\n    const searchParams = parseSearchParams(ctx.req.param('routeParams'));\r\n\r\n    if (!Object.keys(searchParams).length) {\r\n        throw new InvalidParameterError('At least one valid search parameter is required');\r\n    }\r\n\r\n    const [guildInfo, searchResult] = await Promise.all([getGuild(guildId, authorization), searchGuildMessages(guildId, authorization, searchParams)]);\r\n\r\n    if (!searchResult?.messages?.length) {\r\n        return {\r\n            title: `Search Results - ${guildInfo.name}`,\r\n            link: `${baseUrl}/channels/${guildId}`,\r\n            item: [],\r\n            allowEmpty: true,\r\n        };\r\n    }\r\n\r\n    const messages = searchResult.messages.flat().map((message) => ({\r\n        title: message.content.split('\\n')[0] || '(no content)',\r\n        description: art(path.join(__dirname, 'templates/message.art'), { message, guildInfo }),\r\n        author: message.author.global_name ?? message.author.username,\r\n        pubDate: parseDate(message.timestamp),\r\n        updated: message.edited_timestamp ? parseDate(message.edited_timestamp) : undefined,\r\n        category: [`#${message.channel_id}`],\r\n        link: `${baseUrl}/channels/${guildId}/${message.channel_id}/${message.id}`,\r\n    }));\r\n\r\n    const searchDesc = Object.entries(searchParams)\r\n        .filter(([, value]) => value !== undefined)\r\n        .map(([key, value]) => `${key}:${Array.isArray(value) ? value.join(',') : value}`)\r\n        .join(' ');\r\n\r\n    return {\r\n        title: `Search \"${searchDesc}\" in ${guildInfo.name} - Discord`,\r\n        link: `${baseUrl}/channels/${guildId}`,\r\n        item: messages,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"yqBAYA,MAAa,EAAe,CACxB,KAAM,gCACN,WAAY,CAAC,gBACb,QAAS,sEACT,WAAY,CACR,QAAS,WACT,YAAa,oGAEjB,SAAU,CACN,cAAe,CACX,CACI,KAAM,wBACN,YAAa,iCAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,eACN,YAAa,CAAC,YACd,WAGE,EAAqB,GAAoD,CAC3E,IAAM,EAAS,IAAI,gBAAgB,GAC7B,EAAW,EAAO,IAAI,QAAQ,MAAM,KAAK,OAAO,SAChD,EAAgB,GAAU,OAAQ,GAAS,EAAgB,IAAI,IAE/D,EAAS,CACX,QAAS,EAAO,IAAI,YAAc,IAAA,GAClC,UAAW,EAAO,IAAI,cAAgB,IAAA,GACtC,SAAU,EAAO,IAAI,aAAe,IAAA,GACpC,IAAK,GAAe,OAAS,EAAgB,IAAA,GAC7C,OAAQ,EAAO,IAAI,WAAa,IAAA,GAChC,OAAQ,EAAO,IAAI,WAAa,IAAA,GAChC,WAAY,EAAO,IAAI,eAAiB,IAAA,GACxC,OAAQ,EAAO,IAAI,UAAY,EAAe,EAAO,IAAI,WAAa,IAAA,IAG1E,OAAO,OAAO,YAAY,OAAO,QAAQ,GAAQ,QAAQ,EAAG,KAAW,IAAU,IAAA,MAGrF,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,iBAAkB,EAAO,SAAW,GAC5C,GAAI,CAAC,EACD,MAAM,IAAI,EAAoB,mEAGlC,GAAM,CAAE,WAAY,EAAI,IAAI,QACtB,EAAe,EAAkB,EAAI,IAAI,MAAM,gBAErD,GAAI,CAAC,OAAO,KAAK,GAAc,OAC3B,MAAM,IAAI,EAAsB,mDAGpC,GAAM,CAAC,EAAW,GAAgB,MAAM,QAAQ,IAAI,CAAC,EAAS,EAAS,GAAgB,EAAoB,EAAS,EAAe,KAEnI,GAAI,CAAC,GAAc,UAAU,OACzB,MAAO,CACH,MAAO,oBAAoB,EAAU,OACrC,KAAM,GAAG,EAAQ,YAAY,IAC7B,KAAM,GACN,WAAY,IAIpB,IAAM,EAAW,EAAa,SAAS,OAAO,IAAK,IAAa,CAC5D,MAAO,EAAQ,QAAQ,MAAM;GAAM,IAAM,eACzC,YAAa,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAAE,UAAS,cAC3E,OAAQ,EAAQ,OAAO,aAAe,EAAQ,OAAO,SACrD,QAAS,EAAU,EAAQ,WAC3B,QAAS,EAAQ,iBAAmB,EAAU,EAAQ,kBAAoB,IAAA,GAC1E,SAAU,CAAC,IAAI,EAAQ,cACvB,KAAM,GAAG,EAAQ,YAAY,EAAQ,GAAG,EAAQ,WAAW,GAAG,EAAQ,QAGpE,EAAa,OAAO,QAAQ,GAC7B,QAAQ,EAAG,KAAW,IAAU,IAAA,IAChC,KAAK,CAAC,EAAK,KAAW,GAAG,EAAI,GAAG,MAAM,QAAQ,GAAS,EAAM,KAAK,KAAO,KACzE,KAAK,KAEV,MAAO,CACH,MAAO,WAAW,EAAW,OAAO,EAAU,KAAK,YACnD,KAAM,GAAG,EAAQ,YAAY,IAC7B,KAAM,EACN,WAAY"}