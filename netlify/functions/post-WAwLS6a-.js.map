{"version":3,"file":"post-WAwLS6a-.js","names":[],"sources":["../../lib/routes/aqara/post.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport { getSubPath } from '@/utils/common-utils';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '*',\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 50;\r\n\r\n    const rootUrl = 'https://aqara.com';\r\n    const apiSlug = 'wp-json/wp/v2';\r\n\r\n    let filterName;\r\n\r\n    let currentUrl = rootUrl;\r\n    let apiUrl = new URL(`${apiSlug}/posts?_embed=true&per_page=${limit}`, rootUrl).href;\r\n\r\n    const filterMatches = getSubPath(ctx).match(/^\\/([^/]*)\\/([^/]*)\\/(.*)$/);\r\n\r\n    if (filterMatches) {\r\n        const filterRegion = filterMatches[1];\r\n        const filterType = filterMatches[2] === 'tag' ? 'tags' : filterMatches[2] === 'category' ? 'categories' : filterMatches[2];\r\n        const filterKeyword = decodeURI(filterMatches[3].split('/').pop());\r\n        const filterApiUrl = new URL(`${filterRegion}/${apiSlug}/${filterType}?search=${filterKeyword}`, rootUrl).href;\r\n\r\n        const { data: filterResponse } = await got(filterApiUrl);\r\n\r\n        const filter = filterResponse.pop();\r\n\r\n        if (filter?.id ?? undefined) {\r\n            filterName = filter.name ?? filterKeyword;\r\n            currentUrl = filter.link ?? currentUrl;\r\n            apiUrl = new URL(`${filterRegion}/${apiSlug}/posts?_embed=true&per_page=${limit}&${filterType}=${filter.id}`, rootUrl).href;\r\n        }\r\n    }\r\n\r\n    const { data: response } = await got(apiUrl);\r\n\r\n    const items = response.slice(0, limit).map((item) => {\r\n        const terminologies = item._embedded['wp:term'];\r\n\r\n        const content = load(item.content?.rendered ?? item.content);\r\n\r\n        // To handle lazy-loaded images.\r\n\r\n        content('figure').each(function () {\r\n            const image = content(this).find('img');\r\n            const src = (image.prop('data-actualsrc') ?? image.prop('data-original') ?? image.prop('src')).replace(/(-\\d+x\\d+)/, '');\r\n            const width = image.prop('data-rawwidth') ?? image.prop('width');\r\n            const height = image.prop('data-rawheight') ?? image.prop('height');\r\n\r\n            content(this).replaceWith(\r\n                art(path.join(__dirname, 'templates/figure.art'), {\r\n                    src,\r\n                    width,\r\n                    height,\r\n                })\r\n            );\r\n        });\r\n\r\n        return {\r\n            title: item.title?.rendered ?? item.title,\r\n            link: item.link,\r\n            description: content.html(),\r\n            author: item._embedded.author.map((a) => a.name).join('/'),\r\n            category: terminologies.flat().map((c) => c.name),\r\n            guid: item.guid?.rendered ?? item.guid,\r\n            pubDate: parseDate(item.date_gmt),\r\n            updated: parseDate(item.modified_gmt),\r\n        };\r\n    });\r\n\r\n    const { data: currentResponse } = await got(currentUrl);\r\n\r\n    const $ = load(currentResponse);\r\n\r\n    const icon = $('link[rel=\"apple-touch-icon\"]').first().prop('href');\r\n    const title = $('meta[property=\"og:site_name\"]').prop('content') ?? 'Aqara';\r\n\r\n    return {\r\n        item: items,\r\n        title: `${title}${filterName ? ` - ${filterName}` : ''}`,\r\n        link: currentUrl,\r\n        description: $('meta[property=\"og:title\"]').prop('content'),\r\n        language: $('meta[property=\"og:locale\"]').prop('content'),\r\n        image: $('meta[name=\"msapplication-TileImage\"]').prop('content'),\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('meta[property=\"og:type\"]').prop('content'),\r\n        author: title,\r\n    };\r\n}\r\n"],"mappings":"4dASA,MAAa,EAAe,CACxB,KAAM,IACN,KAAM,UACN,YAAa,GACb,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAE/E,EAAU,oBACV,EAAU,gBAEZ,EAEA,EAAa,EACb,EAAS,IAAI,IAAI,GAAG,EAAQ,8BAA8B,IAAS,GAAS,KAE1E,EAAgB,EAAW,GAAK,MAAM,8BAE5C,GAAI,EAAe,CACf,IAAM,EAAe,EAAc,GAC7B,EAAa,EAAc,KAAO,MAAQ,OAAS,EAAc,KAAO,WAAa,aAAe,EAAc,GAClH,EAAgB,UAAU,EAAc,GAAG,MAAM,KAAK,OACtD,EAAe,IAAI,IAAI,GAAG,EAAa,GAAG,EAAQ,GAAG,EAAW,UAAU,IAAiB,GAAS,KAEpG,CAAE,KAAM,GAAmB,MAAM,EAAI,GAErC,EAAS,EAAe,OAE1B,GAAQ,IAAM,IAAA,MACd,EAAa,EAAO,MAAQ,EAC5B,EAAa,EAAO,MAAQ,EAC5B,EAAS,IAAI,IAAI,GAAG,EAAa,GAAG,EAAQ,8BAA8B,EAAM,GAAG,EAAW,GAAG,EAAO,KAAM,GAAS,MAI/H,GAAM,CAAE,KAAM,GAAa,MAAM,EAAI,GAE/B,EAAQ,EAAS,MAAM,EAAG,GAAO,IAAK,GAAS,CACjD,IAAM,EAAgB,EAAK,UAAU,WAE/B,EAAU,EAAK,EAAK,SAAS,UAAY,EAAK,SAmBpD,OAfA,EAAQ,UAAU,KAAK,UAAY,CAC/B,IAAM,EAAQ,EAAQ,MAAM,KAAK,OAC3B,GAAO,EAAM,KAAK,mBAAqB,EAAM,KAAK,kBAAoB,EAAM,KAAK,QAAQ,QAAQ,aAAc,IAC/G,EAAQ,EAAM,KAAK,kBAAoB,EAAM,KAAK,SAClD,EAAS,EAAM,KAAK,mBAAqB,EAAM,KAAK,UAE1D,EAAQ,MAAM,YACV,EAAI,EAAA,KAAA,EAAA,iCAA8C,CAC9C,MACA,QACA,cAKL,CACH,MAAO,EAAK,OAAO,UAAY,EAAK,MACpC,KAAM,EAAK,KACX,YAAa,EAAQ,OACrB,OAAQ,EAAK,UAAU,OAAO,IAAK,GAAM,EAAE,MAAM,KAAK,KACtD,SAAU,EAAc,OAAO,IAAK,GAAM,EAAE,MAC5C,KAAM,EAAK,MAAM,UAAY,EAAK,KAClC,QAAS,EAAU,EAAK,UACxB,QAAS,EAAU,EAAK,iBAI1B,CAAE,KAAM,GAAoB,MAAM,EAAI,GAEtC,EAAI,EAAK,GAET,EAAO,EAAE,gCAAgC,QAAQ,KAAK,QACtD,EAAQ,EAAE,iCAAiC,KAAK,YAAc,QAEpE,MAAO,CACH,KAAM,EACN,MAAO,GAAG,IAAQ,EAAa,MAAM,IAAe,KACpD,KAAM,EACN,YAAa,EAAE,6BAA6B,KAAK,WACjD,SAAU,EAAE,8BAA8B,KAAK,WAC/C,MAAO,EAAE,wCAAwC,KAAK,WACtD,OACA,KAAM,EACN,SAAU,EAAE,4BAA4B,KAAK,WAC7C,OAAQ"}