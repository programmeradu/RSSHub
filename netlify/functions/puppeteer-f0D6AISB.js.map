{"version":3,"file":"puppeteer-f0D6AISB.js","names":["insidePuppeteer: typeof puppeteer","proxy","currentProxyState: any","browser: Browser"],"sources":["../../lib/utils/puppeteer.ts"],"sourcesContent":["import { config } from '@/config';\r\nimport puppeteer, { Browser, Page } from 'rebrowser-puppeteer';\r\nimport logger from './logger';\r\nimport proxy from './proxy';\r\nimport { anonymizeProxy } from 'proxy-chain';\r\n\r\n/**\r\n * @deprecated use getPage instead\r\n * @returns Puppeteer browser\r\n */\r\nconst outPuppeteer = async () => {\r\n    const options = {\r\n        args: [\r\n            '--no-sandbox',\r\n            '--disable-setuid-sandbox',\r\n            '--disable-blink-features=AutomationControlled',\r\n            '--window-position=0,0',\r\n            '--ignore-certificate-errors',\r\n            '--ignore-certificate-errors-spki-list',\r\n            `--user-agent=${config.ua}`,\r\n        ],\r\n        headless: true,\r\n        ignoreHTTPSErrors: true,\r\n    };\r\n\r\n    const insidePuppeteer: typeof puppeteer = puppeteer;\r\n\r\n    const currentProxy = proxy.getCurrentProxy();\r\n    if (currentProxy && proxy.proxyObj.url_regex === '.*') {\r\n        if (currentProxy.urlHandler?.username || currentProxy.urlHandler?.password) {\r\n            // only proxies with authentication need to be anonymized\r\n            if (currentProxy.urlHandler.protocol === 'http:') {\r\n                options.args.push(`--proxy-server=${await anonymizeProxy(currentProxy.uri)}`);\r\n            } else {\r\n                logger.warn('SOCKS/HTTPS proxy with authentication is not supported by puppeteer, continue without proxy');\r\n            }\r\n        } else {\r\n            // Chromium cannot recognize socks5h and socks4a, so we need to trim their postfixes\r\n            options.args.push(`--proxy-server=${currentProxy.uri.replace('socks5h://', 'socks5://').replace('socks4a://', 'socks4://')}`);\r\n        }\r\n    }\r\n    const browser = await (config.puppeteerWSEndpoint\r\n        ? insidePuppeteer.connect({\r\n              browserWSEndpoint: config.puppeteerWSEndpoint,\r\n          })\r\n        : insidePuppeteer.launch(\r\n              config.chromiumExecutablePath\r\n                  ? {\r\n                        executablePath: config.chromiumExecutablePath,\r\n                        ...options,\r\n                    }\r\n                  : options\r\n          ));\r\n    setTimeout(async () => {\r\n        await browser.close();\r\n    }, 30000);\r\n\r\n    return browser;\r\n};\r\n\r\nexport default outPuppeteer;\r\n\r\n/**\r\n * @returns Puppeteer page\r\n */\r\nexport const getPuppeteerPage = async (\r\n    url: string,\r\n    instanceOptions: {\r\n        onBeforeLoad?: (page: Page, browser?: Browser) => Promise<void> | void;\r\n        gotoConfig?: {\r\n            waitUntil?: 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2';\r\n        };\r\n        noGoto?: boolean;\r\n    } = {}\r\n) => {\r\n    const options = {\r\n        args: [\r\n            '--no-sandbox',\r\n            '--disable-setuid-sandbox',\r\n            '--disable-blink-features=AutomationControlled',\r\n            '--window-position=0,0',\r\n            '--ignore-certificate-errors',\r\n            '--ignore-certificate-errors-spki-list',\r\n            `--user-agent=${config.ua}`,\r\n        ],\r\n        headless: true,\r\n        ignoreHTTPSErrors: true,\r\n    };\r\n\r\n    const insidePuppeteer: typeof puppeteer = puppeteer;\r\n\r\n    let allowProxy = false;\r\n    const proxyRegex = new RegExp(proxy.proxyObj.url_regex);\r\n    let urlHandler;\r\n    try {\r\n        urlHandler = new URL(url);\r\n    } catch {\r\n        // ignore\r\n    }\r\n\r\n    if (proxyRegex.test(url) && url.startsWith('http') && !(urlHandler && urlHandler.host === proxy.proxyUrlHandler?.host)) {\r\n        allowProxy = true;\r\n    }\r\n\r\n    let hasProxy = false;\r\n    let currentProxyState: any = null;\r\n    const currentProxy = proxy.getCurrentProxy();\r\n    if (currentProxy && allowProxy) {\r\n        currentProxyState = currentProxy;\r\n        if (currentProxy.urlHandler?.username || currentProxy.urlHandler?.password) {\r\n            // only proxies with authentication need to be anonymized\r\n            if (currentProxy.urlHandler.protocol === 'http:') {\r\n                const urlObj = new URL(currentProxy.uri);\r\n                urlObj.username = '';\r\n                urlObj.password = '';\r\n                options.args.push(`--proxy-server=${urlObj.toString().replace(/\\/$/, '')}`);\r\n                hasProxy = true;\r\n            } else {\r\n                logger.warn('SOCKS/HTTPS proxy with authentication is not supported by puppeteer, continue without proxy');\r\n            }\r\n        } else {\r\n            // Chromium cannot recognize socks5h and socks4a, so we need to trim their postfixes\r\n            options.args.push(`--proxy-server=${currentProxy.uri.replace('socks5h://', 'socks5://').replace('socks4a://', 'socks4://')}`);\r\n            hasProxy = true;\r\n        }\r\n    }\r\n    let browser: Browser;\r\n    if (config.puppeteerWSEndpoint) {\r\n        const endpointURL = new URL(config.puppeteerWSEndpoint);\r\n        endpointURL.searchParams.set('launch', JSON.stringify(options));\r\n        endpointURL.searchParams.set('stealth', 'true');\r\n        const endpoint = endpointURL.toString();\r\n        browser = await insidePuppeteer.connect({\r\n            browserWSEndpoint: endpoint,\r\n        });\r\n    } else {\r\n        browser = await insidePuppeteer.launch(\r\n            config.chromiumExecutablePath\r\n                ? {\r\n                      executablePath: config.chromiumExecutablePath,\r\n                      ...options,\r\n                  }\r\n                : options\r\n        );\r\n    }\r\n\r\n    setTimeout(async () => {\r\n        await browser.close();\r\n    }, 30000);\r\n\r\n    const page = await browser.newPage();\r\n\r\n    if (hasProxy && currentProxyState) {\r\n        logger.debug(`Proxying request in puppeteer via ${currentProxyState.uri}: ${url}`);\r\n    }\r\n\r\n    if (hasProxy && currentProxyState && (currentProxyState.urlHandler?.username || currentProxyState.urlHandler?.password)) {\r\n        await page.authenticate({\r\n            username: currentProxyState.urlHandler?.username,\r\n            password: currentProxyState.urlHandler?.password,\r\n        });\r\n    }\r\n\r\n    if (instanceOptions.onBeforeLoad) {\r\n        await instanceOptions.onBeforeLoad(page, browser);\r\n    }\r\n\r\n    if (!instanceOptions.noGoto) {\r\n        try {\r\n            await page.goto(url, instanceOptions.gotoConfig || { waitUntil: 'domcontentloaded' });\r\n        } catch (error) {\r\n            if (hasProxy && currentProxyState && proxy.multiProxy) {\r\n                logger.warn(`Puppeteer navigation failed with proxy ${currentProxyState.uri}, marking as failed: ${error}`);\r\n                proxy.markProxyFailed(currentProxyState.uri);\r\n                throw error;\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    return {\r\n        page,\r\n        destory: async () => {\r\n            await browser.close();\r\n        },\r\n        browser,\r\n    };\r\n};\r\n"],"mappings":"wOAUA,MAAM,EAAe,SAAY,CAC7B,IAAM,EAAU,CACZ,KAAM,CACF,eACA,2BACA,gDACA,wBACA,8BACA,wCACA,gBAAgB,EAAO,MAE3B,SAAU,GACV,kBAAmB,IAGjBA,EAAoC,EAEpC,EAAeC,EAAM,kBACvB,GAAgBA,EAAM,SAAS,YAAc,OACzC,EAAa,YAAY,UAAY,EAAa,YAAY,SAE1D,EAAa,WAAW,WAAa,QACrC,EAAQ,KAAK,KAAK,kBAAkB,MAAM,EAAe,EAAa,QAEtE,EAAO,KAAK,+FAIhB,EAAQ,KAAK,KAAK,kBAAkB,EAAa,IAAI,QAAQ,aAAc,aAAa,QAAQ,aAAc,iBAGtH,IAAM,EAAU,MAAO,EAAO,oBACxB,EAAgB,QAAQ,CACpB,kBAAmB,EAAO,sBAE9B,EAAgB,OACZ,EAAO,uBACD,CACI,eAAgB,EAAO,uBACvB,GAAG,GAEP,IAMhB,OAJA,WAAW,SAAY,CACnB,MAAM,EAAQ,SACf,KAEI,GAGX,IAAA,EAAe,EAKf,MAAa,EAAmB,MAC5B,EACA,EAMI,KACH,CACD,IAAM,EAAU,CACZ,KAAM,CACF,eACA,2BACA,gDACA,wBACA,8BACA,wCACA,gBAAgB,EAAO,MAE3B,SAAU,GACV,kBAAmB,IAGjBD,EAAoC,EAEtC,EAAa,GACX,EAAa,IAAI,OAAOC,EAAM,SAAS,WACzC,EACJ,GAAI,CACA,EAAa,IAAI,IAAI,QACjB,EAIJ,EAAW,KAAK,IAAQ,EAAI,WAAW,SAAW,EAAE,GAAc,EAAW,OAASA,EAAM,iBAAiB,QAC7G,EAAa,IAGjB,IAAI,EAAW,GACXC,EAAyB,KACvB,EAAeD,EAAM,kBAC3B,GAAI,GAAgB,EAEhB,GADA,EAAoB,EAChB,EAAa,YAAY,UAAY,EAAa,YAAY,SAE9D,GAAI,EAAa,WAAW,WAAa,QAAS,CAC9C,IAAM,EAAS,IAAI,IAAI,EAAa,KACpC,EAAO,SAAW,GAClB,EAAO,SAAW,GAClB,EAAQ,KAAK,KAAK,kBAAkB,EAAO,WAAW,QAAQ,MAAO,OACrE,EAAW,QAEX,EAAO,KAAK,oGAIhB,EAAQ,KAAK,KAAK,kBAAkB,EAAa,IAAI,QAAQ,aAAc,aAAa,QAAQ,aAAc,gBAC9G,EAAW,GAGnB,IAAIE,EACJ,GAAI,EAAO,oBAAqB,CAC5B,IAAM,EAAc,IAAI,IAAI,EAAO,qBACnC,EAAY,aAAa,IAAI,SAAU,KAAK,UAAU,IACtD,EAAY,aAAa,IAAI,UAAW,QACxC,IAAM,EAAW,EAAY,WAC7B,EAAU,MAAM,EAAgB,QAAQ,CACpC,kBAAmB,SAGvB,EAAU,MAAM,EAAgB,OAC5B,EAAO,uBACD,CACI,eAAgB,EAAO,uBACvB,GAAG,GAEP,GAId,WAAW,SAAY,CACnB,MAAM,EAAQ,SACf,KAEH,IAAM,EAAO,MAAM,EAAQ,UAiB3B,GAfI,GAAY,GACZ,EAAO,MAAM,qCAAqC,EAAkB,IAAI,IAAI,KAG5E,GAAY,IAAsB,EAAkB,YAAY,UAAY,EAAkB,YAAY,WAC1G,MAAM,EAAK,aAAa,CACpB,SAAU,EAAkB,YAAY,SACxC,SAAU,EAAkB,YAAY,WAI5C,EAAgB,cAChB,MAAM,EAAgB,aAAa,EAAM,GAGzC,CAAC,EAAgB,OACjB,GAAI,CACA,MAAM,EAAK,KAAK,EAAK,EAAgB,YAAc,CAAE,UAAW,2BAC3D,EAAO,CAMZ,MALI,GAAY,GAAqBF,EAAM,YACvC,EAAO,KAAK,0CAA0C,EAAkB,IAAI,uBAAuB,KACnG,EAAM,gBAAgB,EAAkB,KAClC,GAEJ,EAId,MAAO,CACH,OACA,QAAS,SAAY,CACjB,MAAM,EAAQ,SAElB"}