{"version":3,"file":"news-RQzgrgsk.js","names":["route: Route","got","cache","response","$"],"sources":["../../lib/routes/duckdb/news.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nimport cache from '@/utils/cache';\r\n\r\nexport const route: Route = {\r\n    path: '/news',\r\n    categories: ['programming'],\r\n    example: '/duckdb/news',\r\n    parameters: {},\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '新闻',\r\n    maintainers: ['mocusez'],\r\n    handler,\r\n};\r\n\r\nasync function handler() {\r\n    const baseUrl = 'https://duckdb.org/news/';\r\n    const { data: response } = await got(baseUrl);\r\n    const $ = load(response);\r\n\r\n    const list = $('.postpreview')\r\n        // 使用“toArray()”方法将选择的所有 DOM 元素以数组的形式返回。\r\n        .toArray()\r\n        // 使用“map()”方法遍历数组，并从每个元素中解析需要的数据。\r\n        .map((item) => {\r\n            item = $(item);\r\n            return {\r\n                title: item.find('h3').text().trim(),\r\n                link: `https://duckdb.org${item.find('a.blocklink').attr('href')}`,\r\n                pubDate: timezone(parseDate(item.find('.date').text(), 'YYYY-MM-DD'), 0),\r\n                author: item.find('.author').text().trim(),\r\n            };\r\n        });\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const response = await got(item.link);\r\n                const $ = load(response.body);\r\n                item.description = $('.contentwidth').find('h1, .infoline').remove().end().html();\r\n                // 上面每个列表项的每个属性都在此重用，\r\n                // 并增加了一个新属性“description”\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        // 在此处输出您的 RSS\r\n        title: 'DuckDB News',\r\n        link: baseUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"0ZAOA,MAAaA,EAAe,CACxB,KAAM,QACN,WAAY,CAAC,eACb,QAAS,eACT,WAAY,GACZ,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,KACN,YAAa,CAAC,WACd,WAGJ,eAAe,GAAU,CACrB,IAAM,EAAU,2BACV,CAAE,KAAM,GAAa,MAAMC,EAAI,GAC/B,EAAI,EAAK,GAET,EAAO,EAAE,gBAEV,UAEA,IAAK,IACF,EAAO,EAAE,GACF,CACH,MAAO,EAAK,KAAK,MAAM,OAAO,OAC9B,KAAM,qBAAqB,EAAK,KAAK,eAAe,KAAK,UACzD,QAAS,EAAS,EAAU,EAAK,KAAK,SAAS,OAAQ,cAAe,GACtE,OAAQ,EAAK,KAAK,WAAW,OAAO,UAI1C,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAMC,EAAW,MAAMF,EAAI,EAAK,MAC1BG,EAAI,EAAKD,EAAS,MAIxB,MAHA,GAAK,YAAcC,EAAE,iBAAiB,KAAK,iBAAiB,SAAS,MAAM,OAGpE,MAKnB,MAAO,CAEH,MAAO,cACP,KAAM,EACN,KAAM"}