{"version":3,"file":"weathernews-D-pJlfIr.js","names":["route: Route","ofetch"],"sources":["../../lib/routes/meteoblue/weathernews.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/weathernews',\r\n    name: 'Weather News',\r\n    maintainers: ['tssujt'],\r\n    handler,\r\n    example: '/meteoblue/weathernews',\r\n    categories: ['blog'],\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    description: 'Weather news and articles from meteoblue',\r\n};\r\n\r\nasync function handler() {\r\n    const baseUrl = 'https://www.meteoblue.com';\r\n    const url = `${baseUrl}/en/blog/article/weathernews`;\r\n\r\n    const response = await ofetch(url);\r\n    const $ = load(response);\r\n\r\n    // Extract articles from the page using the actual HTML structure\r\n    const articles = $('article[itemprop=\"blogPost\"]')\r\n        .toArray()\r\n        .map((element) => {\r\n            const $article = $(element);\r\n\r\n            // Get title and link from h3 > a\r\n            const $link = $article.find('h3[itemprop=\"headline\"] a[itemprop=\"mainEntityOfPage\"]');\r\n            const title = $link.text().trim();\r\n            const link = $link.attr('href');\r\n\r\n            if (!title || !link) {\r\n                return null;\r\n            }\r\n\r\n            // Get date from time element\r\n            const $time = $article.find('time[itemprop=\"datePublished\"]');\r\n            const dateText = $time.attr('datetime') || '';\r\n\r\n            // Extract author from the time element text\r\n            const $authorMeta = $article.find('meta[itemprop=\"author\"]');\r\n            const author = $authorMeta.attr('content')?.trim() || 'meteoblue';\r\n\r\n            // Get description from itemprop=\"description\"\r\n            const $description = $article.find('div[itemprop=\"description\"]');\r\n            const description = $description.text().trim() || title;\r\n\r\n            return {\r\n                title,\r\n                link: link.startsWith('http') ? link : `${baseUrl}${link}`,\r\n                pubDate: dateText ? parseDate(dateText) : undefined,\r\n                author,\r\n                description,\r\n            };\r\n        })\r\n        .filter(Boolean);\r\n\r\n    return {\r\n        title: 'meteoblue Weather News',\r\n        link: url,\r\n        description: 'Latest weather news and articles from meteoblue',\r\n        item: articles,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"+PAKA,MAAaA,EAAe,CACxB,KAAM,eACN,KAAM,eACN,YAAa,CAAC,UACd,UACA,QAAS,yBACT,WAAY,CAAC,QACb,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,YAAa,4CAGjB,eAAe,GAAU,CACrB,IAAM,EAAU,4BACV,EAAM,GAAG,EAAQ,8BAEjB,EAAW,MAAMC,EAAO,GACxB,EAAI,EAAK,GAGT,EAAW,EAAE,gCACd,UACA,IAAK,GAAY,CACd,IAAM,EAAW,EAAE,GAGb,EAAQ,EAAS,KAAK,0DACtB,EAAQ,EAAM,OAAO,OACrB,EAAO,EAAM,KAAK,QAExB,GAAI,CAAC,GAAS,CAAC,EACX,OAAO,KAIX,IAAM,EAAQ,EAAS,KAAK,kCACtB,EAAW,EAAM,KAAK,aAAe,GAGrC,EAAc,EAAS,KAAK,2BAC5B,EAAS,EAAY,KAAK,YAAY,QAAU,YAGhD,EAAe,EAAS,KAAK,+BAC7B,EAAc,EAAa,OAAO,QAAU,EAElD,MAAO,CACH,QACA,KAAM,EAAK,WAAW,QAAU,EAAO,GAAG,IAAU,IACpD,QAAS,EAAW,EAAU,GAAY,IAAA,GAC1C,SACA,iBAGP,OAAO,SAEZ,MAAO,CACH,MAAO,yBACP,KAAM,EACN,YAAa,kDACb,KAAM,EACN,WAAY"}