{"version":3,"file":"cdrh-fzVEkvLD.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/fda/cdrh.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/cdrh/:titleOnly?',\r\n    radar: [\r\n        {\r\n            source: ['fda.gov/medical-devices/news-events-medical-devices/cdrhnew-news-and-updates', 'fda.gov/'],\r\n            target: '/cdrh/:titleOnly',\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n    url: 'fda.gov/medical-devices/news-events-medical-devices/cdrhnew-news-and-updates',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const titleOnly = !!(ctx.req.param('titleOnly') ?? '');\r\n    const rootUrl = 'https://www.fda.gov';\r\n    const currentUrl = `${rootUrl}/medical-devices/news-events-medical-devices/cdrhnew-news-and-updates`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: currentUrl,\r\n    });\r\n\r\n    const $ = load(response.data);\r\n\r\n    let items = $('div[role=\"main\"] a')\r\n        .slice(0, ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 30)\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n\r\n            const link = item.attr('href');\r\n\r\n            return {\r\n                title: item.text(),\r\n                link: link.startsWith('http') ? link : `${rootUrl}${link}`,\r\n            };\r\n        });\r\n\r\n    items = await Promise.all(\r\n        items.map((item) =>\r\n            cache.tryGet(titleOnly ? `${item.link}#${item.title}#titleOnly` : `${item.link}#${item.title}`, async () => {\r\n                const detailResponse = await got({\r\n                    method: 'get',\r\n                    url: item.link,\r\n                });\r\n\r\n                const content = load(detailResponse.data);\r\n\r\n                item.author = content('meta[property=\"article:publisher\"]').attr('content');\r\n\r\n                try {\r\n                    item.pubDate = parseDate(content('meta[property=\"article:published_time\"]').attr('content').split(', ').pop(), 'MM/DD/YYYY - HH:mm');\r\n                } catch {\r\n                    item.pubDate = parseDate(content('meta[property=\"article:published_time\"]').attr('content'));\r\n                }\r\n\r\n                item.description = titleOnly ? null : content('div[role=\"main\"], .doc-content-area').html();\r\n                item.guid = titleOnly ? `${item.link}#${item.title}#titleOnly` : `${item.link}#${item.title}`;\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: $('title').text(),\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"wWAMA,MAAaA,EAAe,CACxB,KAAM,oBACN,MAAO,CACH,CACI,OAAQ,CAAC,+EAAgF,YACzF,OAAQ,qBAGhB,KAAM,UACN,YAAa,GACb,UACA,IAAK,gFAGT,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAY,CAAC,EAAE,EAAI,IAAI,MAAM,cAAgB,IAC7C,EAAU,sBACV,EAAa,GAAG,EAAQ,uEAExB,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAI,EAAK,EAAS,MAEpB,EAAQ,EAAE,sBACT,MAAM,EAAG,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,IAC5E,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GAET,IAAM,EAAO,EAAK,KAAK,QAEvB,MAAO,CACH,MAAO,EAAK,OACZ,KAAM,EAAK,WAAW,QAAU,EAAO,GAAG,IAAU,OA8BhE,MA1BA,GAAQ,MAAM,QAAQ,IAClB,EAAM,IAAK,GACPC,EAAM,OAAO,EAAY,GAAG,EAAK,KAAK,GAAG,EAAK,MAAM,YAAc,GAAG,EAAK,KAAK,GAAG,EAAK,QAAS,SAAY,CACxG,IAAM,EAAiB,MAAMD,EAAI,CAC7B,OAAQ,MACR,IAAK,EAAK,OAGR,EAAU,EAAK,EAAe,MAEpC,EAAK,OAAS,EAAQ,sCAAsC,KAAK,WAEjE,GAAI,CACA,EAAK,QAAU,EAAU,EAAQ,2CAA2C,KAAK,WAAW,MAAM,MAAM,MAAO,2BAC3G,CACJ,EAAK,QAAU,EAAU,EAAQ,2CAA2C,KAAK,YAMrF,MAHA,GAAK,YAAc,EAAY,KAAO,EAAQ,uCAAuC,OACrF,EAAK,KAAO,EAAY,GAAG,EAAK,KAAK,GAAG,EAAK,MAAM,YAAc,GAAG,EAAK,KAAK,GAAG,EAAK,QAE/E,MAKZ,CACH,MAAO,EAAE,SAAS,OAClB,KAAM,EACN,KAAM"}