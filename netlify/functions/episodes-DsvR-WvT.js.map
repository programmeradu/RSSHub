{"version":3,"file":"episodes-DsvR-WvT.js","names":["route: Route","ofetch","link","description","cache","response","$"],"sources":["../../lib/routes/podwise/episodes.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch'; // 统一使用的请求库\r\nimport cache from '@/utils/cache';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nimport dayjs from 'dayjs';\r\nimport duration from 'dayjs/plugin/duration.js';\r\ndayjs.extend(duration);\r\n\r\nexport const route: Route = {\r\n    path: '/explore/:type',\r\n    categories: ['multimedia'],\r\n    example: '/podwise/explore/latest',\r\n    parameters: { type: 'latest or all episodes.' },\r\n    radar: [\r\n        {\r\n            source: ['podwise.ai/explore/:type'],\r\n        },\r\n    ],\r\n    name: 'Episodes',\r\n    maintainers: ['lyling'],\r\n    handler: async (ctx) => {\r\n        const type = ctx.req.param('type');\r\n        const link = `https://podwise.ai/explore/${type}`;\r\n        const response = await ofetch(link);\r\n        const $ = load(response);\r\n        const content = $('#navigator').next();\r\n        // header/[div => content]/footer, content>div(2)>h1\r\n        const title = content.find('h1').first().text();\r\n        const description = content.find('p').eq(1).text();\r\n\r\n        const list = content\r\n            .find('.group')\r\n            .toArray()\r\n            .map((item) => {\r\n                item = $(item);\r\n                const link = item.find('a').first().attr('href');\r\n                const description = item.find('p').first().text();\r\n                const pubDate = item.find('a').next().children('span').text();\r\n\r\n                return {\r\n                    link: `https://podwise.ai${link}`,\r\n                    description,\r\n                    pubDate: timezone(parseDate(pubDate, 'DD MMM YYYY', 'en'), 8),\r\n                };\r\n            });\r\n\r\n        const items = await Promise.all(\r\n            list.map((item) =>\r\n                cache.tryGet(item.link, async () => {\r\n                    const response = await ofetch(item.link);\r\n                    const $ = load(response);\r\n\r\n                    item.description = $('summary').first().html();\r\n\r\n                    // duration\r\n                    const $cover = $('img[alt=\"Podcast cover\"]').eq(1);\r\n                    const $duration = $cover.next().find('span').eq(2);\r\n\r\n                    const nextData = JSON.parse(\r\n                        $('script:contains(\"podName\")')\r\n                            .first()\r\n                            .text()\r\n                            .match(/self\\.__next_f\\.push\\((.+)\\)/)?.[1] ?? ''\r\n                    );\r\n                    const podcastData = JSON.parse(nextData[1].slice(2))[1][3].children[3].episode;\r\n\r\n                    // rss feed\r\n                    item.title = podcastData.title;\r\n                    item.author = podcastData.podName;\r\n\r\n                    // podcast feed\r\n                    item.itunes_item_image = podcastData.cover;\r\n                    item.itunes_duration = parseDuration($duration.text());\r\n                    item.enclosure_url = podcastData.link;\r\n                    // item.enclosure_length: nothing can convert to.\r\n                    item.enclosure_type = toEnclosureType(podcastData.linkType);\r\n\r\n                    return item;\r\n                })\r\n            )\r\n        );\r\n\r\n        return {\r\n            title,\r\n            description,\r\n            link,\r\n            item: items,\r\n        };\r\n    },\r\n};\r\n\r\nfunction parseDuration(durationStr) {\r\n    const matches = durationStr.match(/(\\d+h)?(\\d+m)?/);\r\n    const hours = matches[1] ? Number.parseInt(matches[1]) : 0;\r\n    const minutes = matches[2] ? Number.parseInt(matches[2]) : 0;\r\n\r\n    // 使用 dayjs 的 duration 创建持续时间对象\r\n    return dayjs\r\n        .duration({\r\n            hours,\r\n            minutes,\r\n        })\r\n        .asSeconds();\r\n}\r\n\r\nfunction toEnclosureType(linkType: string): string {\r\n    switch (linkType) {\r\n        case 'mp3':\r\n            return 'audio/mpeg';\r\n        case 'm4a':\r\n            return 'audio/x-m4a';\r\n        case 'mp4':\r\n            return 'video/mp4';\r\n        default:\r\n            return linkType;\r\n    }\r\n}\r\n"],"mappings":"kaAQA,EAAM,OAAO,GAEb,MAAaA,EAAe,CACxB,KAAM,iBACN,WAAY,CAAC,cACb,QAAS,0BACT,WAAY,CAAE,KAAM,2BACpB,MAAO,CACH,CACI,OAAQ,CAAC,8BAGjB,KAAM,WACN,YAAa,CAAC,UACd,QAAS,KAAO,IAAQ,CACpB,IAAM,EAAO,EAAI,IAAI,MAAM,QACrB,EAAO,8BAA8B,IACrC,EAAW,MAAMC,EAAO,GACxB,EAAI,EAAK,GACT,EAAU,EAAE,cAAc,OAE1B,EAAQ,EAAQ,KAAK,MAAM,QAAQ,OACnC,EAAc,EAAQ,KAAK,KAAK,GAAG,GAAG,OAEtC,EAAO,EACR,KAAK,UACL,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GACT,IAAMC,EAAO,EAAK,KAAK,KAAK,QAAQ,KAAK,QACnCC,EAAc,EAAK,KAAK,KAAK,QAAQ,OACrC,EAAU,EAAK,KAAK,KAAK,OAAO,SAAS,QAAQ,OAEvD,MAAO,CACH,KAAM,qBAAqBD,IAC3B,YAAA,EACA,QAAS,EAAS,EAAU,EAAS,cAAe,MAAO,MAIjE,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNE,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAMC,EAAW,MAAMJ,EAAO,EAAK,MAC7BK,EAAI,EAAKD,GAEf,EAAK,YAAcC,EAAE,WAAW,QAAQ,OAGxC,IAAM,EAASA,EAAE,4BAA4B,GAAG,GAC1C,EAAY,EAAO,OAAO,KAAK,QAAQ,GAAG,GAE1C,EAAW,KAAK,MAClBA,EAAE,8BACG,QACA,OACA,MAAM,kCAAkC,IAAM,IAEjD,EAAc,KAAK,MAAM,EAAS,GAAG,MAAM,IAAI,GAAG,GAAG,SAAS,GAAG,QAavE,MAVA,GAAK,MAAQ,EAAY,MACzB,EAAK,OAAS,EAAY,QAG1B,EAAK,kBAAoB,EAAY,MACrC,EAAK,gBAAkB,EAAc,EAAU,QAC/C,EAAK,cAAgB,EAAY,KAEjC,EAAK,eAAiB,EAAgB,EAAY,UAE3C,MAKnB,MAAO,CACH,QACA,cACA,OACA,KAAM,KAKlB,SAAS,EAAc,EAAa,CAChC,IAAM,EAAU,EAAY,MAAM,kBAC5B,EAAQ,EAAQ,GAAK,OAAO,SAAS,EAAQ,IAAM,EACnD,EAAU,EAAQ,GAAK,OAAO,SAAS,EAAQ,IAAM,EAG3D,OAAO,EACF,SAAS,CACN,QACA,YAEH,YAGT,SAAS,EAAgB,EAA0B,CAC/C,OAAQ,EAAR,CACI,IAAK,MACD,MAAO,aACX,IAAK,MACD,MAAO,cACX,IAAK,MACD,MAAO,YACX,QACI,OAAO"}