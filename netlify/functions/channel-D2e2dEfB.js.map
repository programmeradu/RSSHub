{"version":3,"file":"channel-D2e2dEfB.js","names":["client: TelegramClient | undefined","ConfigNotFoundError","client","item: DataItem[]","attachments: string[]"],"sources":["../../lib/routes/telegram/tglib/client.ts","../../lib/routes/telegram/tglib/channel.ts","../../lib/routes/telegram/channel.ts"],"sourcesContent":["import { Api, TelegramClient } from 'telegram';\r\nimport { UserAuthParams } from 'telegram/client/auth';\r\nimport { StringSession } from 'telegram/sessions/index.js';\r\nimport { getAppropriatedPartSize } from 'telegram/Utils.js';\r\n\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nlet client: TelegramClient | undefined;\r\nexport async function getClient(authParams?: UserAuthParams, session?: string) {\r\n    if (!config.telegram.session && session === undefined) {\r\n        throw new ConfigNotFoundError('TELEGRAM_SESSION is not configured');\r\n    }\r\n    if (client) {\r\n        return client;\r\n    }\r\n    const apiId = Number(config.telegram.apiId ?? 4);\r\n    const apiHash = config.telegram.apiHash ?? '014b35b6184100b085b0d0572f9b5103';\r\n\r\n    const stringSession = new StringSession(session ?? config.telegram.session);\r\n    client = new TelegramClient(stringSession, apiId, apiHash, {\r\n        connectionRetries: Infinity,\r\n        autoReconnect: true,\r\n        retryDelay: 3000,\r\n        maxConcurrentDownloads: Number(config.telegram.maxConcurrentDownloads ?? 10),\r\n        proxy:\r\n            config.telegram.proxy?.host && config.telegram.proxy.port && config.telegram.proxy.secret\r\n                ? {\r\n                      ip: config.telegram.proxy.host,\r\n                      port: Number(config.telegram.proxy.port),\r\n                      MTProxy: true,\r\n                      secret: config.telegram.proxy.secret,\r\n                  }\r\n                : undefined,\r\n    });\r\n\r\n    await client.connect();\r\n    return client;\r\n}\r\n\r\nfunction humanFileSize(size) {\r\n    const i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(1024));\r\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + ' ' + ['B', 'kB', 'MB', 'GB', 'TB'][i];\r\n}\r\n\r\n/**\r\n * https://core.telegram.org/api/files#stripped-thumbnails\r\n * @param bytes Buffer\r\n * @returns Buffer jpeg\r\n */\r\nfunction ExpandInlineBytes(bytes) {\r\n    if (bytes.length < 3 || bytes[0] !== 0x1) {\r\n        return [];\r\n    }\r\n    const header = Buffer.from([\r\n        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43, 0x00, 0x28, 0x1C, 0x1E, 0x23, 0x1E, 0x19, 0x28, 0x23, 0x21, 0x23, 0x2D, 0x2B,\r\n        0x28, 0x30, 0x3C, 0x64, 0x41, 0x3C, 0x37, 0x37, 0x3C, 0x7B, 0x58, 0x5D, 0x49, 0x64, 0x91, 0x80, 0x99, 0x96, 0x8F, 0x80, 0x8C, 0x8A, 0xA0, 0xB4, 0xE6, 0xC3, 0xA0, 0xAA, 0xDA, 0xAD, 0x8A, 0x8C, 0xC8, 0xFF, 0xCB, 0xDA, 0xEE,\r\n        0xF5, 0xFF, 0xFF, 0xFF, 0x9B, 0xC1, 0xFF, 0xFF, 0xFF, 0xFA, 0xFF, 0xE6, 0xFD, 0xFF, 0xF8, 0xFF, 0xDB, 0x00, 0x43, 0x01, 0x2B, 0x2D, 0x2D, 0x3C, 0x35, 0x3C, 0x76, 0x41, 0x41, 0x76, 0xF8, 0xA5, 0x8C, 0xA5, 0xF8, 0xF8, 0xF8,\r\n        0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8,\r\n        0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xF8, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x1F, 0x00, 0x00, 0x01, 0x05,\r\n        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04,\r\n        0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7D, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08, 0x23, 0x42, 0xB1, 0xC1,\r\n        0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A,\r\n        0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96,\r\n        0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\r\n        0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xC4, 0x00, 0x1F, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,\r\n        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0xFF, 0xC4, 0x00, 0xB5, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,\r\n        0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15, 0x62,\r\n        0x72, 0xD1, 0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57,\r\n        0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A,\r\n        0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2,\r\n        0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00,\r\n    ]);\r\n    const footer = Buffer.from([0xFF, 0xD9]);\r\n    const real = Buffer.alloc(header.length + bytes.length + footer.length);\r\n    header.copy(real);\r\n    bytes.copy(real, header.length, 3);\r\n    bytes.copy(real, 164, 1, 2);\r\n    bytes.copy(real, 166, 2, 3);\r\n    footer.copy(real, header.length + bytes.length, 0);\r\n    return real;\r\n}\r\n\r\nfunction getMediaLink(ctx, channel: Api.InputPeerChannel, channelName: string, message: Api.Message) {\r\n    const base = `${ctx.protocol}://${ctx.host}/telegram/channel/${channelName}`;\r\n    const src = base + `${channel.channelId}_${message.id}`;\r\n\r\n    const x = message.media;\r\n    if (x instanceof Api.MessageMediaPhoto || (x instanceof Api.MessageMediaDocument && x.document.mimeType.startsWith('image/'))) {\r\n        return `<img src=\"${src}\" alt=\"\"/>`;\r\n    }\r\n    if (x instanceof Api.MessageMediaDocument && x.document.mimeType.startsWith('video/')) {\r\n        const vid = x.document.attributes.find((t) => t.className === 'DocumentAttributeVideo') ?? { w: 1080, h: 720 };\r\n        return `<video controls preload=\"metadata\" poster=\"${src}?thumb\" width=\"${vid.w / 2}\" height=\"${vid.h / 2}\"><source src=\"${src}\" type=\"${x.document.mimeType}\"></video>`;\r\n    }\r\n    if (x instanceof Api.MessageMediaDocument && x.document.mimeType.startsWith('audio/')) {\r\n        return `<audio src=\"${src}\"></audio>`;\r\n    }\r\n\r\n    let linkText = getFilename(x);\r\n    if (x instanceof Api.MessageMediaDocument) {\r\n        linkText += ` (${humanFileSize(x.document.size)})`;\r\n        return `<a href=\"${src}\" target=\"_blank\"><img src=\"${src}?thumb\" alt=\"\"/><br/>${linkText}</a>`;\r\n    }\r\n    return '';\r\n}\r\nfunction getFilename(x) {\r\n    if (x instanceof Api.MessageMediaDocument) {\r\n        const docFilename = x.document.attributes.find((a) => a.className === 'DocumentAttributeFilename');\r\n        if (docFilename) {\r\n            return docFilename.fileName;\r\n        }\r\n    }\r\n    return x.className;\r\n}\r\n\r\nfunction sortThumb(thumb) {\r\n    if (thumb instanceof Api.PhotoStrippedSize) {\r\n        return thumb.bytes.length;\r\n    }\r\n    if (thumb instanceof Api.PhotoCachedSize) {\r\n        return thumb.bytes.length;\r\n    }\r\n    if (thumb instanceof Api.PhotoSize) {\r\n        return thumb.size;\r\n    }\r\n    if (thumb instanceof Api.PhotoSizeProgressive) {\r\n        return Math.max(...thumb.sizes);\r\n    }\r\n    if (thumb instanceof Api.VideoSize) {\r\n        return thumb.size;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction chooseLargestThumb(thumbs) {\r\n    thumbs = [...thumbs].sort((a, b) => sortThumb(a) - sortThumb(b));\r\n    return thumbs.pop();\r\n}\r\n\r\nfunction streamThumbnail(x) {\r\n    if (x instanceof Api.MessageMediaDocument && x.document.thumbs.length > 0) {\r\n        const size = chooseLargestThumb(x.document.thumbs);\r\n        if (size instanceof Api.PhotoCachedSize || size instanceof Api.PhotoStrippedSize) {\r\n            return (function* () {\r\n                yield ExpandInlineBytes(size.bytes);\r\n            })();\r\n        }\r\n        return streamDocument(x.document, size && 'type' in size ? size.type : '');\r\n    }\r\n    throw 'not supported';\r\n}\r\n\r\nasync function decodeMedia(channelName, x, retry = false) {\r\n    const [channel, msg] = x.split('_');\r\n\r\n    try {\r\n        const msgs = await client.getMessages(channel, {\r\n            ids: [Number(msg)],\r\n        });\r\n        return msgs[0]?.media;\r\n    } catch (error) {\r\n        if (!retry) {\r\n            // channel likely not seen before, we need to resolve ID and retry\r\n            await client.getInputEntity(channelName);\r\n            return decodeMedia(channelName, x, true);\r\n        }\r\n        throw error;\r\n    }\r\n}\r\n\r\nfunction streamDocument(obj, thumbSize = '', offset, limit) {\r\n    const chunkSize = (obj.size ? getAppropriatedPartSize(obj.size) : 64) * 1024;\r\n    const iterFileParams = {\r\n        file: new Api.InputDocumentFileLocation({\r\n            id: obj.id,\r\n            accessHash: obj.accessHash,\r\n            fileReference: obj.fileReference,\r\n            thumbSize,\r\n        }),\r\n        chunkSize,\r\n        dcId: obj.dcId,\r\n    };\r\n    if (offset) {\r\n        iterFileParams.offset = offset;\r\n    }\r\n    if (limit) {\r\n        iterFileParams.limit = limit;\r\n    }\r\n    return client.iterDownload(iterFileParams);\r\n}\r\n\r\nexport { client, getMediaLink, decodeMedia, getFilename, streamDocument, streamThumbnail };\r\n","import InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { client, decodeMedia, getClient, getFilename, getMediaLink, streamDocument, streamThumbnail } from './client';\r\nimport { returnBigInt } from 'telegram/Helpers.js';\r\nimport { HTMLParser } from 'telegram/extensions/html.js';\r\nimport { DataItem } from '@/types';\r\nimport type { Api } from 'telegram';\r\n\r\nfunction parseRange(range, length) {\r\n    if (!range) {\r\n        return [];\r\n    }\r\n    const [typ, segstr] = range.split('=');\r\n    if (typ !== 'bytes') {\r\n        throw new InvalidParameterError(`unsupported range: ${typ}`);\r\n    }\r\n    const segs = segstr.split(',').map((s) => s.trim());\r\n    const parsedSegs = [];\r\n    for (const seg of segs) {\r\n        const range = seg\r\n            .split('-', 2)\r\n            .filter((v) => !!v)\r\n            .map((elem) => returnBigInt(elem));\r\n        if (range.length < 2) {\r\n            if (seg.startsWith('-')) {\r\n                range.unshift(0);\r\n            } else {\r\n                range.push(length);\r\n            }\r\n        }\r\n        parsedSegs.push(range);\r\n    }\r\n    return parsedSegs;\r\n}\r\n\r\nasync function getMedia(ctx) {\r\n    const media = await decodeMedia(ctx.req.param('username'), ctx.req.param('media'));\r\n    if (!media) {\r\n        ctx.status = 500;\r\n        return ctx.res.end();\r\n    }\r\n    if (ctx.res.closed) {\r\n        // console.log(`prematurely closed ${ctx.req.param('media')}`);\r\n        return;\r\n    }\r\n\r\n    if (media.document) {\r\n        ctx.status = 200;\r\n        let stream;\r\n        if ('thumb' in ctx.req.query()) {\r\n            try {\r\n                stream = streamThumbnail(media);\r\n                ctx.set('Content-Type', 'image/jpeg');\r\n            } catch {\r\n                ctx.status = 404;\r\n                return ctx.res.end();\r\n            }\r\n        } else {\r\n            ctx.set('Content-Type', media.document.mimeType);\r\n\r\n            ctx.set('Accept-Ranges', 'bytes');\r\n            const range = parseRange(ctx.get('Range'), media.document.size - 1);\r\n            if (range.length > 1) {\r\n                ctx.status = 416; // range not satisfiable\r\n                return ctx.res.end();\r\n            }\r\n            if (range.length === 1) {\r\n                // console.log(`${ctx.method} ${ctx.req.url} Range: ${ctx.get('Range')}`);\r\n                ctx.status = 206; // partial content\r\n                const [offset, limit] = range[0];\r\n                ctx.set('Content-Length', limit - offset + 1);\r\n                ctx.set('Content-Range', `bytes ${offset}-${limit}/${media.document.size}`);\r\n\r\n                const stream = streamDocument(media.document, '', offset, limit);\r\n                for await (const chunk of stream) {\r\n                    ctx.res.write(chunk);\r\n                    if (ctx.res.closed) {\r\n                        break;\r\n                    }\r\n                }\r\n                return ctx.res.end();\r\n            }\r\n\r\n            ctx.set('Content-Length', media.document.size);\r\n            if (media.document.mimeType.startsWith('application/')) {\r\n                ctx.set('Content-Disposition', `attachment; filename=\"${encodeURIComponent(getFilename(media))}\"`);\r\n            }\r\n            stream = streamDocument(media.document);\r\n        }\r\n        // const addr = JSON.stringify(ctx.res.socket.address());\r\n        // console.log(`streaming ${ctx.req.param('media')} to ${addr}`);\r\n\r\n        for await (const chunk of stream) {\r\n            if (ctx.res.closed) {\r\n                // console.log(`closed ${addr}`);\r\n                break;\r\n            }\r\n            // console.log(`writing ${chunk.length / 1024} to ${addr}`);\r\n            ctx.res.write(chunk);\r\n        }\r\n        if ('close' in stream) {\r\n            stream.close();\r\n        }\r\n    } else if (media.photo) {\r\n        ctx.status = 200;\r\n        ctx.set('Content-Type', 'image/jpeg');\r\n        const buf = await client.downloadMedia(media);\r\n        ctx.res.write(buf);\r\n    } else {\r\n        ctx.status = 415;\r\n        ctx.write(media.className);\r\n    }\r\n    return ctx.res.end();\r\n}\r\n\r\nexport default async function handler(ctx) {\r\n    const { username } = ctx.req.param();\r\n    const client = await getClient();\r\n\r\n    const item: DataItem[] = [];\r\n    const chat = (await client.getInputEntity(username)) as Api.InputPeerChannel;\r\n    const channelInfo = await client.getEntity(chat);\r\n\r\n    if (channelInfo.className !== 'Channel') {\r\n        throw new Error(`${username} is not a channel`);\r\n    }\r\n\r\n    let attachments: string[] = [];\r\n    const messages = await client.getMessages(chat, { limit: 50 });\r\n\r\n    for (const message of messages) {\r\n        if (message.media) {\r\n            // messages that have no text are shown as if they're one post\r\n            // because in TG only 1 attachment per message is possible\r\n            attachments.push(getMediaLink(ctx, chat, username, message));\r\n        }\r\n        if (message.text !== '') {\r\n            let description = attachments.join('\\n');\r\n            attachments = []; // emitting these, buffer other ones\r\n\r\n            if (message.text) {\r\n                description += `<p>${HTMLParser.unparse(message.message, message.entities).replaceAll('\\n', '<br/>')}</p>`;\r\n            }\r\n\r\n            const title = message.text ? message.text.slice(0, 80) + (message.text.length > 80 ? '...' : '') : new Date(message.date * 1000).toUTCString();\r\n\r\n            item.push({\r\n                title,\r\n                description,\r\n                pubDate: new Date(message.date * 1000).toUTCString(),\r\n                link: `https://t.me/s/${username}/${message.id}`,\r\n                author: `${channelInfo.title} (@${username})`,\r\n            });\r\n        }\r\n    }\r\n\r\n    return {\r\n        title: channelInfo.title,\r\n        language: null,\r\n        link: `https://t.me/${username}`,\r\n        item,\r\n        allowEmpty: ctx.req.param('id') === 'allow_empty',\r\n        description: `@${username} on Telegram`,\r\n    };\r\n}\r\n\r\nexport { getMedia };\r\n","import { Route, ViewType } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport querystring from 'node:querystring';\r\nimport { fallback, queryToBoolean } from '@/utils/readable-social';\r\nimport tglibchannel from './tglib/channel';\r\n\r\n/* message types */\r\nconst REPLY = 'REPLY';\r\nconst FORWARDED = 'FORWARDED';\r\nconst SERVICE = 'SERVICE';\r\nconst VIA_BOT = 'VIA_BOT';\r\nconst VIDEO = 'VIDEO';\r\nconst GIF = 'GIF';\r\nconst PHOTO = 'PHOTO';\r\nconst POLL = 'POLL';\r\nconst VOICE = 'VOICE';\r\nconst MUSIC = 'MUSIC';\r\nconst DOCUMENT = 'DOCUMENT';\r\nconst LOCATION = 'LOCATION';\r\nconst CONTACT = 'CONTACT';\r\nconst STICKER = 'STICKER';\r\nconst ANIMATED_STICKER = 'ANIMATED_STICKER';\r\nconst VIDEO_STICKER = 'VIDEO_STICKER';\r\nconst UNSUPPORTED = 'UNSUPPORTED';\r\nconst PARTIALLY_UNSUPPORTED = 'PARTIALLY_UNSUPPORTED';\r\n\r\n/* message media tag dict */\r\nconst mediaTagDict = {\r\n    REPLY: ['[Reply]', '↩️'],\r\n    FORWARDED: ['[Forwarded]', '🔁'],\r\n    SERVICE: ['[Service]', '🔧'],\r\n    VIA_BOT: ['[Via bot]', '🤖'],\r\n    VIDEO: ['[Video]', '🎬'],\r\n    GIF: ['[GIF]', '[GIF]'],\r\n    PHOTO: ['[Photo]', '🖼'],\r\n    POLL: ['[Poll]', '📊'],\r\n    VOICE: ['[Voice]', '🎙'],\r\n    MUSIC: ['[Music]', '🎵'],\r\n    DOCUMENT: ['[Document]', '📄'],\r\n    LOCATION: ['[Location]', '📍'],\r\n    CONTACT: ['[Contact]', '📱'],\r\n    STICKER: ['[Sticker]', '[Sticker]'],\r\n    ANIMATED_STICKER: ['[Animated Sticker]', '[Animated Sticker]'],\r\n    VIDEO_STICKER: ['[Video Sticker]', '[Video Sticker]'],\r\n    UNSUPPORTED: ['[Unsupported]', '🚫'],\r\n    PARTIALLY_UNSUPPORTED: ['', ''],\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/channel/:username/:routeParams?',\r\n    categories: ['social-media'],\r\n    view: ViewType.SocialMedia,\r\n    example: '/telegram/channel/awesomeRSSHub',\r\n    parameters: {\r\n        username: 'channel username',\r\n        routeParams: `extra parameters, see the table below\r\n| Key                    | Description                                                           | Accepts                                            | Defaults to  |\r\n| :--------------------: | :-------------------------------------------------------------------: | :------------------------------------------------: | :----------: |\r\n| showLinkPreview        | Show the link preview from Telegram                                   | 0/1/true/false                                     | true         |\r\n| showViaBot             | For messages sent via bot, show the bot                               | 0/1/true/false                                     | true         |\r\n| showReplyTo            | For reply messages, show the target of the reply                      | 0/1/true/false                                     | true         |\r\n| showFwdFrom            | For forwarded messages, show the forwarding source                    | 0/1/true/false                                     | true         |\r\n| showFwdFromAuthor      | For forwarded messages, show the author of the forwarding source      | 0/1/true/false                                     | true         |\r\n| showInlineButtons      | Show inline buttons                                                   | 0/1/true/false                                     | false        |\r\n| showMediaTagInTitle    | Show media tags in the title                                          | 0/1/true/false                                     | true         |\r\n| showMediaTagAsEmoji    | Show media tags as emoji                                              | 0/1/true/false                                     | true         |\r\n| showHashtagAsHyperlink | Show hashtags as hyperlinks (\\`https://t.me/s/channel?q=%23hashtag\\`) | 0/1/true/false                                     | true         |\r\n| includeFwd             | Include forwarded messages                                            | 0/1/true/false                                     | true         |\r\n| includeReply           | Include reply messages                                                | 0/1/true/false                                     | true         |\r\n| includeServiceMsg      | Include service messages (e.g. message pinned, channel photo updated) | 0/1/true/false                                     | true         |\r\n| includeUnsupportedMsg  | Include messages unsupported by t.me                                  | 0/1/true/false                                     | false        |\r\n| searchQuery            | search query                                                          | keywords; replace \\`#hashtag\\` with \\`%23hashtag\\` | (no keyword) |\r\n\r\nSpecify different option values than default values can meet different needs, URL\r\n\r\n\\`\\`\\`\r\nhttps://rsshub.app/telegram/channel/NewlearnerChannel/showLinkPreview=0&showViaBot=0&showReplyTo=0&showFwdFrom=0&showFwdFromAuthor=0&showInlineButtons=0&showMediaTagInTitle=1&showMediaTagAsEmoji=1&includeFwd=0&includeReply=1&includeServiceMsg=0&includeUnsupportedMsg=0\r\n\\`\\`\\`\r\n\r\ngenerates an RSS without any link previews and annoying metadata, with emoji media tags in the title, without forwarded messages (but with reply messages), and without messages you don't care about (service messages and unsupported messages), for people who prefer pure subscriptions.\r\n\r\nFor backward compatibility reasons, invalid \\`routeParams\\` will be treated as \\`searchQuery\\` .\r\n`,\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'TELEGRAM_SESSION',\r\n                optional: true,\r\n                description: 'Telegram API Authentication',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_API_ID',\r\n                optional: true,\r\n                description: 'Telegram API ID',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_API_HASH',\r\n                optional: true,\r\n                description: 'Telegram API Hash',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_MAX_CONCURRENT_DOWNLOADS',\r\n                optional: true,\r\n                description: 'Telegram Max Concurrent Downloads',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_PROXY_HOST',\r\n                optional: true,\r\n                description: 'Telegram Proxy Host',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_PROXY_PORT',\r\n                optional: true,\r\n                description: 'Telegram Proxy Port',\r\n            },\r\n            {\r\n                name: 'TELEGRAM_PROXY_SECRET',\r\n                optional: true,\r\n                description: 'Telegram Proxy Secret',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['t.me/s/:username'],\r\n            target: '/channel/:username',\r\n        },\r\n    ],\r\n    name: 'Channel',\r\n    maintainers: ['DIYgod', 'Rongronggg9', 'synchrone', 'pseudoyu'],\r\n    handler,\r\n    description: `\r\n::: tip\r\n  Due to Telegram restrictions, some channels involving pornography, copyright, and politics cannot be subscribed. You can confirm by visiting \\`https://t.me/s/:username\\`, it's recommended to deploy your own instance with telegram api configs (create your telegram application via \\`https://core.telegram.org/api/obtaining_api_id\\`, run this command \\`node ./lib/routes/telegram/scripts/get-telegram-session.mjs\\` to get \\`TELEGRAM_SESSION\\` and set it as Environment Variable).\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const username = ctx.req.param('username');\r\n    let routeParams = ctx.req.param('routeParams');\r\n    let showLinkPreview = true;\r\n    let showViaBot = true;\r\n    let showReplyTo = true;\r\n    let showFwdFrom = true;\r\n    let showFwdFromAuthor = true;\r\n    let showInlineButtons = false;\r\n    let showMediaTagInTitle = true;\r\n    let showMediaTagAsEmoji = true;\r\n    let showHashtagAsHyperlink = true;\r\n    let includeFwd = true;\r\n    let includeReply = true;\r\n    let includeServiceMsg = true;\r\n    let includeUnsupportedMsg = false;\r\n    let searchQuery = routeParams; // for backward compatibility\r\n    if (routeParams && routeParams.search(/(^|&)(show(LinkPreview|ViaBot|ReplyTo|FwdFrom(Author)?|InlineButtons|MediaTag(InTitle|AsEmoji)|HashtagAsHyperlink)|include(Fwd|Reply|(Service|Unsupported)Msg)|searchQuery)=/) !== -1) {\r\n        routeParams = querystring.parse(ctx.req.param('routeParams'));\r\n        showLinkPreview = !!fallback(undefined, queryToBoolean(routeParams.showLinkPreview), showLinkPreview);\r\n        showViaBot = !!fallback(undefined, queryToBoolean(routeParams.showViaBot), showViaBot);\r\n        showReplyTo = !!fallback(undefined, queryToBoolean(routeParams.showReplyTo), showReplyTo);\r\n        showFwdFrom = !!fallback(undefined, queryToBoolean(routeParams.showFwdFrom), showFwdFrom);\r\n        showFwdFromAuthor = !!fallback(undefined, queryToBoolean(routeParams.showFwdFromAuthor), showFwdFromAuthor);\r\n        showInlineButtons = !!fallback(undefined, queryToBoolean(routeParams.showInlineButtons), showInlineButtons);\r\n        showMediaTagInTitle = !!fallback(undefined, queryToBoolean(routeParams.showMediaTagInTitle), showMediaTagInTitle);\r\n        showMediaTagAsEmoji = !!fallback(undefined, queryToBoolean(routeParams.showMediaTagAsEmoji), showMediaTagAsEmoji);\r\n        showHashtagAsHyperlink = !!fallback(undefined, queryToBoolean(routeParams.showHashtagAsHyperlink), showHashtagAsHyperlink);\r\n        includeFwd = !!fallback(undefined, queryToBoolean(routeParams.includeFwd), includeFwd);\r\n        includeReply = !!fallback(undefined, queryToBoolean(routeParams.includeReply), includeReply);\r\n        includeServiceMsg = !!fallback(undefined, queryToBoolean(routeParams.includeServiceMsg), includeServiceMsg);\r\n        includeUnsupportedMsg = !!fallback(undefined, queryToBoolean(routeParams.includeUnsupportedMsg), includeUnsupportedMsg);\r\n        searchQuery = fallback(undefined, routeParams.searchQuery, null);\r\n    }\r\n\r\n    // some channels are not available in t.me/s/, fallback to use Telegram api\r\n    const resourceUrl = searchQuery ? `https://t.me/s/${username}?q=${encodeURIComponent(searchQuery)}` : `https://t.me/s/${username}`;\r\n\r\n    const data = await cache.tryGet(\r\n        resourceUrl,\r\n        async () => {\r\n            const _r = await ofetch(resourceUrl);\r\n            return _r;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    );\r\n\r\n    const $ = load(data as string);\r\n\r\n    /*\r\n     * Since 2024/4/20, t.me/s/ mistakenly have every '&' in **hyperlinks** replaced by '&amp;'.\r\n     * The characteristic of a hyperlink is [onclick] (pop-up confirmation), which is not present in ordinary links.\r\n     * This is a workaround to fix the issue until Telegram fixes it.\r\n     */\r\n    $('a[onclick][href]').each((_, elem) => {\r\n        const $elem = $(elem);\r\n        const href = $elem.attr('href');\r\n        href && $elem.attr('href', href.replaceAll('&amp;', '&'));\r\n    });\r\n\r\n    !showHashtagAsHyperlink &&\r\n        $('a[href^=\"?q=%23\"]').each((_, elem) => {\r\n            const $elem = $(elem);\r\n            $elem.replaceWith($elem.text());\r\n        });\r\n\r\n    const list = includeServiceMsg\r\n        ? $('.tgme_widget_message_wrap:not(.tgme_widget_message_wrap:has(.tme_no_messages_found))') // exclude 'no posts found' messages\r\n        : $('.tgme_widget_message_wrap:not(.tgme_widget_message_wrap:has(.service_message,.tme_no_messages_found))'); // also exclude service messages\r\n\r\n    if (list.length === 0 && $('.tgme_channel_history').length === 0) {\r\n        if (config.telegram.session) {\r\n            return tglibchannel(ctx);\r\n        }\r\n\r\n        throw new Error(`Unable to fetch message feed from this channel. Please check this URL to see if you can view the message preview: ${resourceUrl}`);\r\n    }\r\n\r\n    const channelName = $('.tgme_channel_info_header_title').text();\r\n    const feedTitle = (searchQuery ? `\"${searchQuery}\" - ` : '') + channelName + ' - Telegram Channel';\r\n\r\n    return {\r\n        title: feedTitle,\r\n        description: $('.tgme_channel_info_description').text(),\r\n        link: resourceUrl,\r\n        allowEmpty: true,\r\n\r\n        itunes_author: channelName,\r\n        image: $('.tgme_page_photo_image > img').attr('src'),\r\n\r\n        item: list\r\n            .toArray()\r\n            .map((item) => {\r\n                item = $(item);\r\n                let extra = null;\r\n\r\n                /* message types */\r\n                let msgTypes = [];\r\n                if (item.find('.service_message').length) {\r\n                    // service message can have an image (avatar changed)\r\n                    msgTypes.push(SERVICE);\r\n                }\r\n                // if (item.find('.tgme_widget_message_video').length) {  // fail if video too big\r\n                if (item.find('.tgme_widget_message_video_player').length) {\r\n                    // video and gif cannot be mixed, it's safe to do that\r\n                    msgTypes.push(item.find('.message_video_play').length ? VIDEO : GIF);\r\n                }\r\n                if (item.find('.tgme_widget_message_photo,.tgme_widget_message_service_photo').length) {\r\n                    // video and photo can be mixed\r\n                    msgTypes.push(PHOTO);\r\n                }\r\n                // all other types below cannot be mixed\r\n                if (item.find('.tgme_widget_message_poll').length) {\r\n                    msgTypes.push(POLL);\r\n                }\r\n                if (item.find('.tgme_widget_message_voice').length) {\r\n                    msgTypes.push(VOICE);\r\n                }\r\n                if (item.find('.tgme_widget_message_document').length) {\r\n                    // music and document cannot be mixed, it's safe to do that\r\n                    msgTypes.push(item.find('.audio').length ? MUSIC : DOCUMENT);\r\n                }\r\n                if (item.find('.tgme_widget_message_location').length) {\r\n                    msgTypes.push(LOCATION);\r\n                }\r\n                if (item.find('.tgme_widget_message_contact').length) {\r\n                    msgTypes.push(CONTACT);\r\n                }\r\n                if (item.find('.tgme_widget_message_sticker').length) {\r\n                    msgTypes.push(STICKER);\r\n                }\r\n                if (item.find('.tgme_widget_message_tgsticker').length) {\r\n                    msgTypes.push(ANIMATED_STICKER);\r\n                }\r\n                if (item.find('.tgme_widget_message_videosticker').length) {\r\n                    msgTypes.push(VIDEO_STICKER);\r\n                }\r\n                if (item.find('.message_media_not_supported').length) {\r\n                    if (item.find('.media_supported_cont').length) {\r\n                        msgTypes.unshift(PARTIALLY_UNSUPPORTED);\r\n                    } else {\r\n                        if (msgTypes.length === 0 && !includeUnsupportedMsg) {\r\n                            return null; // drop unsupported message\r\n                        }\r\n                        msgTypes.unshift(UNSUPPORTED);\r\n                    }\r\n                }\r\n                // all other types above cannot be mixed\r\n                if (item.find('.tgme_widget_message_author .tgme_widget_message_via_bot,.tgme_widget_message_forwarded_from .tgme_widget_message_via_bot').length) {\r\n                    // can be mixed with other types, excluding service messages\r\n                    msgTypes.unshift(VIA_BOT);\r\n                }\r\n                if (item.find('.tgme_widget_message_forwarded_from').length) {\r\n                    // can be mixed with other types, excluding service messages and reply messages\r\n                    msgTypes.unshift(FORWARDED);\r\n                    if (!includeFwd) {\r\n                        return null; // drop forwarded message\r\n                    }\r\n                }\r\n                if (item.find('.tgme_widget_message_reply').length) {\r\n                    // can be mixed with other types, excluding service messages and forwarded messages\r\n                    msgTypes.unshift(REPLY);\r\n                    if (!includeReply) {\r\n                        return null; // drop reply message\r\n                    }\r\n                }\r\n\r\n                /* fix emoji */\r\n                item.find('.emoji').each((_, emoji) => {\r\n                    emoji = $(emoji);\r\n                    emoji.replaceWith(`<span class=\"emoji\">${emoji.text()}</span>`);\r\n                });\r\n\r\n                /* \"Forwarded From\" tag */\r\n                const fwdFrom = () => {\r\n                    let fwdFrom = '';\r\n                    const fwdFromNameObj = item.find('.tgme_widget_message_forwarded_from_name');\r\n                    if (fwdFromNameObj.length) {\r\n                        const userLink = fwdFromNameObj.attr('href');\r\n                        const userHtml = userLink ? `<a href=\"${userLink}\">${fwdFromNameObj.text()}</a>` : fwdFromNameObj.text();\r\n                        fwdFrom += `<p>Forwarded From <b>${userHtml}</b>`;\r\n                        const fwdFromAuthorObj = item.find('.tgme_widget_message_forwarded_from_author');\r\n                        if (fwdFromAuthorObj.length && showFwdFromAuthor) {\r\n                            fwdFrom += ` (${fwdFromAuthorObj.text()})`;\r\n                        }\r\n                        fwdFrom += '</p>';\r\n\r\n                        extra = {\r\n                            links: [\r\n                                {\r\n                                    type: 'repost',\r\n                                    url: userLink,\r\n                                },\r\n                            ],\r\n                        };\r\n                    }\r\n                    return fwdFrom;\r\n                };\r\n\r\n                /* reply */\r\n                const replyContent = () => {\r\n                    const replyObj = item.find('.tgme_widget_message_reply');\r\n                    if (replyObj.length === 0) {\r\n                        return '';\r\n                    } else {\r\n                        const replyAuthorObj = replyObj.find('.tgme_widget_message_author_name');\r\n                        const replyAuthor = replyAuthorObj.length ? replyAuthorObj.text() : '';\r\n                        const viaBotObj = replyObj.find('.tgme_widget_message_via_bot');\r\n                        const viaBotText = viaBotObj.length ? ` via <b>${viaBotObj.text()}</b>` : '';\r\n                        const replyLinkHref = replyObj.attr('href');\r\n                        const replyLink = replyLinkHref.length ? replyLinkHref : '';\r\n                        const replyMetaTextObj = replyObj.find('.tgme_widget_message_metatext');\r\n                        const replyMetaText = replyMetaTextObj.length ? `<p><small>${replyMetaTextObj.html()}</small></p>` : '';\r\n                        const replyTextObj = replyObj.find('.tgme_widget_message_text');\r\n                        const replyText = replyTextObj.length ? `<p>${replyTextObj.html()}</p>` : '';\r\n\r\n                        extra = {\r\n                            links: [\r\n                                {\r\n                                    type: 'reply',\r\n                                    url: replyLink,\r\n                                },\r\n                            ],\r\n                        };\r\n                        return replyLink === ''\r\n                            ? `<div class=\"rsshub-quote\"><blockquote>\r\n                                    <p><b>${replyAuthor}</b>${viaBotText}:</p>\r\n                                    ${replyMetaText}\r\n                                    ${replyText}\r\n                                </blockquote></div>`\r\n                            : `<div class=\"rsshub-quote\"><blockquote>\r\n                                    <p><a href='${replyLink}'><b>${replyAuthor}</b>${viaBotText}:</a></p>\r\n                                    ${replyMetaText}\r\n                                    ${replyText}\r\n                                </blockquote></div>`;\r\n                    }\r\n                };\r\n\r\n                /* via bot */\r\n                const viaBot = () => {\r\n                    const viaBotObj = item.find('.tgme_widget_message_author .tgme_widget_message_via_bot,.tgme_widget_message_forwarded_from .tgme_widget_message_via_bot');\r\n                    if (viaBotObj.length) {\r\n                        const userLink = viaBotObj.attr('href');\r\n                        const userHtml = userLink ? `<a href=\"${userLink}\">${viaBotObj.text()}</a>` : viaBotObj.text();\r\n                        return `<p>via <b>${userHtml}</b></p>`;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                };\r\n\r\n                /* images and videos */\r\n                const generateMedia = (selector) => {\r\n                    const nodes = item.find(selector);\r\n                    if (!nodes.length) {\r\n                        return '';\r\n                    }\r\n                    let tag_media_all = '';\r\n                    const pictureNodes = nodes.find('picture');\r\n                    const imgNodes = nodes.find('img');\r\n                    nodes.each((_, node) => {\r\n                        const $node = $(node);\r\n                        let tag_media = '';\r\n                        if (node.attribs && node.attribs.class && node.attribs.class.search(/(^|\\s)tgme_widget_message_video_player(\\s|$)/) !== -1) {\r\n                            // video\r\n                            const videoLink = $node.find('.tgme_widget_message_video').attr('src');\r\n                            const thumbBackground = $node.find('.tgme_widget_message_video_thumb').css('background-image');\r\n                            const thumbBackgroundUrl = thumbBackground && thumbBackground.match(/url\\('(.*)'\\)/);\r\n                            const thumbBackgroundUrlSrc = thumbBackgroundUrl && thumbBackgroundUrl[1];\r\n                            tag_media += art(path.join(__dirname, 'templates/video.art'), {\r\n                                source: videoLink,\r\n                                poster: thumbBackgroundUrlSrc,\r\n                            });\r\n                        } else if ($node.attr('data-webp')) {\r\n                            // sticker\r\n                            tag_media += `<img src=\"${$node.attr('data-webp')}\">`;\r\n                        } else if (node.name === 'picture') {\r\n                            // animated sticker\r\n                            tag_media += '<picture>';\r\n                            $node.find('source,img').each((_, source) => {\r\n                                tag_media += $(source).toString();\r\n                            });\r\n                            tag_media += '</picture>';\r\n                        } else if (node.attribs && node.attribs.class && node.attribs.class.search(/(^|\\s)tgme_widget_message_videosticker(\\s|$)/) !== -1) {\r\n                            // video sticker\r\n                            const videoLink = $node.find('.js-videosticker_video').attr('src');\r\n                            tag_media += art(path.join(__dirname, 'templates/video.art'), {\r\n                                source: videoLink,\r\n                            });\r\n                        } else if (node.name === 'img') {\r\n                            // unknown\r\n                            tag_media += $node.toString();\r\n                        } else if (pictureNodes.length) {\r\n                            // unknown\r\n                            pictureNodes.each((_, picture) => {\r\n                                tag_media += '<picture>';\r\n                                $(picture)\r\n                                    .find('source,img')\r\n                                    .each((_, source) => {\r\n                                        tag_media += $(source).toString();\r\n                                    });\r\n                                tag_media += '</picture>';\r\n                            });\r\n                        } else if (imgNodes.length) {\r\n                            // service message\r\n                            imgNodes.each((_, img) => {\r\n                                tag_media += $(img).toString();\r\n                            });\r\n                        } else {\r\n                            // image message, location\r\n                            const background = $node.css('background-image');\r\n                            const backgroundUrl = background && background.match(/url\\('(.*)'\\)/);\r\n                            const backgroundUrlSrc = backgroundUrl && backgroundUrl[1];\r\n                            const attrs = [`src=\"${backgroundUrlSrc}\"`];\r\n                            /*\r\n                             * If the width is not in px, it is either a percentage (Link Preview/Instant view)\r\n                             * or absent (ditto).\r\n                             * Only accept px to prevent images from being invisible or too small.\r\n                             */\r\n                            let width = 0;\r\n                            const widthStr = $node.css('width');\r\n                            if (widthStr && widthStr.endsWith('px')) {\r\n                                width = Number.parseFloat(widthStr);\r\n                            }\r\n                            /*\r\n                             * Height is present when the message is an album but does not exist in other cases.\r\n                             * Ditto, only accept px.\r\n                             * !!!NOTE: images in albums may have smaller width and height.\r\n                             */\r\n                            let height = 0;\r\n                            const heightStr = $node.css('height');\r\n                            if (heightStr && heightStr.endsWith('px')) {\r\n                                height = Number.parseFloat(heightStr);\r\n                            }\r\n                            /*\r\n                             * Only calculate height when needed.\r\n                             * The aspect ratio is either a percentage (single image) or absent (Link Preview).\r\n                             * Only accept percentage to prevent images from being invisible or distorted.\r\n                             */\r\n                            const aspectRatioStr = $node.find('.tgme_widget_message_photo').css('padding-top');\r\n                            if (height <= 0 && width > 0 && aspectRatioStr && aspectRatioStr.endsWith('%')) {\r\n                                height = (Number.parseFloat(aspectRatioStr) / 100) * width;\r\n                            }\r\n                            // Only set width/height when >32 to avoid invisible images.\r\n                            width > 32 && attrs.push(`width=\"${width}\"`);\r\n                            height > 32 && attrs.push(`height=\"${height.toFixed(2).replace('.00', '')}\"`);\r\n                            tag_media += backgroundUrlSrc ? `<img ${attrs.join(' ')}>` : '';\r\n                        }\r\n                        if (tag_media) {\r\n                            tag_media_all += tag_media;\r\n                            $node.find('.message_media_not_supported').remove();\r\n                        }\r\n                    });\r\n                    return tag_media_all;\r\n                };\r\n                // ordinary message photos, service message photos, stickers, animated stickers, video\r\n                const messageMedia = generateMedia(\r\n                    '.tgme_widget_message_photo_wrap,.tgme_widget_message_service_photo,.tgme_widget_message_sticker,.tgme_widget_message_tgsticker,.tgme_widget_message_videosticker,.tgme_widget_message_video_player'\r\n                );\r\n\r\n                /* location */\r\n                const location = () => {\r\n                    const locationObj = item.find('.tgme_widget_message_location_wrap');\r\n                    if (locationObj.length) {\r\n                        const locationLink = locationObj.attr('href');\r\n                        const mapBackground = locationObj.find('.tgme_widget_message_location').css('background-image');\r\n                        const mapBackgroundUrl = mapBackground && mapBackground.match(/url\\('(.*)'\\)/);\r\n                        const mapBackgroundUrlSrc = mapBackgroundUrl && mapBackgroundUrl[1];\r\n                        const mapImgHtml = mapBackgroundUrlSrc ? `<img src=\"${mapBackgroundUrlSrc}\">` : showMediaTagAsEmoji ? mediaTagDict[LOCATION][1] : mediaTagDict[LOCATION][0];\r\n                        return locationLink ? `<a href=\"${locationLink}\">${mapImgHtml}</a>` : mapImgHtml;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                };\r\n\r\n                /* voice */\r\n                const voiceObj = item.find('audio.tgme_widget_message_voice');\r\n                const durationObj = item.find('.tgme_widget_message_voice_duration');\r\n                const durationInMmss = durationObj.text();\r\n                const voiceUrl = voiceObj.length ? voiceObj.attr('src') : '';\r\n                let voiceTitle = '';\r\n                let voiceHtml = '';\r\n                if (voiceUrl) {\r\n                    if (showMediaTagInTitle) {\r\n                        voiceTitle = durationInMmss ? `(${durationInMmss})` : '';\r\n                    }\r\n                    voiceHtml += '<p><b>';\r\n                    voiceHtml += showMediaTagAsEmoji ? mediaTagDict[VOICE][1] : mediaTagDict[VOICE][0];\r\n                    voiceHtml += durationInMmss ? ` (${durationInMmss})` : '';\r\n                    voiceHtml += '</b></p>';\r\n                    voiceHtml += `<audio src=\"${voiceUrl}\"></audio>`;\r\n                }\r\n                const voiceDuration = () => {\r\n                    if (durationObj.length) {\r\n                        const p = durationInMmss.split(':');\r\n                        let second = 0,\r\n                            minute = 1;\r\n                        while (p.length > 0) {\r\n                            second += minute * Number.parseInt(p.pop(), 10);\r\n                            minute *= 60;\r\n                        }\r\n                        return second.toString();\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                };\r\n\r\n                /* link preview */\r\n                const linkPreview = () => {\r\n                    const linkPreviewSiteObj = item.find('.link_preview_site_name');\r\n                    const linkPreviewSite = linkPreviewSiteObj.length ? `<b>${linkPreviewSiteObj.text()}</b><br>` : '';\r\n                    const linkPreviewTitleObj = item.find('.link_preview_title');\r\n                    const linkPreviewTitle = linkPreviewTitleObj.length ? `<b><a href=\"${item.find('.tgme_widget_message_link_preview').attr('href')}\">${linkPreviewTitleObj.text()}</a></b><br>` : '';\r\n                    const linkPreviewDescriptionObj = item.find('.link_preview_description');\r\n                    const linkPreviewDescription = linkPreviewDescriptionObj.length ? `<p>${linkPreviewDescriptionObj.html()}</p>` : '';\r\n                    const linkPreviewImage = generateMedia('.link_preview_image') + generateMedia('.link_preview_right_image');\r\n\r\n                    return linkPreviewSite.length > 0 || linkPreviewTitle.length > 0 || linkPreviewDescription.length > 0 || linkPreviewImage.length > 0\r\n                        ? `<blockquote>${linkPreviewSite}${linkPreviewTitle}${linkPreviewDescription}${linkPreviewImage}</blockquote>`\r\n                        : '';\r\n                };\r\n\r\n                /* poll */\r\n                const pollQuestionObj = item.find('.tgme_widget_message_poll_question');\r\n                const pollQuestion = pollQuestionObj.length ? pollQuestionObj.text() : '';\r\n                const poll = () => {\r\n                    let pollHtml = '';\r\n                    const pollTypeObj = item.find('.tgme_widget_message_poll_type');\r\n                    const pollType = pollTypeObj.length ? pollTypeObj.text() : '';\r\n                    const pollOptions = item.find('.tgme_widget_message_poll_option');\r\n                    if (pollQuestion && pollType.length > 0 && pollOptions.length > 0) {\r\n                        pollHtml += `<p><b>${pollQuestion}</b></p>`;\r\n                        pollHtml += `<p><small>${pollType}</small></p>`;\r\n                        pollOptions.each((_, option) => {\r\n                            const $option = $(option);\r\n                            const percentObj = $option.find('.tgme_widget_message_poll_option_percent');\r\n                            const percent = percentObj.length ? percentObj.text() : '';\r\n                            const textObj = $option.find('.tgme_widget_message_poll_option_text');\r\n                            const text = textObj.length ? textObj.text() : '';\r\n                            if (percent && text) {\r\n                                pollHtml += `<p><b>${percent}</b> - ${text}</p>`;\r\n                            }\r\n                        });\r\n                    }\r\n                    return pollHtml ? `<blockquote>${pollHtml}</blockquote>` : '';\r\n                };\r\n\r\n                /* attachment (document or music) */\r\n                const documentWrapObj = item.find('.tgme_widget_message_document_wrap');\r\n                let attachmentTitle = '';\r\n                let attachmentHtml = '';\r\n                if (documentWrapObj.length) {\r\n                    documentWrapObj.each((_, wrap) => {\r\n                        // a message may have multiple attachments\r\n                        const $wrap = $(wrap);\r\n                        const documentTitleObj = $wrap.find('.tgme_widget_message_document_title');\r\n                        const documentExtraObj = $wrap.find('.tgme_widget_message_document_extra');\r\n                        const documentTitle = documentTitleObj.length ? documentTitleObj.text() : '';\r\n                        const documentExtra = documentExtraObj.length ? documentExtraObj.text() : '';\r\n                        const _attachmentTitle = `${documentTitle}${documentTitle && documentExtra ? ' - ' : ''}${documentExtra}`;\r\n                        const _attachmentHtml = (documentTitle ? `<p><b>${documentTitle}</b></p>` : '') + (documentExtra ? `<p><small>${documentExtra}</small></p>` : '');\r\n                        attachmentTitle += attachmentTitle && _attachmentTitle ? ' | ' : '';\r\n                        attachmentTitle += _attachmentTitle;\r\n                        attachmentHtml += _attachmentHtml ? `<blockquote>${_attachmentHtml}</blockquote>` : '';\r\n                        const wrapNext = $wrap.next('.tgme_widget_message_text');\r\n                        if (wrapNext.length) {\r\n                            const captionHtml = wrapNext.html();\r\n                            if (captionHtml.length) {\r\n                                attachmentHtml += `<p>${captionHtml}</p>`;\r\n                            }\r\n                            // remove them, avoid being duplicated\r\n                            wrapNext.each((_, caption) => {\r\n                                $(caption).remove();\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                /* contact */\r\n                const contactNameObj = item.find('.tgme_widget_message_contact_name');\r\n                const contactName = contactNameObj.length ? contactNameObj.text() : '';\r\n                const contactNameHtml = contactName ? `<b>${contactName}</b>` : '';\r\n                const contactPhoneObj = item.find('.tgme_widget_message_contact_phone');\r\n                const contactPhone = contactPhoneObj.length ? contactPhoneObj.text() : '';\r\n                const contactPhoneHtml = contactPhone ? `<a href=\"tel:${contactPhone.replace(' ', '')}\">${contactPhone}</a>` : '';\r\n                const contactTitle = contactName + (contactName && contactPhone ? ': ' : '') + contactPhone;\r\n                const contactHtml = contactNameHtml || contactPhoneHtml ? `<p>${contactNameHtml}${contactName && contactPhone ? ': ' : ''}${contactPhoneHtml}</p>` : '';\r\n\r\n                /* inline buttons */\r\n                let inlineButtons = '';\r\n                const inlineButtonNodes = item.find('.tgme_widget_message_inline_button_text');\r\n                if (showInlineButtons && inlineButtonNodes.length) {\r\n                    inlineButtons += '<table style=\"width: 100%\"><tbody><tr>';\r\n                    inlineButtonNodes.each((_, button) => {\r\n                        const $button = $(button);\r\n                        const buttonText = $button.text();\r\n                        inlineButtons += `<td style=\"border: 2px solid;text-align: center\"><b>${buttonText}</b></td>`;\r\n                    });\r\n                    inlineButtons += '</tr></tbody></table>';\r\n                }\r\n\r\n                /* unsupported */\r\n                let unsupportedHtml = '';\r\n                let unsupportedTitle = '';\r\n                const unsupportedNodes = item.find('.message_media_not_supported');\r\n                if (msgTypes.includes(UNSUPPORTED)) {\r\n                    if (unsupportedNodes.length) {\r\n                        unsupportedHtml += '<blockquote>';\r\n                        unsupportedNodes.find('.message_media_not_supported_label').each(function () {\r\n                            const $this = $(this);\r\n                            unsupportedTitle += $this.text();\r\n                            unsupportedHtml += `<p>${$this.text()}</p>`;\r\n                        });\r\n                        unsupportedNodes.find('.message_media_view_in_telegram').each(function () {\r\n                            const $this = $(this);\r\n                            unsupportedHtml += $this.attr('href') ? `<p><a href=\"${$this.attr('href')}\">${$this.text()}</a></p>` : `<p>${$this.text()}</p>`;\r\n                        });\r\n                        unsupportedHtml += '</blockquote>';\r\n                    } else {\r\n                        // remove unsupported type, previous parsing has proved that it is not unsupported\r\n                        msgTypes = msgTypes.filter((type) => type !== UNSUPPORTED);\r\n                    }\r\n                }\r\n\r\n                /* pubDate */\r\n                const pubDate = parseDate(item.find('.tgme_widget_message_date time').attr('datetime'));\r\n\r\n                /* ----- finished parsing ----- */\r\n\r\n                /* media tag */\r\n                let mediaTag = '';\r\n                if (showMediaTagInTitle) {\r\n                    for (const type of msgTypes) {\r\n                        if (type !== REPLY || type !== FORWARDED || type !== VIA_BOT || (type === REPLY && showReplyTo) || (type === FORWARDED && showFwdFrom) || (type === VIA_BOT && showViaBot)) {\r\n                            mediaTag += showMediaTagAsEmoji ? mediaTagDict[type][1] : mediaTagDict[type][0];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /* message text & title */\r\n                const messageTextObj = item.find(`.${msgTypes.includes(PARTIALLY_UNSUPPORTED) ? 'media_supported_cont' : 'tgme_widget_message_bubble'} > .tgme_widget_message_text`);\r\n                let messageHtml = '',\r\n                    messageTitle = '';\r\n\r\n                if (messageTextObj.length > 0) {\r\n                    messageHtml = `<p>${messageTextObj.html()}</p>`;\r\n                }\r\n\r\n                let titleCompleteFlag = false;\r\n                if (pollQuestion) {\r\n                    messageTitle = pollQuestion;\r\n                    titleCompleteFlag = true;\r\n                } else if (attachmentTitle) {\r\n                    messageTitle = attachmentTitle;\r\n                    titleCompleteFlag = true;\r\n                } else if (contactTitle) {\r\n                    messageTitle = contactTitle;\r\n                    titleCompleteFlag = true;\r\n                } else if (voiceTitle) {\r\n                    messageTitle = voiceTitle;\r\n                } else if (unsupportedTitle) {\r\n                    messageTitle = unsupportedTitle;\r\n                    titleCompleteFlag = true;\r\n                }\r\n\r\n                if (messageTextObj.length > 0 && !titleCompleteFlag) {\r\n                    const _messageTextObj = $(messageTextObj.toString());\r\n                    _messageTextObj.find('br').replaceWith('\\n');\r\n                    const trimmedTitleText = _messageTextObj.text().split('\\n').at(0)?.trim();\r\n                    messageTitle += (messageTitle && trimmedTitleText ? ': ' : '') + trimmedTitleText;\r\n                }\r\n\r\n                messageTitle = messageTitle === '' ? mediaTag || pubDate.toUTCString() : `${mediaTag}${mediaTag ? ' ' : ''}${messageTitle}`;\r\n\r\n                let description = '';\r\n                if (showFwdFrom) {\r\n                    description += fwdFrom();\r\n                }\r\n                if (showReplyTo) {\r\n                    description += replyContent();\r\n                }\r\n                if (showViaBot) {\r\n                    description += viaBot();\r\n                }\r\n                description += location() + poll() + contactHtml + voiceHtml + attachmentHtml + messageHtml + unsupportedHtml;\r\n                if (showLinkPreview) {\r\n                    description += linkPreview();\r\n                }\r\n                description += inlineButtons + messageMedia;\r\n\r\n                return {\r\n                    title: messageTitle,\r\n                    description,\r\n                    pubDate,\r\n                    link: item.find('.tgme_widget_message_date').attr('href'),\r\n                    author: item.find('.tgme_widget_message_from_author').text(),\r\n\r\n                    enclosure_url: voiceUrl,\r\n                    itunes_duration: voiceDuration(),\r\n                    enclosure_type: 'audio/ogg',\r\n\r\n                    _extra: extra,\r\n                };\r\n            })\r\n            .filter(Boolean)\r\n            .toReversed(),\r\n    };\r\n}\r\n"],"mappings":"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"}