{"version":3,"file":"tag-Bvp_syND.js","names":["route: Route","cache","got","tagInfo"],"sources":["../../lib/routes/followin/tag.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { apiUrl, baseUrl, getBParam, getBuildId, getGToken, parseList, parseItem } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: '/tag/:tagId/:lang?',\r\n    categories: ['finance'],\r\n    example: '/followin/tag/177008',\r\n    parameters: { tagId: 'Tag ID, can be found in URL', lang: 'Language, see table above, `en` by default' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['followin.io/:lang/tag/:tagId', 'followin.io/tag/:tagId'],\r\n        },\r\n    ],\r\n    name: 'Tag',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { tagId, lang = 'en' } = ctx.req.param();\r\n    const { limit = 20 } = ctx.req.query();\r\n\r\n    const buildId = await getBuildId(cache.tryGet);\r\n    const tagInfo = await cache.tryGet(`followin:tag:${tagId}:${lang}`, async () => {\r\n        const { data: response } = await got(`${baseUrl}/_next/data/${buildId}/${lang}/tag/${tagId}.json`);\r\n        const { queries } = response.pageProps.dehydratedState;\r\n        const { base_info: tagInfo } = queries.find((q) => q.queryKey[0] === '/tag/info/v2').state.data;\r\n        return tagInfo;\r\n    });\r\n\r\n    const gToken = await getGToken(cache.tryGet);\r\n    const bParam = getBParam(lang);\r\n    const { data: tagResponse } = await got.post(`${apiUrl}/feed/list/tag`, {\r\n        headers: {\r\n            'x-bparam': JSON.stringify(bParam),\r\n            'x-gtoken': gToken,\r\n        },\r\n        json: {\r\n            count: limit,\r\n            id: Number.parseInt(tagId),\r\n            type: 'tag_discussion_feed',\r\n        },\r\n    });\r\n    if (tagResponse.code !== 2000) {\r\n        throw new Error(tagResponse.msg);\r\n    }\r\n\r\n    const list = parseList(tagResponse.data.list.slice(0, limit), lang, buildId);\r\n    const items = await Promise.all(list.map((item) => parseItem(item, cache.tryGet)));\r\n\r\n    return {\r\n        title: `${tagInfo.name} - Followin`,\r\n        description: tagInfo.description,\r\n        link: `${baseUrl}/${lang}/tag/${tagId}`,\r\n        image: tagInfo.logo,\r\n        language: lang,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"wdAKA,MAAaA,EAAe,CACxB,KAAM,qBACN,WAAY,CAAC,WACb,QAAS,uBACT,WAAY,CAAE,MAAO,8BAA+B,KAAM,8CAC1D,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,+BAAgC,4BAGjD,KAAM,MACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,QAAO,OAAO,MAAS,EAAI,IAAI,QACjC,CAAE,QAAQ,IAAO,EAAI,IAAI,QAEzB,EAAU,MAAM,EAAWC,EAAM,QACjC,EAAU,MAAMA,EAAM,OAAO,gBAAgB,EAAM,GAAG,IAAQ,SAAY,CAC5E,GAAM,CAAE,KAAM,GAAa,MAAMC,EAAI,GAAG,EAAQ,cAAc,EAAQ,GAAG,EAAK,OAAO,EAAM,QACrF,CAAE,WAAY,EAAS,UAAU,gBACjC,CAAE,UAAWC,GAAY,EAAQ,KAAM,GAAM,EAAE,SAAS,KAAO,gBAAgB,MAAM,KAC3F,OAAOA,IAGL,EAAS,MAAM,EAAUF,EAAM,QAC/B,EAAS,EAAU,GACnB,CAAE,KAAM,GAAgB,MAAMC,EAAI,KAAK,GAAG,EAAO,gBAAiB,CACpE,QAAS,CACL,WAAY,KAAK,UAAU,GAC3B,WAAY,GAEhB,KAAM,CACF,MAAO,EACP,GAAI,OAAO,SAAS,GACpB,KAAM,yBAGd,GAAI,EAAY,OAAS,IACrB,MAAU,MAAM,EAAY,KAGhC,IAAM,EAAO,EAAU,EAAY,KAAK,KAAK,MAAM,EAAG,GAAQ,EAAM,GAC9D,EAAQ,MAAM,QAAQ,IAAI,EAAK,IAAK,GAAS,EAAU,EAAMD,EAAM,UAEzE,MAAO,CACH,MAAO,GAAG,EAAQ,KAAK,aACvB,YAAa,EAAQ,YACrB,KAAM,GAAG,EAAQ,GAAG,EAAK,OAAO,IAChC,MAAO,EAAQ,KACf,SAAU,EACV,KAAM"}