{"version":3,"file":"authors-C4bQy0Bl.js","names":["ofetch","route: Route","rssParser","item"],"sources":["../../lib/routes/bloomberg/authors.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch';\r\nimport rssParser from '@/utils/rss-parser';\r\nimport { parseArticle } from './utils';\r\nimport pMap from 'p-map';\r\n\r\nconst parseAuthorNewsList = async (slug) => {\r\n    const baseURL = `https://www.bloomberg.com/authors/${slug}`;\r\n    const apiUrl = `https://www.bloomberg.com/lineup/api/lazy_load_author_stories?slug=${slug}&authorType=default&page=1`;\r\n    const resp = await ofetch(apiUrl);\r\n    // Likely rate limited\r\n    if (!resp.html) {\r\n        return [];\r\n    }\r\n    const $ = load(resp.html);\r\n    const articles = $('article.story-list-story');\r\n    return articles.toArray().map((item) => {\r\n        item = $(item);\r\n        const headline = item.find('a.story-list-story__info__headline-link');\r\n        return {\r\n            title: headline.text(),\r\n            pubDate: item.attr('data-updated-at'),\r\n            guid: `bloomberg:${item.attr('data-id')}`,\r\n            link: new URL(headline.attr('href'), baseURL).href,\r\n        };\r\n    });\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/authors/:id/:slug/:source?',\r\n    categories: ['finance'],\r\n    view: ViewType.Articles,\r\n    example: '/bloomberg/authors/ARbTQlRLRjE/matthew-s-levine',\r\n    parameters: { id: 'Author ID, can be found in URL', slug: 'Author Slug, can be found in URL', source: 'Data source, either `api` or `rss`,`api` by default' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.bloomberg.com/*/authors/:id/:slug', 'www.bloomberg.com/authors/:id/:slug'],\r\n            target: '/authors/:id/:slug',\r\n        },\r\n    ],\r\n    name: 'Authors',\r\n    maintainers: ['josh', 'pseudoyu'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { id, slug, source } = ctx.req.param();\r\n    const link = `https://www.bloomberg.com/authors/${id}/${slug}`;\r\n\r\n    let list = [];\r\n    if (!source || source === 'api') {\r\n        list = await parseAuthorNewsList(`${id}/${slug}`);\r\n    }\r\n    // Fallback to rss if api failed or requested by param\r\n    if (source === 'rss' || list.length === 0) {\r\n        list = (await rssParser.parseURL(`${link}.rss`)).items;\r\n    }\r\n\r\n    const item = await pMap(list, (item) => parseArticle(item), { concurrency: 1 });\r\n    const authorName = item.find((i) => i.author)?.author ?? slug;\r\n\r\n    return {\r\n        title: `Bloomberg - ${authorName}`,\r\n        link,\r\n        language: 'en-us',\r\n        item,\r\n    };\r\n}\r\n"],"mappings":"ihBAOA,MAAM,EAAsB,KAAO,IAAS,CACxC,IAAM,EAAU,qCAAqC,IAC/C,EAAS,sEAAsE,EAAK,4BACpF,EAAO,MAAMA,EAAO,GAE1B,GAAI,CAAC,EAAK,KACN,MAAO,GAEX,IAAM,EAAI,EAAK,EAAK,MACd,EAAW,EAAE,4BACnB,OAAO,EAAS,UAAU,IAAK,GAAS,CACpC,EAAO,EAAE,GACT,IAAM,EAAW,EAAK,KAAK,2CAC3B,MAAO,CACH,MAAO,EAAS,OAChB,QAAS,EAAK,KAAK,mBACnB,KAAM,aAAa,EAAK,KAAK,aAC7B,KAAM,IAAI,IAAI,EAAS,KAAK,QAAS,GAAS,SAK7CC,EAAe,CACxB,KAAM,8BACN,WAAY,CAAC,WACb,KAAM,EAAS,SACf,QAAS,kDACT,WAAY,CAAE,GAAI,iCAAkC,KAAM,mCAAoC,OAAQ,uDACtG,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,wCAAyC,uCAClD,OAAQ,uBAGhB,KAAM,UACN,YAAa,CAAC,OAAQ,YACtB,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,KAAI,OAAM,UAAW,EAAI,IAAI,QAC/B,EAAO,qCAAqC,EAAG,GAAG,IAEpD,EAAO,IACP,CAAC,GAAU,IAAW,SACtB,EAAO,MAAM,EAAoB,GAAG,EAAG,GAAG,OAG1C,IAAW,OAAS,EAAK,SAAW,KACpC,GAAQ,MAAMC,EAAU,SAAS,GAAG,EAAK,QAAQ,OAGrD,IAAM,EAAO,MAAM,EAAK,EAAO,GAAS,EAAaC,GAAO,CAAE,YAAa,IACrE,EAAa,EAAK,KAAM,GAAM,EAAE,SAAS,QAAU,EAEzD,MAAO,CACH,MAAO,eAAe,IACtB,OACA,SAAU,QACV"}