{"version":3,"file":"layoffs-DS0SEYul.js","names":["route: Route","cache","got"],"sources":["../../lib/routes/layoffs/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst ROW_COUNT = 100;\r\n\r\nconst WEBSITE_URL = 'https://layoffs.fyi';\r\nconst ENTRY_URL = 'https://airtable.com/embed/shrqYt5kSqMzHV9R5/tbl8c8kanuNB6bPYr';\r\nconst AIRTABLE_HOST = 'https://airtable.com';\r\n\r\n/**\r\n * getMapping can convert either an array or an object\r\n * of a specific structure into a Map, where the key is\r\n * the name and the value is the Id. It will only parse\r\n * entries with 'name' and 'id' in it\r\n *\r\n * Inputs:\r\n *   obj = [{name: 'Apple', id: 1}, {name: 'Peach', id: 2}]\r\n * Returns:\r\n *   [{1: 'Apple', 2: 'Peach'}, {Apple: 1, Peach: 2}]\r\n *\r\n * Inputs:\r\n *   obj = {Apple: {name: 'Apple', id: 1}, Peach: {name: 'Peach', id: 2}}\r\n * Returns:\r\n *   [{1: 'Apple', 2: 'Peach'}, {Apple: 1, Peach: 2}]\r\n */\r\nconst getMappings = function (obj) {\r\n    const mapping = new Map();\r\n    const reverseMapping = new Map();\r\n    for (const key in obj) {\r\n        if ('name' in obj[key] && 'id' in obj[key]) {\r\n            reverseMapping.set(obj[key].name, obj[key].id);\r\n            mapping.set(obj[key].id, obj[key].name);\r\n        }\r\n    }\r\n    return [mapping, reverseMapping];\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/',\r\n    radar: [\r\n        {\r\n            source: ['layoffs.fyi/'],\r\n            target: '',\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: ['BrandNewLifeJackie26'],\r\n    handler,\r\n    url: 'layoffs.fyi/',\r\n};\r\n\r\nasync function handler() {\r\n    const headers = {\r\n        'x-airtable-application-id': 'app1PaujS9zxVGUZ4',\r\n        'x-airtable-inter-service-client': 'webClient',\r\n        'x-requested-with': 'XMLHttpRequest',\r\n        'x-time-zone': 'America/Los_Angeles',\r\n    };\r\n\r\n    // Get the latest data source url\r\n    let dataSourceUrl = await cache.get(ENTRY_URL);\r\n    let cacheInvalid = false;\r\n    let response;\r\n    if (dataSourceUrl) {\r\n        // Try to fetch data,\r\n        // it may fail due to outdated url\r\n        try {\r\n            response = await got({\r\n                method: 'get',\r\n                url: dataSourceUrl,\r\n                headers,\r\n            });\r\n            if (response.statusCode >= 400) {\r\n                cacheInvalid = true;\r\n            }\r\n        } catch {\r\n            cacheInvalid = true;\r\n        }\r\n    } else {\r\n        cacheInvalid = true;\r\n    }\r\n\r\n    if (cacheInvalid) {\r\n        // Refetch the data source link from entry page\r\n        const sourcePage = await got({\r\n            method: 'get',\r\n            url: ENTRY_URL,\r\n        });\r\n        const $ = load(sourcePage.data);\r\n        dataSourceUrl =\r\n            AIRTABLE_HOST +\r\n            $('script')\r\n                .text()\r\n                .match(/urlWithParams: \"(.*?)\"/)[1]\r\n                .replaceAll(String.raw`\\u002F`, '/');\r\n\r\n        // Cache it again\r\n        cache.set(ENTRY_URL, dataSourceUrl);\r\n\r\n        // Refetch the data source\r\n        response = await got({\r\n            method: 'get',\r\n            url: dataSourceUrl,\r\n            headers,\r\n        });\r\n    }\r\n\r\n    // Get data from data source\r\n    const data = response.data.data;\r\n    const table = data.table;\r\n\r\n    // Columns are represented by special IDs\r\n    const columnReverseMapping = getMappings(table.columns)[1];\r\n\r\n    const companyColumnId = columnReverseMapping.get('Company');\r\n    const dateAddedColumnId = columnReverseMapping.get('Date Added');\r\n    const numOfLaidOffColumnId = columnReverseMapping.get('# Laid Off');\r\n    const sourceColumnId = columnReverseMapping.get('Source');\r\n    const countryColumnId = columnReverseMapping.get('Country');\r\n    const countryMapping = getMappings(table.columns.find((col) => col.name === 'Country').typeOptions.choices)[0];\r\n\r\n    const rows = table.rows.slice(0, ROW_COUNT);\r\n    return {\r\n        title: 'Tech layoff data feed from layoffs.fyi',\r\n        link: WEBSITE_URL,\r\n        description: 'This feed gets tech layoff data from layoffs.fyi and display them in a user friendly way',\r\n        item: rows.map((row) => {\r\n            const rowContent = row.cellValuesByColumnId;\r\n\r\n            const company = rowContent[companyColumnId];\r\n            const dateAdded = parseDate(rowContent[dateAddedColumnId]);\r\n            const source = rowContent[sourceColumnId];\r\n            const numOfLaidOff = rowContent[numOfLaidOffColumnId] || 'some';\r\n            const country = countryMapping.get(rowContent[countryColumnId]);\r\n\r\n            const title = `${company} Layoffs Happening!`;\r\n            const description = `${company} lays off ${numOfLaidOff} employees in ${country}. For more details, please visit ${source}.`;\r\n\r\n            return {\r\n                title,\r\n                description, // the article content\r\n                pubDate: dateAdded, // Data publish date\r\n                link: source, // Laid off source link\r\n            };\r\n        }),\r\n    };\r\n}\r\n"],"mappings":"wWAMA,MAGM,EAAY,iEAmBZ,EAAc,SAAU,EAAK,CAC/B,IAAM,EAAU,IAAI,IACd,EAAiB,IAAI,IAC3B,IAAK,IAAM,KAAO,EACV,SAAU,EAAI,IAAQ,OAAQ,EAAI,KAClC,EAAe,IAAI,EAAI,GAAK,KAAM,EAAI,GAAK,IAC3C,EAAQ,IAAI,EAAI,GAAK,GAAI,EAAI,GAAK,OAG1C,MAAO,CAAC,EAAS,IAGRA,EAAe,CACxB,KAAM,IACN,MAAO,CACH,CACI,OAAQ,CAAC,gBACT,OAAQ,KAGhB,KAAM,UACN,YAAa,CAAC,wBACd,UACA,IAAK,gBAGT,eAAe,GAAU,CACrB,IAAM,EAAU,CACZ,4BAA6B,oBAC7B,kCAAmC,YACnC,mBAAoB,iBACpB,cAAe,uBAIf,EAAgB,MAAMC,EAAM,IAAI,GAChC,EAAe,GACf,EACJ,GAAI,EAGA,GAAI,CACA,EAAW,MAAMC,EAAI,CACjB,OAAQ,MACR,IAAK,EACL,YAEA,EAAS,YAAc,MACvB,EAAe,SAEf,CACJ,EAAe,QAGnB,EAAe,GAGnB,GAAI,EAAc,CAEd,IAAM,EAAa,MAAMA,EAAI,CACzB,OAAQ,MACR,IAAK,IAEH,EAAI,EAAK,EAAW,MAC1B,EACI,uBACA,EAAE,UACG,OACA,MAAM,0BAA0B,GAChC,WAAW,OAAO,GAAG,SAAU,KAGxC,EAAM,IAAI,EAAW,GAGrB,EAAW,MAAMA,EAAI,CACjB,OAAQ,MACR,IAAK,EACL,YAKR,IAAM,EAAO,EAAS,KAAK,KACrB,EAAQ,EAAK,MAGb,EAAuB,EAAY,EAAM,SAAS,GAElD,EAAkB,EAAqB,IAAI,WAC3C,EAAoB,EAAqB,IAAI,cAC7C,EAAuB,EAAqB,IAAI,cAChD,EAAiB,EAAqB,IAAI,UAC1C,EAAkB,EAAqB,IAAI,WAC3C,EAAiB,EAAY,EAAM,QAAQ,KAAM,GAAQ,EAAI,OAAS,WAAW,YAAY,SAAS,GAEtG,EAAO,EAAM,KAAK,MAAM,EAAG,KACjC,MAAO,CACH,MAAO,yCACP,KAAM,sBACN,YAAa,2FACb,KAAM,EAAK,IAAK,GAAQ,CACpB,IAAM,EAAa,EAAI,qBAEjB,EAAU,EAAW,GACrB,EAAY,EAAU,EAAW,IACjC,EAAS,EAAW,GACpB,EAAe,EAAW,IAAyB,OACnD,EAAU,EAAe,IAAI,EAAW,IAExC,EAAQ,GAAG,EAAQ,qBACnB,EAAc,GAAG,EAAQ,YAAY,EAAa,gBAAgB,EAAQ,mCAAmC,EAAO,GAE1H,MAAO,CACH,QACA,cACA,QAAS,EACT,KAAM"}