{"version":3,"file":"hackernews-BOqyPJov.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/hackernews/index.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/:section?/:type?/:user?',\r\n    categories: ['programming'],\r\n    view: ViewType.Articles,\r\n    example: '/hackernews/threads/comments_list/dang',\r\n    parameters: {\r\n        section: {\r\n            description: 'Content section, default to `index`',\r\n        },\r\n        type: {\r\n            description: 'Link type, default to `sources`',\r\n        },\r\n        user: {\r\n            description: 'Set user, only valid in `threads` and `submitted` sections',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['news.ycombinator.com/:section', 'news.ycombinator.com/'],\r\n        },\r\n    ],\r\n    name: 'User',\r\n    maintainers: ['nczitzk', 'xie-dongping'],\r\n    handler,\r\n    description: `Subscribe to the content of a specific user`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const section = ctx.req.param('section') ?? 'index';\r\n    const type = ctx.req.param('type') ?? 'sources';\r\n    const user = ctx.req.param('user') ?? '';\r\n\r\n    const rootUrl = 'https://news.ycombinator.com';\r\n    const sectionUrl = section === 'index' ? '' : `/${section}`;\r\n    let optUrl = user === '' ? '' : '?id=' + user;\r\n\r\n    if (section === 'over') {\r\n        optUrl = user === '' ? '?points=100' : '?points=' + user;\r\n    }\r\n\r\n    const currentUrl = `${rootUrl}${sectionUrl}${optUrl}`;\r\n    const response = await got(currentUrl);\r\n\r\n    const $ = load(response.data);\r\n\r\n    const list = $('.athing')\r\n        .slice(0, ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 30)\r\n        .toArray()\r\n        .map((thing) => {\r\n            thing = $(thing);\r\n\r\n            const item = {};\r\n\r\n            item.guid = thing.attr('id');\r\n            item.title = thing.find('.titleline').children('a').text();\r\n            item.category = thing.find('.sitestr').text();\r\n            item.author = thing.next().find('.hnuser').text();\r\n            item.pubDate = parseDate(thing.find('.age').attr('title') ?? thing.next().find('.age').attr('title'));\r\n\r\n            item.link = `${rootUrl}/item?id=${item.guid}`;\r\n            item.origin = thing.find('.titleline').children('a').attr('href');\r\n            item.onStory = thing.find('.onstory').text().slice(2);\r\n\r\n            item.comments = thing.next().find('a').last().text().split('Â comment')[0];\r\n            item.upvotes = thing.next().find('.score').text().split(' point')[0];\r\n\r\n            item.currentComment = thing.find('.comment').text();\r\n            item.guid = type === 'sources' ? item.guid : `${item.guid}${item.comments === 'discuss' ? '' : `-${item.comments}`}`;\r\n\r\n            item.description = `<a href=\"${item.link}\">Comments on Hacker News</a> | <a href=\"${item.origin}\">Source</a>`;\r\n\r\n            return item;\r\n        });\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.guid, async () => {\r\n                if (item.comments !== 'discuss' && type === 'comments') {\r\n                    const detailResponse = await got({\r\n                        method: 'get',\r\n                        url: item.link,\r\n                    });\r\n\r\n                    const content = load(detailResponse.data);\r\n\r\n                    content('.reply').remove();\r\n\r\n                    item.description = '';\r\n\r\n                    content('.comtr').each(function () {\r\n                        const author = content(this).find('.hnuser');\r\n                        const comment = content(this).find('.commtext');\r\n\r\n                        item.description +=\r\n                            `<div><div><small><a href=\"${rootUrl}/${author.attr('href')}\">${author.text()}</a></small>` +\r\n                            `&nbsp&nbsp<small><a href=\"${rootUrl}/item?id=${content(this).attr('id')}\">` +\r\n                            `${content(this).find('.age').attr('title')}</a></small></div>`;\r\n\r\n                        const commentText = comment.clone();\r\n\r\n                        commentText.find('p').remove();\r\n                        commentText.html(`<p>${commentText.text()}</p>`);\r\n                        commentText.append(\r\n                            comment\r\n                                .find('p')\r\n                                .toArray()\r\n                                .map((p) => `<p>${content(p).html()}</p>`)\r\n                        );\r\n\r\n                        item.description += `<div>${commentText.html()}</div></div>`;\r\n                    });\r\n                } else if (item.comments !== 'discuss' && type === 'comments_list') {\r\n                    item.title = item.onStory;\r\n                    item.description = item.currentComment;\r\n                }\r\n\r\n                if (Number.isNaN(item.comments)) {\r\n                    item.comments = 0;\r\n                }\r\n\r\n                item.link = type === 'sources' ? item.origin : item.link;\r\n\r\n                delete item.origin;\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: $('title').text(),\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"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"}