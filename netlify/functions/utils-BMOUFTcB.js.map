{"version":3,"file":"utils-BMOUFTcB.js","names":[],"sources":["../../lib/routes/linkedin/models.ts","../../lib/routes/linkedin/utils.ts"],"sourcesContent":["class Job {\r\n    constructor(title, link, company, location, pubDate, recruiter, description) {\r\n        this.title = title;\r\n        this.link = link;\r\n        this.company = company;\r\n        this.location = location;\r\n        this.pubDate = pubDate;\r\n        this.recruiter = recruiter;\r\n        this.description = description;\r\n    }\r\n}\r\n\r\nexport { Job };\r\n","import { load } from 'cheerio';\r\nimport { Job } from './models';\r\nimport dayjs from 'dayjs';\r\n\r\n/**\r\n * Constants\r\n */\r\nconst BASE_URL = 'https://www.linkedin.com';\r\n\r\nconst KEYWORDS_QUERY_KEY = 'keywords';\r\n\r\nconst JOB_TYPES_QUERY_KEY = 'f_JT';\r\n\r\nconst JOB_TYPES = {\r\n    F: 'full-time',\r\n    P: 'part-time',\r\n    C: 'contract',\r\n};\r\n\r\nconst EXP_LEVELS_QUERY_KEY = 'f_E';\r\n\r\nconst EXP_LEVELS = {\r\n    1: 'internship',\r\n    2: 'entry',\r\n    3: 'associate',\r\n    4: 'mid-senior',\r\n    5: 'director',\r\n};\r\n\r\n/**\r\n * Params parsing\r\n */\r\n\r\n/**\r\n * Parse params in route into valid query params\r\n * e.g. /jobs/:keywords/:job_types/:exp_levels\r\n *   if job_types is 'C-T'\r\n *   the output search param is 'C,T', which can be\r\n *   used as search param in query\r\n * @param {String} params params in route (separated by '-')\r\n * @param {Object} map valid value map for this param\r\n * @returns search params separated by ',' that can be used\r\n *   as search param in url\r\n */\r\nfunction parseParamsToSearchParams(params, map) {\r\n    if (!params) {\r\n        return '';\r\n    } // Handle undefined params\r\n\r\n    const validParamValues = params.split('-').filter((v) => v in map);\r\n    return validParamValues.join(',');\r\n}\r\n\r\n/**\r\n * Parse params in route into human readable strings\r\n * e.g. /jobs/:keywords/:job_types/:exp_levels\r\n *   if job_types is 'C-T'\r\n *   the output is 'contract,full-time'\r\n * @param {String} params params in route (separated by '-')\r\n * @param {Object} map valid value map for this param\r\n * @returns param value strings separated by ','\r\n */\r\nfunction parseParamsToString(params, map) {\r\n    if (!params) {\r\n        return '';\r\n    } // Handle undefined params\r\n\r\n    const validParamValues = params\r\n        .split('-')\r\n        .filter((v) => v in map)\r\n        .map((v) => map[v]);\r\n    return validParamValues.join(',');\r\n}\r\n\r\n/**\r\n * HTML page parsing\r\n */\r\n\r\n/**\r\n * Parse job search page\r\n * Example page: https://www.linkedin.com/jobs-guest/jobs/api/seeMoreJobPostings/search?keywords=Software%20Engineer&location=United%20States&locationId=&geoId=103644278&sortBy=R&f_TPR=&position=1&pageNum=0\r\n *\r\n * @param {String} data HTML string of job search page\r\n * @returns {Job[]} Array of jobs with data filled\r\n */\r\nfunction parseJobSearch(data) {\r\n    const $ = load(data);\r\n\r\n    // Parse data\r\n    const jobs = $('li')\r\n        .toArray()\r\n        .map((elem) => {\r\n            const elemHtml = $(elem);\r\n            const link = elemHtml.find('a.base-card__full-link, a.base-card--link')?.attr('href')?.split('?')[0];\r\n            const title = elemHtml.find('h3.base-search-card__title')?.text()?.trim();\r\n            const company = elemHtml.find('h4.base-search-card__subtitle')?.text()?.trim();\r\n            const location = elemHtml.find('span.job-search-card__location')?.text()?.trim();\r\n            const pubDate = elemHtml.find('time')?.attr('datetime');\r\n\r\n            return new Job(title, link, company, location, pubDate);\r\n        });\r\n    return jobs;\r\n}\r\n\r\n/**\r\n * Parse job detail page\r\n * Example page: https://www.linkedin.com/jobs/view/software-engineer-backend-junior-at-genies-3429649821?trk=public_jobs_topcard-title\r\n *\r\n * @param {String} data HTML string of job detail page\r\n * @returns {Job} Job details\r\n */\r\nfunction parseJobDetail(data) {\r\n    const job = new Job();\r\n    const $ = load(data);\r\n\r\n    job.recruiter = $('a.message-the-recruiter__cta').attr(`href`);\r\n    job.description = $('div.description__text description__text--rich').text();\r\n\r\n    return job;\r\n}\r\n\r\nconst parseRouteParam = (searchParam: string | null): string => {\r\n    if (!searchParam || typeof searchParam !== 'string') {\r\n        return 'all';\r\n    }\r\n    return encodeURIComponent(searchParam.split(',').join('-'));\r\n};\r\n\r\n/**\r\n * Parse company profile page for posts\r\n * Example page: https://www.linkedin.com/company/google/\r\n *\r\n * @param {Cheerio} $ HTML string of company profile page\r\n * @returns {Array<JSON>} Array of company posts\r\n */\r\nfunction parseCompanyPosts($) {\r\n    const posts = $('ul.updates__list > li')\r\n        .toArray() // Convert the Cheerio object to a plain array\r\n        .map((elem) => {\r\n            const elemHtml = $(elem);\r\n            const link = elemHtml.find('a.main-feed-card__overlay-link').attr('href');\r\n            const text = elemHtml.find('p.attributed-text-segment-list__content').text().trim();\r\n            const date = parseRelativeShorthandDate(elemHtml.find('time').text().trim());\r\n\r\n            return { link, text, date };\r\n        });\r\n\r\n    return posts;\r\n}\r\n\r\n/**\r\n * Parse company profile page for its name\r\n * Example page: https://www.linkedin.com/company/google/\r\n *\r\n * @param {Cheerio} $ HTML string of company profile page\r\n * @returns {String} Company name\r\n */\r\nfunction parseCompanyName($) {\r\n    return $('h1.top-card-layout__title').text().trim();\r\n}\r\n\r\n/**\r\n * Parse relative date shorthand string into a Date object\r\n *\r\n * @param {String} shorthand The shorthand string representing the date\r\n * @returns {Date|null} The parsed date or null if the format is invalid\r\n */\r\nfunction parseRelativeShorthandDate(shorthand) {\r\n    const match = shorthand.match(/^(\\d+)([wdmyh])$/);\r\n    if (!match) {\r\n        return null;\r\n    }\r\n\r\n    const [, amount, unit] = match;\r\n    const unitMap = {\r\n        w: 'week',\r\n        d: 'day',\r\n        m: 'month',\r\n        y: 'year',\r\n        h: 'hour',\r\n    };\r\n\r\n    return dayjs().subtract(Number.parseInt(amount), unitMap[unit]);\r\n}\r\n\r\nexport {\r\n    parseCompanyPosts,\r\n    parseCompanyName,\r\n    parseParamsToSearchParams,\r\n    parseParamsToString,\r\n    parseJobDetail,\r\n    parseJobSearch,\r\n    parseRouteParam,\r\n    BASE_URL,\r\n    JOB_TYPES,\r\n    JOB_TYPES_QUERY_KEY,\r\n    EXP_LEVELS,\r\n    EXP_LEVELS_QUERY_KEY,\r\n    KEYWORDS_QUERY_KEY,\r\n};\r\n"],"mappings":"oDAAA,IAAM,EAAN,KAAU,CACN,YAAY,EAAO,EAAM,EAAS,EAAU,EAAS,EAAW,EAAa,CACzE,KAAK,MAAQ,EACb,KAAK,KAAO,EACZ,KAAK,QAAU,EACf,KAAK,SAAW,EAChB,KAAK,QAAU,EACf,KAAK,UAAY,EACjB,KAAK,YAAc,ICD3B,MAAM,EAAW,2BAEX,EAAqB,WAErB,EAAsB,OAEtB,EAAY,CACd,EAAG,YACH,EAAG,YACH,EAAG,YAGD,EAAuB,MAEvB,EAAa,CACf,EAAG,aACH,EAAG,QACH,EAAG,YACH,EAAG,aACH,EAAG,YAkBP,SAAS,EAA0B,EAAQ,EAAK,CAC5C,GAAI,CAAC,EACD,MAAO,GAGX,IAAM,EAAmB,EAAO,MAAM,KAAK,OAAQ,GAAM,KAAK,GAC9D,OAAO,EAAiB,KAAK,KAYjC,SAAS,EAAoB,EAAQ,EAAK,CACtC,GAAI,CAAC,EACD,MAAO,GAGX,IAAM,EAAmB,EACpB,MAAM,KACN,OAAQ,GAAM,KAAK,GACnB,IAAK,GAAM,EAAI,IACpB,OAAO,EAAiB,KAAK,KAcjC,SAAS,EAAe,EAAM,CAC1B,IAAM,EAAI,EAAK,GAGT,EAAO,EAAE,MACV,UACA,IAAK,GAAS,CACX,IAAM,EAAW,EAAE,GACb,EAAO,EAAS,KAAK,8CAA8C,KAAK,SAAS,MAAM,KAAK,GAC5F,EAAQ,EAAS,KAAK,+BAA+B,QAAQ,OAC7D,EAAU,EAAS,KAAK,kCAAkC,QAAQ,OAClE,EAAW,EAAS,KAAK,mCAAmC,QAAQ,OACpE,EAAU,EAAS,KAAK,SAAS,KAAK,YAE5C,OAAO,IAAI,EAAI,EAAO,EAAM,EAAS,EAAU,KAEvD,OAAO,EAoBX,MAAM,EAAmB,GACjB,CAAC,GAAe,OAAO,GAAgB,SAChC,MAEJ,mBAAmB,EAAY,MAAM,KAAK,KAAK,MAU1D,SAAS,EAAkB,EAAG,CAC1B,IAAM,EAAQ,EAAE,yBACX,UACA,IAAK,GAAS,CACX,IAAM,EAAW,EAAE,GACb,EAAO,EAAS,KAAK,kCAAkC,KAAK,QAC5D,EAAO,EAAS,KAAK,2CAA2C,OAAO,OACvE,EAAO,EAA2B,EAAS,KAAK,QAAQ,OAAO,QAErE,MAAO,CAAE,OAAM,OAAM,UAG7B,OAAO,EAUX,SAAS,EAAiB,EAAG,CACzB,OAAO,EAAE,6BAA6B,OAAO,OASjD,SAAS,EAA2B,EAAW,CAC3C,IAAM,EAAQ,EAAU,MAAM,oBAC9B,GAAI,CAAC,EACD,OAAO,KAGX,GAAM,EAAG,EAAQ,GAAQ,EACnB,EAAU,CACZ,EAAG,OACH,EAAG,MACH,EAAG,QACH,EAAG,OACH,EAAG,QAGP,OAAO,IAAQ,SAAS,OAAO,SAAS,GAAS,EAAQ"}