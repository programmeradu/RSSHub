{"version":3,"file":"followings-dynamic-H_zxjol4.js","names":["route: Route","cache","ConfigNotFoundError","got","data","utils","item"],"sources":["../../lib/routes/bilibili/followings-dynamic.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport cache from './cache';\r\nimport { config } from '@/config';\r\nimport utils from './utils';\r\nimport JSONbig from 'json-bigint';\r\nimport { fallback, queryToBoolean } from '@/utils/readable-social';\r\nimport querystring from 'node:querystring';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport logger from '@/utils/logger';\r\n\r\nexport const route: Route = {\r\n    path: '/followings/dynamic/:uid/:routeParams?',\r\n    categories: ['social-media'],\r\n    example: '/bilibili/followings/dynamic/109937383',\r\n    parameters: {\r\n        uid: '用户 id, 可在 UP 主主页中找到',\r\n        routeParams: `\r\n| 键         | 含义                              | 接受的值       | 默认值 |\r\n| ---------- | --------------------------------- | -------------- | ------ |\r\n| showEmoji  | 显示或隐藏表情图片                | 0/1/true/false | false  |\r\n| embed      | 默认开启内嵌视频                  | 0/1/true/false |  true  |\r\n| useAvid    | 视频链接使用 AV 号 (默认为 BV 号) | 0/1/true/false | false  |\r\n| directLink | 使用内容直链                      | 0/1/true/false | false  |\r\n| hideGoods  | 隐藏带货动态                      | 0/1/true/false | false  |\r\n\r\n用例：\\`/bilibili/followings/dynamic/2267573/showEmoji=1&embed=0&useAvid=1\\``,\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'BILIBILI_COOKIE_*',\r\n                description: `BILIBILI_COOKIE_{uid}: 用于用户关注动态系列路由，对应 uid 的 b 站用户登录后的 Cookie 值，\\`{uid}\\` 替换为 uid，如 \\`BILIBILI_COOKIE_2267573\\`，获取方式：\r\n    1.  打开 [https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/dynamic_new?uid=0&type=8](https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/dynamic_new?uid=0&type=8)\r\n    2.  打开控制台，切换到 Network 面板，刷新\r\n    3.  点击 dynamic_new 请求，找到 Cookie\r\n    4.  视频和专栏，UP 主粉丝及关注只要求 \\`SESSDATA\\` 字段，动态需复制整段 Cookie`,\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '用户关注动态',\r\n    maintainers: ['TigerCubDen', 'JimenezLi'],\r\n    handler,\r\n    description: `::: warning\r\n  用户动态需要 b 站登录后的 Cookie 值，所以只能自建，详情见部署页面的配置模块。\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const uid = String(ctx.req.param('uid'));\r\n    const routeParams = querystring.parse(ctx.req.param('routeParams'));\r\n\r\n    const showEmoji = fallback(undefined, queryToBoolean(routeParams.showEmoji), false);\r\n    const embed = fallback(undefined, queryToBoolean(routeParams.embed), true);\r\n    const displayArticle = fallback(undefined, queryToBoolean(routeParams.displayArticle), false);\r\n\r\n    const name = await cache.getUsernameFromUID(uid);\r\n    const cookie = config.bilibili.cookies[uid];\r\n    if (cookie === undefined) {\r\n        throw new ConfigNotFoundError('缺少对应 uid 的 Bilibili 用户登录后的 Cookie 值');\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: `https://api.vc.bilibili.com/dynamic_svr/v1/dynamic_svr/dynamic_new?uid=${uid}&type_list=268435455`,\r\n        headers: {\r\n            Referer: `https://space.bilibili.com/${uid}/`,\r\n            Cookie: cookie,\r\n        },\r\n    });\r\n    if (response.data.code === -6) {\r\n        throw new ConfigNotFoundError('对应 uid 的 Bilibili 用户的 Cookie 已过期');\r\n    }\r\n    if (response.data.code === 4_100_000) {\r\n        throw new ConfigNotFoundError('对应 uid 的 Bilibili 用户 请求失败');\r\n    }\r\n    const data = JSONbig.parse(response.body).data.cards;\r\n\r\n    const getTitle = (data) => (data ? data.title || data.description || data.content || (data.vest && data.vest.content) || '' : '');\r\n    const getDes = (data) =>\r\n        data.dynamic || data.desc || data.description || data.content || data.summary || (data.vest && data.vest.content) + (data.sketch && `<br>${data.sketch.title}<br>${data.sketch.desc_text}`) || data.intro || '';\r\n    const getOriginDes = (data) => (data && (data.apiSeasonInfo && data.apiSeasonInfo.title && `//转发自: ${data.apiSeasonInfo.title}`) + (data.index_title && `<br>${data.index_title}`)) || '';\r\n    const getOriginName = (data) => data.uname || (data.author && data.author.name) || (data.upper && data.upper.name) || (data.user && (data.user.uname || data.user.name)) || (data.owner && data.owner.name) || '';\r\n    const getOriginTitle = (data) => (data.title ? `${data.title}<br>` : '');\r\n    const getIframe = (data) => {\r\n        if (!embed) {\r\n            return '';\r\n        }\r\n        const aid = data?.aid;\r\n        const bvid = data?.bvid;\r\n        if (aid === undefined && bvid === undefined) {\r\n            return '';\r\n        }\r\n        return utils.renderUGCDescription(embed, '', '', aid, undefined, bvid);\r\n    };\r\n    const getImgs = (data) => {\r\n        let imgs = '';\r\n        // 动态图片\r\n        if (data.pictures) {\r\n            for (let i = 0; i < data.pictures.length; i++) {\r\n                imgs += `<img src=\"${data.pictures[i].img_src}\">`;\r\n            }\r\n        }\r\n        // 专栏封面\r\n        if (data.image_urls) {\r\n            for (let i = 0; i < data.image_urls.length; i++) {\r\n                imgs += `<img src=\"${data.image_urls[i]}\">`;\r\n            }\r\n        }\r\n        // 视频封面\r\n        if (data.pic) {\r\n            imgs += `<img src=\"${data.pic}\">`;\r\n        }\r\n        // 音频/番剧/直播间封面/小视频封面\r\n        if (data.cover && data.cover.unclipped) {\r\n            imgs += `<img src=\"${data.cover.unclipped}\">`;\r\n        } else if (data.cover) {\r\n            imgs += `<img src=\"${data.cover}\">`;\r\n        }\r\n        // 专题页封面\r\n        if (data.sketch && data.sketch.cover_url) {\r\n            imgs += `<img src=\"${data.sketch.cover_url}\">`;\r\n        }\r\n        return imgs;\r\n    };\r\n\r\n    const items = await Promise.all(\r\n        data.map(async (item) => {\r\n            const parsed = JSONbig.parse(item.card);\r\n            const data = parsed.apiSeasonInfo || (getTitle(parsed.item) ? parsed.item : parsed);\r\n            let origin = parsed.origin;\r\n            if (origin) {\r\n                try {\r\n                    origin = JSONbig.parse(origin);\r\n                } catch {\r\n                    logger.warn(`card.origin '${origin}' is not falsy-valued or a JSON string, fall back to unparsed value`);\r\n                }\r\n            }\r\n\r\n            // img\r\n            let imgHTML = '';\r\n\r\n            imgHTML += getImgs(data);\r\n\r\n            if (origin) {\r\n                imgHTML += getImgs(origin.item || origin);\r\n            }\r\n            // video小视频\r\n            let videoHTML = '';\r\n            if (data.video_playurl) {\r\n                videoHTML += `<video width=\"${data.width}\" height=\"${data.height}\" controls><source src=\"${unescape(data.video_playurl).replace(/^http:/, 'https:')}\"><source src=\"${unescape(data.video_playurl)}\"></video>`;\r\n            }\r\n            // some rss readers disallow http content.\r\n            // 部分 RSS 阅读器要求内容必须使用https传输\r\n            // bilibili short video does support https request, but https request may timeout ocassionally.\r\n            // to maximize content availability, here add two source tags.\r\n            // bilibili的API中返回的视频地址采用http，然而经验证，短视频地址支持https访问，但偶尔会返回超时错误(可能是网络原因)。\r\n            // 因此保险起见加入两个source标签\r\n            // link\r\n            let link = '';\r\n            if (data.dynamic_id) {\r\n                link = `https://t.bilibili.com/${data.dynamic_id}`;\r\n            } else if (item.desc?.dynamic_id) {\r\n                link = `https://t.bilibili.com/${item.desc.dynamic_id}`;\r\n            }\r\n\r\n            // emoji\r\n            let data_content = getDes(data);\r\n            if (item.display && item.display.emoji_info && showEmoji) {\r\n                const emoji = item.display.emoji_info.emoji_details;\r\n                for (const item of emoji) {\r\n                    data_content = data_content.replaceAll(\r\n                        new RegExp(`\\\\${item.text}`, 'g'),\r\n                        `<img alt=\"${item.text}\" src=\"${item.url}\"style=\"margin: -1px 1px 0px; display: inline-block; width: 20px; height: 20px; vertical-align: text-bottom;\" title=\"\" referrerpolicy=\"no-referrer\">`\r\n                    );\r\n                }\r\n            }\r\n            // 作者信息\r\n            let author = '';\r\n            if (item.desc?.user_profile) {\r\n                author = item.desc.user_profile.info.uname;\r\n            }\r\n\r\n            if (data.image_urls && displayArticle) {\r\n                data_content = (await cache.getArticleDataFromCvid(data.id, uid)).description;\r\n            }\r\n\r\n            return {\r\n                title: getTitle(data),\r\n                author,\r\n                description: (() => {\r\n                    const description = parsed.new_desc || data_content || getDes(data);\r\n                    const originName = origin && getOriginName(origin) ? `<br><br>//转发自: @${getOriginName(origin)}: ${getOriginTitle(origin.item || origin)}${getDes(origin.item || origin)}` : getOriginDes(origin);\r\n                    const imgHTMLSource = imgHTML ? `<br>${imgHTML}` : '';\r\n                    const videoHTMLSource = videoHTML ? `<br>${videoHTML}` : '';\r\n\r\n                    return `${description}${originName}${getIframe(data)}${getIframe(origin)}${imgHTMLSource}${videoHTMLSource}`;\r\n                })(),\r\n                pubDate: new Date(item.desc?.timestamp * 1000).toUTCString(),\r\n                link,\r\n            };\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: `${name} 关注的动态`,\r\n        link: `https://t.bilibili.com`,\r\n        description: `${name} 关注的动态`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"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"}