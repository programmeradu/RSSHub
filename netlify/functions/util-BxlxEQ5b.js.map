{"version":3,"file":"util-BxlxEQ5b.js","names":[],"sources":["../../lib/routes/aibase/util.ts"],"sourcesContent":["import ofetch from '@/utils/ofetch';\r\nimport { CheerioAPI } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst defaultSrc = '_static/ee6af7e.js';\r\nconst defaultToken = 'djflkdsoisknfoklsyhownfrlewfknoiaewf';\r\n\r\nconst rootUrl = 'https://top.aibase.com';\r\nconst apiRootUrl = 'https://app.chinaz.com';\r\n\r\n/**\r\n * Converts a string to an array.\r\n * If the string starts with '[', it is assumed to be a JSON array and is parsed accordingly.\r\n * Otherwise, the string is wrapped in an array.\r\n *\r\n * @param str - The input string to convert to an array.\r\n * @returns An array created from the input string.\r\n */\r\nconst strToArray = (str: string) => {\r\n    if (str.startsWith('[')) {\r\n        return JSON.parse(str);\r\n    }\r\n    return [str];\r\n};\r\n\r\nart.defaults.imports.strToArray = strToArray;\r\n\r\n/**\r\n * Retrieve a token asynchronously using a CheerioAPI instance.\r\n * @param $ - The CheerioAPI instance.\r\n * @returns A Promise that resolves to a string representing the token.\r\n */\r\nconst getToken = async ($: CheerioAPI): Promise<string> => {\r\n    const scriptUrl = new URL($('script[src]').last()?.prop('src') ?? defaultSrc, rootUrl).href;\r\n\r\n    const script = await ofetch(scriptUrl, {\r\n        responseType: 'text',\r\n    });\r\n\r\n    return script.match(/\"\\/(\\w+)\\/ai\\/.*?\\.aspx\"/)?.[1] ?? defaultToken;\r\n};\r\n\r\n/**\r\n * Build API URLs asynchronously using a CheerioAPI instance.\r\n * @param $ - The CheerioAPI instance.\r\n * @returns An object containing API URLs.\r\n */\r\nconst buildApiUrl = async ($: CheerioAPI) => {\r\n    const token = await getToken($);\r\n\r\n    const apiRecommListUrl = new URL(`${token}/ai/GetAIProcRecommList.aspx`, apiRootUrl).href;\r\n    const apiRecommProcUrl = new URL(`${token}/ai/GetAIProcListByRecomm.aspx`, apiRootUrl).href;\r\n    const apiTagProcUrl = new URL(`${token}/ai/GetAiProductOfTag.aspx`, apiRootUrl).href;\r\n    // AI 资讯列表\r\n    const apiInfoListUrl = new URL(`${token}/ai/GetAiInfoList.aspx`, apiRootUrl).href;\r\n    // AI 日报\r\n    const aILogListUrl = new URL(`${token}/ai/v2/GetAILogList.aspx`, apiRootUrl).href;\r\n\r\n    return {\r\n        apiRecommListUrl,\r\n        apiRecommProcUrl,\r\n        apiTagProcUrl,\r\n        apiInfoListUrl,\r\n        aILogListUrl,\r\n    };\r\n};\r\n\r\n/**\r\n * Process an array of items to generate a new array of processed items for RSS.\r\n * @param items - An array of items to process.\r\n * @returns An array of processed items.\r\n */\r\nconst processItems = (items: any[]): any[] =>\r\n    items.map((item) => {\r\n        const title = item.name;\r\n        const image = item.imgurl;\r\n        const description = art(path.join(__dirname, 'templates/description.art'), {\r\n            images: image\r\n                ? [\r\n                      {\r\n                          src: image,\r\n                          alt: title,\r\n                      },\r\n                  ]\r\n                : undefined,\r\n            item,\r\n        });\r\n        const guid = `aibase-${item.zurl}`;\r\n\r\n        return {\r\n            title,\r\n            description,\r\n            pubDate: timezone(parseDate(item.addtime), +8),\r\n            link: new URL(`tool/${item.zurl}`, rootUrl).href,\r\n            category: [...new Set([...strToArray(item.categories), ...strToArray(item.tags), item.catname, item.procattrname, item.procformname, item.proctypename])].filter(Boolean),\r\n            guid,\r\n            id: guid,\r\n            content: {\r\n                html: description,\r\n                text: item.desc,\r\n            },\r\n            image,\r\n            banner: image,\r\n            updated: parseDate(item.UpdTime),\r\n            enclosure_url: item.logo,\r\n            enclosure_type: item.logo ? `image/${item.logo.split(/\\./).pop()}` : undefined,\r\n            enclosure_title: title,\r\n        };\r\n    });\r\n\r\nexport { rootUrl, processItems, buildApiUrl };\r\n"],"mappings":"6SAOA,MAGM,EAAU,yBACV,EAAa,yBAUb,EAAc,GACZ,EAAI,WAAW,KACR,KAAK,MAAM,GAEf,CAAC,GAGZ,EAAI,SAAS,QAAQ,WAAa,EAOlC,MAAM,EAAW,KAAO,IAAmC,CACvD,IAAM,EAAY,IAAI,IAAI,EAAE,eAAe,QAAQ,KAAK,QAAU,qBAAY,GAAS,KAEjF,EAAS,MAAM,EAAO,EAAW,CACnC,aAAc,SAGlB,OAAO,EAAO,MAAM,8BAA8B,IAAM,wCAQtD,EAAc,KAAO,IAAkB,CACzC,IAAM,EAAQ,MAAM,EAAS,GAEvB,EAAmB,IAAI,IAAI,GAAG,EAAM,8BAA+B,GAAY,KAC/E,EAAmB,IAAI,IAAI,GAAG,EAAM,gCAAiC,GAAY,KACjF,EAAgB,IAAI,IAAI,GAAG,EAAM,4BAA6B,GAAY,KAE1E,EAAiB,IAAI,IAAI,GAAG,EAAM,wBAAyB,GAAY,KAEvE,EAAe,IAAI,IAAI,GAAG,EAAM,0BAA2B,GAAY,KAE7E,MAAO,CACH,mBACA,mBACA,gBACA,iBACA,iBASF,EAAgB,GAClB,EAAM,IAAK,GAAS,CAChB,IAAM,EAAQ,EAAK,KACb,EAAQ,EAAK,OACb,EAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACvE,OAAQ,EACF,CACI,CACI,IAAK,EACL,IAAK,IAGb,IAAA,GACN,SAEE,EAAO,UAAU,EAAK,OAE5B,MAAO,CACH,QACA,cACA,QAAS,EAAS,EAAU,EAAK,SAAU,GAC3C,KAAM,IAAI,IAAI,QAAQ,EAAK,OAAQ,GAAS,KAC5C,SAAU,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAW,EAAK,YAAa,GAAG,EAAW,EAAK,MAAO,EAAK,QAAS,EAAK,aAAc,EAAK,aAAc,EAAK,gBAAgB,OAAO,SACjK,OACA,GAAI,EACJ,QAAS,CACL,KAAM,EACN,KAAM,EAAK,MAEf,QACA,OAAQ,EACR,QAAS,EAAU,EAAK,SACxB,cAAe,EAAK,KACpB,eAAgB,EAAK,KAAO,SAAS,EAAK,KAAK,MAAM,MAAM,QAAU,IAAA,GACrE,gBAAiB"}