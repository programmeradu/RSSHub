{"version":3,"file":"podcast-DDrENuL0.js","names":["route: Route","ofetch","cache"],"sources":["../../lib/routes/qingting/podcast.ts"],"sourcesContent":["import type { DataItem, Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport crypto from 'node:crypto';\r\nimport ofetch from '@/utils/ofetch';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\n\r\nconst qingtingId = config.qingting.id ?? '';\r\n\r\nexport const route: Route = {\r\n    path: '/podcast/:id',\r\n    categories: ['multimedia'],\r\n    example: '/qingting/podcast/293411',\r\n    parameters: { id: '专辑id, 可在专辑页 URL 中找到' },\r\n    features: {\r\n        supportPodcast: true,\r\n        requireConfig: [\r\n            {\r\n                name: 'QINGTING_ID',\r\n                optional: true,\r\n                description: '用户id， 部分专辑需要会员身份，用户id可以通过从网页端登录蜻蜓fm后使用开发者工具，在控制台中运行JSON.parse(localStorage.getItem(\"user\")).qingting_id获取',\r\n            },\r\n        ],\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['qingting.fm/channels/:id'],\r\n        },\r\n    ],\r\n    name: '播客',\r\n    maintainers: ['RookieZoe', 'huyyi', 'pseudoyu'],\r\n    handler,\r\n    description: `获取的播放 URL 有效期只有 1 天，需要开启播客 APP 的自动下载功能。`,\r\n};\r\n\r\nfunction getMediaUrl(channelId: string, mediaId: string) {\r\n    const path = `/audiostream/redirect/${channelId}/${mediaId}?access_token=&device_id=MOBILESITE&qingting_id=${qingtingId}&t=${Date.now()}`;\r\n    const sign = crypto.createHmac('md5', 'fpMn12&38f_2e').update(path).digest('hex').toString();\r\n    return `https://audio.qingting.fm${path}&sign=${sign}`;\r\n}\r\n\r\nasync function handler(ctx) {\r\n    const channelId = ctx.req.param('id');\r\n    const pageSize = Number(ctx.req.query('limit')) || 30;\r\n\r\n    const channelUrl = `https://i.qingting.fm/capi/v3/channel/${channelId}`;\r\n    const response = await ofetch(channelUrl, {\r\n        headers: {\r\n            Referer: 'https://www.qingting.fm/',\r\n        },\r\n    });\r\n\r\n    const title = response.data.title;\r\n    const channel_img = response.data.thumbs['400_thumb'];\r\n    const authors = response.data.podcasters.map((author) => author.nick_name).join(',');\r\n    const desc = response.data.description;\r\n    const programUrl = `https://i.qingting.fm/capi/channel/${channelId}/programs/${response.data.v}?curpage=1&pagesize=${pageSize}&order=asc`;\r\n\r\n    const {\r\n        data: { programs },\r\n    } = await ofetch(programUrl, {\r\n        headers: {\r\n            Referer: 'https://www.qingting.fm/',\r\n        },\r\n    });\r\n\r\n    const { data: channelInfo } = await ofetch(`https://i.qingting.fm/capi/v3/channel/${channelId}?user_id=${qingtingId}`);\r\n\r\n    const isCharged = channelInfo.purchase?.item_type !== 0;\r\n\r\n    const isPaid = channelInfo.user_relevance?.sale_status === 'paid';\r\n\r\n    const resultItems = await Promise.all(\r\n        programs.map(async (item) => {\r\n            const data = (await cache.tryGet(`qingting:podcast:${channelId}:${item.id}`, async () => {\r\n                const link = `https://www.qingting.fm/channels/${channelId}/programs/${item.id}/`;\r\n\r\n                const detailRes = await ofetch(link, {\r\n                    headers: {\r\n                        Referer: 'https://www.qingting.fm/',\r\n                    },\r\n                });\r\n\r\n                const detail = JSON.parse(detailRes.match(/},\"program\":(.*?),\"plist\":/)[1]);\r\n\r\n                const rssItem = {\r\n                    title: item.title,\r\n                    link,\r\n                    itunes_item_image: item.cover,\r\n                    itunes_duration: item.duration,\r\n                    pubDate: timezone(parseDate(item.update_time), +8),\r\n                    description: detail.richtext,\r\n                };\r\n\r\n                return rssItem;\r\n            })) as DataItem;\r\n\r\n            if (!isCharged || isPaid || item.isfree) {\r\n                data.enclosure_url = getMediaUrl(channelId, item.id);\r\n                data.enclosure_type = 'audio/x-m4a';\r\n            }\r\n\r\n            return data;\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: `${title} - 蜻蜓FM`,\r\n        description: desc,\r\n        itunes_author: authors,\r\n        image: channel_img,\r\n        link: `https://www.qingting.fm/channels/${channelId}`,\r\n        item: resultItems,\r\n    };\r\n}\r\n"],"mappings":"kXAQA,MAAM,EAAa,EAAO,SAAS,IAAM,GAE5BA,EAAe,CACxB,KAAM,eACN,WAAY,CAAC,cACb,QAAS,2BACT,WAAY,CAAE,GAAI,uBAClB,SAAU,CACN,eAAgB,GAChB,cAAe,CACX,CACI,KAAM,cACN,SAAU,GACV,YAAa,+GAIzB,MAAO,CACH,CACI,OAAQ,CAAC,8BAGjB,KAAM,KACN,YAAa,CAAC,YAAa,QAAS,YACpC,UACA,YAAa,2CAGjB,SAAS,EAAY,EAAmB,EAAiB,CACrD,IAAM,EAAO,yBAAyB,EAAU,GAAG,EAAQ,kDAAkD,EAAW,KAAK,KAAK,QAC5H,EAAO,EAAO,WAAW,MAAO,iBAAiB,OAAO,GAAM,OAAO,OAAO,WAClF,MAAO,4BAA4B,EAAK,QAAQ,IAGpD,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAY,EAAI,IAAI,MAAM,MAC1B,EAAW,OAAO,EAAI,IAAI,MAAM,WAAa,GAE7C,EAAa,yCAAyC,IACtD,EAAW,MAAMC,EAAO,EAAY,CACtC,QAAS,CACL,QAAS,8BAIX,EAAQ,EAAS,KAAK,MACtB,EAAc,EAAS,KAAK,OAAO,aACnC,EAAU,EAAS,KAAK,WAAW,IAAK,GAAW,EAAO,WAAW,KAAK,KAC1E,EAAO,EAAS,KAAK,YACrB,EAAa,sCAAsC,EAAU,YAAY,EAAS,KAAK,EAAE,sBAAsB,EAAS,YAExH,CACF,KAAM,CAAE,aACR,MAAMA,EAAO,EAAY,CACzB,QAAS,CACL,QAAS,8BAIX,CAAE,KAAM,GAAgB,MAAMA,EAAO,yCAAyC,EAAU,WAAW,KAEnG,EAAY,EAAY,UAAU,YAAc,EAEhD,EAAS,EAAY,gBAAgB,cAAgB,OAErD,EAAc,MAAM,QAAQ,IAC9B,EAAS,IAAI,KAAO,IAAS,CACzB,IAAM,EAAQ,MAAMC,EAAM,OAAO,oBAAoB,EAAU,GAAG,EAAK,KAAM,SAAY,CACrF,IAAM,EAAO,oCAAoC,EAAU,YAAY,EAAK,GAAG,GAEzE,EAAY,MAAMD,EAAO,EAAM,CACjC,QAAS,CACL,QAAS,8BAIX,EAAS,KAAK,MAAM,EAAU,MAAM,8BAA8B,IAElE,EAAU,CACZ,MAAO,EAAK,MACZ,OACA,kBAAmB,EAAK,MACxB,gBAAiB,EAAK,SACtB,QAAS,EAAS,EAAU,EAAK,aAAc,GAC/C,YAAa,EAAO,UAGxB,OAAO,IAQX,OALI,CAAC,GAAa,GAAU,EAAK,UAC7B,EAAK,cAAgB,EAAY,EAAW,EAAK,IACjD,EAAK,eAAiB,eAGnB,KAIf,MAAO,CACH,MAAO,GAAG,EAAM,SAChB,YAAa,EACb,cAAe,EACf,MAAO,EACP,KAAM,oCAAoC,IAC1C,KAAM"}