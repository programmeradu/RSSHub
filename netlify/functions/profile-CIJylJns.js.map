{"version":3,"file":"profile-CIJylJns.js","names":[],"sources":["../../lib/routes/picuki/profile.ts"],"sourcesContent":["import { DataItem, Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { config } from '@/config';\r\nimport { getPuppeteerPage } from '@/utils/puppeteer';\r\nimport NotFoundError from '@/errors/types/not-found';\r\n\r\nexport const route: Route = {\r\n    path: '/profile/:id/:type?/:functionalFlag?',\r\n    categories: ['social-media'],\r\n    example: '/picuki/profile/linustech',\r\n    parameters: {\r\n        id: 'Tiktok user id (without @)',\r\n        type: {\r\n            description: 'Type of profile page',\r\n            options: [\r\n                {\r\n                    value: 'profile',\r\n                    label: 'Profile Page',\r\n                },\r\n                {\r\n                    value: 'story',\r\n                    label: 'Story Page',\r\n                },\r\n            ],\r\n            default: 'profile',\r\n        },\r\n        functionalFlag: {\r\n            description: 'Functional flag for video embedding',\r\n            options: [\r\n                {\r\n                    value: '0',\r\n                    label: 'Off, only show video poster as an image',\r\n                },\r\n                {\r\n                    value: '1',\r\n                    label: 'On',\r\n                },\r\n            ],\r\n            default: '1',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: true,\r\n        antiCrawler: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.picuki.com/profile/:id'],\r\n            target: '/profile/:id',\r\n        },\r\n        {\r\n            source: ['www.picuki.com/story/:id'],\r\n            target: '/profile/:id/story',\r\n        },\r\n    ],\r\n    name: 'User Profile - Picuki',\r\n    maintainers: ['hoilc', 'Rongronggg9', 'devinmugen', 'NekoAria'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const type = ctx.req.param('type') ?? 'profile';\r\n    const functionalFlag = ctx.req.param('functionalFlag') ?? '1';\r\n    const useIframe = functionalFlag !== '0';\r\n\r\n    const baseUrl = 'https://www.picuki.com';\r\n    const profileUrl = `${baseUrl}/${type === 'story' ? 'story' : 'profile'}/${id}`;\r\n\r\n    const data = (await cache.tryGet(`picuki:${type}:${id}`, async () => {\r\n        let response;\r\n        try {\r\n            response = await ofetch(profileUrl, {\r\n                headers: {\r\n                    'User-Agent': config.trueUA,\r\n                },\r\n            });\r\n        } catch (error) {\r\n            if (error.status === 403) {\r\n                const { page, destory } = await getPuppeteerPage(profileUrl, {\r\n                    onBeforeLoad: async (page) => {\r\n                        const expectResourceTypes = new Set(['document', 'script', 'xhr', 'fetch']);\r\n                        await page.setRequestInterception(true);\r\n                        page.on('request', (request) => {\r\n                            expectResourceTypes.has(request.resourceType()) ? request.continue() : request.abort();\r\n                        });\r\n                    },\r\n                });\r\n                await page.waitForSelector('.content');\r\n                response = await page.content();\r\n                await destory();\r\n            } else {\r\n                throw new NotFoundError(error.message);\r\n            }\r\n        }\r\n\r\n        const $ = load(response);\r\n\r\n        if ($('.posts-empty').length) {\r\n            throw new Error($('.posts-empty').text().trim() || 'No posts found');\r\n        }\r\n        if ($('.error-p').length) {\r\n            throw new Error($('.error-p span').text().trim() || 'Profile not found');\r\n        }\r\n\r\n        const username = $('.profile-info .username').text().trim();\r\n\r\n        const items = $('.posts-video .posts__video-item')\r\n            .toArray()\r\n            .map((item) => {\r\n                const $item = $(item);\r\n                const videoId = $item.attr('href')?.split('/').pop();\r\n                const img = $item.find('img');\r\n                return {\r\n                    title: img.attr('alt') || '',\r\n                    author: username,\r\n                    renderData: {\r\n                        poster: img.attr('src'),\r\n                        source: $item.find('.popup-open').data('source'),\r\n                        id: videoId,\r\n                    },\r\n                    link: `${baseUrl}/media/${videoId}`,\r\n                    guid: `https://www.tiktok.com/@${id}/video/${videoId}`,\r\n                };\r\n            });\r\n\r\n        return {\r\n            title: $('head title').text(),\r\n            description: $('.posts-current').text().trim(),\r\n            image: $('.profile-image').attr('src'),\r\n            items,\r\n        };\r\n    })) as {\r\n        title: string;\r\n        description: string;\r\n        image: string;\r\n        items: {\r\n            title: string;\r\n            author: string;\r\n            renderData: {\r\n                poster: string;\r\n                source: string;\r\n                id: string;\r\n            };\r\n            link: string;\r\n            guid: string;\r\n        }[];\r\n    };\r\n\r\n    const items: DataItem[] = data.items.map((item) => ({\r\n        ...item,\r\n        description: art(path.join(__dirname, '../tiktok/templates/user.art'), {\r\n            poster: item.renderData.poster,\r\n            source: item.renderData.source,\r\n            useIframe,\r\n            id: item.renderData.id,\r\n        }),\r\n    }));\r\n\r\n    return {\r\n        title: data.title,\r\n        link: profileUrl,\r\n        image: data.image,\r\n        description: data.description,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"khBAWA,MAAa,EAAe,CACxB,KAAM,uCACN,WAAY,CAAC,gBACb,QAAS,4BACT,WAAY,CACR,GAAI,6BACJ,KAAM,CACF,YAAa,uBACb,QAAS,CACL,CACI,MAAO,UACP,MAAO,gBAEX,CACI,MAAO,QACP,MAAO,eAGf,QAAS,WAEb,eAAgB,CACZ,YAAa,sCACb,QAAS,CACL,CACI,MAAO,IACP,MAAO,2CAEX,CACI,MAAO,IACP,MAAO,OAGf,QAAS,MAGjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,8BACT,OAAQ,gBAEZ,CACI,OAAQ,CAAC,4BACT,OAAQ,uBAGhB,KAAM,wBACN,YAAa,CAAC,QAAS,cAAe,aAAc,YACpD,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MACnB,EAAO,EAAI,IAAI,MAAM,SAAW,UAChC,EAAiB,EAAI,IAAI,MAAM,mBAAqB,IACpD,EAAY,IAAmB,IAE/B,EAAU,yBACV,EAAa,GAAG,EAAQ,GAAG,IAAS,QAAU,QAAU,UAAU,GAAG,IAErE,EAAQ,MAAM,EAAM,OAAO,UAAU,EAAK,GAAG,IAAM,SAAY,CACjE,IAAI,EACJ,GAAI,CACA,EAAW,MAAM,EAAO,EAAY,CAChC,QAAS,CACL,aAAc,EAAO,gBAGxB,EAAO,CACZ,GAAI,EAAM,SAAW,IAAK,CACtB,GAAM,CAAE,OAAM,WAAY,MAAM,EAAiB,EAAY,CACzD,aAAc,KAAO,IAAS,CAC1B,IAAM,EAAsB,IAAI,IAAI,CAAC,WAAY,SAAU,MAAO,UAClE,MAAM,EAAK,uBAAuB,IAClC,EAAK,GAAG,UAAY,GAAY,CAC5B,EAAoB,IAAI,EAAQ,gBAAkB,EAAQ,WAAa,EAAQ,aAI3F,MAAM,EAAK,gBAAgB,YAC3B,EAAW,MAAM,EAAK,UACtB,MAAM,SAEN,MAAM,IAAI,EAAc,EAAM,SAItC,IAAM,EAAI,EAAK,GAEf,GAAI,EAAE,gBAAgB,OAClB,MAAU,MAAM,EAAE,gBAAgB,OAAO,QAAU,kBAEvD,GAAI,EAAE,YAAY,OACd,MAAU,MAAM,EAAE,iBAAiB,OAAO,QAAU,qBAGxD,IAAM,EAAW,EAAE,2BAA2B,OAAO,OAE/C,EAAQ,EAAE,mCACX,UACA,IAAK,GAAS,CACX,IAAM,EAAQ,EAAE,GACV,EAAU,EAAM,KAAK,SAAS,MAAM,KAAK,MACzC,EAAM,EAAM,KAAK,OACvB,MAAO,CACH,MAAO,EAAI,KAAK,QAAU,GAC1B,OAAQ,EACR,WAAY,CACR,OAAQ,EAAI,KAAK,OACjB,OAAQ,EAAM,KAAK,eAAe,KAAK,UACvC,GAAI,GAER,KAAM,GAAG,EAAQ,SAAS,IAC1B,KAAM,2BAA2B,EAAG,SAAS,OAIzD,MAAO,CACH,MAAO,EAAE,cAAc,OACvB,YAAa,EAAE,kBAAkB,OAAO,OACxC,MAAO,EAAE,kBAAkB,KAAK,OAChC,MAAA,KAmBF,EAAoB,EAAK,MAAM,IAAK,IAAU,CAChD,GAAG,EACH,YAAa,EAAI,EAAA,KAAA,EAAA,+BAAsD,CACnE,OAAQ,EAAK,WAAW,OACxB,OAAQ,EAAK,WAAW,OACxB,YACA,GAAI,EAAK,WAAW,QAI5B,MAAO,CACH,MAAO,EAAK,MACZ,KAAM,EACN,MAAO,EAAK,MACZ,YAAa,EAAK,YAClB,KAAM"}