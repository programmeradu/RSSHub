{"version":3,"file":"freecomputerbooks-DGfTfoQx.js","names":[],"sources":["../../lib/routes/freecomputerbooks/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport { load } from 'cheerio';\r\nimport path from 'node:path';\r\n\r\nimport got from '@/utils/got';\r\nimport { art } from '@/utils/render';\r\n\r\nconst baseURL = 'https://freecomputerbooks.com/';\r\n\r\nasync function cheerioLoad(url) {\r\n    return load((await got(url)).data);\r\n}\r\n\r\nexport const route: Route = {\r\n    path: '/:category?',\r\n    name: 'Book List',\r\n    url: new URL(baseURL).host,\r\n    maintainers: ['cubroe'],\r\n    handler,\r\n    example: '/freecomputerbooks/compscAlgorithmBooks',\r\n    parameters: {\r\n        category: 'A category id., which should be the HTML file name (but **without** the `.html` suffix) in the URL path of a book list page.',\r\n    },\r\n    categories: ['reading'],\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['freecomputerbooks.com/', 'freecomputerbooks.com/index.html'],\r\n            target: '',\r\n        },\r\n    ],\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const categoryId = ctx.req.param('category')?.trim();\r\n    const requestURL = categoryId ? new URL(`${categoryId}.html`, baseURL).href : baseURL;\r\n    const $ = await cheerioLoad(requestURL);\r\n\r\n    // As observation has shown that each page only has one element of the\r\n    // class, thus to simplify the processing the text is directly extracted.\r\n    // Needing more robust processing if some day more such elements show up.\r\n    const categoryTitle = $('.maintitlebar').text();\r\n\r\n    return {\r\n        title: 'Free Computer Books - ' + categoryTitle,\r\n        link: requestURL,\r\n        description: $('title').text(),\r\n\r\n        // For a \"Selected New Books\" page, the <ul> element's id. is\r\n        // `newBooksG`; for an ordinary category page, it's `newBooksL`.\r\n        item: await Promise.all(\r\n            $('ul[id^=newBooks] > li')\r\n                .toArray()\r\n                .map((elem) => buildPostItem($(elem), categoryTitle, cache))\r\n        ),\r\n    };\r\n}\r\n\r\nfunction buildPostItem(listItem, categoryTitle, cache) {\r\n    const $ = load(''); // the only use below doesn't care about the content\r\n\r\n    const postLink = listItem.find('a:first');\r\n    const postInfo = listItem.find('p:contains(\"Post under\")');\r\n    const postItem = {\r\n        title: postLink.text(),\r\n        link: new URL(postLink.attr('href'), baseURL).href,\r\n\r\n        // Only a \"Selected New Books\" page has exclicit categorization info.\r\n        // for posts; an ordinary category page hasn't, then in which case the\r\n        // category title is used (after all, it's already a *category page*).\r\n        category: postInfo.length\r\n            ? postInfo\r\n                  .find('a')\r\n                  .toArray()\r\n                  .map((elem) => $(elem).text())\r\n            : categoryTitle,\r\n    };\r\n\r\n    return cache.tryGet(postItem.link, () => insertDescriptionInto(postItem));\r\n}\r\n\r\nasync function insertDescriptionInto(item) {\r\n    const $ = await cheerioLoad(item.link);\r\n\r\n    // Eliminate all comment nodes to avoid their being selected and rendered in\r\n    // the final output (I know this is actually unnecessary, but please forgive\r\n    // my mysophobia).\r\n    $.root()\r\n        .find('*')\r\n        .contents()\r\n        .filter((_, node) => node.type === 'comment')\r\n        .remove();\r\n\r\n    const imageURL = $('#bookdesc img[title]').attr('src');\r\n    const metadata = $('#booktitle ul').removeAttr('style');\r\n    const content = $('#bookdesccontent').removeAttr('id');\r\n\r\n    metadata.find('li:contains(Share This)').remove();\r\n    content.find('img[src$=\"/hot.gif\"]').remove();\r\n    content.find(':contains(Similar Books)').nextAll().addBack().remove();\r\n\r\n    item.description = art(path.join(__dirname, 'templates/desc.art'), { imageURL, metadata, content });\r\n\r\n    return item;\r\n}\r\n"],"mappings":"maASA,MAAM,EAAU,iCAEhB,eAAe,EAAY,EAAK,CAC5B,OAAO,GAAM,MAAM,EAAI,IAAM,MAGjC,MAAa,EAAe,CACxB,KAAM,cACN,KAAM,YACN,IAAK,IAAI,IAAI,GAAS,KACtB,YAAa,CAAC,UACd,UACA,QAAS,0CACT,WAAY,CACR,SAAU,gIAEd,WAAY,CAAC,WACb,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,aAAc,GACd,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,yBAA0B,oCACnC,OAAQ,MAKpB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAa,EAAI,IAAI,MAAM,aAAa,OACxC,EAAa,EAAa,IAAI,IAAI,GAAG,EAAW,OAAQ,GAAS,KAAO,EACxE,EAAI,MAAM,EAAY,GAKtB,EAAgB,EAAE,iBAAiB,OAEzC,MAAO,CACH,MAAO,yBAA2B,EAClC,KAAM,EACN,YAAa,EAAE,SAAS,OAIxB,KAAM,MAAM,QAAQ,IAChB,EAAE,yBACG,UACA,IAAK,GAAS,EAAc,EAAE,GAAO,EAAe,MAKrE,SAAS,EAAc,EAAU,EAAe,EAAO,CACnD,IAAM,EAAI,EAAK,IAET,EAAW,EAAS,KAAK,WACzB,EAAW,EAAS,KAAK,4BACzB,EAAW,CACb,MAAO,EAAS,OAChB,KAAM,IAAI,IAAI,EAAS,KAAK,QAAS,GAAS,KAK9C,SAAU,EAAS,OACb,EACK,KAAK,KACL,UACA,IAAK,GAAS,EAAE,GAAM,QAC3B,GAGV,OAAO,EAAM,OAAO,EAAS,SAAY,EAAsB,IAGnE,eAAe,EAAsB,EAAM,CACvC,IAAM,EAAI,MAAM,EAAY,EAAK,MAKjC,EAAE,OACG,KAAK,KACL,WACA,QAAQ,EAAG,IAAS,EAAK,OAAS,WAClC,SAEL,IAAM,EAAW,EAAE,wBAAwB,KAAK,OAC1C,EAAW,EAAE,iBAAiB,WAAW,SACzC,EAAU,EAAE,oBAAoB,WAAW,MAQjD,OANA,EAAS,KAAK,2BAA2B,SACzC,EAAQ,KAAK,wBAAwB,SACrC,EAAQ,KAAK,4BAA4B,UAAU,UAAU,SAE7D,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,+BAA4C,CAAE,WAAU,WAAU,YAElF"}