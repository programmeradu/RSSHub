{"version":3,"file":"category-JL3y7kA2.js","names":["route: Route","ofetch"],"sources":["../../lib/routes/mirrormedia/category.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { getArticle } from './utils';\r\n\r\nexport const route: Route = {\r\n    path: ['/category/:category', '/section/:section'],\r\n    categories: ['traditional-media'],\r\n    example: '/mirrormedia/category/political',\r\n    parameters: { category: '分类名', section: '子板名' },\r\n    name: '分类',\r\n    maintainers: ['dzx-dzx'],\r\n    radar: [\r\n        {\r\n            source: ['mirrormedia.mg/category/:category', 'mirrormedia.mg/section/:section'],\r\n        },\r\n    ],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category, section } = ctx.req.param();\r\n    const categoryFilter = category ? { categories: { some: { slug: { equals: category } } } } : {};\r\n    const sectionFilter = section ? { sections: { some: { slug: { equals: section } } } } : {};\r\n    const rootUrl = 'https://www.mirrormedia.mg';\r\n\r\n    const response = await ofetch('https://adam-weekly-api-server-prod-ufaummkd5q-de.a.run.app/content/graphql', {\r\n        method: 'POST',\r\n        body: {\r\n            variables: {\r\n                take: ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 24,\r\n                skip: 0,\r\n                orderBy: { publishedDate: 'desc' },\r\n                filter: {\r\n                    state: { equals: 'published' },\r\n                    ...categoryFilter,\r\n                    ...sectionFilter,\r\n                },\r\n            },\r\n            query: `\r\nfragment section on Section {\r\n  id\r\n  name\r\n  slug\r\n  state\r\n  __typename\r\n}\r\n\r\nfragment category on Category {\r\n  id\r\n  name\r\n  slug\r\n  state\r\n  __typename\r\n}\r\n\r\nfragment listingPost on Post {\r\n  id\r\n  slug\r\n  title\r\n  brief\r\n  publishedDate\r\n  state\r\n  sections(where: {state: {equals: \"active\"}}) {\r\n    ...section\r\n    __typename\r\n  }\r\n  categories(where: {state: {equals: \"active\"}}) {\r\n    ...category\r\n    __typename\r\n  }\r\n  isFeatured\r\n  __typename\r\n}\r\n\r\nquery ($take: Int, $skip: Int, $orderBy: [PostOrderByInput!]!, $filter: PostWhereInput!) {\r\n  postsCount(where: $filter)\r\n  posts(take: $take, skip: $skip, orderBy: $orderBy, where: $filter) {\r\n    ...listingPost\r\n    __typename\r\n  }\r\n}`,\r\n        },\r\n    });\r\n\r\n    const items = response.data.posts.map((e) => ({\r\n        title: e.title,\r\n        pubDate: parseDate(e.publishedDate),\r\n        category: [...(e.sections ?? []).map((_) => `section:${_.name}`), ...(e.categories ?? []).map((_) => `category:${_.name}`)],\r\n        link: `${rootUrl}/${'story'}/${e.slug}`,\r\n    }));\r\n\r\n    const list = await Promise.all(items.map((item) => getArticle(item)));\r\n\r\n    return {\r\n        title: `鏡週刊 Mirror Media - ${category}`,\r\n        link: rootUrl,\r\n        item: list,\r\n    };\r\n}\r\n"],"mappings":"6SAMA,MAAaA,EAAe,CACxB,KAAM,CAAC,sBAAuB,qBAC9B,WAAY,CAAC,qBACb,QAAS,kCACT,WAAY,CAAE,SAAU,MAAO,QAAS,OACxC,KAAM,KACN,YAAa,CAAC,WACd,MAAO,CACH,CACI,OAAQ,CAAC,oCAAqC,qCAGtD,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,WAAU,WAAY,EAAI,IAAI,QAChC,EAAiB,EAAW,CAAE,WAAY,CAAE,KAAM,CAAE,KAAM,CAAE,OAAQ,MAAmB,GACvF,EAAgB,EAAU,CAAE,SAAU,CAAE,KAAM,CAAE,KAAM,CAAE,OAAQ,MAAkB,GAClF,EAAU,6BAEV,EAAW,MAAMC,EAAO,8EAA+E,CACzG,OAAQ,OACR,KAAM,CACF,UAAW,CACP,KAAM,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAC7E,KAAM,EACN,QAAS,CAAE,cAAe,QAC1B,OAAQ,CACJ,MAAO,CAAE,OAAQ,aACjB,GAAG,EACH,GAAG,IAGX,MAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8CT,EAAQ,EAAS,KAAK,MAAM,IAAK,IAAO,CAC1C,MAAO,EAAE,MACT,QAAS,EAAU,EAAE,eACrB,SAAU,CAAC,IAAI,EAAE,UAAY,IAAI,IAAK,GAAM,WAAW,EAAE,QAAS,IAAI,EAAE,YAAc,IAAI,IAAK,GAAM,YAAY,EAAE,SACnH,KAAM,GAAG,EAAQ,SAAc,EAAE,UAG/B,EAAO,MAAM,QAAQ,IAAI,EAAM,IAAK,GAAS,EAAW,KAE9D,MAAO,CACH,MAAO,sBAAsB,IAC7B,KAAM,EACN,KAAM"}