{"version":3,"file":"tweet-DhP-8t8B.js","names":["route: Route","api","utils"],"sources":["../../lib/routes/twitter/tweet.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport api from './api';\r\nimport utils from './utils';\r\nimport { fallback, queryToBoolean } from '@/utils/readable-social';\r\nimport { config } from '@/config';\r\n\r\nexport const route: Route = {\r\n    path: '/tweet/:id/status/:status/:original?',\r\n    categories: ['social-media'],\r\n    example: '/twitter/tweet/DIYgod/status/1650844643997646852',\r\n    parameters: {\r\n        id: 'username; in particular, if starts with `+`, it will be recognized as a [unique ID](https://github.com/DIYgod/RSSHub/issues/12221), e.g. `+44196397`',\r\n        status: 'tweet ID',\r\n        original: 'extra parameters, data type of return, if the value is not `0`/`false` and `config.isPackage` is `true`, return the original data of twitter',\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'TWITTER_USERNAME',\r\n                description: 'Please see above for details.',\r\n            },\r\n            {\r\n                name: 'TWITTER_PASSWORD',\r\n                description: 'Please see above for details.',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Tweet Details',\r\n    maintainers: ['LarchLiu', 'Rongronggg9'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const status = ctx.req.param('status');\r\n    const routeParams = new URLSearchParams(ctx.req.param('original'));\r\n    const original = fallback(undefined, queryToBoolean(routeParams.get('original')), false);\r\n    const params = {\r\n        focalTweetId: status,\r\n        with_rux_injections: false,\r\n        includePromotedContent: true,\r\n        withCommunity: true,\r\n        withQuickPromoteEligibilityTweetFields: true,\r\n        withBirdwatchNotes: true,\r\n        withVoice: true,\r\n        withV2Timeline: true,\r\n    };\r\n    await api.init();\r\n    const userInfo = await api.getUser(id);\r\n    const data = await api.getUserTweet(id, params);\r\n    const profileImageUrl = userInfo.profile_image_url || userInfo.profile_image_url_https;\r\n    const item = original && config.isPackage ? data : utils.ProcessFeed(ctx, { data });\r\n\r\n    return {\r\n        title: `Twitter @${userInfo.name}`,\r\n        link: `https://x.com/${userInfo.screen_name}/status/${status}`,\r\n        image: profileImageUrl.replace(/_normal.jpg$/, '.jpg'),\r\n        description: userInfo.description,\r\n        item,\r\n    };\r\n}\r\n"],"mappings":"olBAMA,MAAaA,EAAe,CACxB,KAAM,uCACN,WAAY,CAAC,gBACb,QAAS,mDACT,WAAY,CACR,GAAI,uJACJ,OAAQ,WACR,SAAU,gJAEd,SAAU,CACN,cAAe,CACX,CACI,KAAM,mBACN,YAAa,iCAEjB,CACI,KAAM,mBACN,YAAa,kCAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,gBACN,YAAa,CAAC,WAAY,eAC1B,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MACnB,EAAS,EAAI,IAAI,MAAM,UACvB,EAAc,IAAI,gBAAgB,EAAI,IAAI,MAAM,aAChD,EAAW,EAAS,IAAA,GAAW,EAAe,EAAY,IAAI,aAAc,IAC5E,EAAS,CACX,aAAc,EACd,oBAAqB,GACrB,uBAAwB,GACxB,cAAe,GACf,uCAAwC,GACxC,mBAAoB,GACpB,UAAW,GACX,eAAgB,IAEpB,MAAMC,EAAI,OACV,IAAM,EAAW,MAAMA,EAAI,QAAQ,GAC7B,EAAO,MAAMA,EAAI,aAAa,EAAI,GAClC,EAAkB,EAAS,mBAAqB,EAAS,wBACzD,EAAO,GAAY,EAAO,UAAY,EAAOC,EAAM,YAAY,EAAK,CAAE,SAE5E,MAAO,CACH,MAAO,YAAY,EAAS,OAC5B,KAAM,iBAAiB,EAAS,YAAY,UAAU,IACtD,MAAO,EAAgB,QAAQ,eAAgB,QAC/C,YAAa,EAAS,YACtB"}