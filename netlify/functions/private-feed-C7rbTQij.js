import"./esm-shims-Dqvxr0BZ.js";import{config as e}from"./config-Dl8a1sIg.js";import"./logger-CWOoofbD.js";import"./dist-IvUHtNe1.js";import"./helpers-DzX-lcQO.js";import{parseDate as t}from"./parse-date-Bgabdhlb.js";import"./ofetch-Bzt0BXUH.js";import{got_default as n}from"./got-CdvI2yKX.js";const r={push:`PushEvent`,pr:`PullRequestEvent`,prcomm:`PullRequestReviewCommentEvent`,issuecomm:`IssueCommentEvent`,star:`WatchEvent`,fork:`ForkEvent`,create:`CreateEvent`,delete:`DeleteEvent`,release:`ReleaseEvent`,public:`PublicEvent`,member:`MemberEvent`},i={path:`/feed/:user/:types?`,categories:[`programming`],example:`/github/feed/yihong0618/star,release,pr`,parameters:{user:`GitHub username`,types:{description:`Event types to include, comma separated`,default:`all`,options:[{label:`All events`,value:`all`},{label:`Create events`,value:`create`},{label:`Delete events`,value:`delete`},{label:`Fork events`,value:`fork`},{label:`Issue comment events`,value:`issuecomm`},{label:`Member events`,value:`member`},{label:`Pull request events`,value:`pr`},{label:`Pull request review comment events`,value:`prcomm`},{label:`Public events`,value:`public`},{label:`Push events`,value:`push`},{label:`Release events`,value:`release`},{label:`Watch events (stars)`,value:`star`}]}},features:{requireConfig:[{name:`GITHUB_ACCESS_TOKEN`,optional:!0,description:`GitHub access token to access private events`}],requirePuppeteer:!1,antiCrawler:!1,supportBT:!1,supportPodcast:!1,supportScihub:!1},radar:[{source:[`github.com/:user`],target:`/feed/:user`}],name:`User's Feed`,maintainers:[`RtYkk`],handler:o};function a(e){let{id:n,type:r,actor:i,repo:a,payload:o,created_at:s}=e,c=``,l=``,u=``;switch(r){case`PushEvent`:{c=`${i.login} pushed to ${a.name}`;let e=o.ref?o.ref.replace(`refs/heads/`,``):`unknown`;l=`Pushed ${o.size||0} commit(s) to ${e} in ${a.name}`,u=o.commits.at(-1).url.replace(`api.github.com/repos/`,`github.com/`).replace(`/commits/`,`/commit/`),l+=`<br><strong>Latest commit:</strong> ${o.commits.at(-1).message}`;break}case`PullRequestEvent`:c=`${i.login} ${o.action} a pull request in ${a.name}`,l=`PR: ${o.pull_request?.title||`Unknown`}`,u=o.pull_request?.html_url||`https://github.com/${a.name}`;break;case`PullRequestReviewCommentEvent`:c=`${i.login} commented on a pull request review in ${a.name}`,l=`Comment: ${o.comment?.body||`No comment`}`,u=o.comment?.html_url||`https://github.com/${a.name}`;break;case`IssueCommentEvent`:c=`${i.login} commented on an issue in ${a.name}`,l=`Comment: ${o.comment?.body||`No comment`}`,u=o.comment?.html_url||`https://github.com/${a.name}`;break;case`WatchEvent`:c=`${i.login} starred ${a.name}`,l=`Starred repository ${a.name}`,u=`https://github.com/${a.name}`;break;case`ForkEvent`:c=`${i.login} forked ${a.name}`,l=`Forked repository ${a.name}`,u=`https://github.com/${a.name}`;break;case`CreateEvent`:c=`${i.login} created ${o.ref_type} in ${a.name}`,l=`Created ${o.ref_type}: ${o.ref||a.name}`,u=`https://github.com/${a.name}`;break;case`DeleteEvent`:c=`${i.login} deleted ${o.ref_type} in ${a.name}`,l=`Deleted ${o.ref_type}: ${o.ref}`,u=`https://github.com/${a.name}`;break;case`ReleaseEvent`:c=`${i.login} released ${o.release?.name||o.release?.tag_name} in ${a.name}`,l=o.release?.body||`Released ${o.release?.tag_name}`,u=o.release?.html_url||`https://github.com/${a.name}`;break;case`PublicEvent`:c=`${i.login} made ${a.name} public`,l=`Repository ${a.name} was made public`,u=`https://github.com/${a.name}`;break;case`MemberEvent`:c=`${i.login} ${o.action} as a member of ${a.name}`,l=`Member ${o.action} in repository ${a.name}`,u=`https://github.com/${a.name}`;break;default:c=`${i.login} performed ${r} in ${a?.name||`unknown repository`}`,l=`Activity type: ${r}`,u=a?`https://github.com/${a.name}`:`https://github.com/${i.login}`}return{title:c,link:u,description:l,pubDate:t(s),author:i.login,category:[r],guid:n}}async function o(t){let i=t.req.param(`user`),o=t.req.param(`types`)||`all`,s=e.github&&e.github.access_token,c={};s&&(c.Authorization=`token ${e.github.access_token}`);let l=await n({method:`get`,url:`https://api.github.com/users/${i}/received_events`,headers:c,searchParams:{per_page:100}}),u=[];o!==`all`&&(u=o.split(`,`).map(e=>{let t=e.trim();return r[t]||t}));let d=l.data.filter(e=>u.length===0||u.includes(e.type)).map(e=>a(e)),f=o===`all`?`All Events`:`Events: ${o}`,p=s?`Private Feed`:`Public Feed`;return{title:`${i}'s GitHub ${p} - ${f}`,link:`https://github.com/${i}`,description:`GitHub events received by ${i}${o===`all`?``:` (filtered: ${o})`}${s?` - includes private events`:` - public events only`}`,item:d}}export{i as route};
//# sourceMappingURL=private-feed-C7rbTQij.js.map