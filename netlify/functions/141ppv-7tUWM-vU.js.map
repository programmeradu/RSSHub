{"version":3,"file":"141ppv-7tUWM-vU.js","names":[],"sources":["../../lib/routes/141ppv/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport { getSubPath } from '@/utils/common-utils';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/:type/:keyword{.*}?',\r\n    categories: ['multimedia'],\r\n    name: '通用',\r\n    maintainers: ['cgkings', 'nczitzk'],\r\n    parameters: { type: '类型，可查看下表的类型说明', keyword: '关键词，可查看下表的关键词说明' },\r\n    handler,\r\n    description: `**类型**\r\n\r\n| 最新 | 热门    | 随机   | 指定演员 | 指定标签 | 日期 |\r\n| ---- | ------- | ------ | -------- | -------- | ---- |\r\n| new  | popular | random | actress  | tag      | date |\r\n\r\n**关键词**\r\n\r\n| 空 | 日期范围    | 演员名       | 标签名         | 年月日     |\r\n| -- | ----------- | ------------ | -------------- | ---------- |\r\n|    | 7 / 30 / 60 | Yua%20Mikami | Adult%20Awards | 2020/07/30 |\r\n\r\n**示例说明**\r\n\r\n-  \\`/141ppv/new\\`\r\n\r\n      仅当类型为 \\`new\\` \\`popular\\` 或 \\`random\\` 时关键词为 **空**\r\n\r\n-  \\`/141ppv/popular/30\\`\r\n\r\n      \\`popular\\` \\`random\\` 类型的关键词可填写 \\`7\\` \\`30\\` 或 \\`60\\` 三个 **日期范围** 之一，分别对应 **7 天**、**30 天** 或 **60 天内**\r\n\r\n-  \\`/141ppv/actress/Yua%20Mikami\\`\r\n\r\n      \\`actress\\` 类型的关键词必须填写 **演员名** ，可在 [此处](https://141ppv.com/actress/) 演员单页链接中获取\r\n\r\n-  \\`/141ppv/tag/Adult%20Awards\\`\r\n\r\n      \\`tag\\` 类型的关键词必须填写 **标签名** 且标签中的 \\`/\\` 必须替换为 \\`%2F\\` ，可在 [此处](https://141ppv.com/tag/) 标签单页链接中获取\r\n\r\n-  \\`/141ppv/date/2020/07/30\\`\r\n\r\n      \\`date\\` 类型的关键词必须填写 **日期(年/月/日)**`,\r\n    features: {\r\n        nsfw: true,\r\n    },\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const rootUrl = 'https://www.141ppv.com';\r\n    const type = ctx.req.param('type');\r\n    const keyword = ctx.req.param('keyword') ?? '';\r\n\r\n    const currentUrl = `${rootUrl}/${type}${keyword ? `/${keyword}` : ''}`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: currentUrl,\r\n    });\r\n\r\n    const $ = load(response.data);\r\n\r\n    if (getSubPath(ctx) === '/') {\r\n        ctx.set('redirect', `/141ppv${$('.overview').first().attr('href')}`);\r\n        return;\r\n    }\r\n\r\n    const items = $('.columns')\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n\r\n            const id = item.find('.title a').text();\r\n            const size = item.find('.title span').text();\r\n            const pubDate = item.find('.subtitle a').attr('href').split('/date/').pop();\r\n            const description = item.find('.has-text-grey-dark').text();\r\n            const actresses = item\r\n                .find('.panel-block')\r\n                .toArray()\r\n                .map((a) => $(a).text().trim());\r\n            const tags = item\r\n                .find('.tag')\r\n                .toArray()\r\n                .map((t) => $(t).text().trim());\r\n            const magnet = item.find('a[title=\"Magnet torrent\"]').attr('href');\r\n            const link = item.find('a[title=\"Download .torrent\"]').attr('href');\r\n            const onErrorAttr = item.find('.image').attr('onerror');\r\n            const backupImageRegex = /this\\.src='(.*?)'/;\r\n            const match = backupImageRegex.exec(onErrorAttr);\r\n            const image = match ? match[1] : item.find('.image').attr('src');\r\n\r\n            return {\r\n                title: `${id} ${size}`,\r\n                pubDate: parseDate(pubDate, 'YYYY/MM/DD'),\r\n                link: new URL(item.find('a').first().attr('href'), rootUrl).href,\r\n                description: art(path.join(__dirname, 'templates/description.art'), {\r\n                    image,\r\n                    id,\r\n                    size,\r\n                    pubDate,\r\n                    description,\r\n                    actresses,\r\n                    tags,\r\n                    magnet,\r\n                    link,\r\n                }),\r\n                author: actresses.join(', '),\r\n                category: [...tags, ...actresses],\r\n                enclosure_type: 'application/x-bittorrent',\r\n                enclosure_url: magnet,\r\n            };\r\n        });\r\n\r\n    return {\r\n        title: `141PPV - ${$('title').text().split('-')[0].trim()}`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"4dASA,MAAa,EAAe,CACxB,KAAM,uBACN,WAAY,CAAC,cACb,KAAM,KACN,YAAa,CAAC,UAAW,WACzB,WAAY,CAAE,KAAM,gBAAiB,QAAS,mBAC9C,UACA,YAAa,o5BAiCb,SAAU,CACN,KAAM,KAId,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAU,yBACV,EAAO,EAAI,IAAI,MAAM,QACrB,EAAU,EAAI,IAAI,MAAM,YAAc,GAEtC,EAAa,GAAG,EAAQ,GAAG,IAAO,EAAU,IAAI,IAAY,KAE5D,EAAW,MAAM,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAI,EAAK,EAAS,MAExB,GAAI,EAAW,KAAS,IAAK,CACzB,EAAI,IAAI,WAAY,UAAU,EAAE,aAAa,QAAQ,KAAK,WAC1D,OAGJ,IAAM,EAAQ,EAAE,YACX,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GAET,IAAM,EAAK,EAAK,KAAK,YAAY,OAC3B,EAAO,EAAK,KAAK,eAAe,OAChC,EAAU,EAAK,KAAK,eAAe,KAAK,QAAQ,MAAM,UAAU,MAChE,EAAc,EAAK,KAAK,uBAAuB,OAC/C,EAAY,EACb,KAAK,gBACL,UACA,IAAK,GAAM,EAAE,GAAG,OAAO,QACtB,EAAO,EACR,KAAK,QACL,UACA,IAAK,GAAM,EAAE,GAAG,OAAO,QACtB,EAAS,EAAK,KAAK,6BAA6B,KAAK,QACrD,EAAO,EAAK,KAAK,gCAAgC,KAAK,QACtD,EAAc,EAAK,KAAK,UAAU,KAAK,WACvC,EAAmB,oBACnB,EAAQ,EAAiB,KAAK,GAC9B,EAAQ,EAAQ,EAAM,GAAK,EAAK,KAAK,UAAU,KAAK,OAE1D,MAAO,CACH,MAAO,GAAG,EAAG,GAAG,IAChB,QAAS,EAAU,EAAS,cAC5B,KAAM,IAAI,IAAI,EAAK,KAAK,KAAK,QAAQ,KAAK,QAAS,GAAS,KAC5D,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,QACA,KACA,OACA,UACA,cACA,YACA,OACA,SACA,SAEJ,OAAQ,EAAU,KAAK,MACvB,SAAU,CAAC,GAAG,EAAM,GAAG,GACvB,eAAgB,2BAChB,cAAe,KAI3B,MAAO,CACH,MAAO,YAAY,EAAE,SAAS,OAAO,MAAM,KAAK,GAAG,SACnD,KAAM,EACN,KAAM"}