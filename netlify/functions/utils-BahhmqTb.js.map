{"version":3,"file":"utils-BahhmqTb.js","names":["ConfigNotFoundError","ofetch"],"sources":["../../lib/routes/spotify/utils.ts"],"sourcesContent":["import { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport ofetch from '@/utils/ofetch';\r\n\r\n// Token used to retrieve public information.\r\nasync function getPublicToken() {\r\n    if (!config.spotify || !config.spotify.clientId || !config.spotify.clientSecret) {\r\n        throw new ConfigNotFoundError('Spotify public RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n\r\n    const { clientId, clientSecret } = config.spotify;\r\n\r\n    const tokenResponse = await ofetch('https://accounts.spotify.com/api/token', {\r\n        method: 'POST',\r\n        headers: {\r\n            Authorization: `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n            grant_type: 'client_credentials',\r\n        }).toString(),\r\n    });\r\n    return tokenResponse.access_token;\r\n}\r\n\r\n// Token used to retrieve user-specific information.\r\n// Note that we don't use PKCE since the client secret shall be safe on the server.\r\nasync function getPrivateToken() {\r\n    if (!config.spotify || !config.spotify.clientId || !config.spotify.clientSecret || !config.spotify.refreshToken) {\r\n        throw new ConfigNotFoundError('Spotify private RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n\r\n    const { clientId, clientSecret, refreshToken } = config.spotify;\r\n\r\n    const tokenResponse = await ofetch('https://accounts.spotify.com/api/token', {\r\n        method: 'POST',\r\n        headers: {\r\n            Authorization: `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`,\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n        body: new URLSearchParams({\r\n            grant_type: 'refresh_token',\r\n            refresh_token: refreshToken,\r\n        }).toString(),\r\n    });\r\n    return tokenResponse.access_token;\r\n}\r\n\r\nconst parseTrack = (x) => ({\r\n    title: x.name,\r\n    author: x.artists.map((a) => a.name).join(', '),\r\n    description: `\"${x.name}\" by ${x.artists.map((a) => a.name).join(', ')} from the album \"${x.album.name}\"`,\r\n    link: x.external_urls.spotify,\r\n});\r\n\r\nconst parseArtist = (x) => ({ title: x.name, description: `${x.name}, with ${x.followers.total} followers`, link: x.external_urls.spotify });\r\n\r\nexport default { getPublicToken, getPrivateToken, parseTrack, parseArtist };\r\n"],"mappings":"8KAKA,eAAe,GAAiB,CAC5B,GAAI,CAAC,EAAO,SAAW,CAAC,EAAO,QAAQ,UAAY,CAAC,EAAO,QAAQ,aAC/D,MAAM,IAAIA,EAAoB,uJAGlC,GAAM,CAAE,WAAU,gBAAiB,EAAO,QAEpC,EAAgB,MAAMC,EAAO,yCAA0C,CACzE,OAAQ,OACR,QAAS,CACL,cAAe,SAAS,OAAO,KAAK,GAAG,EAAS,GAAG,KAAgB,SAAS,YAC5E,eAAgB,qCAEpB,KAAM,IAAI,gBAAgB,CACtB,WAAY,uBACb,aAEP,OAAO,EAAc,aAKzB,eAAe,GAAkB,CAC7B,GAAI,CAAC,EAAO,SAAW,CAAC,EAAO,QAAQ,UAAY,CAAC,EAAO,QAAQ,cAAgB,CAAC,EAAO,QAAQ,aAC/F,MAAM,IAAID,EAAoB,wJAGlC,GAAM,CAAE,WAAU,eAAc,gBAAiB,EAAO,QAElD,EAAgB,MAAMC,EAAO,yCAA0C,CACzE,OAAQ,OACR,QAAS,CACL,cAAe,SAAS,OAAO,KAAK,GAAG,EAAS,GAAG,KAAgB,SAAS,YAC5E,eAAgB,qCAEpB,KAAM,IAAI,gBAAgB,CACtB,WAAY,gBACZ,cAAe,IAChB,aAEP,OAAO,EAAc,aAGzB,MAAM,EAAc,IAAO,CACvB,MAAO,EAAE,KACT,OAAQ,EAAE,QAAQ,IAAK,GAAM,EAAE,MAAM,KAAK,MAC1C,YAAa,IAAI,EAAE,KAAK,OAAO,EAAE,QAAQ,IAAK,GAAM,EAAE,MAAM,KAAK,MAAM,mBAAmB,EAAE,MAAM,KAAK,GACvG,KAAM,EAAE,cAAc,UAGpB,EAAe,IAAO,CAAE,MAAO,EAAE,KAAM,YAAa,GAAG,EAAE,KAAK,SAAS,EAAE,UAAU,MAAM,YAAa,KAAM,EAAE,cAAc,UAElI,IAAA,EAAe,CAAE,iBAAgB,kBAAiB,aAAY"}