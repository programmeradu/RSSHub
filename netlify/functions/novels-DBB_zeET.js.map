{"version":3,"file":"novels-DBB_zeET.js","names":["got","ConfigNotFoundError","cache","InvalidParameterError","pixivUtils","got","pixivUtils","route: Route","ConfigNotFoundError"],"sources":["../../lib/routes/pixiv/novel-api/user-novels/nsfw.ts","../../lib/routes/pixiv/novel-api/user-novels/sfw.ts","../../lib/routes/pixiv/novels.ts"],"sourcesContent":["import got from '../../pixiv-got';\r\nimport { maskHeader } from '../../constants';\r\nimport queryString from 'query-string';\r\nimport { config } from '@/config';\r\nimport pixivUtils from '../../utils';\r\nimport { getNSFWNovelContent } from '../content/nsfw';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { convertPixivProtocolExtended } from '../content/utils';\r\nimport type { NSFWNovelsResponse, NovelList } from './types';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport cache from '@/utils/cache';\r\nimport { getToken } from '../../token';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\n\r\nfunction getNovels(user_id: string, token: string): Promise<NSFWNovelsResponse> {\r\n    return got('https://app-api.pixiv.net/v1/user/novels', {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        searchParams: queryString.stringify({\r\n            user_id,\r\n            filter: 'for_ios',\r\n        }),\r\n    });\r\n}\r\n\r\nexport async function getNSFWUserNovels(id: string, fullContent: boolean = false, limit: number = 100): Promise<NovelList> {\r\n    if (!config.pixiv || !config.pixiv.refreshToken) {\r\n        throw new ConfigNotFoundError('This user is an R18 creator, PIXIV_REFRESHTOKEN is required.\\npixiv RSS is disabled due to the lack of relevant config.\\n該用戶爲 R18 創作者，需要 PIXIV_REFRESHTOKEN。');\r\n    }\r\n\r\n    const token = await getToken(cache.tryGet);\r\n    if (!token) {\r\n        throw new ConfigNotFoundError('pixiv not login');\r\n    }\r\n\r\n    const response = await getNovels(id, token);\r\n    const novels = limit ? response.data.novels.slice(0, limit) : response.data.novels;\r\n\r\n    if (novels.length === 0) {\r\n        throw new InvalidParameterError(`${id} is not a valid user ID, or the user has no novels.\\n${id} 不是有效的用戶 ID，或者該用戶沒有小說作品。`);\r\n    }\r\n\r\n    const username = novels[0].user.name;\r\n\r\n    const items = await Promise.all(\r\n        novels.map(async (novel) => {\r\n            const baseItem = {\r\n                title: novel.series?.title ? `${novel.series.title} - ${novel.title}` : novel.title,\r\n                description: `\r\n                    <img src=\"${pixivUtils.getProxiedImageUrl(novel.image_urls.large)}\" />\r\n                    <div>\r\n                    <p>${convertPixivProtocolExtended(novel.caption)}</p>\r\n                    </div>`,\r\n                author: novel.user.name,\r\n                pubDate: parseDate(novel.create_date),\r\n                link: `https://www.pixiv.net/novel/show.php?id=${novel.id}`,\r\n                category: novel.tags.map((t) => t.name),\r\n            };\r\n\r\n            if (!fullContent) {\r\n                return baseItem;\r\n            }\r\n\r\n            const { content } = await getNSFWNovelContent(novel.id, token);\r\n\r\n            return {\r\n                ...baseItem,\r\n                description: `${baseItem.description}<hr>${content}`,\r\n            };\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: `${username}'s novels - pixiv`,\r\n        description: `${username} 的 pixiv 最新小说`,\r\n        image: pixivUtils.getProxiedImageUrl(novels[0].user.profile_image_urls.medium),\r\n        link: `https://www.pixiv.net/users/${id}/novels`,\r\n        item: items,\r\n    };\r\n}\r\n","import got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport pixivUtils from '../../utils';\r\nimport { getSFWNovelContent } from '../content/sfw';\r\nimport type { SFWNovelsResponse, NovelList } from './types';\r\n\r\nconst baseUrl = 'https://www.pixiv.net';\r\n\r\nexport async function getSFWUserNovels(id: string, fullContent: boolean = false, limit: number = 100): Promise<NovelList> {\r\n    const url = `${baseUrl}/users/${id}/novels`;\r\n    const { data: allData } = await got(`${baseUrl}/ajax/user/${id}/profile/all`, {\r\n        headers: {\r\n            referer: url,\r\n        },\r\n    });\r\n\r\n    const novels = Object.keys(allData.body.novels)\r\n        .sort((a, b) => Number(b) - Number(a))\r\n        .slice(0, Number.parseInt(String(limit), 10));\r\n\r\n    if (novels.length === 0) {\r\n        throw new Error('No novels found for this user, or is an R18 creator, fallback to ConfigNotFoundError');\r\n    }\r\n\r\n    const searchParams = new URLSearchParams();\r\n    for (const novel of novels) {\r\n        searchParams.append('ids[]', novel);\r\n    }\r\n\r\n    const { data } = (await got(`${baseUrl}/ajax/user/${id}/profile/novels`, {\r\n        headers: {\r\n            referer: url,\r\n        },\r\n        searchParams,\r\n    })) as SFWNovelsResponse;\r\n\r\n    const items = await Promise.all(\r\n        Object.values(data.body.works).map(async (item) => {\r\n            const baseItem = {\r\n                title: item.title,\r\n                description: `\r\n                    <img src=${pixivUtils.getProxiedImageUrl(item.url)} />\r\n                    <div>\r\n                    <p>${item.description}</p>\r\n                    </div>\r\n                `,\r\n                link: `${baseUrl}/novel/show.php?id=${item.id}`,\r\n                author: item.userName,\r\n                pubDate: parseDate(item.createDate),\r\n                updated: parseDate(item.updateDate),\r\n                category: item.tags,\r\n            };\r\n\r\n            if (!fullContent) {\r\n                return baseItem;\r\n            }\r\n\r\n            const { content } = await getSFWNovelContent(item.id);\r\n\r\n            return {\r\n                ...baseItem,\r\n                description: `${baseItem.description}<hr>${content}`,\r\n            };\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: data.body.extraData.meta.title,\r\n        description: data.body.extraData.meta.ogp.description,\r\n        image: pixivUtils.getProxiedImageUrl(Object.values(data.body.works)[0].profileImageUrl),\r\n        link: url,\r\n        item: items,\r\n    };\r\n}\r\n","import { Data, Route, ViewType } from '@/types';\r\nimport { fallback, queryToBoolean } from '@/utils/readable-social';\r\nimport { config } from '@/config';\r\nimport { getNSFWUserNovels } from './novel-api/user-novels/nsfw';\r\nimport { getSFWUserNovels } from './novel-api/user-novels/sfw';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nexport const route: Route = {\r\n    path: '/user/novels/:id/:full_content?',\r\n    categories: ['social-media'],\r\n    view: ViewType.Articles,\r\n    example: '/pixiv/user/novels/27104704',\r\n    parameters: {\r\n        id: \"User id, available in user's homepage URL\",\r\n        full_content: {\r\n            description: 'Enable or disable the display of full content. ',\r\n            options: [\r\n                { value: 'true', label: 'true' },\r\n                { value: 'false', label: 'false' },\r\n            ],\r\n            default: 'false',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'PIXIV_REFRESHTOKEN',\r\n                optional: true,\r\n                description: `\r\nPixiv 登錄後的 refresh_token，用於獲取 R18 小說\r\nrefresh_token after Pixiv login, required for accessing R18 novels\r\n[https://docs.rsshub.app/deploy/config#pixiv](https://docs.rsshub.app/deploy/config#pixiv)`,\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            title: 'User Novels (簡介 Basic info)',\r\n            source: ['www.pixiv.net/users/:id/novels', 'www.pixiv.net/users/:id', 'www.pixiv.net/en/users/:id/novels', 'www.pixiv.net/en/users/:id'],\r\n            target: '/user/novels/:id',\r\n        },\r\n        {\r\n            title: 'User Novels (全文 Full text)',\r\n            source: ['www.pixiv.net/users/:id/novels', 'www.pixiv.net/users/:id', 'www.pixiv.net/en/users/:id/novels', 'www.pixiv.net/en/users/:id'],\r\n            target: '/user/novels/:id/true',\r\n        },\r\n    ],\r\n    name: 'User Novels',\r\n    maintainers: ['TonyRL', 'SnowAgar25'],\r\n    handler,\r\n    description: `\r\n| 小說類型 Novel Type | full_content | PIXIV_REFRESHTOKEN | 返回內容 Content |\r\n|-------------------|--------------|-------------------|-----------------|\r\n| Non R18           | false        | 不需要 Not Required  | 簡介 Basic info |\r\n| Non R18           | true         | 不需要 Not Required  | 全文 Full text  |\r\n| R18               | false        | 需要 Required       | 簡介 Basic info |\r\n| R18               | true         | 需要 Required       | 全文 Full text  |\r\n\r\nDefault value for \\`full_content\\` is \\`false\\` if not specified.\r\n\r\nExample:\r\n- \\`/pixiv/user/novels/79603797\\` → 簡介 Basic info\r\n- \\`/pixiv/user/novels/79603797/true\\` → 全文 Full text`,\r\n};\r\n\r\nconst hasPixivAuth = () => Boolean(config.pixiv && config.pixiv.refreshToken);\r\n\r\nasync function handler(ctx): Promise<Data> {\r\n    const id = ctx.req.param('id');\r\n    const fullContent = fallback(undefined, queryToBoolean(ctx.req.param('full_content')), false);\r\n    const { limit } = ctx.req.query();\r\n\r\n    if (hasPixivAuth()) {\r\n        return await getNSFWUserNovels(id, fullContent, limit);\r\n    }\r\n\r\n    const nonR18Result = await getSFWUserNovels(id, fullContent, limit).catch((error) => {\r\n        if (error.name === 'Error') {\r\n            return null;\r\n        }\r\n        throw error;\r\n    });\r\n\r\n    if (nonR18Result) {\r\n        return nonR18Result;\r\n    }\r\n\r\n    throw new ConfigNotFoundError(\r\n        'This user may not have any novel works, or is an R18 creator, PIXIV_REFRESHTOKEN is required.\\npixiv RSS is disabled due to the lack of relevant config.\\n該用戶可能沒有小說作品，或者該用戶爲 R18 創作者，需要 PIXIV_REFRESHTOKEN。'\r\n    );\r\n}\r\n"],"mappings":"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"}