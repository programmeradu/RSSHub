{"version":3,"file":"api-Q3Psmfjq.js","names":["baseUrl","graphQLEndpointsPlain","gqlMap","gqlFeatures","bearerToken","bearerToken","loginLimiter","cache","loginLimiterQueue","got","login","uuidv5","ofetch","login","ConfigNotFoundError","twitterGot","ofetch","paginationTweets","baseUrl","gqlFeatures","gqlMap","gatherLegacyFromData","getUserData","cache","getUser","cacheTryGet","InvalidParameterError","getUserTweets","getUserTweetsAndReplies","getUserMedia","getUserTweet","getSearch","getList","cache","puppeteer","cache","proxy","ofetch","ConfigNotFoundError","cookie: string | Record<string, any> | null | undefined","login","dispatchers:\r\n        | {\r\n              jar: CookieJar;\r\n              agent: CookieAgent | ProxyAgent;\r\n          }\r\n        | undefined","response","tokenIndex","data","instructions","tweets: any[]","filteredEntries: any[]","cache","ofetch","userData: any","InvalidParameterError","id","params","api: {\r\n    init: () => void;\r\n    getUser: ApiItem;\r\n    getUserTweets: ApiItem;\r\n    getUserTweetsAndReplies: ApiItem;\r\n    getUserMedia: ApiItem;\r\n    getUserLikes: ApiItem;\r\n    getUserTweet: ApiItem;\r\n    getSearch: ApiItem;\r\n    getList: ApiItem;\r\n    getHomeTimeline: ApiItem;\r\n    getHomeLatestTimeline: ApiItem;\r\n}","ConfigNotFoundError","webApi","mobileApi"],"sources":["../../lib/routes/twitter/api/mobile-api/constants.ts","../../lib/routes/twitter/api/mobile-api/login.ts","../../lib/routes/twitter/api/mobile-api/token.ts","../../lib/routes/twitter/api/mobile-api/api.ts","../../lib/routes/twitter/api/web-api/constants.ts","../../lib/routes/twitter/api/web-api/login.ts","../../lib/routes/twitter/api/web-api/utils.ts","../../lib/routes/twitter/api/web-api/api.ts","../../lib/routes/twitter/api/index.ts"],"sourcesContent":["const baseUrl = 'https://api.x.com';\r\n\r\nconst consumerKey = '3nVuSoBZnx6U4vzUxf5w';\r\nconst consumerSecret = 'Bcs59EFbbsdF6Sl9Ng71smgStWEGwXXKSjYvPVt7qys';\r\n\r\nconst graphQLEndpointsPlain = [\r\n    '/graphql/u7wQyGi6oExe8_TRWGMq4Q/UserResultByScreenNameQuery',\r\n    '/graphql/oPppcargziU1uDQHAUmH-A/UserResultByIdQuery',\r\n    '/graphql/3JNH4e9dq1BifLxAa3UMWg/UserWithProfileTweetsQueryV2',\r\n    '/graphql/8IS8MaO-2EN6GZZZb8jF0g/UserWithProfileTweetsAndRepliesQueryV2',\r\n    '/graphql/PDfFf8hGeJvUCiTyWtw4wQ/MediaTimelineV2',\r\n    '/graphql/q94uRCEn65LZThakYcPT6g/TweetDetail',\r\n    '/graphql/sITyJdhRPpvpEjg4waUmTA/TweetResultByIdQuery',\r\n    '/graphql/gkjsKepM6gl_HmFWoWKfgg/SearchTimeline',\r\n    '/graphql/iTpgCtbdxrsJfyx0cFjHqg/ListByRestId',\r\n    '/graphql/-kmqNvm5Y-cVrfvBy6docg/ListBySlug',\r\n    '/graphql/P4NpVZDqUD_7MEM84L-8nw/ListMembers',\r\n    '/graphql/BbGLL1ZfMibdFNWlk7a0Pw/ListTimeline',\r\n];\r\n\r\nconst gqlMap = Object.fromEntries(graphQLEndpointsPlain.map((endpoint) => [endpoint.split('/')[3].replace(/V2$|Query$|QueryV2$/, ''), endpoint]));\r\n\r\nconst gqlFeatures = JSON.stringify({\r\n    android_graphql_skip_api_media_color_palette: false,\r\n    blue_business_profile_image_shape_enabled: false,\r\n    creator_subscriptions_subscription_count_enabled: false,\r\n    creator_subscriptions_tweet_preview_api_enabled: true,\r\n    freedom_of_speech_not_reach_fetch_enabled: false,\r\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: false,\r\n    hidden_profile_likes_enabled: false,\r\n    highlights_tweets_tab_ui_enabled: false,\r\n    interactive_text_enabled: false,\r\n    longform_notetweets_consumption_enabled: true,\r\n    longform_notetweets_inline_media_enabled: false,\r\n    longform_notetweets_richtext_consumption_enabled: true,\r\n    longform_notetweets_rich_text_read_enabled: false,\r\n    responsive_web_edit_tweet_api_enabled: false,\r\n    responsive_web_enhance_cards_enabled: false,\r\n    responsive_web_graphql_exclude_directive_enabled: true,\r\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\r\n    responsive_web_graphql_timeline_navigation_enabled: false,\r\n    responsive_web_media_download_video_enabled: false,\r\n    responsive_web_text_conversations_enabled: false,\r\n    responsive_web_twitter_article_tweet_consumption_enabled: false,\r\n    responsive_web_twitter_blue_verified_badge_is_enabled: true,\r\n    rweb_lists_timeline_redesign_enabled: true,\r\n    spaces_2022_h2_clipping: true,\r\n    spaces_2022_h2_spaces_communities: true,\r\n    standardized_nudges_misinfo: false,\r\n    subscriptions_verification_info_enabled: true,\r\n    subscriptions_verification_info_reason_enabled: true,\r\n    subscriptions_verification_info_verified_since_enabled: true,\r\n    super_follow_badge_privacy_enabled: false,\r\n    super_follow_exclusive_tweet_notifications_enabled: false,\r\n    super_follow_tweet_api_enabled: false,\r\n    super_follow_user_api_enabled: false,\r\n    tweet_awards_web_tipping_enabled: false,\r\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: false,\r\n    tweetypie_unmention_optimization_enabled: false,\r\n    unified_cards_ad_metadata_container_dynamic_card_content_query_enabled: false,\r\n    verified_phone_label_enabled: false,\r\n    vibe_api_enabled: false,\r\n    view_counts_everywhere_api_enabled: false,\r\n});\r\n\r\nconst timelineParams = {\r\n    include_can_media_tag: 1,\r\n    include_cards: 1,\r\n    include_entities: 1,\r\n    include_profile_interstitial_type: 0,\r\n    include_quote_count: 0,\r\n    include_reply_count: 0,\r\n    include_user_entities: 0,\r\n    include_ext_reply_count: 0,\r\n    include_ext_media_color: 0,\r\n    cards_platform: 'Web-13',\r\n    tweet_mode: 'extended',\r\n    send_error_codes: 1,\r\n    simple_quoted_tweet: 1,\r\n};\r\n\r\nconst bearerToken = 'Bearer AAAAAAAAAAAAAAAAAAAAAFXzAwAAAAAAMHCxpeSDG1gLNLghVe8d74hl6k4%3DRUMF4xAQLsbeBhTSRrCiQpJtxoGWeyHrDb5te2jpGskWDFW82F';\r\n\r\nconst guestActivateUrl = baseUrl + '/1.1/guest/activate.json';\r\n\r\nexport { baseUrl, consumerKey, consumerSecret, gqlMap, gqlFeatures, timelineParams, bearerToken, guestActivateUrl };\r\n","// https://github.com/BANKA2017/twitter-monitor/blob/node/apps/open_account/scripts/login.mjs\r\n\r\nimport { bearerToken, guestActivateUrl } from './constants';\r\nimport got from '@/utils/got';\r\nimport ofetch from '@/utils/ofetch';\r\nimport crypto from 'node:crypto';\r\nimport { v5 as uuidv5 } from 'uuid';\r\nimport { authenticator } from 'otplib';\r\nimport logger from '@/utils/logger';\r\nimport cache from '@/utils/cache';\r\nimport { RateLimiterMemory, RateLimiterQueue, RateLimiterRedis } from 'rate-limiter-flexible';\r\n\r\nconst ENDPOINT = 'https://api.x.com/1.1/onboarding/task.json';\r\n\r\nconst NAMESPACE = 'd41d092b-b007-48f7-9129-e9538d2d8fe9';\r\n\r\nconst headers = {\r\n    'User-Agent': 'TwitterAndroid/10.21.0-release.0 (310210000-r-0) ONEPLUS+A3010/9 (OnePlus;ONEPLUS+A3010;OnePlus;OnePlus3;0;;1;2016)',\r\n    'X-Twitter-API-Version': '5',\r\n    'X-Twitter-Client': 'TwitterAndroid',\r\n    'X-Twitter-Client-Version': '10.21.0-release.0',\r\n    'OS-Version': '28',\r\n    'System-User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 9; ONEPLUS A3010 Build/PKQ1.181203.001)',\r\n    'X-Twitter-Active-User': 'yes',\r\n    'Content-Type': 'application/json',\r\n    Authorization: bearerToken,\r\n};\r\n\r\nconst loginLimiter = cache.clients.redisClient\r\n    ? new RateLimiterRedis({\r\n          points: 1,\r\n          duration: 20,\r\n          execEvenly: true,\r\n          storeClient: cache.clients.redisClient,\r\n      })\r\n    : new RateLimiterMemory({\r\n          points: 1,\r\n          duration: 20,\r\n          execEvenly: true,\r\n      });\r\n\r\nconst loginLimiterQueue = new RateLimiterQueue(loginLimiter);\r\n\r\nconst postTask = async (flowToken: string, subtaskId: string, subtaskInput: Record<string, unknown>) =>\r\n    await got.post(ENDPOINT, {\r\n        headers,\r\n        json: {\r\n            flow_token: flowToken,\r\n            subtask_inputs: [Object.assign({ subtask_id: subtaskId }, subtaskInput)],\r\n        },\r\n    });\r\n\r\n// In the Twitter login flow, each task successfully requested will respond with a 'subtask_id' to determine what the next task is, and the execution sequence of the tasks is non-fixed.\r\n// So abstract these tasks out into a map so that they can be dynamically executed during the login flow.\r\n// If there are missing tasks in the future, simply add the implementation of that task to it.\r\nconst flowTasks = {\r\n    async LoginEnterUserIdentifier({ flowToken, username }) {\r\n        return await postTask(flowToken, 'LoginEnterUserIdentifier', {\r\n            enter_text: {\r\n                suggestion_id: null,\r\n                text: username,\r\n                link: 'next_link',\r\n            },\r\n        });\r\n    },\r\n    async LoginEnterPassword({ flowToken, password }) {\r\n        return await postTask(flowToken, 'LoginEnterPassword', {\r\n            enter_password: {\r\n                password,\r\n                link: 'next_link',\r\n            },\r\n        });\r\n    },\r\n    async LoginEnterAlternateIdentifierSubtask({ flowToken, phoneOrEmail }) {\r\n        return await postTask(flowToken, 'LoginEnterAlternateIdentifierSubtask', {\r\n            enter_text: {\r\n                suggestion_id: null,\r\n                text: phoneOrEmail,\r\n                link: 'next_link',\r\n            },\r\n        });\r\n    },\r\n    async AccountDuplicationCheck({ flowToken }) {\r\n        return await postTask(flowToken, 'AccountDuplicationCheck', {\r\n            check_logged_in_account: {\r\n                link: 'AccountDuplicationCheck_false',\r\n            },\r\n        });\r\n    },\r\n    async LoginTwoFactorAuthChallenge({ flowToken, authenticationSecret }) {\r\n        const token = authenticator.generate(authenticationSecret);\r\n        return await postTask(flowToken, 'LoginTwoFactorAuthChallenge', {\r\n            enter_text: {\r\n                suggestion_id: null,\r\n                text: token,\r\n                link: 'next_link',\r\n            },\r\n        });\r\n    },\r\n};\r\n\r\nasync function login({ username, password, authenticationSecret, phoneOrEmail }) {\r\n    return (await cache.tryGet(\r\n        `twitter:authentication:${username}`,\r\n        async () => {\r\n            try {\r\n                await loginLimiterQueue.removeTokens(1);\r\n\r\n                logger.debug('Twitter login start.');\r\n\r\n                headers['X-Twitter-Client-DeviceID'] = uuidv5(username, NAMESPACE);\r\n\r\n                const ct0 = crypto.randomUUID().replaceAll('-', '');\r\n                const guestToken = await got(guestActivateUrl, {\r\n                    headers: {\r\n                        authorization: bearerToken,\r\n                        'x-csrf-token': ct0,\r\n                        cookie: 'ct0=' + ct0,\r\n                    },\r\n                    method: 'POST',\r\n                });\r\n                logger.debug('Twitter login: guest token');\r\n\r\n                headers['x-guest-token'] = guestToken.data.guest_token;\r\n\r\n                let task = await ofetch\r\n                    .raw(\r\n                        ENDPOINT +\r\n                            '?' +\r\n                            new URLSearchParams({\r\n                                flow_name: 'login',\r\n                                api_version: '1',\r\n                                known_device_token: '',\r\n                                sim_country_code: 'us',\r\n                            }).toString(),\r\n                        {\r\n                            method: 'POST',\r\n                            headers,\r\n                            body: {\r\n                                flow_token: null,\r\n                                input_flow_data: {\r\n                                    country_code: null,\r\n                                    flow_context: {\r\n                                        referrer_context: {\r\n                                            referral_details: 'utm_source=google-play&utm_medium=organic',\r\n                                            referrer_url: '',\r\n                                        },\r\n                                        start_location: {\r\n                                            location: 'deeplink',\r\n                                        },\r\n                                    },\r\n                                    requested_variant: null,\r\n                                    target_user_id: 0,\r\n                                },\r\n                            },\r\n                        }\r\n                    )\r\n                    .then(({ headers: _headers, _data }) => {\r\n                        headers.att = _headers.get('att');\r\n                        return { data: _data };\r\n                    });\r\n\r\n                logger.debug('Twitter login flow start.');\r\n                const runTask = async ({ data }) => {\r\n                    const { subtask_id, open_account } = data.subtasks.shift();\r\n\r\n                    // If `open_account` exists (and 'subtask_id' is `LoginSuccessSubtask`), it means the login was successful.\r\n                    if (open_account) {\r\n                        return open_account;\r\n                    }\r\n\r\n                    // If task does not exist in `flowTasks`, we need to implement it.\r\n                    if (!(subtask_id in flowTasks)) {\r\n                        logger.error(`Twitter login flow task failed: unknown subtask: ${subtask_id}`);\r\n                        return;\r\n                    }\r\n\r\n                    task = await flowTasks[subtask_id]({\r\n                        flowToken: data.flow_token,\r\n                        username,\r\n                        password,\r\n                        authenticationSecret,\r\n                        phoneOrEmail,\r\n                    });\r\n                    logger.debug(`Twitter login flow task finished: subtask: ${subtask_id}.`);\r\n\r\n                    return await runTask(task);\r\n                };\r\n                const authentication = await runTask(task);\r\n                logger.debug('Twitter login flow finished.');\r\n\r\n                if (authentication) {\r\n                    logger.debug('Twitter login success.', authentication);\r\n                } else {\r\n                    logger.error(`Twitter login failed. ${JSON.stringify(task.data?.subtasks, null, 2)}`);\r\n                }\r\n\r\n                return authentication;\r\n            } catch (error) {\r\n                logger.error(`Twitter username ${username} login failed:`, error);\r\n            }\r\n        },\r\n        60 * 60 * 24 * 30, // 30 days\r\n        false\r\n    )) as {\r\n        oauth_token: string;\r\n        oauth_token_secret: string;\r\n    } | null;\r\n}\r\n\r\nexport default login;\r\n","import { config } from '@/config';\r\nimport login from './login';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nlet tokenIndex = 0;\r\n\r\nasync function getToken() {\r\n    let token;\r\n    if (config.twitter.username && config.twitter.password) {\r\n        const index = tokenIndex++ % config.twitter.username.length;\r\n        const username = config.twitter.username[index];\r\n        const password = config.twitter.password[index];\r\n        const authenticationSecret = config.twitter.authenticationSecret?.[index];\r\n        const phoneOrEmail = config.twitter.phoneOrEmail?.[index];\r\n        if (username && password) {\r\n            const authentication = await login({\r\n                username,\r\n                password,\r\n                authenticationSecret,\r\n                phoneOrEmail,\r\n            });\r\n            if (!authentication) {\r\n                throw new ConfigNotFoundError(`Invalid twitter configs: ${username}`);\r\n            }\r\n            token = {\r\n                key: authentication.oauth_token,\r\n                secret: authentication.oauth_token_secret,\r\n                cacheKey: `twitter:authentication:${username}`,\r\n            };\r\n        }\r\n    } else {\r\n        throw new ConfigNotFoundError('Invalid twitter configs');\r\n    }\r\n\r\n    return token;\r\n}\r\n\r\nexport { getToken };\r\n","import { baseUrl, gqlMap, gqlFeatures, consumerKey, consumerSecret } from './constants';\r\nimport { config } from '@/config';\r\nimport logger from '@/utils/logger';\r\nimport OAuth from 'oauth-1.0a';\r\nimport CryptoJS from 'crypto-js';\r\nimport queryString from 'query-string';\r\nimport { getToken } from './token';\r\nimport cache from '@/utils/cache';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport ofetch from '@/utils/ofetch';\r\n\r\nconst twitterGot = async (url, params) => {\r\n    const token = await getToken();\r\n\r\n    const oauth = new OAuth({\r\n        consumer: {\r\n            key: consumerKey,\r\n            secret: consumerSecret,\r\n        },\r\n        signature_method: 'HMAC-SHA1',\r\n        hash_function: (base_string, key) => CryptoJS.HmacSHA1(base_string, key).toString(CryptoJS.enc.Base64),\r\n    });\r\n\r\n    const requestData = {\r\n        url: `${url}?${queryString.stringify(params)}`,\r\n        method: 'GET',\r\n        headers: {\r\n            connection: 'keep-alive',\r\n            'content-type': 'application/json',\r\n            'x-twitter-active-user': 'yes',\r\n            authority: 'api.x.com',\r\n            'accept-encoding': 'gzip',\r\n            'accept-language': 'en-US,en;q=0.9',\r\n            accept: '*/*',\r\n            DNT: '1',\r\n        },\r\n    };\r\n\r\n    const response = await ofetch.raw(requestData.url, {\r\n        headers: oauth.toHeader(oauth.authorize(requestData, token)),\r\n    });\r\n    if (response.status === 401) {\r\n        cache.globalCache.set(token.cacheKey, '');\r\n    }\r\n\r\n    return response._data;\r\n};\r\n\r\nconst paginationTweets = async (endpoint, userId, variables, path) => {\r\n    const { data } = await twitterGot(baseUrl + endpoint, {\r\n        variables: JSON.stringify({\r\n            ...variables,\r\n            rest_id: userId,\r\n        }),\r\n        features: gqlFeatures,\r\n    });\r\n\r\n    let instructions;\r\n    if (path) {\r\n        instructions = data;\r\n        for (const p of path) {\r\n            instructions = instructions[p];\r\n        }\r\n        instructions = instructions.instructions;\r\n    } else {\r\n        instructions = data.user_result.result.timeline_response.timeline.instructions;\r\n    }\r\n\r\n    return instructions.find((i) => i.__typename === 'TimelineAddEntries' || i.type === 'TimelineAddEntries').entries;\r\n};\r\n\r\nconst timelineTweets = (userId, params = {}) =>\r\n    paginationTweets(gqlMap.UserWithProfileTweets, userId, {\r\n        ...params,\r\n        withQuickPromoteEligibilityTweetFields: true,\r\n    });\r\n\r\nconst timelineTweetsAndReplies = (userId, params = {}) =>\r\n    paginationTweets(gqlMap.UserWithProfileTweetsAndReplies, userId, {\r\n        ...params,\r\n        count: 20,\r\n    });\r\n\r\nconst timelineMedia = (userId, params = {}) => paginationTweets(gqlMap.MediaTimeline, userId, params);\r\n\r\n// const timelineLikes = (userId, params = {}) => paginationTweets(gqlMap.Likes, userId, params);\r\n\r\nconst timelineKeywords = (keywords, params = {}) =>\r\n    paginationTweets(\r\n        gqlMap.SearchTimeline,\r\n        null,\r\n        {\r\n            ...params,\r\n            rawQuery: keywords,\r\n            count: 20,\r\n            product: 'Latest',\r\n            withDownvotePerspective: false,\r\n            withReactionsMetadata: false,\r\n            withReactionsPerspective: false,\r\n        },\r\n        ['search_by_raw_query', 'search_timeline', 'timeline']\r\n    );\r\n\r\nconst tweetDetail = (userId, params) =>\r\n    paginationTweets(\r\n        gqlMap.TweetDetail,\r\n        userId,\r\n        {\r\n            ...params,\r\n            includeHasBirdwatchNotes: false,\r\n            includePromotedContent: false,\r\n            withBirdwatchNotes: false,\r\n            withVoice: false,\r\n            withV2Timeline: true,\r\n        },\r\n        ['threaded_conversation_with_injections_v2']\r\n    );\r\n\r\nconst listTweets = (listId, params = {}) =>\r\n    paginationTweets(\r\n        gqlMap.ListTimeline,\r\n        listId,\r\n        {\r\n            ...params,\r\n        },\r\n        ['list', 'timeline_response', 'timeline']\r\n    );\r\n\r\nfunction gatherLegacyFromData(entries, filterNested, userId) {\r\n    const tweets = [];\r\n    const filteredEntries = [];\r\n    for (const entry of entries) {\r\n        const entryId = entry.entryId;\r\n        if (entryId) {\r\n            if (entryId.startsWith('tweet-')) {\r\n                filteredEntries.push(entry);\r\n            }\r\n            if (filterNested && filterNested.some((f) => entryId.startsWith(f))) {\r\n                filteredEntries.push(...entry.content.items);\r\n            }\r\n        }\r\n    }\r\n    for (const entry of filteredEntries) {\r\n        if (entry.entryId) {\r\n            const content = entry.content || entry.item;\r\n            let tweet = content?.content?.tweetResult?.result || content?.itemContent?.tweet_results?.result;\r\n            if (tweet && tweet.tweet) {\r\n                tweet = tweet.tweet;\r\n            }\r\n            if (tweet) {\r\n                const retweet = tweet.legacy?.retweeted_status_result?.result;\r\n                for (const t of [tweet, retweet]) {\r\n                    if (!t?.legacy) {\r\n                        continue;\r\n                    }\r\n                    t.legacy.user = t.core?.user_result?.result?.legacy || t.core?.user_results?.result?.legacy;\r\n                    t.legacy.id_str = t.rest_id; // avoid falling back to conversation_id_str elsewhere\r\n                    const quote = t.quoted_status_result?.result;\r\n                    if (quote) {\r\n                        t.legacy.quoted_status = quote.legacy;\r\n                        t.legacy.quoted_status.user = quote.core.user_result?.result?.legacy || quote.core.user_results?.result?.legacy;\r\n                    }\r\n                    if (t.note_tweet) {\r\n                        const tmp = t.note_tweet.note_tweet_results.result;\r\n                        t.legacy.entities.hashtags = tmp.entity_set.hashtags;\r\n                        t.legacy.entities.symbols = tmp.entity_set.symbols;\r\n                        t.legacy.entities.urls = tmp.entity_set.urls;\r\n                        t.legacy.entities.user_mentions = tmp.entity_set.user_mentions;\r\n                        t.legacy.full_text = tmp.text;\r\n                    }\r\n                }\r\n                const legacy = tweet.legacy;\r\n                if (legacy) {\r\n                    if (retweet) {\r\n                        legacy.retweeted_status = retweet.legacy;\r\n                    }\r\n                    if (userId === undefined || legacy.user_id_str === userId + '') {\r\n                        tweets.push(legacy);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return tweets;\r\n}\r\n\r\nconst getUserTweetsByID = async (id, params = {}) => gatherLegacyFromData(await timelineTweets(id, params));\r\n// TODO: show the whole conversation instead of just the reply tweet\r\nconst getUserTweetsAndRepliesByID = async (id, params = {}) => gatherLegacyFromData(await timelineTweetsAndReplies(id, params), ['profile-conversation-'], id);\r\nconst getUserMediaByID = async (id, params = {}) => gatherLegacyFromData(await timelineMedia(id, params));\r\n// const getUserLikesByID = async (id, params = {}) => gatherLegacyFromData(await timelineLikes(id, params));\r\nconst getUserTweetByStatus = async (id, params = {}) => gatherLegacyFromData(await tweetDetail(id, params), ['homeConversation-', 'conversationthread-']);\r\nconst getListById = async (id, params = {}) => gatherLegacyFromData(await listTweets(id, params));\r\n\r\nconst excludeRetweet = function (tweets) {\r\n    const excluded = [];\r\n    for (const t of tweets) {\r\n        if (t.retweeted_status) {\r\n            continue;\r\n        }\r\n        excluded.push(t);\r\n    }\r\n    return excluded;\r\n};\r\n\r\nconst userByScreenName = (screenName) =>\r\n    twitterGot(`${baseUrl}${gqlMap.UserResultByScreenName}`, {\r\n        variables: `{\"screen_name\":\"${screenName}\",\"withHighlightedLabel\":true}`,\r\n        features: gqlFeatures,\r\n    });\r\nconst userByRestId = (restId) =>\r\n    twitterGot(`${baseUrl}${gqlMap.UserByRestId}`, {\r\n        variables: `{\"userId\":\"${restId}\",\"withHighlightedLabel\":true}`,\r\n        features: gqlFeatures,\r\n    });\r\nconst userByAuto = (id) => {\r\n    if (id.startsWith('+')) {\r\n        return userByRestId(id.slice(1));\r\n    }\r\n    return userByScreenName(id);\r\n};\r\nconst getUserData = (id) => cache.tryGet(`twitter-userdata-${id}`, () => userByAuto(id));\r\nconst getUserID = async (id) => {\r\n    const userData = await getUserData(id);\r\n    return (userData.data?.user || userData.data?.user_result)?.result?.rest_id;\r\n};\r\nconst getUser = async (id) => {\r\n    const userData = await getUserData(id);\r\n    return (userData.data?.user || userData.data?.user_result)?.result?.legacy;\r\n};\r\n\r\nconst cacheTryGet = async (_id, params, func) => {\r\n    const id = await getUserID(_id);\r\n    if (id === undefined) {\r\n        throw new InvalidParameterError('User not found');\r\n    }\r\n    const funcName = func.name;\r\n    const paramsString = JSON.stringify(params);\r\n    return cache.tryGet(`twitter:${id}:${funcName}:${paramsString}`, () => func(id, params), config.cache.routeExpire, false);\r\n};\r\n\r\n// returns:\r\n// 1. nothing for some users\r\n// 2. HOT tweets for the other users, instead of the LATEST ones\r\nconst _getUserTweets = (id, params = {}) => cacheTryGet(id, params, getUserTweetsByID);\r\n// workaround for the above issue:\r\n// 1. getUserTweetsAndReplies return LATEST tweets and replies, which requires filtering\r\n//    a. if one replies a lot (e.g. elonmusk), there is sometimes no tweets left after filtering, caching may help\r\n// 2. getUserMedia return LATEST media tweets, which is a good plus\r\nconst getUserTweets = async (id, params = {}) => {\r\n    let tweets = [];\r\n    const rest_id = await getUserID(id);\r\n    await Promise.all(\r\n        [_getUserTweets, getUserTweetsAndReplies, getUserMedia].map(async (func) => {\r\n            try {\r\n                tweets.push(...(await func(id, params)));\r\n            } catch (error) {\r\n                logger.warn(`Failed to get tweets for ${id} with ${func.name}: ${error}`);\r\n            }\r\n        })\r\n    );\r\n\r\n    const cacheKey = `twitter:user:tweets-cache:${rest_id}`;\r\n    let cacheValue = await cache.get(cacheKey);\r\n    if (cacheValue) {\r\n        cacheValue = JSON.parse(cacheValue);\r\n        if (cacheValue && cacheValue.length) {\r\n            tweets = [...cacheValue, ...tweets];\r\n        }\r\n    }\r\n    const idSet = new Set();\r\n    tweets = tweets\r\n        .filter(\r\n            (tweet) =>\r\n                !tweet.in_reply_to_user_id_str || // exclude replies\r\n                tweet.in_reply_to_user_id_str === rest_id // but include replies to self (threads)\r\n        )\r\n        .map((tweet) => {\r\n            const id_str = tweet.id_str || tweet.conversation_id_str;\r\n            return !idSet.has(id_str) && idSet.add(id_str) && tweet;\r\n        }) // deduplicate\r\n        .filter(Boolean) // remove null\r\n        .sort((a, b) => (b.id_str || b.conversation_id_str) - (a.id_str || a.conversation_id_str)) // desc\r\n        .slice(0, 20);\r\n    cache.set(cacheKey, JSON.stringify(tweets));\r\n    return tweets;\r\n};\r\nconst getUserTweetsAndReplies = (id, params = {}) => cacheTryGet(id, params, getUserTweetsAndRepliesByID);\r\nconst getUserMedia = (id, params = {}) => cacheTryGet(id, params, getUserMediaByID);\r\n// const getUserLikes = (id, params = {}) => cacheTryGet(id, params, getUserLikesByID);\r\nconst getUserTweet = (id, params) => cacheTryGet(id, params, getUserTweetByStatus);\r\n\r\nconst getSearch = async (keywords, params = {}) => gatherLegacyFromData(await timelineKeywords(keywords, params));\r\n\r\nconst getList = (id, params = {}) => cache.tryGet(`twitter:${id}:getListById:${JSON.stringify(params)}`, () => getListById(id, params), config.cache.routeExpire, false);\r\n\r\nexport default {\r\n    getUser,\r\n    getUserTweets,\r\n    getUserTweetsAndReplies,\r\n    getUserMedia,\r\n    // getUserLikes,\r\n    excludeRetweet,\r\n    getSearch,\r\n    getList,\r\n    getUserTweet,\r\n    init: () => void 0,\r\n};\r\n","const baseUrl = 'https://x.com/i/api';\r\n\r\nconst graphQLEndpointsPlain = [\r\n    '/graphql/E3opETHurmVJflFsUBVuUQ/UserTweets',\r\n    '/graphql/Yka-W8dz7RaEuQNkroPkYw/UserByScreenName',\r\n    '/graphql/HJFjzBgCs16TqxewQOeLNg/HomeTimeline',\r\n    '/graphql/DiTkXJgLqBBxCs7zaYsbtA/HomeLatestTimeline',\r\n    '/graphql/bt4TKuFz4T7Ckk-VvQVSow/UserTweetsAndReplies',\r\n    '/graphql/dexO_2tohK86JDudXXG3Yw/UserMedia',\r\n    '/graphql/Qw77dDjp9xCpUY-AXwt-yQ/UserByRestId',\r\n    '/graphql/UN1i3zUiCWa-6r-Uaho4fw/SearchTimeline',\r\n    '/graphql/Pa45JvqZuKcW1plybfgBlQ/ListLatestTweetsTimeline',\r\n    '/graphql/QuBlQ6SxNAQCt6-kBiCXCQ/TweetDetail',\r\n];\r\n\r\nconst gqlMap = Object.fromEntries(graphQLEndpointsPlain.map((endpoint) => [endpoint.split('/')[3].replace(/V2$|Query$|QueryV2$/, ''), endpoint]));\r\n\r\nconst thirdPartySupportedAPI = ['UserByScreenName', 'UserByRestId', 'UserTweets', 'UserTweetsAndReplies', 'ListLatestTweetsTimeline', 'SearchTimeline'];\r\n\r\nconst gqlFeatureUser = {\r\n    hidden_profile_subscriptions_enabled: true,\r\n    rweb_tipjar_consumption_enabled: true,\r\n    responsive_web_graphql_exclude_directive_enabled: true,\r\n    verified_phone_label_enabled: false,\r\n    subscriptions_verification_info_is_identity_verified_enabled: true,\r\n    subscriptions_verification_info_verified_since_enabled: true,\r\n    highlights_tweets_tab_ui_enabled: true,\r\n    responsive_web_twitter_article_notes_tab_enabled: true,\r\n    subscriptions_feature_can_gift_premium: true,\r\n    creator_subscriptions_tweet_preview_api_enabled: true,\r\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\r\n    responsive_web_graphql_timeline_navigation_enabled: true,\r\n};\r\nconst gqlFeatureFeed = {\r\n    rweb_tipjar_consumption_enabled: true,\r\n    responsive_web_graphql_exclude_directive_enabled: true,\r\n    verified_phone_label_enabled: false,\r\n    creator_subscriptions_tweet_preview_api_enabled: true,\r\n    responsive_web_graphql_timeline_navigation_enabled: true,\r\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\r\n    communities_web_enable_tweet_community_results_fetch: true,\r\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\r\n    articles_preview_enabled: true,\r\n    responsive_web_edit_tweet_api_enabled: true,\r\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\r\n    view_counts_everywhere_api_enabled: true,\r\n    longform_notetweets_consumption_enabled: true,\r\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\r\n    tweet_awards_web_tipping_enabled: false,\r\n    creator_subscriptions_quote_tweet_preview_enabled: false,\r\n    freedom_of_speech_not_reach_fetch_enabled: true,\r\n    standardized_nudges_misinfo: true,\r\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: true,\r\n    rweb_video_timestamps_enabled: true,\r\n    longform_notetweets_rich_text_read_enabled: true,\r\n    longform_notetweets_inline_media_enabled: true,\r\n    responsive_web_enhance_cards_enabled: false,\r\n};\r\n\r\nconst TweetDetailFeatures = {\r\n    rweb_tipjar_consumption_enabled: true,\r\n    responsive_web_graphql_exclude_directive_enabled: true,\r\n    verified_phone_label_enabled: false,\r\n    creator_subscriptions_tweet_preview_api_enabled: true,\r\n    responsive_web_graphql_timeline_navigation_enabled: true,\r\n    responsive_web_graphql_skip_user_profile_image_extensions_enabled: false,\r\n    communities_web_enable_tweet_community_results_fetch: true,\r\n    c9s_tweet_anatomy_moderator_badge_enabled: true,\r\n    articles_preview_enabled: true,\r\n    responsive_web_edit_tweet_api_enabled: true,\r\n    graphql_is_translatable_rweb_tweet_is_translatable_enabled: true,\r\n    view_counts_everywhere_api_enabled: true,\r\n    longform_notetweets_consumption_enabled: true,\r\n    responsive_web_twitter_article_tweet_consumption_enabled: true,\r\n    tweet_awards_web_tipping_enabled: false,\r\n    creator_subscriptions_quote_tweet_preview_enabled: false,\r\n    freedom_of_speech_not_reach_fetch_enabled: true,\r\n    standardized_nudges_misinfo: true,\r\n    tweet_with_visibility_results_prefer_gql_limited_actions_policy_enabled: true,\r\n    rweb_video_timestamps_enabled: true,\r\n    longform_notetweets_rich_text_read_enabled: true,\r\n    longform_notetweets_inline_media_enabled: true,\r\n    responsive_web_enhance_cards_enabled: false,\r\n};\r\nconst gqlFeatures = {\r\n    UserByScreenName: gqlFeatureUser,\r\n    UserByRestId: gqlFeatureUser,\r\n    UserTweets: gqlFeatureFeed,\r\n    UserTweetsAndReplies: gqlFeatureFeed,\r\n    UserMedia: gqlFeatureFeed,\r\n    SearchTimeline: gqlFeatureFeed,\r\n    ListLatestTweetsTimeline: gqlFeatureFeed,\r\n    HomeTimeline: gqlFeatureFeed,\r\n    HomeLatestTimeline: TweetDetailFeatures,\r\n    TweetDetail: TweetDetailFeatures,\r\n    Likes: gqlFeatureFeed,\r\n};\r\n\r\nconst timelineParams = {\r\n    include_can_media_tag: 1,\r\n    include_cards: 1,\r\n    include_entities: 1,\r\n    include_profile_interstitial_type: 0,\r\n    include_quote_count: 0,\r\n    include_reply_count: 0,\r\n    include_user_entities: 0,\r\n    include_ext_reply_count: 0,\r\n    include_ext_media_color: 0,\r\n    cards_platform: 'Web-13',\r\n    tweet_mode: 'extended',\r\n    send_error_codes: 1,\r\n    simple_quoted_tweet: 1,\r\n};\r\n\r\nconst bearerToken = 'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA';\r\n\r\nexport { baseUrl, gqlMap, gqlFeatures, timelineParams, bearerToken, thirdPartySupportedAPI };\r\n","import { authenticator } from 'otplib';\r\nimport logger from '@/utils/logger';\r\nimport cache from '@/utils/cache';\r\nimport { RateLimiterMemory, RateLimiterRedis, RateLimiterQueue } from 'rate-limiter-flexible';\r\nimport puppeteer from '@/utils/puppeteer';\r\nimport { CookieJar } from 'tough-cookie';\r\n\r\nconst loginLimiter = cache.clients.redisClient\r\n    ? new RateLimiterRedis({\r\n          points: 1,\r\n          duration: 20,\r\n          execEvenly: true,\r\n          storeClient: cache.clients.redisClient,\r\n      })\r\n    : new RateLimiterMemory({\r\n          points: 1,\r\n          duration: 20,\r\n          execEvenly: true,\r\n      });\r\n\r\nconst loginLimiterQueue = new RateLimiterQueue(loginLimiter);\r\n\r\nasync function login({ username, password, authenticationSecret }) {\r\n    if (!username || !password) {\r\n        return;\r\n    }\r\n    try {\r\n        await loginLimiterQueue.removeTokens(1);\r\n\r\n        const cookieJar = new CookieJar();\r\n        const browser = await puppeteer();\r\n        const page = await browser.newPage();\r\n        await page.goto('https://x.com/i/flow/login');\r\n        await page.waitForSelector('input[autocomplete=\"username\"]');\r\n        await page.type('input[autocomplete=\"username\"]', username);\r\n        const buttons = await page.$$('button');\r\n        await buttons[3]?.click();\r\n        await page.waitForSelector('input[autocomplete=\"current-password\"]');\r\n        await page.type('input[autocomplete=\"current-password\"]', password);\r\n        (await page.waitForSelector('button[data-testid=\"LoginForm_Login_Button\"]'))?.click();\r\n        if (authenticationSecret) {\r\n            await page.waitForSelector('input[inputmode=\"numeric\"]');\r\n            const token = authenticator.generate(authenticationSecret);\r\n            await page.type('input[inputmode=\"numeric\"]', token);\r\n            (await page.waitForSelector('button[data-testid=\"ocfEnterTextNextButton\"]'))?.click();\r\n        }\r\n        const waitForRequest = new Promise<string>((resolve) => {\r\n            page.on('response', async (response) => {\r\n                if (response.url().includes('/HomeTimeline')) {\r\n                    const data = await response.json();\r\n                    const message = data?.data?.home?.home_timeline_urt?.instructions?.[0]?.entries?.[0]?.entryId;\r\n                    if (message === 'messageprompt-suspended-prompt') {\r\n                        logger.error(`twitter debug: twitter username ${username} login failed: messageprompt-suspended-prompt`);\r\n                        resolve('');\r\n                    }\r\n                    const cookies = await page.cookies();\r\n                    for (const cookie of cookies) {\r\n                        cookieJar.setCookieSync(`${cookie.name}=${cookie.value}`, 'https://x.com');\r\n                    }\r\n                    logger.debug(`twitter debug: twitter username ${username} login success`);\r\n                    resolve(JSON.stringify(cookieJar.serializeSync()));\r\n                }\r\n            });\r\n        });\r\n        const cookieString = await waitForRequest;\r\n        await browser.close();\r\n        return cookieString;\r\n    } catch (error) {\r\n        logger.error(`twitter debug: twitter username ${username} login failed:`, error);\r\n    }\r\n}\r\n\r\nexport default login;\r\n","import ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport { baseUrl, gqlFeatures, bearerToken, gqlMap, thirdPartySupportedAPI } from './constants';\r\nimport { config } from '@/config';\r\nimport queryString from 'query-string';\r\nimport { Cookie, CookieJar } from 'tough-cookie';\r\nimport { CookieAgent, CookieClient } from 'http-cookie-agent/undici';\r\nimport { ProxyAgent } from 'undici';\r\nimport cache from '@/utils/cache';\r\nimport logger from '@/utils/logger';\r\nimport ofetch from '@/utils/ofetch';\r\nimport proxy from '@/utils/proxy';\r\nimport login from './login';\r\n\r\nlet authTokenIndex = 0;\r\n\r\nconst token2Cookie = async (token) => {\r\n    const c = await cache.get(`twitter:cookie:${token}`);\r\n    if (c) {\r\n        return c;\r\n    }\r\n    const jar = new CookieJar();\r\n    await jar.setCookie(`auth_token=${token}`, 'https://x.com');\r\n    try {\r\n        const agent = proxy.proxyUri\r\n            ? new ProxyAgent({\r\n                  factory: (origin, opts) => new CookieClient(origin as string, { ...opts, cookies: { jar } }),\r\n                  uri: proxy.proxyUri,\r\n              })\r\n            : new CookieAgent({ cookies: { jar } });\r\n        if (token) {\r\n            await ofetch('https://x.com', {\r\n                dispatcher: agent,\r\n            });\r\n        } else {\r\n            const data = await ofetch('https://x.com/narendramodi?mx=2', {\r\n                dispatcher: agent,\r\n            });\r\n            const gt = data.match(/document\\.cookie=\"gt=(\\d+)/)?.[1];\r\n            if (gt) {\r\n                jar.setCookieSync(`gt=${gt}`, 'https://x.com');\r\n            }\r\n        }\r\n        const cookie = JSON.stringify(jar.serializeSync());\r\n        cache.set(`twitter:cookie:${token}`, cookie);\r\n        return cookie;\r\n    } catch {\r\n        // ignore\r\n        return '';\r\n    }\r\n};\r\n\r\nconst lockPrefix = 'twitter:lock-token1:';\r\n\r\nconst getAuth = async (retry: number) => {\r\n    if (config.twitter.authToken && retry > 0) {\r\n        const index = authTokenIndex++ % config.twitter.authToken.length;\r\n        const token = config.twitter.authToken[index];\r\n        const lock = await cache.get(`${lockPrefix}${token}`, false);\r\n        if (lock) {\r\n            logger.debug(`twitter debug: twitter cookie for token ${token} is locked, retry: ${retry}`);\r\n            await new Promise((resolve) => setTimeout(resolve, Math.random() * 500 + 500));\r\n            return await getAuth(retry - 1);\r\n        } else {\r\n            logger.debug(`twitter debug: lock twitter cookie for token ${token}`);\r\n            await cache.set(`${lockPrefix}${token}`, '1', 20);\r\n            return {\r\n                token,\r\n                username: config.twitter.username?.[index],\r\n                password: config.twitter.password?.[index],\r\n                authenticationSecret: config.twitter.authenticationSecret?.[index],\r\n            };\r\n        }\r\n    }\r\n};\r\n\r\nexport const twitterGot = async (\r\n    url,\r\n    params,\r\n    options?: {\r\n        allowNoAuth?: boolean;\r\n    }\r\n) => {\r\n    const auth = await getAuth(30);\r\n\r\n    if (!auth && !options?.allowNoAuth) {\r\n        throw new ConfigNotFoundError('No valid Twitter token found');\r\n    }\r\n\r\n    const requestUrl = `${url}?${queryString.stringify(params)}`;\r\n\r\n    let cookie: string | Record<string, any> | null | undefined = await token2Cookie(auth?.token);\r\n    if (!cookie && auth) {\r\n        cookie = await login({\r\n            username: auth.username,\r\n            password: auth.password,\r\n            authenticationSecret: auth.authenticationSecret,\r\n        });\r\n    }\r\n    let dispatchers:\r\n        | {\r\n              jar: CookieJar;\r\n              agent: CookieAgent | ProxyAgent;\r\n          }\r\n        | undefined;\r\n    if (cookie) {\r\n        logger.debug(`twitter debug: got twitter cookie for token ${auth?.token}`);\r\n        if (typeof cookie === 'string') {\r\n            cookie = JSON.parse(cookie);\r\n        }\r\n        const jar = CookieJar.deserializeSync(cookie as any);\r\n        const agent = proxy.proxyUri\r\n            ? new ProxyAgent({\r\n                  factory: (origin, opts) => new CookieClient(origin as string, { ...opts, cookies: { jar } }),\r\n                  uri: proxy.proxyUri,\r\n              })\r\n            : new CookieAgent({ cookies: { jar } });\r\n        if (proxy.proxyUri) {\r\n            logger.debug(`twitter debug: Proxying request: ${requestUrl}`);\r\n        }\r\n        dispatchers = {\r\n            jar,\r\n            agent,\r\n        };\r\n    } else if (auth) {\r\n        throw new ConfigNotFoundError(`Twitter cookie for token ${auth?.token?.replace(/(\\w{8})(\\w+)/, (_, v1, v2) => v1 + '*'.repeat(v2.length))} is not valid`);\r\n    }\r\n    const jsonCookie = dispatchers\r\n        ? Object.fromEntries(\r\n              dispatchers.jar\r\n                  .getCookieStringSync(url)\r\n                  .split(';')\r\n                  .map((c) => Cookie.parse(c)?.toJSON())\r\n                  .map((c) => [c?.key, c?.value])\r\n          )\r\n        : {};\r\n\r\n    const response = await ofetch.raw(requestUrl, {\r\n        retry: 0,\r\n        headers: {\r\n            authority: 'x.com',\r\n            accept: '*/*',\r\n            'accept-language': 'en-US,en;q=0.9',\r\n            authorization: bearerToken,\r\n            'cache-control': 'no-cache',\r\n            'content-type': 'application/json',\r\n            dnt: '1',\r\n            pragma: 'no-cache',\r\n            referer: 'https://x.com/',\r\n            'x-twitter-active-user': 'yes',\r\n            'x-twitter-client-language': 'en',\r\n            'x-csrf-token': jsonCookie.ct0,\r\n            ...(auth?.token\r\n                ? {\r\n                      'x-twitter-auth-type': 'OAuth2Session',\r\n                  }\r\n                : {\r\n                      'x-guest-token': jsonCookie.gt,\r\n                  }),\r\n        },\r\n        dispatcher: dispatchers?.agent,\r\n        onResponse: async ({ response }) => {\r\n            const remaining = response.headers.get('x-rate-limit-remaining');\r\n            const remainingInt = Number.parseInt(remaining || '0');\r\n            const reset = response.headers.get('x-rate-limit-reset');\r\n            logger.debug(\r\n                `twitter debug: twitter rate limit remaining for token ${auth?.token} is ${remaining} and reset at ${reset}, auth: ${JSON.stringify(auth)}, status: ${response.status}, data: ${JSON.stringify(response._data?.data)}, cookie: ${JSON.stringify(dispatchers?.jar.serializeSync())}`\r\n            );\r\n            if (auth) {\r\n                if (remaining && remainingInt < 2 && reset) {\r\n                    const resetTime = new Date(Number.parseInt(reset) * 1000);\r\n                    const delay = (resetTime.getTime() - Date.now()) / 1000;\r\n                    logger.debug(`twitter debug: twitter rate limit exceeded for token ${auth.token} with status ${response.status}, will unlock after ${delay}s`);\r\n                    await cache.set(`${lockPrefix}${auth.token}`, '1', Math.ceil(delay) * 2);\r\n                } else if (response.status === 429 || JSON.stringify(response._data?.data) === '{\"user\":{}}') {\r\n                    logger.debug(`twitter debug: twitter rate limit exceeded for token ${auth.token} with status ${response.status}`);\r\n                    await cache.set(`${lockPrefix}${auth.token}`, '1', 2000);\r\n                } else if (response.status === 403 || response.status === 401) {\r\n                    const newCookie = await login({\r\n                        username: auth.username,\r\n                        password: auth.password,\r\n                        authenticationSecret: auth.authenticationSecret,\r\n                    });\r\n                    if (newCookie) {\r\n                        logger.debug(`twitter debug: reset twitter cookie for token ${auth.token}, ${newCookie}`);\r\n                        await cache.set(`twitter:cookie:${auth.token}`, newCookie, config.cache.contentExpire);\r\n                        logger.debug(`twitter debug: unlock twitter cookie for token ${auth.token} with error1`);\r\n                        await cache.set(`${lockPrefix}${auth.token}`, '', 1);\r\n                    } else {\r\n                        const tokenIndex = config.twitter.authToken?.indexOf(auth.token);\r\n                        if (tokenIndex !== undefined && tokenIndex !== -1) {\r\n                            config.twitter.authToken?.splice(tokenIndex, 1);\r\n                        }\r\n                        if (auth.username) {\r\n                            const usernameIndex = config.twitter.username?.indexOf(auth.username);\r\n                            if (usernameIndex !== undefined && usernameIndex !== -1) {\r\n                                config.twitter.username?.splice(usernameIndex, 1);\r\n                            }\r\n                        }\r\n                        if (auth.password) {\r\n                            const passwordIndex = config.twitter.password?.indexOf(auth.password);\r\n                            if (passwordIndex !== undefined && passwordIndex !== -1) {\r\n                                config.twitter.password?.splice(passwordIndex, 1);\r\n                            }\r\n                        }\r\n                        logger.debug(`twitter debug: delete twitter cookie for token ${auth.token} with status ${response.status}, remaining tokens: ${config.twitter.authToken?.length}`);\r\n                        await cache.set(`${lockPrefix}${auth.token}`, '1', 3600);\r\n                    }\r\n                } else {\r\n                    logger.debug(`twitter debug: unlock twitter cookie with success for token ${auth.token}`);\r\n                    await cache.set(`${lockPrefix}${auth.token}`, '', 1);\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    if (auth?.token) {\r\n        logger.debug(`twitter debug: update twitter cookie for token ${auth.token}`);\r\n        await cache.set(`twitter:cookie:${auth.token}`, JSON.stringify(dispatchers?.jar.serializeSync()), config.cache.contentExpire);\r\n    }\r\n\r\n    return response._data;\r\n};\r\n\r\nexport const paginationTweets = async (endpoint: string, userId: number | undefined, variables: Record<string, any>, path?: string[]) => {\r\n    const params = {\r\n        variables: JSON.stringify({ ...variables, userId }),\r\n        features: JSON.stringify(gqlFeatures[endpoint]),\r\n    };\r\n\r\n    const fetchData = async () => {\r\n        if (config.twitter.thirdPartyApi && thirdPartySupportedAPI.includes(endpoint)) {\r\n            const { data } = await ofetch(`${config.twitter.thirdPartyApi}${gqlMap[endpoint]}`, {\r\n                method: 'GET',\r\n                params,\r\n            });\r\n            return data;\r\n        }\r\n        const { data } = await twitterGot(baseUrl + gqlMap[endpoint], params);\r\n        return data;\r\n    };\r\n\r\n    const getInstructions = (data: any) => {\r\n        if (path) {\r\n            let instructions = data;\r\n            for (const p of path) {\r\n                instructions = instructions[p];\r\n            }\r\n            return instructions.instructions;\r\n        }\r\n\r\n        const userResult = data?.user?.result;\r\n        const timeline = userResult?.timeline?.timeline || userResult?.timeline?.timeline_v2 || userResult?.timeline_v2?.timeline;\r\n        const instructions = timeline?.instructions;\r\n        if (!instructions) {\r\n            logger.debug(`twitter debug: instructions not found in data: ${JSON.stringify(data)}`);\r\n        }\r\n        return instructions;\r\n    };\r\n\r\n    const data = await fetchData();\r\n    const instructions = getInstructions(data);\r\n    if (!instructions) {\r\n        return [];\r\n    }\r\n\r\n    const moduleItems = instructions.find((i) => i.type === 'TimelineAddToModule')?.moduleItems;\r\n    const entries = instructions.find((i) => i.type === 'TimelineAddEntries')?.entries;\r\n\r\n    return moduleItems || entries || [];\r\n};\r\n\r\nexport function gatherLegacyFromData(entries: any[], filterNested?: string[], userId?: number | string) {\r\n    const tweets: any[] = [];\r\n    const filteredEntries: any[] = [];\r\n    for (const entry of entries) {\r\n        const entryId = entry.entryId;\r\n        if (entryId) {\r\n            if (entryId.startsWith('tweet-')) {\r\n                filteredEntries.push(entry);\r\n            } else if (entryId.startsWith('profile-grid-0-tweet-')) {\r\n                filteredEntries.push(entry);\r\n            }\r\n            if (filterNested && filterNested.some((f) => entryId.startsWith(f))) {\r\n                filteredEntries.push(...entry.content.items);\r\n            }\r\n        }\r\n    }\r\n    for (const entry of filteredEntries) {\r\n        if (entry.entryId) {\r\n            const content = entry.content || entry.item;\r\n            let tweet = content?.content?.tweetResult?.result || content?.itemContent?.tweet_results?.result;\r\n            if (tweet && tweet.tweet) {\r\n                tweet = tweet.tweet;\r\n            }\r\n            if (tweet) {\r\n                const retweet = tweet.legacy?.retweeted_status_result?.result;\r\n                for (const t of [tweet, retweet]) {\r\n                    if (!t?.legacy) {\r\n                        continue;\r\n                    }\r\n                    t.legacy.user = t.core?.user_result?.result?.legacy || t.core?.user_results?.result?.legacy;\r\n                    // Add name and screen_name from core to maintain compatibility\r\n                    if (t.legacy.user && t.core?.user_results?.result?.core) {\r\n                        const coreUser = t.core.user_results.result.core;\r\n                        if (coreUser.name) {\r\n                            t.legacy.user.name = coreUser.name;\r\n                        }\r\n                        if (coreUser.screen_name) {\r\n                            t.legacy.user.screen_name = coreUser.screen_name;\r\n                        }\r\n                    }\r\n                    t.legacy.id_str = t.rest_id; // avoid falling back to conversation_id_str elsewhere\r\n                    const quote = t.quoted_status_result?.result?.tweet || t.quoted_status_result?.result;\r\n                    if (quote) {\r\n                        t.legacy.quoted_status = quote.legacy;\r\n                        t.legacy.quoted_status.user = quote.core.user_result?.result?.legacy || quote.core.user_results?.result?.legacy;\r\n                        // Add name and screen_name from core for quoted status user\r\n                        if (t.legacy.quoted_status.user && quote.core?.user_results?.result?.core) {\r\n                            const quoteCoreUser = quote.core.user_results.result.core;\r\n                            if (quoteCoreUser.name) {\r\n                                t.legacy.quoted_status.user.name = quoteCoreUser.name;\r\n                            }\r\n                            if (quoteCoreUser.screen_name) {\r\n                                t.legacy.quoted_status.user.screen_name = quoteCoreUser.screen_name;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (t.note_tweet) {\r\n                        const tmp = t.note_tweet.note_tweet_results.result;\r\n                        t.legacy.entities.hashtags = tmp.entity_set.hashtags;\r\n                        t.legacy.entities.symbols = tmp.entity_set.symbols;\r\n                        t.legacy.entities.urls = tmp.entity_set.urls;\r\n                        t.legacy.entities.user_mentions = tmp.entity_set.user_mentions;\r\n                        t.legacy.full_text = tmp.text;\r\n                    }\r\n                }\r\n                const legacy = tweet.legacy;\r\n                if (legacy) {\r\n                    if (retweet) {\r\n                        legacy.retweeted_status = retweet.legacy;\r\n                    }\r\n                    if (userId === undefined || legacy.user_id_str === userId + '') {\r\n                        tweets.push(legacy);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tweets;\r\n}\r\n","import { baseUrl, gqlMap, gqlFeatures } from './constants';\r\nimport { config } from '@/config';\r\nimport cache from '@/utils/cache';\r\nimport { twitterGot, paginationTweets, gatherLegacyFromData } from './utils';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport ofetch from '@/utils/ofetch';\r\n\r\nconst getUserData = (id) =>\r\n    cache.tryGet(`twitter-userdata-${id}`, () => {\r\n        const params = {\r\n            variables: id.startsWith('+')\r\n                ? JSON.stringify({\r\n                      userId: id.slice(1),\r\n                      withSafetyModeUserFields: true,\r\n                  })\r\n                : JSON.stringify({\r\n                      screen_name: id,\r\n                      withSafetyModeUserFields: true,\r\n                  }),\r\n            features: JSON.stringify(id.startsWith('+') ? gqlFeatures.UserByRestId : gqlFeatures.UserByScreenName),\r\n            fieldToggles: JSON.stringify({\r\n                withAuxiliaryUserLabels: false,\r\n            }),\r\n        };\r\n\r\n        if (config.twitter.thirdPartyApi) {\r\n            const endpoint = id.startsWith('+') ? gqlMap.UserByRestId : gqlMap.UserByScreenName;\r\n\r\n            return ofetch(`${config.twitter.thirdPartyApi}${endpoint}`, {\r\n                method: 'GET',\r\n                params,\r\n            });\r\n        }\r\n\r\n        return twitterGot(`${baseUrl}${id.startsWith('+') ? gqlMap.UserByRestId : gqlMap.UserByScreenName}`, params, {\r\n            allowNoAuth: !id.startsWith('+'),\r\n        });\r\n    });\r\n\r\nconst cacheTryGet = async (_id, params, func) => {\r\n    const userData: any = await getUserData(_id);\r\n    const id = (userData.data?.user || userData.data?.user_result)?.result?.rest_id;\r\n    if (id === undefined) {\r\n        cache.set(`twitter-userdata-${_id}`, '', config.cache.contentExpire);\r\n        throw new InvalidParameterError('User not found');\r\n    }\r\n    const funcName = func.name;\r\n    const paramsString = JSON.stringify(params);\r\n    return cache.tryGet(`twitter:${id}:${funcName}:${paramsString}`, () => func(id, params), config.cache.routeExpire, false);\r\n};\r\n\r\nconst getUserTweets = (id: string, params?: Record<string, any>) =>\r\n    cacheTryGet(id, params, async (id, params = {}) =>\r\n        gatherLegacyFromData(\r\n            await paginationTweets('UserTweets', id, {\r\n                ...params,\r\n                count: 20,\r\n                includePromotedContent: true,\r\n                withQuickPromoteEligibilityTweetFields: true,\r\n                withVoice: true,\r\n                withV2Timeline: true,\r\n            })\r\n        )\r\n    );\r\n\r\nconst getUserTweetsAndReplies = (id: string, params?: Record<string, any>) =>\r\n    cacheTryGet(id, params, async (id, params = {}) =>\r\n        gatherLegacyFromData(\r\n            await paginationTweets('UserTweetsAndReplies', id, {\r\n                ...params,\r\n                count: 20,\r\n                includePromotedContent: true,\r\n                withCommunity: true,\r\n                withVoice: true,\r\n                withV2Timeline: true,\r\n            }),\r\n            ['profile-conversation-'],\r\n            id\r\n        )\r\n    );\r\n\r\nconst getUserMedia = (id: string, params?: Record<string, any>) =>\r\n    cacheTryGet(id, params, async (id, params = {}) => {\r\n        const cursorSource = await paginationTweets('UserMedia', id, {\r\n            ...params,\r\n            count: 20,\r\n            includePromotedContent: false,\r\n            withClientEventToken: false,\r\n            withBirdwatchNotes: false,\r\n            withVoice: true,\r\n            withV2Timeline: true,\r\n        });\r\n        const cursor = cursorSource.find((i) => i.content?.cursorType === 'Top').content.value;\r\n        return gatherLegacyFromData(\r\n            await paginationTweets('UserMedia', id, {\r\n                ...params,\r\n                cursor,\r\n                count: 20,\r\n                includePromotedContent: false,\r\n                withClientEventToken: false,\r\n                withBirdwatchNotes: false,\r\n                withVoice: true,\r\n                withV2Timeline: true,\r\n            })\r\n        );\r\n    });\r\n\r\nconst getUserLikes = (id: string, params?: Record<string, any>) =>\r\n    cacheTryGet(id, params, async (id, params = {}) =>\r\n        gatherLegacyFromData(\r\n            await paginationTweets('Likes', id, {\r\n                ...params,\r\n                includeHasBirdwatchNotes: false,\r\n                includePromotedContent: false,\r\n                withBirdwatchNotes: false,\r\n                withVoice: false,\r\n                withV2Timeline: true,\r\n            })\r\n        )\r\n    );\r\n\r\nconst getUserTweet = (id: string, params?: Record<string, any>) =>\r\n    cacheTryGet(id, params, async (id, params = {}) =>\r\n        gatherLegacyFromData(\r\n            await paginationTweets(\r\n                'TweetDetail',\r\n                id,\r\n                {\r\n                    ...params,\r\n                    includeHasBirdwatchNotes: false,\r\n                    includePromotedContent: false,\r\n                    withBirdwatchNotes: false,\r\n                    withVoice: false,\r\n                    withV2Timeline: true,\r\n                },\r\n                ['threaded_conversation_with_injections_v2']\r\n            ),\r\n            ['homeConversation-', 'conversationthread-']\r\n        )\r\n    );\r\n\r\nconst getSearch = async (keywords: string, params?: Record<string, any>) =>\r\n    gatherLegacyFromData(\r\n        await paginationTweets(\r\n            'SearchTimeline',\r\n            undefined,\r\n            {\r\n                ...params,\r\n                rawQuery: keywords,\r\n                count: 20,\r\n                querySource: 'typed_query',\r\n                product: 'Latest',\r\n            },\r\n            ['search_by_raw_query', 'search_timeline', 'timeline']\r\n        )\r\n    );\r\n\r\nconst getList = async (id: string, params?: Record<string, any>) =>\r\n    gatherLegacyFromData(\r\n        await paginationTweets(\r\n            'ListLatestTweetsTimeline',\r\n            undefined,\r\n            {\r\n                ...params,\r\n                listId: id,\r\n                count: 20,\r\n            },\r\n            ['list', 'tweets_timeline', 'timeline']\r\n        )\r\n    );\r\n\r\nconst getUser = async (id: string) => {\r\n    const userData: any = await getUserData(id);\r\n    return (userData.data?.user || userData.data?.user_result)?.result?.legacy;\r\n};\r\n\r\nconst getHomeTimeline = async (id: string, params?: Record<string, any>) =>\r\n    gatherLegacyFromData(\r\n        await paginationTweets(\r\n            'HomeTimeline',\r\n            undefined,\r\n            {\r\n                ...params,\r\n                count: 20,\r\n                includePromotedContent: true,\r\n                latestControlAvailable: true,\r\n                requestContext: 'launch',\r\n                withCommunity: true,\r\n            },\r\n            ['home', 'home_timeline_urt']\r\n        )\r\n    );\r\n\r\nconst getHomeLatestTimeline = async (id: string, params?: Record<string, any>) =>\r\n    gatherLegacyFromData(\r\n        await paginationTweets(\r\n            'HomeLatestTimeline',\r\n            undefined,\r\n            {\r\n                ...params,\r\n                count: 20,\r\n                includePromotedContent: true,\r\n                latestControlAvailable: true,\r\n                requestContext: 'launch',\r\n                withCommunity: true,\r\n            },\r\n            ['home', 'home_timeline_urt']\r\n        )\r\n    );\r\n\r\nexport default {\r\n    getUser,\r\n    getUserTweets,\r\n    getUserTweetsAndReplies,\r\n    getUserMedia,\r\n    getUserLikes,\r\n    getUserTweet,\r\n    getSearch,\r\n    getList,\r\n    getHomeTimeline,\r\n    getHomeLatestTimeline,\r\n    init: () => {},\r\n};\r\n","import ConfigNotFoundError from '@/errors/types/config-not-found';\r\nimport mobileApi from './mobile-api/api';\r\nimport webApi from './web-api/api';\r\nimport { config } from '@/config';\r\n\r\nconst enableThirdPartyApi = config.twitter.thirdPartyApi;\r\nconst enableMobileApi = config.twitter.username && config.twitter.password;\r\nconst enableWebApi = config.twitter.authToken;\r\n\r\ntype ApiItem = (id: string, params?: Record<string, any>) => Promise<Record<string, any>> | Record<string, any> | null;\r\nlet api: {\r\n    init: () => void;\r\n    getUser: ApiItem;\r\n    getUserTweets: ApiItem;\r\n    getUserTweetsAndReplies: ApiItem;\r\n    getUserMedia: ApiItem;\r\n    getUserLikes: ApiItem;\r\n    getUserTweet: ApiItem;\r\n    getSearch: ApiItem;\r\n    getList: ApiItem;\r\n    getHomeTimeline: ApiItem;\r\n    getHomeLatestTimeline: ApiItem;\r\n} = {\r\n    init: () => {\r\n        throw new ConfigNotFoundError('Twitter API is not configured');\r\n    },\r\n    getUser: () => null,\r\n    getUserTweets: () => null,\r\n    getUserTweetsAndReplies: () => null,\r\n    getUserMedia: () => null,\r\n    getUserLikes: () => null,\r\n    getUserTweet: () => null,\r\n    getSearch: () => null,\r\n    getList: () => null,\r\n    getHomeTimeline: () => null,\r\n    getHomeLatestTimeline: () => null,\r\n};\r\n\r\nif (enableThirdPartyApi) {\r\n    api = webApi;\r\n} else if (enableWebApi) {\r\n    api = webApi;\r\n} else if (enableMobileApi) {\r\n    api = mobileApi;\r\n}\r\n\r\nexport default api;\r\n"],"mappings":"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"}