{"version":3,"file":"video-Bu1g0MI-.js","names":["route: Route","InvalidParameterError","got"],"sources":["../../lib/routes/twitch/video.ts"],"sourcesContent":["import InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { Route, ViewType } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\n// https://github.com/streamlink/streamlink/blob/master/src/streamlink/plugins/twitch.py#L286\r\nconst TWITCH_CLIENT_ID = 'kimne78kx3ncx6brgo4mv6wki5h1ko';\r\n\r\nconst FILTER_NODE_TYPE_MAP = {\r\n    archive: 'LATEST_BROADCASTS',\r\n    highlights: 'LATEST_NON_BROADCASTS',\r\n    all: 'ALL_VIDEOS',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/video/:login/:filter?',\r\n    categories: ['live'],\r\n    view: ViewType.Videos,\r\n    example: '/twitch/video/riotgames/highlights',\r\n    parameters: {\r\n        login: 'Twitch username',\r\n        filter: {\r\n            description: 'Video type, Default to all',\r\n            options: [\r\n                { value: 'archive', label: 'Archive' },\r\n                { value: 'highlights', label: 'Highlights' },\r\n                { value: 'all', label: 'All' },\r\n            ],\r\n            default: 'all',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.twitch.tv/:login/videos'],\r\n            target: '/video/:login',\r\n        },\r\n    ],\r\n    name: 'Channel Video',\r\n    maintainers: ['hoilc'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const login = ctx.req.param('login');\r\n    const filter = ctx.req.param('filter')?.toLowerCase() || 'all';\r\n    if (!FILTER_NODE_TYPE_MAP[filter]) {\r\n        throw new InvalidParameterError(`Unsupported filter type \"${filter}\", please choose from { ${Object.keys(FILTER_NODE_TYPE_MAP).join(', ')} }`);\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'post',\r\n        url: 'https://gql.twitch.tv/gql',\r\n        headers: {\r\n            Referer: 'https://player.twitch.tv',\r\n            'Client-ID': TWITCH_CLIENT_ID,\r\n        },\r\n        json: [\r\n            {\r\n                operationName: 'ChannelVideoShelvesQuery',\r\n                variables: {\r\n                    channelLogin: login,\r\n                    first: 5,\r\n                },\r\n                extensions: {\r\n                    persistedQuery: {\r\n                        version: 1,\r\n                        sha256Hash: '7b31d8ae7274b79d169a504e3727baaaed0d5ede101f4a38fc44f34d76827903',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    });\r\n\r\n    const channelVideoShelvesQueryData = response.data[0].data;\r\n\r\n    if (!channelVideoShelvesQueryData.user.id) {\r\n        throw new InvalidParameterError(`Username does not exist`);\r\n    }\r\n\r\n    const displayName = channelVideoShelvesQueryData.user.displayName;\r\n\r\n    const videoShelvesEdge = channelVideoShelvesQueryData.user.videoShelves.edges.find((edge) => edge.node.type === FILTER_NODE_TYPE_MAP[filter]);\r\n    if (!videoShelvesEdge) {\r\n        throw new InvalidParameterError(`No video under filter type \"${filter}\"`);\r\n    }\r\n\r\n    const out = videoShelvesEdge.node.items.map((item) => ({\r\n        title: item.title,\r\n        link: `https://www.twitch.tv/videos/${item.id}`,\r\n        author: displayName,\r\n        pubDate: parseDate(item.publishedAt),\r\n        description: `<img style=\"max-width: 100%;\" src=\"${item.previewThumbnailURL}\"><br/><img style=\"max-width: 100%;\" src=\"${item.animatedPreviewURL}\">`,\r\n        category: item.game && [item.game.displayName], // item.game may be null\r\n    }));\r\n\r\n    return {\r\n        title: `Twitch - ${displayName} - ${videoShelvesEdge.node.title}`,\r\n        link: `https://www.twitch.tv/${login}`,\r\n        item: out,\r\n    };\r\n}\r\n"],"mappings":"gZAMA,MAEM,EAAuB,CACzB,QAAS,oBACT,WAAY,wBACZ,IAAK,cAGIA,EAAe,CACxB,KAAM,yBACN,WAAY,CAAC,QACb,KAAM,EAAS,OACf,QAAS,qCACT,WAAY,CACR,MAAO,kBACP,OAAQ,CACJ,YAAa,6BACb,QAAS,CACL,CAAE,MAAO,UAAW,MAAO,WAC3B,CAAE,MAAO,aAAc,MAAO,cAC9B,CAAE,MAAO,MAAO,MAAO,QAE3B,QAAS,QAGjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,+BACT,OAAQ,kBAGhB,KAAM,gBACN,YAAa,CAAC,SACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAQ,EAAI,IAAI,MAAM,SACtB,EAAS,EAAI,IAAI,MAAM,WAAW,eAAiB,MACzD,GAAI,CAAC,EAAqB,GACtB,MAAM,IAAIC,EAAsB,4BAA4B,EAAO,0BAA0B,OAAO,KAAK,GAAsB,KAAK,MAAM,KAG9I,IAAM,EAAW,MAAMC,EAAI,CACvB,OAAQ,OACR,IAAK,4BACL,QAAS,CACL,QAAS,2BACT,YAAa,kCAEjB,KAAM,CACF,CACI,cAAe,2BACf,UAAW,CACP,aAAc,EACd,MAAO,GAEX,WAAY,CACR,eAAgB,CACZ,QAAS,EACT,WAAY,yEAO1B,EAA+B,EAAS,KAAK,GAAG,KAEtD,GAAI,CAAC,EAA6B,KAAK,GACnC,MAAM,IAAID,EAAsB,2BAGpC,IAAM,EAAc,EAA6B,KAAK,YAEhD,EAAmB,EAA6B,KAAK,aAAa,MAAM,KAAM,GAAS,EAAK,KAAK,OAAS,EAAqB,IACrI,GAAI,CAAC,EACD,MAAM,IAAIA,EAAsB,+BAA+B,EAAO,IAG1E,IAAM,EAAM,EAAiB,KAAK,MAAM,IAAK,IAAU,CACnD,MAAO,EAAK,MACZ,KAAM,gCAAgC,EAAK,KAC3C,OAAQ,EACR,QAAS,EAAU,EAAK,aACxB,YAAa,sCAAsC,EAAK,oBAAoB,4CAA4C,EAAK,mBAAmB,IAChJ,SAAU,EAAK,MAAQ,CAAC,EAAK,KAAK,gBAGtC,MAAO,CACH,MAAO,YAAY,EAAY,KAAK,EAAiB,KAAK,QAC1D,KAAM,yBAAyB,IAC/B,KAAM"}