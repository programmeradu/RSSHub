{"version":3,"file":"utils-B3IirsZP.js","names":["got","ConfigNotFoundError","cache","acctHost"],"sources":["../../lib/routes/mastodon/utils.ts"],"sourcesContent":["import cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nconst allowSiteList = ['mastodon.social', 'pawoo.net', 'fosstodon.org', config.mastodon.apiHost].filter(Boolean);\r\n\r\nconst apiHeaders = (site) => {\r\n    const { accessToken, apiHost } = config.mastodon;\r\n    // avoid sending API token to other sites\r\n    return accessToken && site === apiHost ? { Authorization: `Bearer ${accessToken}` } : {};\r\n};\r\n\r\nconst mediaParse = (media_attachments) =>\r\n    media_attachments\r\n        .map((item) => {\r\n            const selectedUrl = item.remote_url ?? item.url;\r\n            const description = item.description ?? '';\r\n            switch (item.type) {\r\n                case 'gifv':\r\n                    return `<br><video src=\"${selectedUrl}\" autoplay loop>gif ${description}</video>`;\r\n                case 'video':\r\n                    return `<br><video src=\"${selectedUrl}\" controls loop>video ${description}</video>`;\r\n                case 'image':\r\n                    return `<br><img src=\"${selectedUrl}\" alt=\"image ${description}\">`;\r\n                case 'audio':\r\n                    return `<br><audio controls src=\"${selectedUrl}\">audio ${description}</audio>`;\r\n                case 'unknown':\r\n                default:\r\n                    return `<br><a href=\"${selectedUrl}\">media ${description}</a>`;\r\n            }\r\n        })\r\n        .join('');\r\n\r\nconst parseStatuses = (data) =>\r\n    data.map((item) => {\r\n        // docs on: https://docs.joinmastodon.org/entities/status/\r\n\r\n        const accountRepostedBy = item.reblog ? item.account : null;\r\n        item = item.reblog ?? item;\r\n\r\n        const content = item.content ? item.content.replaceAll(/<span.*?>|<\\/span.*?>/gm, '') : '';\r\n        const contentRemovedHtml = content.replaceAll(/<(?:.|\\n)*?>/gm, '\\n');\r\n\r\n        const author = `${item.account.display_name} (@${item.account.acct})`;\r\n        const link = item.url;\r\n        const media = mediaParse(item.media_attachments);\r\n\r\n        const titleAuthor = accountRepostedBy ? `Re @${accountRepostedBy.username}` : `@${item.account.username}`;\r\n        const titleText = item.sensitive === true ? `(CW) ${item.spoiler_text}` : contentRemovedHtml;\r\n        const title = `${titleAuthor}: \"${titleText}\"`;\r\n\r\n        return {\r\n            title,\r\n            author,\r\n            description: item.spoiler_text + '<hr />' + content + media,\r\n            pubDate: parseDate(item.created_at),\r\n            link,\r\n            guid: item.uri,\r\n        };\r\n    });\r\n\r\nasync function getAccountStatuses(site, account_id, only_media) {\r\n    const statuses_url = `https://${site}/api/v1/accounts/${account_id}/statuses?only_media=${only_media}`;\r\n    const statuses_response = await got({\r\n        method: 'get',\r\n        url: statuses_url,\r\n        headers: apiHeaders(site),\r\n    });\r\n    const data = statuses_response.data;\r\n\r\n    let account_data;\r\n    if (data.length !== 0 && data[0].account !== null) {\r\n        account_data = data[0].account;\r\n    } else {\r\n        const account_url = `https://${site}/api/v1/accounts/${account_id}`;\r\n        const account_response = await got({\r\n            method: 'get',\r\n            url: account_url,\r\n            headers: apiHeaders(site),\r\n        });\r\n        account_data = account_response.data;\r\n    }\r\n\r\n    return { account_data, data };\r\n}\r\n\r\nasync function getAccountIdByAcct(acct) {\r\n    const mastodonConfig = config.mastodon;\r\n\r\n    // acctHost is from the acct param of the request, and acctDomain is from either acctHost or the config\r\n    const acctHost = acct.split('@').filter(Boolean)[1];\r\n    const site = mastodonConfig.apiHost || acctHost;\r\n    const acctDomain = mastodonConfig.acctDomain || acctHost;\r\n    if (!(site && acctDomain)) {\r\n        throw new ConfigNotFoundError('Mastodon RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n    if (!config.feature.allow_user_supply_unsafe_domain && !allowSiteList.includes(site)) {\r\n        throw new ConfigNotFoundError(`RSS for this domain is disabled unless 'ALLOW_USER_SUPPLY_UNSAFE_DOMAIN' is set to 'true' or 'MASTODON_API_HOST' is set.`);\r\n    }\r\n\r\n    const search_url = `https://${site}/api/v2/search`;\r\n    const cacheUid = `mastodon_acct_id/${site}/${acct}`;\r\n\r\n    const account_id = await cache.tryGet(cacheUid, async () => {\r\n        const search_response = await got({\r\n            method: 'get',\r\n            url: search_url,\r\n            headers: apiHeaders(site),\r\n            searchParams: {\r\n                q: acct,\r\n                type: 'accounts',\r\n            },\r\n        });\r\n        const [acctUser, acctHost] = acct.split('@').filter(Boolean);\r\n        let acctOnServer;\r\n\r\n        if (acctHost) {\r\n            acctOnServer = acctHost === acctDomain ? acctUser : acctUser + '@' + acctHost;\r\n        } else {\r\n            acctOnServer = acctUser;\r\n        }\r\n\r\n        const accountData = search_response.data.accounts.filter((item) => item.acct === acctOnServer);\r\n\r\n        if (accountData.length === 0) {\r\n            throw new Error(`acct ${acct} not found`);\r\n        }\r\n        return accountData[0].id;\r\n    });\r\n    return { site, account_id };\r\n}\r\n\r\nexport default { apiHeaders, parseStatuses, getAccountStatuses, getAccountIdByAcct, allowSiteList };\r\n"],"mappings":"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"}