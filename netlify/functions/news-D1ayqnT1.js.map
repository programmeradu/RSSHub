{"version":3,"file":"news-D1ayqnT1.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/xmnn/news.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/news/:category{.+}?',\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category = 'xmxw' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 30;\r\n\r\n    const rootUrl = 'https://news.xmnn.cn';\r\n    const currentUrl = new URL(`${category}/`, rootUrl).href;\r\n\r\n    const { data: response } = await got(currentUrl);\r\n\r\n    const $ = load(response);\r\n\r\n    let items = $('div#sort_body ul li a')\r\n        .slice(0, limit)\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n\r\n            return {\r\n                title: item.find('h1').text().trim(),\r\n                link: item.prop('href'),\r\n                description: item.find('div.abstract').html(),\r\n                author: item.find('div.source').text(),\r\n                pubDate: timezone(parseDate(item.find('div.time').text()), +8),\r\n            };\r\n        });\r\n\r\n    items = await Promise.all(\r\n        items.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const { data: detailResponse } = await got(item.link);\r\n\r\n                const content = load(detailResponse);\r\n\r\n                item.title = content('div.cont-h, div.tip h1').text().trim();\r\n                item.description = content('div.TRS_Editor').html();\r\n                item.author = content('span.cont-a-src a')\r\n                    .toArray()\r\n                    .map((a) => content(a).text());\r\n                item.pubDate = timezone(parseDate(content('span.time, div.pubtime div.w').contents().first().text().trim()), +8);\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    const title = $('title').text();\r\n    const icon = new URL($('link[rel=\"icon\"]').prop('href'), rootUrl).href;\r\n\r\n    return {\r\n        item: items,\r\n        title,\r\n        link: currentUrl,\r\n        description: $('meta[name=\"description\"]').prop('content'),\r\n        language: 'zh',\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('div.h').text(),\r\n        author: title.split(/_/).pop(),\r\n    };\r\n}\r\n"],"mappings":"0ZAOA,MAAaA,EAAe,CACxB,KAAM,uBACN,KAAM,UACN,YAAa,GACb,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,WAAW,QAAW,EAAI,IAAI,QAChC,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAE/E,EAAU,uBACV,EAAa,IAAI,IAAI,GAAG,EAAS,GAAI,GAAS,KAE9C,CAAE,KAAM,GAAa,MAAMC,EAAI,GAE/B,EAAI,EAAK,GAEX,EAAQ,EAAE,yBACT,MAAM,EAAG,GACT,UACA,IAAK,IACF,EAAO,EAAE,GAEF,CACH,MAAO,EAAK,KAAK,MAAM,OAAO,OAC9B,KAAM,EAAK,KAAK,QAChB,YAAa,EAAK,KAAK,gBAAgB,OACvC,OAAQ,EAAK,KAAK,cAAc,OAChC,QAAS,EAAS,EAAU,EAAK,KAAK,YAAY,QAAS,MAIvE,EAAQ,MAAM,QAAQ,IAClB,EAAM,IAAK,GACPC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,GAAM,CAAE,KAAM,GAAmB,MAAMD,EAAI,EAAK,MAE1C,EAAU,EAAK,GASrB,MAPA,GAAK,MAAQ,EAAQ,0BAA0B,OAAO,OACtD,EAAK,YAAc,EAAQ,kBAAkB,OAC7C,EAAK,OAAS,EAAQ,qBACjB,UACA,IAAK,GAAM,EAAQ,GAAG,QAC3B,EAAK,QAAU,EAAS,EAAU,EAAQ,gCAAgC,WAAW,QAAQ,OAAO,QAAS,GAEtG,MAKnB,IAAM,EAAQ,EAAE,SAAS,OACnB,EAAO,IAAI,IAAI,EAAE,oBAAoB,KAAK,QAAS,GAAS,KAElE,MAAO,CACH,KAAM,EACN,QACA,KAAM,EACN,YAAa,EAAE,4BAA4B,KAAK,WAChD,SAAU,KACV,OACA,KAAM,EACN,SAAU,EAAE,SAAS,OACrB,OAAQ,EAAM,MAAM,KAAK"}