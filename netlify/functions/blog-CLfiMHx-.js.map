{"version":3,"file":"blog-CLfiMHx-.js","names":[],"sources":["../../lib/routes/deepl/blog.ts"],"sourcesContent":["import { type Data, type DataItem, type Route, ViewType } from '@/types';\r\n\r\nimport { art } from '@/utils/render';\r\nimport cache from '@/utils/cache';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nimport { type CheerioAPI, type Cheerio, load } from 'cheerio';\r\nimport type { Element } from 'domhandler';\r\nimport { type Context } from 'hono';\r\nimport path from 'node:path';\r\n\r\nexport const handler = async (ctx: Context): Promise<Data> => {\r\n    const { lang = 'en' } = ctx.req.param();\r\n    const limit: number = Number.parseInt(ctx.req.query('limit') ?? '30', 10);\r\n\r\n    const baseUrl: string = 'https://www.deepl.com';\r\n    const targetUrl: string = new URL(`${lang}/blog`, baseUrl).href;\r\n\r\n    const response = await ofetch(targetUrl);\r\n    const $: CheerioAPI = load(response);\r\n    const language = $('html').attr('lang') ?? lang;\r\n\r\n    let items: DataItem[] = [];\r\n\r\n    items = $('h4, h6')\r\n        .slice(0, limit)\r\n        .toArray()\r\n        .map((el): Element => {\r\n            const $el: Cheerio<Element> = $(el).parent().parent();\r\n\r\n            const title: string = $el.find('h4, h6').text();\r\n            const image: string | undefined = $el.find('img').attr('src');\r\n            const description: string | undefined = art(path.join(__dirname, 'templates/description.art'), {\r\n                images: image\r\n                    ? [\r\n                          {\r\n                              src: image,\r\n                              alt: title,\r\n                          },\r\n                      ]\r\n                    : undefined,\r\n                intro: $el.find('p').text(),\r\n            });\r\n            const pubDateStr: string | undefined = $el.find('time').attr('datetime');\r\n            const linkUrl: string | undefined = $el.attr('href');\r\n            const authorsArr: string[] = $el.find('span.me-6 span').last().text().split(/,\\s/);\r\n            const authors: DataItem['author'] = authorsArr.map((author) => ({\r\n                name: author,\r\n                url: undefined,\r\n                avatar: undefined,\r\n            }));\r\n            const upDatedStr: string | undefined = pubDateStr;\r\n\r\n            const processedItem: DataItem = {\r\n                title,\r\n                description,\r\n                pubDate: pubDateStr ? parseDate(pubDateStr) : undefined,\r\n                link: linkUrl ? new URL(linkUrl, baseUrl).href : undefined,\r\n                author: authors,\r\n                content: {\r\n                    html: description,\r\n                    text: description,\r\n                },\r\n                image,\r\n                banner: image,\r\n                updated: upDatedStr ? parseDate(upDatedStr) : undefined,\r\n                language,\r\n            };\r\n\r\n            return processedItem;\r\n        });\r\n\r\n    items = await Promise.all(\r\n        items.map((item) => {\r\n            if (!item.link) {\r\n                return item;\r\n            }\r\n\r\n            return cache.tryGet(item.link, async (): Promise<DataItem> => {\r\n                const detailResponse = await ofetch(item.link);\r\n                const $$: CheerioAPI = load(detailResponse);\r\n\r\n                const title: string = $$('h1[data-contentful-field-id=\"title\"]').text();\r\n                const description: string | undefined =\r\n                    item.description +\r\n                    art(path.join(__dirname, 'templates/description.art'), {\r\n                        description: $$('div.my-redesign-3').html(),\r\n                    });\r\n                const pubDateStr: string | undefined = $$('time').first().attr('datetime');\r\n                const authorsArr: string[] = $$('span[data-contentful-field-id=\"author\"] span').last().text().split(/,\\s/);\r\n                const authors: DataItem['author'] = authorsArr.map((author) => ({\r\n                    name: author,\r\n                    url: undefined,\r\n                    avatar: undefined,\r\n                }));\r\n                const image: string | undefined = $$('meta[property=\"og:image\"]').attr('content') ?? $$('picture[data-contentful-field-id=\"image\"] img').attr('src');\r\n                const upDatedStr: string | undefined = pubDateStr;\r\n\r\n                const processedItem: DataItem = {\r\n                    title,\r\n                    description,\r\n                    pubDate: pubDateStr ? parseDate(pubDateStr) : item.pubDate,\r\n                    author: authors,\r\n                    content: {\r\n                        html: description,\r\n                        text: description,\r\n                    },\r\n                    image,\r\n                    banner: image,\r\n                    updated: upDatedStr ? parseDate(upDatedStr) : item.updated,\r\n                    language,\r\n                };\r\n\r\n                return {\r\n                    ...item,\r\n                    ...processedItem,\r\n                };\r\n            });\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: $('title').text(),\r\n        description: $('meta[property=\"og:description\"]').attr('content'),\r\n        link: targetUrl,\r\n        item: items,\r\n        allowEmpty: true,\r\n        image: $('meta[property=\"og:image\"]').attr('content'),\r\n        language,\r\n        id: $('meta[property=\"og:url\"]').attr('content'),\r\n    };\r\n};\r\n\r\nconst languageOptions = [\r\n    {\r\n        label: 'Deutsch',\r\n        value: 'de',\r\n    },\r\n    {\r\n        label: 'English',\r\n        value: 'en',\r\n    },\r\n    {\r\n        label: 'Español',\r\n        value: 'es',\r\n    },\r\n    {\r\n        label: '日本語',\r\n        value: 'ja',\r\n    },\r\n    {\r\n        label: 'Français',\r\n        value: 'fr',\r\n    },\r\n    {\r\n        label: 'Italiano',\r\n        value: 'it',\r\n    },\r\n    {\r\n        label: 'Bahasa Indonesia',\r\n        value: 'id',\r\n    },\r\n    {\r\n        label: '한국어',\r\n        value: 'ko',\r\n    },\r\n    {\r\n        label: 'Nederlands',\r\n        value: 'nl',\r\n    },\r\n    {\r\n        label: 'Čeština',\r\n        value: 'cs',\r\n    },\r\n    {\r\n        label: 'Svenska',\r\n        value: 'sv',\r\n    },\r\n    {\r\n        label: 'Polski',\r\n        value: 'pl',\r\n    },\r\n    {\r\n        label: 'Português (Brasil)',\r\n        value: 'pt-BR',\r\n    },\r\n    {\r\n        label: 'Português',\r\n        value: 'pt-PT',\r\n    },\r\n    {\r\n        label: 'Türkçe',\r\n        value: 'tr',\r\n    },\r\n    {\r\n        label: 'Русский',\r\n        value: 'ru',\r\n    },\r\n    {\r\n        label: '简体中文',\r\n        value: 'zh',\r\n    },\r\n    {\r\n        label: 'Українська',\r\n        value: 'uk',\r\n    },\r\n    {\r\n        label: 'العربية',\r\n        value: 'ar',\r\n    },\r\n];\r\n\r\nexport const route: Route = {\r\n    path: '/blog/:lang?',\r\n    name: 'Blog',\r\n    url: 'www.deepl.com',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    example: '/deepl/blog/en',\r\n    parameters: {\r\n        lang: {\r\n            description: 'Language, `en` as English by default',\r\n            options: languageOptions,\r\n        },\r\n    },\r\n    description: `:::tip\r\nTo subscribe to [Blog](https://www.deepl.com/en/blog), where the source URL is \\`https://www.deepl.com/en/blog\\`, extract the certain parts from this URL to be used as parameters, resulting in the route as [\\`/deepl/blog/en\\`](https://rsshub.app/deepl/blog/en).\r\n\r\n:::\r\n\r\n<details>\r\n  <summary>More languages</summary>\r\n\r\n| Language                                               | ID                                           |\r\n| ------------------------------------------------------ | -------------------------------------------- |\r\n| [Deutsch](https://www.deepl.com/de/blog)               | [de](https://rsshub.app/deepl/blog/de)       |\r\n| [English](https://www.deepl.com/en/blog)               | [en](https://rsshub.app/deepl/blog/en)       |\r\n| [Español](https://www.deepl.com/es/blog)               | [es](https://rsshub.app/deepl/blog/es)       |\r\n| [日本語](https://www.deepl.com/ja/blog)                | [ja](https://rsshub.app/deepl/blog/ja)       |\r\n| [Français](https://www.deepl.com/fr/blog)              | [fr](https://rsshub.app/deepl/blog/fr)       |\r\n| [Italiano](https://www.deepl.com/it/blog)              | [it](https://rsshub.app/deepl/blog/it)       |\r\n| [Bahasa Indonesia](https://www.deepl.com/id/blog)      | [id](https://rsshub.app/deepl/blog/id)       |\r\n| [한국어](https://www.deepl.com/ko/blog)                | [ko](https://rsshub.app/deepl/blog/ko)       |\r\n| [Nederlands](https://www.deepl.com/nl/blog)            | [nl](https://rsshub.app/deepl/blog/nl)       |\r\n| [Čeština](https://www.deepl.com/cs/blog)               | [cs](https://rsshub.app/deepl/blog/cs)       |\r\n| [Svenska](https://www.deepl.com/sv/blog)               | [sv](https://rsshub.app/deepl/blog/sv)       |\r\n| [Polski](https://www.deepl.com/pl/blog)                | [pl](https://rsshub.app/deepl/blog/pl)       |\r\n| [Português (Brasil)](https://www.deepl.com/pt-BR/blog) | [pt-BR](https://rsshub.app/deepl/blog/pt-BR) |\r\n| [Português](https://www.deepl.com/pt-PT/blog)          | [pt-PT](https://rsshub.app/deepl/blog/pt-PT) |\r\n| [Türkçe](https://www.deepl.com/tr/blog)                | [tr](https://rsshub.app/deepl/blog/tr)       |\r\n| [Русский](https://www.deepl.com/ru/blog)               | [ru](https://rsshub.app/deepl/blog/ru)       |\r\n| [简体中文](https://www.deepl.com/zh/blog)              | [zh](https://rsshub.app/deepl/blog/zh)       |\r\n| [Українська](https://www.deepl.com/uk/blog)            | [uk](https://rsshub.app/deepl/blog/uk)       |\r\n| [العربية](https://www.deepl.com/ar/blog)               | [ar](https://rsshub.app/deepl/blog/ar)       |\r\n\r\n</details>\r\n`,\r\n    categories: ['new-media'],\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.deepl.com/:lang/blog'],\r\n            target: (params) => {\r\n                const lang: string = params.lang;\r\n\r\n                return `/deepl/blog${lang ? `/${lang}` : ''}`;\r\n            },\r\n        },\r\n        {\r\n            title: 'Deutsch',\r\n            source: ['www.deepl.com/de/blog'],\r\n            target: '/blog/de',\r\n        },\r\n        {\r\n            title: 'English',\r\n            source: ['www.deepl.com/en/blog'],\r\n            target: '/blog/en',\r\n        },\r\n        {\r\n            title: 'Español',\r\n            source: ['www.deepl.com/es/blog'],\r\n            target: '/blog/es',\r\n        },\r\n        {\r\n            title: '日本語',\r\n            source: ['www.deepl.com/ja/blog'],\r\n            target: '/blog/ja',\r\n        },\r\n        {\r\n            title: 'Français',\r\n            source: ['www.deepl.com/fr/blog'],\r\n            target: '/blog/fr',\r\n        },\r\n        {\r\n            title: 'Italiano',\r\n            source: ['www.deepl.com/it/blog'],\r\n            target: '/blog/it',\r\n        },\r\n        {\r\n            title: 'Bahasa Indonesia',\r\n            source: ['www.deepl.com/id/blog'],\r\n            target: '/blog/id',\r\n        },\r\n        {\r\n            title: '한국어',\r\n            source: ['www.deepl.com/ko/blog'],\r\n            target: '/blog/ko',\r\n        },\r\n        {\r\n            title: 'Nederlands',\r\n            source: ['www.deepl.com/nl/blog'],\r\n            target: '/blog/nl',\r\n        },\r\n        {\r\n            title: 'Čeština',\r\n            source: ['www.deepl.com/cs/blog'],\r\n            target: '/blog/cs',\r\n        },\r\n        {\r\n            title: 'Svenska',\r\n            source: ['www.deepl.com/sv/blog'],\r\n            target: '/blog/sv',\r\n        },\r\n        {\r\n            title: 'Polski',\r\n            source: ['www.deepl.com/pl/blog'],\r\n            target: '/blog/pl',\r\n        },\r\n        {\r\n            title: 'Português (Brasil)',\r\n            source: ['www.deepl.com/pt-BR/blog'],\r\n            target: '/blog/pt-BR',\r\n        },\r\n        {\r\n            title: 'Português',\r\n            source: ['www.deepl.com/pt-PT/blog'],\r\n            target: '/blog/pt-PT',\r\n        },\r\n        {\r\n            title: 'Türkçe',\r\n            source: ['www.deepl.com/tr/blog'],\r\n            target: '/blog/tr',\r\n        },\r\n        {\r\n            title: 'Русский',\r\n            source: ['www.deepl.com/ru/blog'],\r\n            target: '/blog/ru',\r\n        },\r\n        {\r\n            title: '简体中文',\r\n            source: ['www.deepl.com/zh/blog'],\r\n            target: '/blog/zh',\r\n        },\r\n        {\r\n            title: 'Українська',\r\n            source: ['www.deepl.com/uk/blog'],\r\n            target: '/blog/uk',\r\n        },\r\n        {\r\n            title: 'العربية',\r\n            source: ['www.deepl.com/ar/blog'],\r\n            target: '/blog/ar',\r\n        },\r\n    ],\r\n    view: ViewType.Articles,\r\n\r\n    zh: {\r\n        path: '/blog/:lang?',\r\n        name: '博客',\r\n        url: 'www.deepl.com',\r\n        maintainers: ['nczitzk'],\r\n        handler,\r\n        example: '/deepl/blog/en',\r\n        parameters: {\r\n            lang: {\r\n                description: '语言，默认为 `en`，可在对应语言页 URL 中找到',\r\n                options: languageOptions,\r\n            },\r\n        },\r\n        description: `:::tip\r\n若订阅 [博客](https://www.deepl.com/zh/blog)，网址为 \\`https://www.deepl.com/zh/blog\\`，请截取 \\`https://www.deepl.com/\\` 到末尾 \\`/blog\\` 的部分 \\`zh\\` 作为 \\`lang\\` 参数填入，此时目标路由为 [\\`/deepl/blog/zh\\`](https://rsshub.app/deepl/blog/zh)。\r\n\r\n:::\r\n\r\n<details>\r\n  <summary>更多语言</summary>\r\n\r\n| Language                                               | ID                                           |\r\n| ------------------------------------------------------ | -------------------------------------------- |\r\n| [Deutsch](https://www.deepl.com/de/blog)               | [de](https://rsshub.app/deepl/blog/de)       |\r\n| [English](https://www.deepl.com/en/blog)               | [en](https://rsshub.app/deepl/blog/en)       |\r\n| [Español](https://www.deepl.com/es/blog)               | [es](https://rsshub.app/deepl/blog/es)       |\r\n| [日本語](https://www.deepl.com/ja/blog)                | [ja](https://rsshub.app/deepl/blog/ja)       |\r\n| [Français](https://www.deepl.com/fr/blog)              | [fr](https://rsshub.app/deepl/blog/fr)       |\r\n| [Italiano](https://www.deepl.com/it/blog)              | [it](https://rsshub.app/deepl/blog/it)       |\r\n| [Bahasa Indonesia](https://www.deepl.com/id/blog)      | [id](https://rsshub.app/deepl/blog/id)       |\r\n| [한국어](https://www.deepl.com/ko/blog)                | [ko](https://rsshub.app/deepl/blog/ko)       |\r\n| [Nederlands](https://www.deepl.com/nl/blog)            | [nl](https://rsshub.app/deepl/blog/nl)       |\r\n| [Čeština](https://www.deepl.com/cs/blog)               | [cs](https://rsshub.app/deepl/blog/cs)       |\r\n| [Svenska](https://www.deepl.com/sv/blog)               | [sv](https://rsshub.app/deepl/blog/sv)       |\r\n| [Polski](https://www.deepl.com/pl/blog)                | [pl](https://rsshub.app/deepl/blog/pl)       |\r\n| [Português (Brasil)](https://www.deepl.com/pt-BR/blog) | [pt-BR](https://rsshub.app/deepl/blog/pt-BR) |\r\n| [Português](https://www.deepl.com/pt-PT/blog)          | [pt-PT](https://rsshub.app/deepl/blog/pt-PT) |\r\n| [Türkçe](https://www.deepl.com/tr/blog)                | [tr](https://rsshub.app/deepl/blog/tr)       |\r\n| [Русский](https://www.deepl.com/ru/blog)               | [ru](https://rsshub.app/deepl/blog/ru)       |\r\n| [简体中文](https://www.deepl.com/zh/blog)              | [zh](https://rsshub.app/deepl/blog/zh)       |\r\n| [Українська](https://www.deepl.com/uk/blog)            | [uk](https://rsshub.app/deepl/blog/uk)       |\r\n| [العربية](https://www.deepl.com/ar/blog)               | [ar](https://rsshub.app/deepl/blog/ar)       |\r\n\r\n</details>\r\n`,\r\n    },\r\n};\r\n"],"mappings":"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"}