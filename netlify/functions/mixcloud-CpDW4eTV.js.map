{"version":3,"file":"mixcloud-CpDW4eTV.js","names":["route: Route","got","InvalidParameterError","stats: string[]"],"sources":["../../lib/routes/mixcloud/config.ts","../../lib/routes/mixcloud/index.ts"],"sourcesContent":["export const MIXCLOUD_CONFIG = {\r\n    host: 'https://www.mixcloud.com',\r\n    imageBaseURL: 'https://thumbnailer.mixcloud.com/unsafe/480x480/',\r\n    graphqlURL: 'https://app.mixcloud.com/graphql',\r\n    decryptionKey: 'IFYOUWANTTHEARTISTSTOGETPAIDDONOTDOWNLOADFROMMIXCLOUD',\r\n    headers: {\r\n        Referer: 'https://www.mixcloud.com',\r\n        'Content-Type': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n    },\r\n};\r\n\r\nexport const TYPE_CONFIG = {\r\n    uploads: 'uploads',\r\n    reposts: 'reposted',\r\n    favorites: 'favorites',\r\n    listens: 'listeningHistory',\r\n    stream: 'stream',\r\n    playlist: 'items',\r\n};\r\n\r\nexport const TYPE_NAMES = {\r\n    uploads: 'Shows',\r\n    reposts: 'Reposts',\r\n    favorites: 'Favorites',\r\n    listens: 'History',\r\n    stream: 'Stream',\r\n    playlist: 'Playlist',\r\n};\r\n\r\nexport const CLOUDCAST_FIELDS = `\r\n  id\r\n  slug\r\n  name\r\n  description\r\n  publishDate\r\n  audioLength\r\n  picture(width: 1024, height: 1024) {\r\n    url\r\n  }\r\n  owner {\r\n    displayName\r\n    username\r\n    url\r\n  }\r\n  streamInfo {\r\n    url\r\n    hlsUrl\r\n    dashUrl\r\n  }\r\n  favorites {\r\n    totalCount\r\n  }\r\n  reposts {\r\n    totalCount\r\n  }\r\n  plays\r\n  tags {\r\n    tag {\r\n      name\r\n    }\r\n  }\r\n  featuringArtistList\r\n  isExclusive\r\n  restrictedReason\r\n  comments(first: 100) {\r\n    edges {\r\n      node {\r\n        comment\r\n        created\r\n        user {\r\n          displayName\r\n          username\r\n        }\r\n      }\r\n    }\r\n    totalCount\r\n  }\r\n`;\r\n\r\nexport function getObjectFields(type: string): { objectType: string; objectFields: string } {\r\n    if (type === 'playlist') {\r\n        return {\r\n            objectType: 'playlist',\r\n            objectFields: `\r\n        name\r\n        description\r\n        picture {\r\n          urlRoot\r\n        }\r\n        items(first: 100) {\r\n          edges {\r\n            node {\r\n              cloudcast {\r\n                ${CLOUDCAST_FIELDS}\r\n              }\r\n            }\r\n          }\r\n          pageInfo {\r\n            endCursor\r\n            hasNextPage\r\n          }\r\n        }\r\n      `,\r\n        };\r\n    } else {\r\n        const nodeTemplate = type === 'listens' ? `node { cloudcast { ${CLOUDCAST_FIELDS} } }` : `node { ${CLOUDCAST_FIELDS} }`;\r\n\r\n        return {\r\n            objectType: 'user',\r\n            objectFields: `\r\n        displayName\r\n        biog\r\n        picture {\r\n          urlRoot\r\n        }\r\n        ${TYPE_CONFIG[type]}(first: 100) {\r\n          edges {\r\n            ${nodeTemplate}\r\n          }\r\n          pageInfo {\r\n            endCursor\r\n            hasNextPage\r\n          }\r\n        }\r\n      `,\r\n        };\r\n    }\r\n}\r\n","import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport CryptoJS from 'crypto-js';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { MIXCLOUD_CONFIG, TYPE_CONFIG, TYPE_NAMES, getObjectFields } from './config';\r\n\r\nexport const route: Route = {\r\n    path: '/:username/:type?',\r\n    categories: ['multimedia'],\r\n    example: '/mixcloud/dholbach/uploads',\r\n    parameters: {\r\n        username: 'Username, can be found in URL',\r\n        type: 'Type, see below, uploads by default',\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: true,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['mixcloud.com/:username/:type?'],\r\n        },\r\n        {\r\n            source: ['www.mixcloud.com/:username/:type?'],\r\n        },\r\n    ],\r\n    name: 'User',\r\n    maintainers: ['Misaka13514'],\r\n    handler,\r\n    description: `| Shows   | Reposts | Favorites | History | Stream |\r\n| ------- | ------- | --------- | ------- | ------ |\r\n| uploads | reposts | favorites | listens | stream |`,\r\n};\r\n\r\nasync function callApi(objectType: string, objectFields: string, username: string, slug?: string) {\r\n    const lookupKey = objectType + 'Lookup';\r\n    const headers = MIXCLOUD_CONFIG.headers;\r\n\r\n    const lookupParams = slug ? `, slug: \"${slug}\"` : '';\r\n    const query = `{\r\n    ${lookupKey}(lookup: {username: \"${username}\"${lookupParams}}) {\r\n      ${objectFields}\r\n    }\r\n  }`;\r\n\r\n    const response = await got({\r\n        method: 'post',\r\n        url: MIXCLOUD_CONFIG.graphqlURL,\r\n        headers,\r\n        json: { query },\r\n    });\r\n\r\n    return response.data.data[lookupKey];\r\n}\r\n\r\n// https://github.com/yt-dlp/yt-dlp/commits/master/yt_dlp/extractor/mixcloud.py\r\nfunction decryptXorCipher(key: string, ciphertext: string): string {\r\n    const decoded = CryptoJS.enc.Base64.parse(ciphertext).toString(CryptoJS.enc.Utf8);\r\n    return [...decoded].map((ch, i) => String.fromCodePoint((ch.codePointAt(0) || 0) ^ (key.codePointAt(i % key.length) || 0))).join('');\r\n}\r\n\r\nfunction tryDecrypt(ciphertext: string | undefined): string {\r\n    if (!ciphertext) {\r\n        return '';\r\n    }\r\n    try {\r\n        return decryptXorCipher(MIXCLOUD_CONFIG.decryptionKey, ciphertext);\r\n    } catch {\r\n        return ciphertext;\r\n    }\r\n}\r\n\r\nfunction getCloudcast(node: any, type: string): any {\r\n    if (type === 'playlist' || type === 'listens') {\r\n        return node.cloudcast;\r\n    }\r\n    return node;\r\n}\r\n\r\nfunction getPlaylistTitle(displayName: string, type: string, playlistName?: string): string {\r\n    if (type === 'playlist' && playlistName) {\r\n        return `Mixcloud - ${displayName}'s Playlist: ${playlistName}`;\r\n    }\r\n    return `Mixcloud - ${displayName}'s ${TYPE_NAMES[type] || type}`;\r\n}\r\n\r\nfunction getPlaylistLink(username: string, type: string, playlistSlug?: string): string {\r\n    const host = MIXCLOUD_CONFIG.host;\r\n    if (type === 'playlist' && playlistSlug) {\r\n        return `${host}/${username}/playlists/${playlistSlug}/`;\r\n    }\r\n    return `${host}/${username}/${type === 'uploads' ? '' : type + '/'}`;\r\n}\r\n\r\nexport async function handler(ctx) {\r\n    const username = ctx.req.param('username');\r\n    const playlistSlug = ctx.req.param('playlist');\r\n    const type = ctx.req.param('type') ?? (playlistSlug ? 'playlist' : 'uploads');\r\n\r\n    if (!TYPE_CONFIG[type]) {\r\n        throw new InvalidParameterError(`Invalid type: ${type}`);\r\n    }\r\n\r\n    const { objectType, objectFields } = getObjectFields(type);\r\n\r\n    const data = await callApi(objectType, objectFields, username, playlistSlug);\r\n\r\n    if (!data) {\r\n        throw new Error(`${type === 'playlist' ? 'Playlist' : 'User'} not found`);\r\n    }\r\n\r\n    const isPlaylist = type === 'playlist';\r\n    const displayName = isPlaylist ? username : data.displayName;\r\n    const description = isPlaylist ? data.description : data.biog;\r\n    const picture = data.picture;\r\n    const image = picture && picture.urlRoot ? `${MIXCLOUD_CONFIG.imageBaseURL}${picture.urlRoot}` : '';\r\n\r\n    const itemsData = data[TYPE_CONFIG[type]];\r\n    const edges = itemsData?.edges || [];\r\n\r\n    const items = edges\r\n        .map((edge: any) => {\r\n            const cloudcast = getCloudcast(edge.node, type);\r\n\r\n            if (!cloudcast) {\r\n                return null;\r\n            }\r\n\r\n            const streamInfo = cloudcast.streamInfo || {};\r\n            const enclosureUrl = tryDecrypt(streamInfo.url);\r\n            const tags = cloudcast.tags?.map((t: any) => t.tag?.name).filter(Boolean) || [];\r\n\r\n            let richDescription = cloudcast.description?.replaceAll('\\n', '<br>') || '';\r\n\r\n            if (cloudcast.featuringArtistList && cloudcast.featuringArtistList.length > 0) {\r\n                const artists = cloudcast.featuringArtistList.slice(0, 5).join(', ');\r\n                richDescription += richDescription ? '<br><br>' : '';\r\n                richDescription += `<strong>Featured Artists:</strong> ${artists}`;\r\n                if (cloudcast.featuringArtistList.length > 5) {\r\n                    richDescription += ` and ${cloudcast.featuringArtistList.length - 5} more...`;\r\n                }\r\n            }\r\n\r\n            const stats: string[] = [];\r\n            if (cloudcast.plays) {\r\n                stats.push(`${cloudcast.plays} plays`);\r\n            }\r\n            if (cloudcast.favorites?.totalCount) {\r\n                stats.push(`${cloudcast.favorites.totalCount} favorites`);\r\n            }\r\n            if (cloudcast.reposts?.totalCount) {\r\n                stats.push(`${cloudcast.reposts.totalCount} reposts`);\r\n            }\r\n            if (cloudcast.comments?.totalCount) {\r\n                stats.push(`${cloudcast.comments.totalCount} comments`);\r\n            }\r\n\r\n            if (stats.length > 0) {\r\n                richDescription += richDescription ? '<br><br>' : '';\r\n                richDescription += `<em>${stats.join(' â€¢ ')}</em>`;\r\n            }\r\n\r\n            return {\r\n                title: cloudcast.name,\r\n                author: cloudcast.owner?.displayName || username,\r\n                description: richDescription,\r\n                pubDate: parseDate(cloudcast.publishDate),\r\n                guid: Buffer.from(cloudcast.id, 'base64').toString(),\r\n                link: `${MIXCLOUD_CONFIG.host}/${cloudcast.owner?.username || username}/${cloudcast.slug}`,\r\n                itunes_item_image: cloudcast.picture?.url || '',\r\n                itunes_duration: cloudcast.audioLength,\r\n                enclosure_url: enclosureUrl,\r\n                enclosure_type: 'audio/x-m4a',\r\n                itunes_author: cloudcast.owner?.displayName || username,\r\n                category: tags,\r\n                comments: cloudcast.comments?.totalCount || 0,\r\n                upvotes: cloudcast.favorites?.totalCount || 0,\r\n                media: enclosureUrl\r\n                    ? {\r\n                          content: {\r\n                              url: enclosureUrl,\r\n                              type: 'audio/x-m4a',\r\n                              duration: cloudcast.audioLength,\r\n                          },\r\n                          thumbnail: cloudcast.picture?.url\r\n                              ? {\r\n                                    url: cloudcast.picture.url,\r\n                                }\r\n                              : undefined,\r\n                      }\r\n                    : undefined,\r\n            };\r\n        })\r\n        .filter(Boolean);\r\n\r\n    const title = getPlaylistTitle(displayName, type, data.name);\r\n    const link = getPlaylistLink(username, type, playlistSlug);\r\n\r\n    return {\r\n        title,\r\n        description: description?.replaceAll('\\n', '<br>') || '',\r\n        itunes_author: displayName,\r\n        image,\r\n        link,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"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"}