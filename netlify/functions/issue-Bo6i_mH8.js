import"./esm-shims-Dqvxr0BZ.js";import{config as e}from"./config-Dl8a1sIg.js";import"./logger-CWOoofbD.js";import"./dist-IvUHtNe1.js";import"./helpers-DzX-lcQO.js";import{parseDate as t}from"./parse-date-Bgabdhlb.js";import"./ofetch-Bzt0BXUH.js";import{got_default as n}from"./got-CdvI2yKX.js";import{ViewType as r}from"./types-A5bA50Mg.js";import i from"markdown-it";import a from"query-string";const o=i({html:!0,linkify:!0}),s={path:`/issue/:user/:repo/:state?/:labels?`,categories:[`programming`],view:r.Notifications,example:`/github/issue/DIYgod/RSSHub/open`,parameters:{user:`GitHub username`,repo:`GitHub repo name`,state:{description:`the state of the issues.`,default:`open`,options:[{label:`Open`,value:`open`},{label:`Closed`,value:`closed`},{label:`All`,value:`all`}]},labels:`a list of comma separated label names`},radar:[{source:[`github.com/:user/:repo/issues`,`github.com/:user/:repo/issues/:id`,`github.com/:user/:repo`],target:`/issue/:user/:repo`}],name:`Repo Issues`,maintainers:[`HenryQW`,`AndreyMZ`],handler:c};async function c(r){let i=r.req.param(`user`),s=r.req.param(`repo`),c=r.req.param(`state`),l=r.req.param(`labels`),u=r.req.query(`limit`)?Math.min(Number.parseInt(r.req.query(`limit`)),100):100,d=`https://github.com/${i}/${s}/issues`,f=`https://api.github.com/repos/${i}/${s}/issues`,p={Accept:`application/vnd.github.v3+json`};e.github&&e.github.access_token&&(p.Authorization=`token ${e.github.access_token}`);let m=await n({method:`get`,url:f,searchParams:a.stringify({state:c,labels:l,sort:`created`,direction:`desc`,per_page:u}),headers:p}),h=m.data;return{allowEmpty:!0,title:`${i}/${s}${c?` `+c.replace(/^\S/,e=>e.toUpperCase()):``} Issues${l?` - `+l:``}`,link:d,item:h.filter(e=>e.pull_request===void 0).map(e=>({title:e.title,description:e.body?o.render(e.body):`No description`,pubDate:t(e.created_at),author:e.user.login,link:`${d}/${e.number}`}))}}export{s as route};
//# sourceMappingURL=issue-Bo6i_mH8.js.map