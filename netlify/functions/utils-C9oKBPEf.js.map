{"version":3,"file":"utils-C9oKBPEf.js","names":[],"sources":["../../lib/routes/daily/utils.ts"],"sourcesContent":["import { parseDate } from '@/utils/parse-date';\r\nimport ofetch from '@/utils/ofetch';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { DataItem } from '@/types';\r\n\r\nexport const baseUrl = 'https://app.daily.dev';\r\nconst gqlUrl = `https://api.daily.dev/graphql`;\r\nexport const variables = {\r\n    version: 54,\r\n    loggedIn: false,\r\n};\r\nexport const getBuildId = () =>\r\n    cache.tryGet(\r\n        'daily:buildId',\r\n        async () => {\r\n            const response = await ofetch(`${baseUrl}/onboarding`);\r\n            const buildId = response.match(/\"buildId\":\"(.*?)\"/)[1];\r\n            return buildId;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    );\r\n\r\nexport const getData = async (graphqlQuery, source = false) => {\r\n    const response = await ofetch(gqlUrl, {\r\n        method: 'POST',\r\n        body: graphqlQuery,\r\n    });\r\n    return source ? response.data.source : response.data.page.edges;\r\n};\r\n\r\nconst render = (data) => art(path.join(__dirname, 'templates/posts.art'), data);\r\n\r\nexport const getList = (edges, innerSharedContent: boolean, dateSort: boolean) =>\r\n    edges.map(({ node }) => {\r\n        let link: string;\r\n        let title: string;\r\n        if (innerSharedContent && node.type === 'share') {\r\n            link = node.sharedPost.permalink;\r\n            title = node.sharedPost.title;\r\n        } else {\r\n            link = node.commentsPermalink ?? node.permalink;\r\n            title = node.title;\r\n        }\r\n\r\n        return {\r\n            id: node.id,\r\n            title,\r\n            link,\r\n            guid: node.permalink,\r\n            description: render({\r\n                image: node.image,\r\n                content: node.contentHtml?.replaceAll('\\n', '<br>') ?? node.summary,\r\n            }),\r\n            author: node.author?.name,\r\n            itunes_item_image: node.image,\r\n            pubDate: dateSort ? parseDate(node.createdAt) : '',\r\n            upvotes: node.numUpvotes,\r\n            comments: node.numComments,\r\n            category: node.tags,\r\n        } as DataItem;\r\n    });\r\n"],"mappings":"6VAQA,MAAa,EAAU,wBAEV,EAAY,CACrB,QAAS,GACT,SAAU,IAED,MACT,EAAM,OACF,gBACA,SAAY,CACR,IAAM,EAAW,MAAM,EAAO,GAAG,EAAQ,cACnC,EAAU,EAAS,MAAM,qBAAqB,GACpD,OAAO,GAEX,EAAO,MAAM,YACb,IAGK,EAAU,MAAO,EAAc,EAAS,KAAU,CAC3D,IAAM,EAAW,MAAM,EAAO,gCAAQ,CAClC,OAAQ,OACR,KAAM,IAEV,OAAO,EAAS,EAAS,KAAK,OAAS,EAAS,KAAK,KAAK,OAGxD,EAAU,GAAS,EAAI,EAAA,KAAA,EAAA,gCAA6C,GAE7D,GAAW,EAAO,EAA6B,IACxD,EAAM,KAAK,CAAE,UAAW,CACpB,IAAI,EACA,EASJ,OARI,GAAsB,EAAK,OAAS,SACpC,EAAO,EAAK,WAAW,UACvB,EAAQ,EAAK,WAAW,QAExB,EAAO,EAAK,mBAAqB,EAAK,UACtC,EAAQ,EAAK,OAGV,CACH,GAAI,EAAK,GACT,QACA,OACA,KAAM,EAAK,UACX,YAAa,EAAO,CAChB,MAAO,EAAK,MACZ,QAAS,EAAK,aAAa,WAAW;EAAM,SAAW,EAAK,UAEhE,OAAQ,EAAK,QAAQ,KACrB,kBAAmB,EAAK,MACxB,QAAS,EAAW,EAAU,EAAK,WAAa,GAChD,QAAS,EAAK,WACd,SAAU,EAAK,YACf,SAAU,EAAK"}