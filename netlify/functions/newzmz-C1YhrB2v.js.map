{"version":3,"file":"newzmz-C1YhrB2v.js","names":["route: Route","cache","response","got"],"sources":["../../lib/routes/newzmz/util.ts","../../lib/routes/newzmz/index.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst rootUrl = 'https://nzmz.xyz';\r\n\r\n/**\r\n * Retrieve all movies and TV shows under a specified category on the homepage and obtain their detail links.\r\n * @param {function} tryGet     - cache.tryGet\r\n * @param {string} homeUrl      - Homepage URL\r\n * @param {string} id           - Category id\r\n * @param {string} modSelector  - Selector for mods\r\n * @param {string} itemSelector - Selector for items\r\n * @returns {Array} An array containing the links in the map.\r\n */\r\nconst getItems = async (tryGet, homeUrl, id, modSelector, itemSelector) => {\r\n    const response = await tryGet(homeUrl, async () => {\r\n        const { data: response } = await got(homeUrl);\r\n\r\n        return response;\r\n    });\r\n\r\n    const $ = load(response);\r\n\r\n    return $(modSelector)\r\n        .eq(Number.parseInt(id, 10))\r\n        .find(itemSelector)\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n\r\n            return {\r\n                link: new URL(item.prop('href'), rootUrl).href,\r\n            };\r\n        });\r\n};\r\n\r\n/**\r\n * Obtain the information corresponding to a given movie or TV show item based on the provided URL.\r\n * @param {function} tryGet - cache.tryGet\r\n * @param {string} itemUrl  - Item URL\r\n * @returns {Object} An object containing information of the item.\r\n */\r\nconst getItemInfo = (tryGet, itemUrl) =>\r\n    tryGet(`newzmz#${itemUrl.match(/details-(.*?)\\.html/)[1]}`, async () => {\r\n        const { data: detailResponse } = await got(itemUrl);\r\n\r\n        const content = load(detailResponse);\r\n\r\n        const nameZh = content('div.chsname').text();\r\n        const nameEn = content('div.engname').text();\r\n        const alias = content('div.aliasname')\r\n            .text()\r\n            .replace(/又名：/, '')\r\n            .split('/')\r\n            .map((a) => a.trim())\r\n            .filter(Boolean);\r\n\r\n        const link = content('a.addgz').prop('href');\r\n\r\n        return {\r\n            link,\r\n            pubDate: parseDate(\r\n                content('span.duration')\r\n                    .first()\r\n                    .text()\r\n                    .match(/(\\d{4}-\\d{2}-\\d{2})/)[1]\r\n            ),\r\n            description: {\r\n                image: content('div.details-bg img').prop('src'),\r\n                nameZh,\r\n                nameEn,\r\n                alias,\r\n                update: content('span.upday').text(),\r\n                links: content('div.ep-infos a[title]')\r\n                    .toArray()\r\n                    .map((a) => {\r\n                        a = content(a);\r\n\r\n                        return {\r\n                            title: a.prop('title'),\r\n                            link: a.prop('href'),\r\n                        };\r\n                    }),\r\n            },\r\n            author: content('ul.sws-list')\r\n                .first()\r\n                .find('h5.title')\r\n                .toArray()\r\n                .map((a) => content(a).text())\r\n                .join(' / '),\r\n            category: [nameZh, nameEn, ...alias],\r\n        };\r\n    });\r\n\r\n/**\r\n * Retrieve all the episode items from the corresponding download page of a movie or TV show.\r\n * @param {Object} i                - Preprocessed item object\r\n * @param {string} downLinkType     - Type of download link, with the default value being `磁力链`. The website provides various types of download links, including but not limited to `磁力链`, `百度网盘`, `阿里云盘`, `夸克网盘`, `UC网盘`, and more. If the specified download link type cannot be found, the first download link will be returned instead.\r\n * @param {string} itemSelector     - Selector for items\r\n * @param {string} categorySelector - Selector for categories\r\n * @param {string} downLinkSelector - Selector for download links\r\n * @returns {Array} An array containing RSS feed objects in the map.\r\n */\r\nconst processItems = async (i, downLinkType, itemSelector, categorySelector, downLinkSelector) => {\r\n    const { data: detailResponse } = await got(i.link);\r\n\r\n    const content = load(detailResponse);\r\n\r\n    return content(itemSelector)\r\n        .toArray()\r\n        .map((item) => {\r\n            item = content(item);\r\n\r\n            const categories = item\r\n                .find(categorySelector)\r\n                .toArray()\r\n                .map((c) => content(c).text());\r\n\r\n            const downLinks = item\r\n                .find(downLinkSelector)\r\n                .toArray()\r\n                .map((downLink) => {\r\n                    downLink = content(downLink);\r\n\r\n                    return {\r\n                        title: downLink.find('p.link-name').text(),\r\n                        link: downLink.find('a[title]').prop('href'),\r\n                    };\r\n                });\r\n\r\n            const subtitle = item\r\n                .find('span.up')\r\n                .text()\r\n                .replaceAll(/[\\s-]+/g, '');\r\n            const title = `${i.description.nameZh || i.description.nameEn}|${subtitle}`;\r\n            const guid = `newzmz#${i.link.match(/view\\/(.*?)\\.html/)[1]}-${subtitle}`;\r\n\r\n            return {\r\n                guid,\r\n                title,\r\n                link: i.link,\r\n                description: art(path.join(__dirname, 'templates/description.art'), {\r\n                    ...i.description,\r\n\r\n                    categories,\r\n                    downLinks,\r\n                }),\r\n                author: i.author,\r\n                category: [...i.category, ...categories].filter(Boolean),\r\n                pubDate: i.pubDate,\r\n                enclosure_url: downLinks.findLast((l) => l.title === downLinkType)?.link ?? downLinks[0].link,\r\n                enclosure_type: 'application/x-bittorrent',\r\n            };\r\n        });\r\n};\r\n\r\nexport { rootUrl, getItems, getItemInfo, processItems };\r\n","import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\n\r\nimport { rootUrl, getItems, getItemInfo, processItems } from './util';\r\n\r\nexport const route: Route = {\r\n    path: '/:id?/:downLinkType?',\r\n    categories: ['multimedia'],\r\n    example: '/newzmz/qEzRyY3v',\r\n    parameters: { id: '剧集 id，可在剧集下载页 URL 中找到', downLinkType: '下载链接类型，默认为磁力链' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['newzmz.com/'],\r\n            target: '',\r\n        },\r\n    ],\r\n    name: '指定剧集',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    url: 'newzmz.com/',\r\n    description: `::: tip\r\n  [雪国列车 (剧版)](https://nzmz.xyz/details-qEzRyY3v.html) 的下载页 URL 为 \\`https://v.ys99.xyz/view/qEzRyY3v.html\\`，即剧集 id 为 \\`qEzRyY3v\\`\r\n:::`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { id = '1', downLinkType = '磁力链' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 50;\r\n\r\n    // If the id is not composed solely of digits,\r\n    // then consider it as the id of a movie or TV show;\r\n    // otherwise, consider it as the id for the category.\r\n\r\n    const isCategory = !Number.isNaN(id);\r\n\r\n    const currentUrl = new URL(isCategory ? 'index.html' : `details-${id}.html`, rootUrl).href;\r\n\r\n    const response = await cache.tryGet(currentUrl, async () => {\r\n        const { data: response } = await got(currentUrl);\r\n\r\n        return response;\r\n    });\r\n\r\n    const $ = load(response);\r\n\r\n    // If a category id is specified,\r\n    // retrieve all movies and TV shows from that category\r\n    // and add them to the \"to be processed\" array.\r\n    // Otherwise, if only a specific TV show or movie ID is provided,\r\n    // add that item alone to the \"to be processed\" array.\r\n\r\n    let items = isCategory\r\n        ? await getItems(cache.tryGet, currentUrl, id, 'div.rowMod', 'ul.slides li a')\r\n        : [\r\n              {\r\n                  link: currentUrl,\r\n              },\r\n          ];\r\n\r\n    items = await Promise.all(items.slice(0, limit).map((item) => getItemInfo(cache.tryGet, item.link)));\r\n\r\n    // If the link of the entry is \"#\",\r\n    // it indicates that there are currently no relevant resources available for that specific item.\r\n\r\n    items = await Promise.all(items.filter((item) => item.link !== '#').map((i) => processItems(i, downLinkType, 'div.team-con-area', 'div.item-label a', 'ul.team-icons li')));\r\n\r\n    items = items.flat();\r\n\r\n    const headerTitle = isCategory ? $('div.rowMod').eq(Number.parseInt(id, 10)).find('h2.row-header-title').text() : '';\r\n    const title = `${$('title').text()}${headerTitle ? ` - ${headerTitle}` : ''}`;\r\n    const icon = $('link[rel=\"shortcut icon\"]').prop('href');\r\n\r\n    return {\r\n        item: isCategory ? items : items.slice(0, limit),\r\n        title,\r\n        link: currentUrl,\r\n        description: $('meta[name=\"description\"]').prop('content'),\r\n        language: 'zh-cn',\r\n        image: $('img.logo-img').prop('src'),\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('meta[name=\"keywords\"]').prop('content'),\r\n        author: title,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"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"}