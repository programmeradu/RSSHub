{"version":3,"file":"comic-BnvvThga.js","names":["route: Route","got"],"sources":["../../lib/routes/komiic/comic.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport got from '@/utils/got';\r\n\r\nexport const route: Route = {\r\n    path: '/comic/:id',\r\n    categories: ['anime'],\r\n    example: '/komiic/comic/533',\r\n    parameters: { id: '漫画 ID' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['komiic.com/comic/:id'],\r\n            target: '/comic/:id',\r\n        },\r\n    ],\r\n    name: '漫画更新',\r\n    maintainers: ['NekoAria'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { id } = ctx.req.param();\r\n    const { limit = 0 } = ctx.req.query();\r\n    const baseUrl = 'https://komiic.com';\r\n\r\n    const { data: comicInfo } = await got.post(`${baseUrl}/api/query`, {\r\n        json: {\r\n            operationName: 'comicById',\r\n            variables: { comicId: id },\r\n            query: `query comicById($comicId: ID!) {\r\n                comicById(comicId: $comicId) {\r\n                    title\r\n                    imageUrl\r\n                }\r\n            }`,\r\n        },\r\n    });\r\n\r\n    const { title, imageUrl } = comicInfo.data.comicById;\r\n\r\n    const { data: chapterData } = await got.post(`${baseUrl}/api/query`, {\r\n        json: {\r\n            operationName: 'chapterByComicId',\r\n            variables: { comicId: id },\r\n            query: `query chapterByComicId($comicId: ID!) {\r\n                chaptersByComicId(comicId: $comicId) {\r\n                    id\r\n                    serial\r\n                    type\r\n                    dateUpdated\r\n                    size\r\n                }\r\n            }`,\r\n        },\r\n    });\r\n\r\n    const sortedChapters = chapterData.data.chaptersByComicId.sort((a, b) => Date.parse(b.dateUpdated) - Date.parse(a.dateUpdated));\r\n\r\n    const chapterLimit = Number(limit) || sortedChapters.length;\r\n    const filteredChapters = sortedChapters.slice(0, chapterLimit);\r\n\r\n    const generateChapterDescription = (chapter) =>\r\n        `\r\n        <h1>${chapter.size}p</h1>\r\n        <img src=\"${imageUrl}\" />\r\n    `.trim();\r\n\r\n    const items = filteredChapters.map((chapter) => ({\r\n        title: chapter.type === 'book' ? `第 ${chapter.serial} 卷` : `第 ${chapter.serial} 话`,\r\n        link: `${baseUrl}/comic/${id}/chapter/${chapter.id}/images/all`,\r\n        pubDate: parseDate(chapter.dateUpdated),\r\n        description: generateChapterDescription(chapter),\r\n    }));\r\n\r\n    return {\r\n        title: `Komiic - ${title}`,\r\n        link: `${baseUrl}/comic/${id}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"qRAIA,MAAaA,EAAe,CACxB,KAAM,aACN,WAAY,CAAC,SACb,QAAS,oBACT,WAAY,CAAE,GAAI,SAClB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,wBACT,OAAQ,eAGhB,KAAM,OACN,YAAa,CAAC,YACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,MAAO,EAAI,IAAI,QACjB,CAAE,QAAQ,GAAM,EAAI,IAAI,QACxB,EAAU,qBAEV,CAAE,KAAM,GAAc,MAAMC,EAAI,KAAK,GAAG,EAAQ,YAAa,CAC/D,KAAM,CACF,cAAe,YACf,UAAW,CAAE,QAAS,GACtB,MAAO;;;;;kBAST,CAAE,QAAO,YAAa,EAAU,KAAK,UAErC,CAAE,KAAM,GAAgB,MAAMA,EAAI,KAAK,GAAG,EAAQ,YAAa,CACjE,KAAM,CACF,cAAe,mBACf,UAAW,CAAE,QAAS,GACtB,MAAO;;;;;;;;kBAYT,EAAiB,EAAY,KAAK,kBAAkB,MAAM,EAAG,IAAM,KAAK,MAAM,EAAE,aAAe,KAAK,MAAM,EAAE,cAE5G,EAAe,OAAO,IAAU,EAAe,OAC/C,EAAmB,EAAe,MAAM,EAAG,GAE3C,EAA8B,GAChC;cACM,EAAQ,KAAK;oBACP,EAAS;MACvB,OAEI,EAAQ,EAAiB,IAAK,IAAa,CAC7C,MAAO,EAAQ,OAAS,OAAS,KAAK,EAAQ,OAAO,IAAM,KAAK,EAAQ,OAAO,IAC/E,KAAM,GAAG,EAAQ,SAAS,EAAG,WAAW,EAAQ,GAAG,aACnD,QAAS,EAAU,EAAQ,aAC3B,YAAa,EAA2B,MAG5C,MAAO,CACH,MAAO,YAAY,IACnB,KAAM,GAAG,EAAQ,SAAS,IAC1B,KAAM"}