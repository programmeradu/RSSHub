{"version":3,"file":"dailyquestion-solution-en-BuajAet2.js","names":["MarkdownIt","route: Route","got"],"sources":["../../lib/routes/leetcode/dailyquestion-solution-en.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport MarkdownIt from 'markdown-it';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n    breaks: true,\r\n});\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\nimport path from 'node:path';\r\nexport const route: Route = {\r\n    path: '/dailyquestion/solution/en',\r\n    radar: [\r\n        {\r\n            source: ['leetcode.com/'],\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n    url: 'leetcode.com/',\r\n};\r\n\r\nasync function handler() {\r\n    const baseurl = `https://leetcode.com`;\r\n    const url = `${baseurl}/graphql/`;\r\n    const headers = {\r\n        'content-type': 'application/json',\r\n    };\r\n    const emoji = {\r\n        Medium: 'üü°',\r\n        Easy: 'üü¢',\r\n        Hard: 'üî¥',\r\n    };\r\n    // Ëé∑ÂèñÊØèÊó•‰∏ÄÈ¢ò\r\n    const data = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'questionOfToday',\r\n                query: `query questionOfToday {\r\n                            activeDailyCodingChallengeQuestion {\r\n                                date\r\n                                link\r\n                                question {\r\n                                    frontendQuestionId: questionFrontendId\r\n                                    titleSlug\r\n                                }\r\n                            }\r\n                        }`,\r\n                variables: {},\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data;\r\n    const questionTitle = data.activeDailyCodingChallengeQuestion.question.titleSlug;\r\n    const questionUrl = `${baseurl}/problems/${questionTitle}/`;\r\n\r\n    // Ëé∑ÂèñÈ¢òÁõÆÂÜÖÂÆπ\r\n    const question = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'questionData',\r\n                query: `query questionData($titleSlug: String!) {\r\n                            question(titleSlug: $titleSlug) {\r\n                                questionId\r\n                                questionFrontendId\r\n                                categoryTitle\r\n                                boundTopicId\r\n                                title\r\n                                titleSlug\r\n                                content\r\n                                translatedTitle\r\n                                translatedContent\r\n                                isPaidOnly\r\n                                difficulty\r\n                                likes\r\n                            }\r\n                        }`,\r\n                variables: {\r\n                    titleSlug: questionTitle,\r\n                },\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data.question;\r\n    const diffEmoji = emoji[question.difficulty] || '';\r\n    // Ëé∑ÂèñÈ¢òËß£ÔºàenÁΩëÁ´ô‰ªÖ‰∏Ä‰∏™È¢òËß£)\r\n    const article = (\r\n        await got({\r\n            method: 'post',\r\n            url,\r\n            json: {\r\n                operationName: 'QuestionNote',\r\n                query: `query QuestionNote($titleSlug: String!) {\r\n                    question(titleSlug: $titleSlug) {\r\n                      questionId\r\n                      article\r\n                      solution {\r\n                        id\r\n                        content\r\n                        contentTypeId\r\n                        canSeeDetail\r\n                        paidOnly\r\n                        hasVideoSolution\r\n                        paidOnlyVideo\r\n                        rating {\r\n                          id\r\n                          count\r\n                          average\r\n                          userRating {\r\n                            score\r\n                          }\r\n                        }\r\n                      }\r\n                    }\r\n                }`,\r\n                variables: {\r\n                    titleSlug: questionTitle,\r\n                },\r\n            },\r\n            headers,\r\n        })\r\n    ).data.data.question.solution;\r\n    if (article.content === null) {\r\n        article.content = 'Sorry, the solution of this question may be locked.';\r\n    }\r\n\r\n    // ÂõæÁâáÂ§ÑÁêÜ\r\n    const parsePngSlide = async (s) => {\r\n        const pattern = /!\\?!(.+)!\\?!/;\r\n        if (!pattern.test(s)) {\r\n            return s;\r\n        }\r\n        const matched = s.match(new RegExp(pattern, 'g'));\r\n        const fn = async (m) => {\r\n            const relaurl = m.match(pattern)[1].split(':')[0];\r\n            const fullurl = path.resolve('/' + questionUrl + 'solution/', relaurl).slice(1);\r\n            const pngList = (\r\n                await got({\r\n                    url: fullurl,\r\n                    method: 'get',\r\n                    headers,\r\n                })\r\n            ).data.timeline;\r\n            return pngList.map((v) => `![pic](${path.resolve(`/problems/${questionTitle}/solution/`, v.image)})`).join('\\n');\r\n        };\r\n        const strs = await Promise.all(matched.map((v) => fn(v)));\r\n        for (const [i, element] of matched.entries()) {\r\n            s = s.replace(element, strs[i]);\r\n        }\r\n        return s;\r\n    };\r\n    // iframe‰ª£Á†ÅÊ°ÜÂ§ÑÁêÜ\r\n    const parseIframe = async (s) => {\r\n        const pattern = /<iframe.*? src=\".*?playground\\/(.*?)\\/shared\".*<\\/iframe>/;\r\n        if (!pattern.test(s)) {\r\n            return s;\r\n        }\r\n        const matched = s.match(new RegExp(pattern, 'g'));\r\n        const fn = async (m) => {\r\n            const uuid = m.match(pattern)[1];\r\n            const code = (\r\n                await got({\r\n                    method: 'post',\r\n                    url,\r\n                    json: {\r\n                        operationName: 'fetchPlayground',\r\n                        query: `query fetchPlayground {\r\n                            playground(uuid: \"${uuid}\") {\r\n                              testcaseInput\r\n                              name\r\n                              isUserOwner\r\n                              isLive\r\n                              showRunCode\r\n                              showOpenInPlayground\r\n                              selectedLangSlug\r\n                              isShared\r\n                              __typename\r\n                            }\r\n                            allPlaygroundCodes(uuid: \"${uuid}\") {\r\n                              code\r\n                              langSlug\r\n                              __typename\r\n                            }\r\n                          }`,\r\n                        variables: {},\r\n                    },\r\n                    headers,\r\n                })\r\n            ).data.data.allPlaygroundCodes;\r\n            return code.map((c) => `###${c.langSlug}\\n\\r \\`\\`\\`${c.langSlug}\\n ${c.code}\\n\\`\\`\\``).join('\\n\\r');\r\n        };\r\n        const strs = await Promise.all(matched.map((v) => fn(v)));\r\n        for (const [i, element] of matched.entries()) {\r\n            s = s.replace(element, strs[i]);\r\n        }\r\n        return s;\r\n    };\r\n    const handleText = async (s) => {\r\n        // Â§ÑÁêÜ‰ª£Á†ÅiframeÂµåÂÖ•ÈóÆÈ¢ò\r\n        s = await parseIframe(s);\r\n        // Â§ÑÁêÜÂõæÁâáÂ±ïÁ§∫ÈóÆÈ¢ò\r\n        s = await parsePngSlide(s);\r\n        return s;\r\n    };\r\n    article.content = await handleText(article.content);\r\n    return {\r\n        title: 'LeetCode DailyQuestion Solution',\r\n        description: 'LeetCode DailyQuestion Solution',\r\n        link: questionUrl,\r\n        item: [\r\n            {\r\n                title: `DailyQuestion-${question.title}${diffEmoji}`,\r\n                link: questionUrl,\r\n                description: question.content,\r\n                pubDate: timezone(parseDate(data.activeDailyCodingChallengeQuestion.date), +8),\r\n            },\r\n            {\r\n                title: `Solution-${question.title}`,\r\n                link: `${questionUrl}solution/`,\r\n                description: md.render(article.content),\r\n                pubDate: timezone(parseDate(data.activeDailyCodingChallengeQuestion.date), +8),\r\n                author: 'leetcode',\r\n            },\r\n        ],\r\n    };\r\n}\r\n"],"mappings":"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"}