{"version":3,"file":"follows-BIT52OBb.js","names":["statusMap: Record<FollowType, StatusType>","labelMap: Record<FollowType, LabelType>","route: Route","getToken","cache","got","statuses"],"sources":["../../lib/routes/mangadex/user/follows.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport getToken from '../_access';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\nimport { getMangaChapters, getMangaMetaByIds } from '../_feed';\r\n\r\ntype FollowType = 'reading' | 'plan-to-read' | 'completed' | 'on-hold' | 're-reading' | 'dropped';\r\ntype StatusType = 'reading' | 'plan_to_read' | 'completed' | 'on_hold' | 're_reading' | 'dropped';\r\ntype LabelType = 'Reading' | 'Plan to Read' | 'Completed' | 'On Hold' | 'Re-reading' | 'Dropped';\r\n\r\nconst statusMap: Record<FollowType, StatusType> = {\r\n    reading: 'reading',\r\n    'plan-to-read': 'plan_to_read',\r\n    completed: 'completed',\r\n    'on-hold': 'on_hold',\r\n    're-reading': 're_reading',\r\n    dropped: 'dropped',\r\n};\r\n\r\nconst labelMap: Record<FollowType, LabelType> = {\r\n    reading: 'Reading',\r\n    'plan-to-read': 'Plan to Read',\r\n    completed: 'Completed',\r\n    'on-hold': 'On Hold',\r\n    're-reading': 'Re-reading',\r\n    dropped: 'Dropped',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/user/follow/:type?',\r\n    name: \"Logged User's Followed Mangas Feed\",\r\n    maintainers: ['chrisis58'],\r\n    example: '/mangadex/user/follow/reading',\r\n    description: `Fetches the feed of mangas that you follow on MangaDex whick are in the specified status.\r\nCAUTION: With big amount of follows, it may take a long time to load or even fail.\r\nIt's recommended to use the \\`/mangadex/mdlist/:listId?\\` route instead for better performance, though it requires manual configuration.`,\r\n    categories: ['anime'],\r\n    parameters: {\r\n        type: {\r\n            description: 'The type of follows to fetch',\r\n            default: 'reading',\r\n            options: [\r\n                { value: 'reading', label: 'Reading' },\r\n                { value: 'plan-to-read', label: 'Plan to Read' },\r\n                { value: 'completed', label: 'Completed' },\r\n                { value: 'on-hold', label: 'On Hold' },\r\n                { value: 're-reading', label: 'Re-reading' },\r\n                { value: 'dropped', label: 'Dropped' },\r\n            ],\r\n        },\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['mangadex.org/titles/follows'],\r\n            target: '/user/follow/reading',\r\n        },\r\n    ],\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'MANGADEX_USERNAME',\r\n                description: 'MangaDex Username, required when refresh-token is not set',\r\n                optional: true,\r\n            },\r\n            {\r\n                name: 'MANGADEX_PASSWORD',\r\n                description: 'MangaDex Password, required when refresh-token is not set',\r\n                optional: true,\r\n            },\r\n            {\r\n                name: 'MANGADEX_CLIENT_ID',\r\n                description: 'MangaDex Client ID',\r\n                optional: false,\r\n            },\r\n            {\r\n                name: 'MANGADEX_CLIENT_SECRET',\r\n                description: 'MangaDex Client Secret',\r\n                optional: false,\r\n            },\r\n            {\r\n                name: 'MANGADEX_REFRESH_TOKEN',\r\n                description: 'MangaDex Refresh Token, required when username and password are not set',\r\n                optional: true,\r\n            },\r\n        ],\r\n    },\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const userFollowUrl = 'https://api.mangadex.org/manga/status';\r\n\r\n    const { type } = ctx.req.param();\r\n\r\n    const followType = (type || 'reading') as FollowType;\r\n\r\n    const accessToken = await getToken();\r\n\r\n    const statuses = (await cache.tryGet(\r\n        `mangadex:user-follow-${followType}`,\r\n        async () => {\r\n            const response = await got.get(userFollowUrl, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`,\r\n                    'User-Agent': config.trueUA,\r\n                },\r\n            });\r\n\r\n            const statuses = response?.data?.statuses;\r\n            if (!statuses) {\r\n                throw new Error('Failed to retrieve user follows from MangaDex API.');\r\n            }\r\n\r\n            return statuses;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    )) as Record<string, string>;\r\n\r\n    const mangaIds = filterByValue(statuses, statusMap[followType]);\r\n\r\n    const mangaMetaMap = await getMangaMetaByIds(mangaIds);\r\n\r\n    const mangaChapters = await Promise.all(mangaIds.map((id) => getMangaChapters(id, undefined, 10)));\r\n\r\n    const mangas = mangaChapters.flatMap((chapters, index) => {\r\n        const mangaMeta = mangaMetaMap.get(mangaIds[index]);\r\n        return chapters.map((chapter) => ({\r\n            title: mangaMeta?.title ?? 'Unknown',\r\n            link: chapter.link,\r\n            pubDate: chapter.pubDate,\r\n            description: chapter.title ?? '',\r\n            image: mangaMeta?.cover ?? '',\r\n        }));\r\n    });\r\n\r\n    return {\r\n        title: `User Follows - ${labelMap[followType]} Mangas`,\r\n        link: `https://mangadex.org/titles/follows?tab=${followType}`,\r\n        description: 'Followed Mangas',\r\n        item: mangas,\r\n    };\r\n}\r\n\r\nconst filterByValue = (record: Record<string, string>, value: string): string[] =>\r\n    Object.entries(record)\r\n        .filter(([, v]) => v === value)\r\n        .map(([k]) => k);\r\n"],"mappings":"ycAWA,MAAMA,EAA4C,CAC9C,QAAS,UACT,eAAgB,eAChB,UAAW,YACX,UAAW,UACX,aAAc,aACd,QAAS,WAGPC,EAA0C,CAC5C,QAAS,UACT,eAAgB,eAChB,UAAW,YACX,UAAW,UACX,aAAc,aACd,QAAS,WAGAC,EAAe,CACxB,KAAM,sBACN,KAAM,qCACN,YAAa,CAAC,aACd,QAAS,gCACT,YAAa;;0IAGb,WAAY,CAAC,SACb,WAAY,CACR,KAAM,CACF,YAAa,+BACb,QAAS,UACT,QAAS,CACL,CAAE,MAAO,UAAW,MAAO,WAC3B,CAAE,MAAO,eAAgB,MAAO,gBAChC,CAAE,MAAO,YAAa,MAAO,aAC7B,CAAE,MAAO,UAAW,MAAO,WAC3B,CAAE,MAAO,aAAc,MAAO,cAC9B,CAAE,MAAO,UAAW,MAAO,cAIvC,MAAO,CACH,CACI,OAAQ,CAAC,+BACT,OAAQ,yBAGhB,SAAU,CACN,cAAe,CACX,CACI,KAAM,oBACN,YAAa,4DACb,SAAU,IAEd,CACI,KAAM,oBACN,YAAa,4DACb,SAAU,IAEd,CACI,KAAM,qBACN,YAAa,qBACb,SAAU,IAEd,CACI,KAAM,yBACN,YAAa,yBACb,SAAU,IAEd,CACI,KAAM,yBACN,YAAa,0EACb,SAAU,MAItB,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAEM,CAAE,QAAS,EAAI,IAAI,QAEnB,EAAc,GAAQ,UAEtB,EAAc,MAAMC,IAEpB,EAAY,MAAMC,EAAM,OAC1B,wBAAwB,IACxB,SAAY,CACR,IAAM,EAAW,MAAMC,EAAI,IAAI,wCAAe,CAC1C,QAAS,CACL,cAAe,UAAU,IACzB,aAAc,EAAO,UAIvBC,EAAW,GAAU,MAAM,SACjC,GAAI,CAACA,EACD,MAAU,MAAM,sDAGpB,OAAOA,GAEX,EAAO,MAAM,YACb,IAGE,EAAW,EAAc,EAAU,EAAU,IAE7C,EAAe,MAAM,EAAkB,GAEvC,EAAgB,MAAM,QAAQ,IAAI,EAAS,IAAK,GAAO,EAAiB,EAAI,IAAA,GAAW,MAEvF,EAAS,EAAc,SAAS,EAAU,IAAU,CACtD,IAAM,EAAY,EAAa,IAAI,EAAS,IAC5C,OAAO,EAAS,IAAK,IAAa,CAC9B,MAAO,GAAW,OAAS,UAC3B,KAAM,EAAQ,KACd,QAAS,EAAQ,QACjB,YAAa,EAAQ,OAAS,GAC9B,MAAO,GAAW,OAAS,QAInC,MAAO,CACH,MAAO,kBAAkB,EAAS,GAAY,SAC9C,KAAM,2CAA2C,IACjD,YAAa,kBACb,KAAM,GAId,MAAM,GAAiB,EAAgC,IACnD,OAAO,QAAQ,GACV,QAAQ,EAAG,KAAO,IAAM,GACxB,KAAK,CAAC,KAAO"}