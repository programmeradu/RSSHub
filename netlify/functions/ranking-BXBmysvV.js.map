{"version":3,"file":"ranking-BXBmysvV.js","names":["NovelType"],"sources":["../../lib/routes/syosetu/types/ranking.ts","../../lib/routes/syosetu/ranking-isekai.ts","../../lib/routes/syosetu/ranking.ts"],"sourcesContent":["export enum RankingPeriod {\r\n    DAILY = 'daily',\r\n    WEEKLY = 'weekly',\r\n    MONTHLY = 'monthly',\r\n    QUARTER = 'quarter',\r\n    YEARLY = 'yearly',\r\n    TOTAL = 'total',\r\n}\r\n\r\nexport enum NovelType {\r\n    TOTAL = 'total',\r\n    SHORT = 't',\r\n    ONGOING = 'r',\r\n    COMPLETE = 'er',\r\n}\r\n\r\nexport enum RankingType {\r\n    LIST = 'list',\r\n    GENRE = 'genre',\r\n    ISEKAI = 'isekai',\r\n}\r\n\r\nexport const periodToOrder = {\r\n    [RankingPeriod.DAILY]: 'dailypoint',\r\n    [RankingPeriod.WEEKLY]: 'weeklypoint',\r\n    [RankingPeriod.MONTHLY]: 'monthlypoint',\r\n    [RankingPeriod.QUARTER]: 'quarterpoint',\r\n    [RankingPeriod.YEARLY]: 'yearlypoint',\r\n    [RankingPeriod.TOTAL]: 'hyoka',\r\n} as const;\r\n\r\nexport const periodToPointField = {\r\n    [RankingPeriod.DAILY]: 'pt',\r\n    [RankingPeriod.WEEKLY]: 'weekly_point',\r\n    [RankingPeriod.MONTHLY]: 'monthly_point',\r\n    [RankingPeriod.QUARTER]: 'quarter_point',\r\n    [RankingPeriod.YEARLY]: 'yearly_point',\r\n    [RankingPeriod.TOTAL]: 'global_point',\r\n} as const;\r\n\r\nexport const periodToJapanese = {\r\n    [RankingPeriod.DAILY]: '日間',\r\n    [RankingPeriod.WEEKLY]: '週間',\r\n    [RankingPeriod.MONTHLY]: '月間',\r\n    [RankingPeriod.QUARTER]: '四半期',\r\n    [RankingPeriod.YEARLY]: '年間',\r\n    [RankingPeriod.TOTAL]: '累計',\r\n} as const;\r\n\r\nexport const novelTypeToJapanese = {\r\n    [NovelType.TOTAL]: 'すべて',\r\n    [NovelType.SHORT]: '短編',\r\n    [NovelType.ONGOING]: '連載中',\r\n    [NovelType.COMPLETE]: '完結済',\r\n} as const;\r\n\r\nexport enum IsekaiCategory {\r\n    RENAI = '1',\r\n    FANTASY = '2',\r\n    OTHER = 'o',\r\n}\r\n\r\nexport const isekaiCategoryToJapanese = {\r\n    [IsekaiCategory.RENAI]: '〔恋愛〕',\r\n    [IsekaiCategory.FANTASY]: '〔ファンタジー〕',\r\n    [IsekaiCategory.OTHER]: '〔文芸・SF・その他〕',\r\n} as const;\r\n","import { Data, DataItem } from '@/types';\r\nimport { NarouNovelFetch, SearchBuilder, SearchParams, BigGenre } from 'narou';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { Join } from 'narou/util/type';\r\nimport { RankingPeriod, NovelType, periodToJapanese, novelTypeToJapanese, periodToOrder, periodToPointField, IsekaiCategory, isekaiCategoryToJapanese } from './types/ranking';\r\n\r\nexport function parseIsekaiRankingType(type: string): { period: RankingPeriod; category: IsekaiCategory; novelType: NovelType } {\r\n    const [periodStr, categoryStr, novelTypeStr = NovelType.TOTAL] = type.split('_');\r\n\r\n    const period = periodStr as RankingPeriod;\r\n    const category = categoryStr as IsekaiCategory;\r\n    const novelType = novelTypeStr as NovelType;\r\n\r\n    const isValid = [Object.values(RankingPeriod).includes(period), Object.values(IsekaiCategory).includes(category), Object.values(NovelType).includes(novelType)].every(Boolean);\r\n\r\n    if (!isValid) {\r\n        throw new InvalidParameterError(`Invalid isekai ranking type: ${type}`);\r\n    }\r\n\r\n    return { period, category, novelType };\r\n}\r\n\r\nfunction getIsekaiSearchParams(period, category, novelType, limit): SearchParams {\r\n    const searchParams: SearchParams = {\r\n        order: periodToOrder[period],\r\n        gzip: 5,\r\n        // Request 20% more items to compensate for potential duplicates between tensei/tenni\r\n        lim: Math.ceil((limit / 2) * 1.2),\r\n    };\r\n\r\n    if (novelType !== NovelType.TOTAL) {\r\n        searchParams.type = novelType;\r\n    }\r\n\r\n    switch (category) {\r\n        case IsekaiCategory.RENAI:\r\n            searchParams.biggenre = BigGenre.Renai;\r\n            break;\r\n        case IsekaiCategory.FANTASY:\r\n            searchParams.biggenre = BigGenre.Fantasy;\r\n            break;\r\n        case IsekaiCategory.OTHER:\r\n            searchParams.biggenre = `${BigGenre.Bungei}-${BigGenre.Sf}-${BigGenre.Sonota}` as Join<BigGenre>;\r\n            break;\r\n        default:\r\n            throw new InvalidParameterError(`Invalid Isekai category: ${category}`);\r\n    }\r\n\r\n    return searchParams;\r\n}\r\n\r\nexport async function handleIsekaiRanking(type: string, limit: number): Promise<Data> {\r\n    const { period, category, novelType } = parseIsekaiRankingType(type);\r\n    const rankingUrl = `https://yomou.syosetu.com/rank/isekailist/type/${type}`;\r\n    const rankingTitle = `[${periodToJapanese[period]}] 異世界転生/転移${isekaiCategoryToJapanese[category]}ランキング - ${novelTypeToJapanese[novelType]} BEST${limit}`;\r\n\r\n    const searchParams = getIsekaiSearchParams(period, category, novelType, limit);\r\n    const api = new NarouNovelFetch();\r\n\r\n    const [tenseiResult, tenniResult] = await Promise.all([new SearchBuilder({ ...searchParams, istensei: 1 }, api).execute(), new SearchBuilder({ ...searchParams, istenni: 1 }, api).execute()]);\r\n\r\n    const combinedNovels = [...tenseiResult.values, ...tenniResult.values];\r\n    const uniqueNovels = [...new Map(combinedNovels.map((novel) => [novel.ncode, novel])).values()];\r\n\r\n    const pointField = periodToPointField[period];\r\n    if (!pointField) {\r\n        throw new InvalidParameterError(`Invalid period: ${period}`);\r\n    }\r\n\r\n    const items = uniqueNovels\r\n        .sort((a, b) => (b[pointField] || 0) - (a[pointField] || 0))\r\n        .map((novel, index) => ({\r\n            title: `#${index + 1} ${novel.title}`,\r\n            link: `https://ncode.syosetu.com/${String(novel.ncode).toLowerCase()}`,\r\n            description: art(path.join(__dirname, 'templates/description.art'), {\r\n                novel,\r\n            }),\r\n            author: novel.writer,\r\n            category: novel.keyword.split(/[\\s/\\uFF0F]/).filter(Boolean),\r\n        }));\r\n\r\n    return {\r\n        title: `小説家になろう - ${rankingTitle}`,\r\n        link: rankingUrl,\r\n        item: items.slice(0, limit) as DataItem[],\r\n        language: 'ja',\r\n    };\r\n}\r\n","import { Route, Data, DataItem } from '@/types';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { Context } from 'hono';\r\nimport { Genre, SearchBuilder, SearchParams, NarouNovelFetch, GenreNotation } from 'narou';\r\nimport InvalidParameterError from '@/errors/types/invalid-parameter';\r\nimport { handleIsekaiRanking } from './ranking-isekai';\r\nimport { RankingPeriod, periodToJapanese, novelTypeToJapanese, periodToOrder, RankingType, NovelType, isekaiCategoryToJapanese, IsekaiCategory } from './types/ranking';\r\n\r\nconst getParameters = () => {\r\n    // Generate ranking type options\r\n    const rankingTypeOptions = [\r\n        { value: RankingType.LIST, label: '総合ランキング (General Ranking)' },\r\n        { value: RankingType.GENRE, label: 'ジャンル別ランキング (Genre Ranking)' },\r\n        { value: RankingType.ISEKAI, label: '異世界転生/転移ランキング (Isekai Ranking)' },\r\n    ];\r\n\r\n    // Generate period options\r\n    const periodOptions = Object.entries(RankingPeriod).map(([key, value]) => ({\r\n        value,\r\n        label: `${periodToJapanese[value]} (${key})`,\r\n    }));\r\n\r\n    // Generate novel type options\r\n    const novelTypeOptions = Object.entries(NovelType).map(([key, value]) => ({\r\n        value,\r\n        label: `${novelTypeToJapanese[value]} (${key})`,\r\n    }));\r\n\r\n    // Generate genre options\r\n    const genreOptions = Object.entries(Genre)\r\n        .filter(([, value]) => typeof value === 'number') // Filter out reverse mappings\r\n        .map(([key, value]) => ({\r\n            value: value.toString(),\r\n            label: key,\r\n        }));\r\n\r\n    // Generate isekai category options\r\n    const isekaiOptions = Object.entries(IsekaiCategory).map(([key, value]) => ({\r\n        value,\r\n        label: `${isekaiCategoryToJapanese[value]} (${key})`,\r\n    }));\r\n\r\n    return {\r\n        listType: {\r\n            description: 'Ranking type',\r\n            options: rankingTypeOptions,\r\n        },\r\n        type: {\r\n            description: 'Detailed ranking type, can be found in Syosetu ranking URLs',\r\n            options: [\r\n                // General ranking options\r\n                ...periodOptions.flatMap((period) =>\r\n                    novelTypeOptions.map((novelType) => ({\r\n                        value: `${period.value}_${novelType.value}`,\r\n                        label: `${RankingType.LIST} - [${periodToJapanese[period.value]}] 総合ランキング - ${novelTypeToJapanese[novelType.value]}`,\r\n                    }))\r\n                ),\r\n                // Genre ranking options\r\n                ...periodOptions.flatMap((period) =>\r\n                    genreOptions.flatMap((genre) =>\r\n                        novelTypeOptions.map((novelType) => ({\r\n                            value: `${period.value}_${genre.value}_${novelType.value}`,\r\n                            label: `${RankingType.GENRE} - [${periodToJapanese[period.value]}] ${GenreNotation[genre.value]}ランキング - ${novelTypeToJapanese[novelType.value]}`,\r\n                        }))\r\n                    )\r\n                ),\r\n                // Isekai ranking options\r\n                ...periodOptions.flatMap((period) =>\r\n                    isekaiOptions.flatMap((category) =>\r\n                        novelTypeOptions.map((novelType) => ({\r\n                            value: `${period.value}_${category.value}_${novelType.value}`,\r\n                            label: `${RankingType.ISEKAI} - [${periodToJapanese[period.value]}] 異世界転生/転移${isekaiCategoryToJapanese[category.value]}ランキング - ${novelTypeToJapanese[novelType.value]}`,\r\n                        }))\r\n                    )\r\n                ),\r\n            ],\r\n        },\r\n    };\r\n};\r\n\r\nconst getBest5RadarItems = () => {\r\n    // List\r\n    const periodRankings = Object.values(RankingPeriod).map((period) => ({\r\n        title: `${periodToJapanese[period]}ランキング BEST5`,\r\n        source: ['yomou.syosetu.com/rank/top/'],\r\n        target: `/ranking/list/${period}_total?limit=5`,\r\n    }));\r\n\r\n    // Genre\r\n    const genreRankings = Object.entries(Genre)\r\n        .filter(([, value]) => typeof value === 'number' && value !== Genre.SonotaReplay && value !== Genre.NonGenre)\r\n        .map(([, value]) => ({\r\n            title: `[${periodToJapanese.daily}] ${GenreNotation[value]}ランキング BEST5`,\r\n            source: ['yomou.syosetu.com/rank/top/'],\r\n            target: `/ranking/genre/daily_${value}_total?limit=5`,\r\n        }));\r\n\r\n    // Isekai\r\n    const isekaiRankings = Object.values(IsekaiCategory).map((category) => ({\r\n        title: `[${periodToJapanese.daily}] 異世界転生/転移${isekaiCategoryToJapanese[category]}ランキング BEST5`,\r\n        source: ['yomou.syosetu.com/rank/top/'],\r\n        target: `/ranking/isekai/daily_${category}_total?limit=5`,\r\n    }));\r\n\r\n    return [...periodRankings, ...genreRankings, ...isekaiRankings];\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/ranking/:listType/:type',\r\n    categories: ['reading'],\r\n    example: '/syosetu/ranking/list/daily_total?limit=50',\r\n    parameters: getParameters(),\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Rankings',\r\n    url: 'yomou.syosetu.com/rank/top',\r\n    maintainers: ['SnowAgar25'],\r\n    handler,\r\n    description: `\r\n| Keyword | Description | 説明 |\r\n| --- | --- | --- |\r\n| list | Overall Ranking | 総合ランキング |\r\n| genre | Genre Ranking | ジャンル別ランキング |\r\n| isekai | Isekai/Reincarnation/Transfer Ranking | 異世界転生/転移ランキング |\r\n\r\n| Period | Description |\r\n| --- | --- |\r\n| daily | Daily Ranking |\r\n| weekly | Weekly Ranking |\r\n| monthly | Monthly Ranking |\r\n| quarter | Quarterly Ranking |\r\n| yearly | Yearly Ranking |\r\n\r\n\r\n| Type | Description |\r\n| --- | --- |\r\n| total | All Works |\r\n| t | Short Stories |\r\n| r | Ongoing Series |\r\n| er | Completed Series |\r\n\r\n::: warning\r\nPlease note that novel type options may vary depending on the ranking category.\r\n\r\nランキングの種類によって、小説タイプが異なる場合がございますのでご注意ください。\r\n:::\r\n\r\n::: danger 注意事項\r\nThe \"注目度ランキング\" (Attention Ranking) is not supported as syosetu does not provide a public API for this feature and the results cannot be replicated through the search API.\r\n\r\n「注目度ランキング」については、API が非公開で検索 API でも同様の結果を得ることができないため、本 Route ではサポートしておりません。\r\n:::\r\n\r\n::: tip 異世界転生/転移ランキングについて (Isekai)\r\nWhen multiple works have the same points, their order may differ from syosetu's ranking as syosetu randomizes the order for works with identical points.\r\n\r\n集計の結果、同じポイントの作品が複数存在する場合、Syosetu ではランダムで順位が決定されるため、本 Route の順位と異なる場合があります。\r\n:::\r\n`,\r\n    radar: [\r\n        {\r\n            source: ['yomou.syosetu.com/rank/list/type/:type'],\r\n            target: '/ranking/list/:type',\r\n        },\r\n        {\r\n            source: ['yomou.syosetu.com/rank/genrelist/type/:type'],\r\n            target: '/ranking/genre/:type',\r\n        },\r\n        {\r\n            source: ['yomou.syosetu.com/rank/isekailist/type/:type'],\r\n            target: '/ranking/isekai/:type',\r\n        },\r\n        ...getBest5RadarItems(),\r\n    ],\r\n};\r\n\r\nfunction parseGeneralRankingType(type: string): { period: RankingPeriod; novelType: NovelType } {\r\n    const [periodStr, novelTypeStr] = type.split('_');\r\n\r\n    const period = periodStr as RankingPeriod;\r\n    const novelType = novelTypeStr as NovelType;\r\n\r\n    const isValid = [Object.values(RankingPeriod).includes(period), Object.values(NovelType).includes(novelType)].every(Boolean);\r\n\r\n    if (!isValid) {\r\n        throw new InvalidParameterError(`Invalid general ranking type: ${type}`);\r\n    }\r\n\r\n    return { period, novelType };\r\n}\r\n\r\nfunction parseGenreRankingType(type: string): { period: RankingPeriod; genre: number; novelType: NovelType } {\r\n    const [periodStr, genreStr, novelTypeStr = NovelType.TOTAL] = type.split('_');\r\n\r\n    const period = periodStr as RankingPeriod;\r\n    const genre = Number(genreStr) as Genre;\r\n    const novelType = novelTypeStr as NovelType;\r\n\r\n    const isValid = [Object.values(RankingPeriod).includes(period), Object.values(Genre).includes(genre), Object.values(NovelType).includes(novelType), genre !== Genre.SonotaReplay, genre !== Genre.NonGenre].every(Boolean);\r\n\r\n    if (!isValid) {\r\n        throw new InvalidParameterError(`Invalid genre ranking type: ${type}`);\r\n    }\r\n\r\n    return { period, genre, novelType };\r\n}\r\n\r\nasync function handler(ctx: Context): Promise<Data> {\r\n    const { listType, type } = ctx.req.param();\r\n    const rankingType = listType as RankingType;\r\n    const limit = Math.min(Number(ctx.req.query('limit') ?? 300), 300);\r\n\r\n    const api = new NarouNovelFetch();\r\n    const searchParams: SearchParams = {\r\n        gzip: 5,\r\n        lim: limit,\r\n    };\r\n\r\n    let rankingUrl: string;\r\n    let rankingTitle: string;\r\n\r\n    // Build search parameters and titles based on ranking type\r\n    switch (rankingType) {\r\n        case RankingType.LIST: {\r\n            const { period, novelType } = parseGeneralRankingType(type);\r\n            rankingUrl = `https://yomou.syosetu.com/rank/list/type/${type}`;\r\n            rankingTitle = `[${periodToJapanese[period]}] 総合ランキング - ${novelTypeToJapanese[novelType]} BEST${limit}`;\r\n\r\n            searchParams.order = periodToOrder[period];\r\n            if (novelType !== NovelType.TOTAL) {\r\n                searchParams.type = novelType;\r\n            }\r\n            break;\r\n        }\r\n\r\n        case RankingType.GENRE: {\r\n            const { period, genre, novelType } = parseGenreRankingType(type);\r\n            rankingUrl = `https://yomou.syosetu.com/rank/genrelist/type/${type}`;\r\n            rankingTitle = `[${periodToJapanese[period]}] ${GenreNotation[genre]}ランキング - ${novelTypeToJapanese[novelType]} BEST${limit}`;\r\n\r\n            searchParams.order = periodToOrder[period];\r\n            searchParams.genre = genre as Genre;\r\n            if (novelType !== NovelType.TOTAL) {\r\n                searchParams.type = novelType;\r\n            }\r\n            break;\r\n        }\r\n\r\n        case RankingType.ISEKAI:\r\n            return handleIsekaiRanking(type, limit);\r\n\r\n        default:\r\n            throw new InvalidParameterError(`Invalid ranking type: ${type}`);\r\n    }\r\n\r\n    const builder = new SearchBuilder(searchParams, api);\r\n    const result = await builder.execute();\r\n\r\n    const items = result.values.map((novel, index) => ({\r\n        title: `#${index + 1} ${novel.title}`,\r\n        link: `https://ncode.syosetu.com/${String(novel.ncode).toLowerCase()}`,\r\n        description: art(path.join(__dirname, 'templates/description.art'), {\r\n            novel,\r\n        }),\r\n        author: novel.writer,\r\n        category: novel.keyword.split(/[\\s/\\uFF0F]/).filter(Boolean),\r\n    }));\r\n\r\n    return {\r\n        title: `小説家になろう - ${rankingTitle}`,\r\n        link: rankingUrl,\r\n        item: items as DataItem[],\r\n        language: 'ja',\r\n    };\r\n}\r\n"],"mappings":"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"}