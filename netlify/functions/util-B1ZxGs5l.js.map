{"version":3,"file":"util-B1ZxGs5l.js","names":[],"sources":["../../lib/routes/readhub/util.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport dayjs from 'dayjs';\r\n\r\nconst domain = 'readhub.cn';\r\nconst rootUrl = `https://${domain}`;\r\nconst apiRootUrl = `https://api.${domain}`;\r\nconst apiTopicUrl = new URL('topic/list', apiRootUrl).href;\r\n\r\nconst formatDate = (date, format) => dayjs(date).format(format);\r\nconst toTopicUrl = (id) => new URL(`topic/${id}`, rootUrl).href;\r\n\r\nart.defaults.imports = {\r\n    ...art.defaults.imports,\r\n\r\n    formatDate,\r\n    toTopicUrl,\r\n};\r\n\r\n/**\r\n * Process items asynchronously.\r\n *\r\n * @param {Array<Object>} items - The array of items to process.\r\n * @param {function} tryGet - The tryGet function that handles the retrieval process.\r\n * @returns {Promise<Array<Object>>} Returns a Promise that resolves to an array of processed items.\r\n */\r\nconst processItems = async (items, tryGet) =>\r\n    await Promise.all(\r\n        items.map((item) =>\r\n            tryGet(item.link, async () => {\r\n                try {\r\n                    if (!item.link.startsWith(rootUrl)) {\r\n                        throw new Error(`\"${item.link}\" is an external URL`);\r\n                    }\r\n\r\n                    const { data: detailResponse } = await got(item.link);\r\n\r\n                    const data = JSON.parse(detailResponse.match(/{\\\\\"topic\\\\\":(.*?)}]\\\\n\"]\\)<\\/script>/)[1].replaceAll(String.raw`\\\"`, '\"'));\r\n\r\n                    item.title = data.title;\r\n                    item.link = data.url ?? new URL(`topic/${data.uid}`, rootUrl).href;\r\n                    item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                        description: data.summary,\r\n                        news: data.newsAggList,\r\n                        timeline: data.timeline,\r\n                    });\r\n                    item.author = data.siteNameDisplay;\r\n                    item.category = [...(data.entityList.map((c) => c.name) ?? []), ...(data.tagList.map((c) => c.name) ?? [])];\r\n                    item.guid = `readhub-${data.uid}`;\r\n                    item.pubDate = parseDate(data.publishDate.replaceAll(/\\s/g, ''));\r\n                } catch {\r\n                    item.guid = `readhub-${item.guid}`;\r\n                }\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\nexport { rootUrl, apiRootUrl, apiTopicUrl, processItems };\r\n\r\nexport { art } from '@/utils/render';\r\n"],"mappings":"0QAMA,MAAM,EAAS,aACT,EAAU,WAAW,IACrB,EAAa,eAAe,IAC5B,EAAc,IAAI,IAAI,aAAc,GAAY,KAEhD,GAAc,EAAM,IAAW,EAAM,GAAM,OAAO,GAClD,EAAc,GAAO,IAAI,IAAI,SAAS,IAAM,GAAS,KAE3D,EAAI,SAAS,QAAU,CACnB,GAAG,EAAI,SAAS,QAEhB,aACA,cAUJ,MAAM,EAAe,MAAO,EAAO,IAC/B,MAAM,QAAQ,IACV,EAAM,IAAK,GACP,EAAO,EAAK,KAAM,SAAY,CAC1B,GAAI,CACA,GAAI,CAAC,EAAK,KAAK,WAAW,GACtB,MAAU,MAAM,IAAI,EAAK,KAAK,uBAGlC,GAAM,CAAE,KAAM,GAAmB,MAAM,EAAI,EAAK,MAE1C,EAAO,KAAK,MAAM,EAAe,MAAM,yCAAyC,GAAG,WAAW,OAAO,GAAG,KAAM,MAEpH,EAAK,MAAQ,EAAK,MAClB,EAAK,KAAO,EAAK,KAAO,IAAI,IAAI,SAAS,EAAK,MAAO,GAAS,KAC9D,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,YAAa,EAAK,QAClB,KAAM,EAAK,YACX,SAAU,EAAK,WAEnB,EAAK,OAAS,EAAK,gBACnB,EAAK,SAAW,CAAC,GAAI,EAAK,WAAW,IAAK,GAAM,EAAE,OAAS,GAAK,GAAI,EAAK,QAAQ,IAAK,GAAM,EAAE,OAAS,IACvG,EAAK,KAAO,WAAW,EAAK,MAC5B,EAAK,QAAU,EAAU,EAAK,YAAY,WAAW,MAAO,UACxD,CACJ,EAAK,KAAO,WAAW,EAAK,OAGhC,OAAO"}