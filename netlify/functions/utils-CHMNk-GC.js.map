{"version":3,"file":"utils-CHMNk-GC.js","names":["got"],"sources":["../../lib/routes/infoq/utils.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst ProcessFeed = async (list, cache) => {\r\n    const detailUrl = 'https://www.infoq.cn/public/v1/article/getDetail';\r\n\r\n    const items = await Promise.all(\r\n        list.map(async (e) => {\r\n            const uuid = e.uuid;\r\n            const single = await cache.tryGet(uuid, async () => {\r\n                const link = `https://www.infoq.cn/article/${uuid}`;\r\n                const resp = await got.post(detailUrl, {\r\n                    headers: {\r\n                        Referer: link,\r\n                    },\r\n                    json: {\r\n                        uuid,\r\n                    },\r\n                });\r\n\r\n                const data = resp.data.data;\r\n                const author = data.author ? data.author.map((p) => p.nickname).join(',') : data.no_author;\r\n                const category = [...e.topic.map((t) => t.name), ...e.label.map((l) => l.name)];\r\n                const content = data.content_url ? (await got(data.content_url)).body : data.content;\r\n\r\n                return {\r\n                    title: data.article_title,\r\n                    description: parseContent(content),\r\n                    pubDate: parseDate(e.publish_time, 'x'),\r\n                    category,\r\n                    author,\r\n                    link,\r\n                };\r\n            });\r\n\r\n            return single;\r\n        })\r\n    );\r\n\r\n    return items;\r\n};\r\n\r\nconst parseToSimpleText = (content) => parseToSimpleTexts(content).join('');\r\nconst parseToSimpleTexts = (content) =>\r\n    content.map((i) => {\r\n        const funcMaps = {\r\n            doc: () =>\r\n                parseToSimpleTexts(i.content)\r\n                    .map((v) => `<p>${v}</p>`)\r\n                    .join(''),\r\n            text: () => i.text,\r\n            heading: () => {\r\n                if (i.content) {\r\n                    const level = i.attrs.level;\r\n                    const text = parseToSimpleText(i.content);\r\n                    return `<h${level}>${text}</h${level}>`;\r\n                } else {\r\n                    return '';\r\n                }\r\n            },\r\n            blockquote: () => {\r\n                if (i.content) {\r\n                    const text = parseToSimpleText(i.content);\r\n                    return `<blockquote>${text}</blockquote>`;\r\n                } else {\r\n                    return '';\r\n                }\r\n            },\r\n            image: () => {\r\n                const img = i.attrs.src;\r\n                return `<img src=\"${img}\"></img>`;\r\n            },\r\n            codeblock: () => {\r\n                if (i.content) {\r\n                    const lang = i.attrs.lang;\r\n                    const code = parseToSimpleText(i.content);\r\n                    return `<code lang=\"${lang}\">${code}</code>`;\r\n                } else {\r\n                    return '';\r\n                }\r\n            },\r\n            link: () => {\r\n                const href = i.attrs.href;\r\n                const text = i.content ? parseToSimpleText(i.content) : '';\r\n                return `<a href=\"${href}\">${text}</a>\"`;\r\n            },\r\n        };\r\n\r\n        if (i.type in funcMaps) {\r\n            return funcMaps[i.type]();\r\n        }\r\n\r\n        if (!i.content) {\r\n            return '';\r\n        }\r\n\r\n        return parseToSimpleText(i.content);\r\n    });\r\n\r\nfunction parseContent(content) {\r\n    const isRichContent = content.startsWith(`{\"`);\r\n    if (!isRichContent) {\r\n        return content;\r\n    }\r\n\r\n    return parseToSimpleText([JSON.parse(content)]);\r\n}\r\n\r\nexport default { ProcessFeed };\r\n"],"mappings":"qGAGA,MAAM,EAAc,MAAO,EAAM,IAAU,CACvC,IAEM,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAI,KAAO,IAAM,CAClB,IAAM,EAAO,EAAE,KACT,EAAS,MAAM,EAAM,OAAO,EAAM,SAAY,CAChD,IAAM,EAAO,gCAAgC,IACvC,EAAO,MAAMA,EAAI,KAAK,mDAAW,CACnC,QAAS,CACL,QAAS,GAEb,KAAM,CACF,UAIF,EAAO,EAAK,KAAK,KACjB,EAAS,EAAK,OAAS,EAAK,OAAO,IAAK,GAAM,EAAE,UAAU,KAAK,KAAO,EAAK,UAC3E,EAAW,CAAC,GAAG,EAAE,MAAM,IAAK,GAAM,EAAE,MAAO,GAAG,EAAE,MAAM,IAAK,GAAM,EAAE,OACnE,EAAU,EAAK,aAAe,MAAMA,EAAI,EAAK,cAAc,KAAO,EAAK,QAE7E,MAAO,CACH,MAAO,EAAK,cACZ,YAAa,EAAa,GAC1B,QAAS,EAAU,EAAE,aAAc,KACnC,WACA,SACA,UAIR,OAAO,KAIf,OAAO,GAGL,EAAqB,GAAY,EAAmB,GAAS,KAAK,IAClE,EAAsB,GACxB,EAAQ,IAAK,GAAM,CACf,IAAM,EAAW,CACb,QACI,EAAmB,EAAE,SAChB,IAAK,GAAM,MAAM,EAAE,OACnB,KAAK,IACd,SAAY,EAAE,KACd,YAAe,CACX,GAAI,EAAE,QAAS,CACX,IAAM,EAAQ,EAAE,MAAM,MAChB,EAAO,EAAkB,EAAE,SACjC,MAAO,KAAK,EAAM,GAAG,EAAK,KAAK,EAAM,QAErC,MAAO,IAGf,eAAkB,CACd,GAAI,EAAE,QAAS,CACX,IAAM,EAAO,EAAkB,EAAE,SACjC,MAAO,eAAe,EAAK,oBAE3B,MAAO,IAGf,UAAa,CACT,IAAM,EAAM,EAAE,MAAM,IACpB,MAAO,aAAa,EAAI,WAE5B,cAAiB,CACb,GAAI,EAAE,QAAS,CACX,IAAM,EAAO,EAAE,MAAM,KACf,EAAO,EAAkB,EAAE,SACjC,MAAO,eAAe,EAAK,IAAI,EAAK,cAEpC,MAAO,IAGf,SAAY,CACR,IAAM,EAAO,EAAE,MAAM,KACf,EAAO,EAAE,QAAU,EAAkB,EAAE,SAAW,GACxD,MAAO,YAAY,EAAK,IAAI,EAAK,SAYzC,OARI,EAAE,QAAQ,EACH,EAAS,EAAE,QAGjB,EAAE,QAIA,EAAkB,EAAE,SAHhB,KAMnB,SAAS,EAAa,EAAS,CAC3B,IAAM,EAAgB,EAAQ,WAAW,MAKzC,OAJK,EAIE,EAAkB,CAAC,KAAK,MAAM,KAH1B,EAMf,IAAA,EAAe,CAAE"}