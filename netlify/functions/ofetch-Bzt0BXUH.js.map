{"version":3,"file":"ofetch-Bzt0BXUH.js","names":[],"sources":["../../lib/utils/ofetch.ts"],"sourcesContent":["import { createFetch } from 'ofetch';\r\nimport { config } from '@/config';\r\nimport logger from '@/utils/logger';\r\nimport { register } from 'node-network-devtools';\r\n\r\nconfig.enableRemoteDebugging && process.env.NODE_ENV === 'dev' && register();\r\n\r\nconst rofetch = createFetch().create({\r\n    retryStatusCodes: [400, 408, 409, 425, 429, 500, 502, 503, 504],\r\n    retry: config.requestRetry,\r\n    retryDelay: 1000,\r\n    // timeout: config.requestTimeout,\r\n    onResponseError({ request, response, options }) {\r\n        if (options.retry) {\r\n            logger.warn(`Request ${request} with error ${response.status} remaining retry attempts: ${options.retry}`);\r\n            if (!options.headers) {\r\n                options.headers = {};\r\n            }\r\n            if (options.headers instanceof Headers) {\r\n                options.headers.set('x-prefer-proxy', '1');\r\n            } else {\r\n                options.headers['x-prefer-proxy'] = '1';\r\n            }\r\n        }\r\n    },\r\n    onRequestError({ request, error }) {\r\n        logger.error(`Request ${request} fail: ${error}`);\r\n    },\r\n    headers: {\r\n        'user-agent': config.ua,\r\n    },\r\n    onResponse({ request, response }) {\r\n        if (response.redirected) {\r\n            logger.http(`Redirecting to ${response.url} for ${request}`);\r\n        }\r\n    },\r\n});\r\n\r\nexport default rofetch;\r\n"],"mappings":"yIAKA,EAAO,sBAEP,MAAM,EAAU,IAAc,OAAO,CACjC,iBAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3D,MAAO,EAAO,aACd,WAAY,IAEZ,gBAAgB,CAAE,UAAS,WAAU,WAAW,CACxC,EAAQ,QACR,EAAO,KAAK,WAAW,EAAQ,cAAc,EAAS,OAAO,6BAA6B,EAAQ,SAC7F,EAAQ,UACT,EAAQ,QAAU,IAElB,EAAQ,mBAAmB,QAC3B,EAAQ,QAAQ,IAAI,iBAAkB,KAEtC,EAAQ,QAAQ,kBAAoB,MAIhD,eAAe,CAAE,UAAS,SAAS,CAC/B,EAAO,MAAM,WAAW,EAAQ,SAAS,MAE7C,QAAS,CACL,aAAc,EAAO,IAEzB,WAAW,CAAE,UAAS,YAAY,CAC1B,EAAS,YACT,EAAO,KAAK,kBAAkB,EAAS,IAAI,OAAO,QAK9D,IAAA,EAAe"}