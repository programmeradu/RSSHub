{"version":3,"file":"daily-papers-C0634gSr.js","names":["route: Route","url: string","got"],"sources":["../../lib/routes/huggingface/daily-papers.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/daily-papers/:cycle?/:voteFliter?',\r\n    categories: ['programming'],\r\n    example: '/huggingface/daily-papers/week/50',\r\n    parameters: { cycle: 'The publication cycle you want to follow. Choose from: date, week, month. Default: date', voteFliter: 'Filter papers by vote count.' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['huggingface.co/papers/:cycle'],\r\n            target: '/daily-papers/:cycle',\r\n        },\r\n    ],\r\n    name: 'Daily Papers',\r\n    maintainers: ['zeyugao', 'ovo-tim'],\r\n    handler,\r\n    url: 'huggingface.co/papers',\r\n};\r\n\r\ninterface Paper {\r\n    id: string;\r\n    summary: string;\r\n    upvotes: number;\r\n    authors: { name: string }[];\r\n}\r\n\r\ninterface DailyPaperItem {\r\n    title: string;\r\n    paper: Paper;\r\n    publishedAt: string;\r\n}\r\n\r\ninterface PapersData {\r\n    dailyPapers: DailyPaperItem[];\r\n}\r\n\r\nasync function handler(ctx) {\r\n    const { cycle = 'date', voteFliter = '0' } = ctx.req.param();\r\n    let url: string;\r\n    switch (cycle) {\r\n        case 'date':\r\n            url = 'https://huggingface.co/papers';\r\n            break;\r\n        case 'week':\r\n            // We don't actually need to get the week number, because huggingface.co/papers/week/YYYY-W52 will redirect to the latest week\r\n            url = `https://huggingface.co/papers/week/${new Date().getFullYear()}-W52`;\r\n            break;\r\n        case 'month':\r\n            url = `https://huggingface.co/papers/month/${new Date().toISOString().slice(0, 7)}`;\r\n            break;\r\n        default:\r\n            throw new Error(`Invalid cycle: ${cycle}`);\r\n    }\r\n\r\n    const { body: response } = await got(url);\r\n    const $ = load(response);\r\n    const papers = $('main > div[data-target=\"DailyPapers\"]').data('props') as PapersData;\r\n\r\n    const items = papers.dailyPapers\r\n        .filter((item) => item.paper.upvotes >= voteFliter)\r\n        .map((item) => ({\r\n            title: item.title,\r\n            link: `https://arxiv.org/abs/${item.paper.id}`,\r\n            description: item.paper.summary.replaceAll('\\n', ' '),\r\n            pubDate: parseDate(item.publishedAt),\r\n            author: item.paper.authors.map((author) => author.name).join(', '),\r\n            upvotes: item.paper.upvotes,\r\n        }))\r\n        .sort((a, b) => b.upvotes - a.upvotes);\r\n\r\n    return {\r\n        title: 'Huggingface Daily Papers',\r\n        link: 'https://huggingface.co/papers',\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"oTAKA,MAAaA,EAAe,CACxB,KAAM,qCACN,WAAY,CAAC,eACb,QAAS,oCACT,WAAY,CAAE,MAAO,0FAA2F,WAAY,gCAC5H,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,gCACT,OAAQ,yBAGhB,KAAM,eACN,YAAa,CAAC,UAAW,WACzB,UACA,IAAK,yBAoBT,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,QAAQ,OAAQ,aAAa,KAAQ,EAAI,IAAI,QACjDC,EACJ,OAAQ,EAAR,CACI,IAAK,OACD,EAAM,gCACN,MACJ,IAAK,OAED,EAAM,sCAAsC,IAAI,OAAO,cAAc,MACrE,MACJ,IAAK,QACD,EAAM,uCAAuC,IAAI,OAAO,cAAc,MAAM,EAAG,KAC/E,MACJ,QACI,MAAU,MAAM,kBAAkB,KAG1C,GAAM,CAAE,KAAM,GAAa,MAAMC,EAAI,GAC/B,EAAI,EAAK,GACT,EAAS,EAAE,yCAAyC,KAAK,SAEzD,EAAQ,EAAO,YAChB,OAAQ,GAAS,EAAK,MAAM,SAAW,GACvC,IAAK,IAAU,CACZ,MAAO,EAAK,MACZ,KAAM,yBAAyB,EAAK,MAAM,KAC1C,YAAa,EAAK,MAAM,QAAQ,WAAW;EAAM,KACjD,QAAS,EAAU,EAAK,aACxB,OAAQ,EAAK,MAAM,QAAQ,IAAK,GAAW,EAAO,MAAM,KAAK,MAC7D,QAAS,EAAK,MAAM,WAEvB,MAAM,EAAG,IAAM,EAAE,QAAU,EAAE,SAElC,MAAO,CACH,MAAO,2BACP,KAAM,gCACN,KAAM"}