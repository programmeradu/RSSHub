{"version":3,"file":"volume-BdpRz6UR.js","names":[],"sources":["../../lib/routes/hellogithub/volume.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport MarkdownIt from 'markdown-it';\r\nconst md = MarkdownIt({\r\n    html: true,\r\n});\r\nimport { load } from 'cheerio';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nart.defaults.imports.render = function (string) {\r\n    return md.render(string);\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/volume',\r\n    example: '/hellogithub/volume',\r\n    name: '月刊',\r\n    maintainers: ['moke8', 'nczitzk', 'CaoMeiYouRen'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const limit: number = Number.parseInt(ctx.req.query('limit')) || 10;\r\n    const rootUrl = 'https://hellogithub.com';\r\n    const apiUrl = 'https://api.hellogithub.com/v1/periodical/';\r\n\r\n    const periodicalResponse = await got({\r\n        method: 'get',\r\n        url: apiUrl,\r\n    });\r\n    const volumes = periodicalResponse.data.volumes.slice(0, limit);\r\n\r\n    const items = await Promise.all(\r\n        volumes.map(async (volume) => {\r\n            const current = volume.num;\r\n            const lastmod = volume.lastmod;\r\n            const currentUrl = `${rootUrl}/periodical/volume/${current}`;\r\n            const key = `hellogithub:${currentUrl}`;\r\n            return await cache.tryGet(\r\n                key,\r\n                async () => {\r\n                    const buildResponse = await got({\r\n                        method: 'get',\r\n                        url: currentUrl,\r\n                    });\r\n\r\n                    const $ = load(buildResponse.data);\r\n\r\n                    const text = $('#__NEXT_DATA__').text();\r\n                    const response = JSON.parse(text);\r\n                    const data = response.props;\r\n                    const id = data.pageProps.volume.current_num;\r\n                    return {\r\n                        title: `《HelloGitHub》第 ${id} 期`,\r\n                        link: `${rootUrl}/periodical/volume/${id}`,\r\n                        description: art(path.join(__dirname, 'templates/volume.art'), {\r\n                            data: data.pageProps.volume.data,\r\n                        }),\r\n                        pubDate: parseDate(lastmod),\r\n                    };\r\n                },\r\n                config.cache.routeExpire,\r\n                false\r\n            );\r\n        })\r\n    );\r\n\r\n    return {\r\n        title: 'HelloGithub - 月刊',\r\n        link: 'https://hellogithub.com/periodical',\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"ogBAMA,MAAM,EAAK,EAAW,CAClB,KAAM,KAOV,EAAI,SAAS,QAAQ,OAAS,SAAU,EAAQ,CAC5C,OAAO,EAAG,OAAO,IAGrB,MAAa,EAAe,CACxB,KAAM,UACN,QAAS,sBACT,KAAM,KACN,YAAa,CAAC,QAAS,UAAW,gBAClC,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAgB,OAAO,SAAS,EAAI,IAAI,MAAM,WAAa,GAC3D,EAAU,0BAGV,EAAqB,MAAM,EAAI,CACjC,OAAQ,MACR,IAAK,+CAEH,EAAU,EAAmB,KAAK,QAAQ,MAAM,EAAG,GAEnD,EAAQ,MAAM,QAAQ,IACxB,EAAQ,IAAI,KAAO,IAAW,CAC1B,IAAM,EAAU,EAAO,IACjB,EAAU,EAAO,QACjB,EAAa,GAAG,EAAQ,qBAAqB,IAC7C,EAAM,eAAe,IAC3B,OAAO,MAAM,EAAM,OACf,EACA,SAAY,CACR,IAAM,EAAgB,MAAM,EAAI,CAC5B,OAAQ,MACR,IAAK,IAGH,EAAI,EAAK,EAAc,MAEvB,EAAO,EAAE,kBAAkB,OAC3B,EAAW,KAAK,MAAM,GACtB,EAAO,EAAS,MAChB,EAAK,EAAK,UAAU,OAAO,YACjC,MAAO,CACH,MAAO,kBAAkB,EAAG,IAC5B,KAAM,GAAG,EAAQ,qBAAqB,IACtC,YAAa,EAAI,EAAA,KAAA,EAAA,iCAA8C,CAC3D,KAAM,EAAK,UAAU,OAAO,OAEhC,QAAS,EAAU,KAG3B,EAAO,MAAM,YACb,OAKZ,MAAO,CACH,MAAO,mBACP,KAAM,qCACN,KAAM"}