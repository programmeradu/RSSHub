{"version":3,"file":"comic-CEpndWhv.js","names":[],"sources":["../../lib/routes/cartoonmad/comic.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport { load } from 'cheerio';\r\nimport got from '@/utils/got';\r\nimport iconv from 'iconv-lite';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst baseUrl = 'https://www.cartoonmad.com';\r\nconst KEY = '5e585';\r\n\r\nconst loadContent = (id, { chapter, pages }) => {\r\n    let description = '';\r\n    for (let page = 1; page <= pages; page++) {\r\n        const url = `${baseUrl}/${KEY}/${id}/${chapter}/${String(page).padStart(3, '0')}.jpg`;\r\n        description += art(path.join(__dirname, 'templates/chapter.art'), {\r\n            url,\r\n        });\r\n    }\r\n    return description;\r\n};\r\n\r\nconst getChapters = (id, list, tryGet) =>\r\n    Promise.all(\r\n        list.map((item) =>\r\n            tryGet(item.link, () => {\r\n                item.description = loadContent(id, item);\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\nexport const route: Route = {\r\n    path: '/comic/:id',\r\n    categories: ['anime'],\r\n    example: '/cartoonmad/comic/5827',\r\n    parameters: { id: '漫画ID' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['cartoonmad.com/comic/:id'],\r\n        },\r\n    ],\r\n    name: '漫画更新',\r\n    maintainers: ['KellyHwong'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const id = ctx.req.param('id');\r\n    const link = `${baseUrl}/comic/${id}`;\r\n\r\n    const { data } = await got(link, {\r\n        responseType: 'buffer',\r\n        headers: {\r\n            Referer: 'https://www.cartoonmad.com/',\r\n        },\r\n    });\r\n    const content = iconv.decode(data, 'big5');\r\n    const $ = load(content);\r\n\r\n    const bookIntro = $('#info').eq(0).find('td').text().trim();\r\n    // const coverImgSrc = $('.cover').parent().find('img').attr('src');\r\n    const list = $('#info')\r\n        .eq(1)\r\n        .find('a')\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n            return {\r\n                title: item.text(),\r\n                link: `${baseUrl}${item.attr('href')}`,\r\n                chapter: item.text().match(/\\d+/)[0],\r\n                pages: item.next('font').text().match(/\\d+/)[0],\r\n            };\r\n        })\r\n        .toReversed();\r\n\r\n    const chapters = await getChapters(id, list, cache.tryGet);\r\n\r\n    return {\r\n        title: $('head title').text(),\r\n        link,\r\n        description: bookIntro,\r\n        item: chapters,\r\n    };\r\n}\r\n"],"mappings":"6bASA,MAAM,EAAU,6BAGV,GAAe,EAAI,CAAE,UAAS,WAAY,CAC5C,IAAI,EAAc,GAClB,IAAK,IAAI,EAAO,EAAG,GAAQ,EAAO,IAAQ,CACtC,IAAM,EAAM,GAAG,EAAQ,SAAU,EAAG,GAAG,EAAQ,GAAG,OAAO,GAAM,SAAS,EAAG,KAAK,MAChF,GAAe,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAC9D,QAGR,OAAO,GAGL,GAAe,EAAI,EAAM,IAC3B,QAAQ,IACJ,EAAK,IAAK,GACN,EAAO,EAAK,UACR,EAAK,YAAc,EAAY,EAAI,GAE5B,MAKV,EAAe,CACxB,KAAM,aACN,WAAY,CAAC,SACb,QAAS,yBACT,WAAY,CAAE,GAAI,QAClB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,8BAGjB,KAAM,OACN,YAAa,CAAC,cACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAK,EAAI,IAAI,MAAM,MACnB,EAAO,GAAG,EAAQ,SAAS,IAE3B,CAAE,QAAS,MAAM,EAAI,EAAM,CAC7B,aAAc,SACd,QAAS,CACL,QAAS,iCAGX,EAAU,EAAM,OAAO,EAAM,QAC7B,EAAI,EAAK,GAET,EAAY,EAAE,SAAS,GAAG,GAAG,KAAK,MAAM,OAAO,OAE/C,EAAO,EAAE,SACV,GAAG,GACH,KAAK,KACL,UACA,IAAK,IACF,EAAO,EAAE,GACF,CACH,MAAO,EAAK,OACZ,KAAM,GAAG,IAAU,EAAK,KAAK,UAC7B,QAAS,EAAK,OAAO,MAAM,OAAO,GAClC,MAAO,EAAK,KAAK,QAAQ,OAAO,MAAM,OAAO,MAGpD,aAEC,EAAW,MAAM,EAAY,EAAI,EAAM,EAAM,QAEnD,MAAO,CACH,MAAO,EAAE,cAAc,OACvB,OACA,YAAa,EACb,KAAM"}