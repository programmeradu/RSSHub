{"version":3,"file":"search-L4q-Nwo1.js","names":["got","got","route: Route","ConfigNotFoundError","cache","pixivUtils"],"sources":["../../lib/routes/pixiv/api/search-popular-illust.ts","../../lib/routes/pixiv/api/search-illust.ts","../../lib/routes/pixiv/search.ts"],"sourcesContent":["import got from '../pixiv-got';\r\nimport { maskHeader } from '../constants';\r\nimport queryString from 'query-string';\r\n\r\n/**\r\n * 按热门排序搜索内容\r\n * @param {string} keyword 关键词\r\n * @param {string} token pixiv oauth token\r\n * @returns {Promise<got.AxiosResponse<{illusts: illust[]}>>}\r\n */\r\nexport default function searchPopularIllust(keyword, token) {\r\n    return got('https://app-api.pixiv.net/v1/search/popular-preview/illust', {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        searchParams: queryString.stringify({\r\n            word: keyword,\r\n            search_target: 'partial_match_for_tags',\r\n            filter: 'for_ios',\r\n        }),\r\n    });\r\n}\r\n","import got from '../pixiv-got';\r\nimport { maskHeader } from '../constants';\r\nimport queryString from 'query-string';\r\n\r\n/**\r\n * 按时间排序搜索内容\r\n * @param {string} keyword 关键词\r\n * @param {string} token pixiv oauth token\r\n * @returns {Promise<got.AxiosResponse<{illusts: illust[]}>>}\r\n */\r\nexport default function searchIllust(keyword, token) {\r\n    return got('https://app-api.pixiv.net/v1/search/illust', {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        searchParams: queryString.stringify({\r\n            word: keyword,\r\n            search_target: 'partial_match_for_tags',\r\n            sort: 'date_desc',\r\n            filter: 'for_ios',\r\n        }),\r\n    });\r\n}\r\n","import { Route, ViewType } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport { getToken } from './token';\r\nimport searchPopularIllust from './api/search-popular-illust';\r\nimport searchIllust from './api/search-illust';\r\nimport { config } from '@/config';\r\nimport pixivUtils from './utils';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport ConfigNotFoundError from '@/errors/types/config-not-found';\r\n\r\nexport const route: Route = {\r\n    path: '/search/:keyword/:order?/:mode?/:include_ai?',\r\n    categories: ['social-media'],\r\n    view: ViewType.Pictures,\r\n    example: '/pixiv/search/Nezuko/popular',\r\n    parameters: {\r\n        keyword: 'keyword',\r\n        order: {\r\n            description: 'rank mode, empty or other for time order, popular for popular order',\r\n            default: 'date',\r\n            options: [\r\n                {\r\n                    label: 'time order',\r\n                    value: 'date',\r\n                },\r\n                {\r\n                    label: 'popular order',\r\n                    value: 'popular',\r\n                },\r\n            ],\r\n        },\r\n        mode: {\r\n            description: 'filte R18 content',\r\n            default: 'no',\r\n            options: [\r\n                {\r\n                    label: 'only not R18',\r\n                    value: 'safe',\r\n                },\r\n                {\r\n                    label: 'only R18',\r\n                    value: 'r18',\r\n                },\r\n                {\r\n                    label: 'no filter',\r\n                    value: 'no',\r\n                },\r\n            ],\r\n        },\r\n        include_ai: {\r\n            description: 'whether AI-generated content is included',\r\n            default: 'yes',\r\n            options: [\r\n                {\r\n                    label: 'does not include AI-generated content',\r\n                    value: 'no',\r\n                },\r\n                {\r\n                    label: 'include AI-generated content',\r\n                    value: 'yes',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Keyword',\r\n    maintainers: ['DIYgod'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    if (!config.pixiv || !config.pixiv.refreshToken) {\r\n        throw new ConfigNotFoundError('pixiv RSS is disabled due to the lack of <a href=\"https://docs.rsshub.app/deploy/config#route-specific-configurations\">relevant config</a>');\r\n    }\r\n\r\n    const keyword = ctx.req.param('keyword');\r\n    const order = ctx.req.param('order') || 'date';\r\n    const mode = ctx.req.param('mode');\r\n    const includeAI = ctx.req.param('include_ai');\r\n\r\n    const token = await getToken(cache.tryGet);\r\n    if (!token) {\r\n        throw new ConfigNotFoundError('pixiv not login');\r\n    }\r\n\r\n    const response = await (order === 'popular' ? searchPopularIllust(keyword, token) : searchIllust(keyword, token));\r\n\r\n    let illusts = response.data.illusts;\r\n    if (mode === 'safe' || mode === '1') {\r\n        illusts = illusts.filter((item) => item.x_restrict === 0);\r\n    } else if (mode === 'r18' || mode === '2') {\r\n        illusts = illusts.filter((item) => item.x_restrict === 1);\r\n    }\r\n\r\n    if (includeAI === 'no' || includeAI === '0') {\r\n        illusts = illusts.filter((item) => item.illust_ai_type <= 1);\r\n    }\r\n\r\n    return {\r\n        title: `${keyword} 的 pixiv ${order === 'popular' ? '热门' : ''}内容`,\r\n        link: `https://www.pixiv.net/tags/${keyword}/artworks`,\r\n        item: illusts.map((illust) => {\r\n            const images = pixivUtils.getImgs(illust);\r\n            return {\r\n                title: illust.title,\r\n                author: illust.user.name,\r\n                pubDate: parseDate(illust.create_date),\r\n                description: `${illust.caption}<br><p>画师：${illust.user.name} - 阅览数：${illust.total_view} - 收藏数：${illust.total_bookmarks}</p>${images.join('')}`,\r\n                link: `https://www.pixiv.net/artworks/${illust.id}`,\r\n            };\r\n        }),\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"kkBAUA,SAAwB,EAAoB,EAAS,EAAO,CACxD,OAAOC,EAAI,6DAA8D,CACrE,QAAS,CACL,GAAG,EACH,cAAe,UAAY,GAE/B,aAAc,EAAY,UAAU,CAChC,KAAM,EACN,cAAe,yBACf,OAAQ,cCTpB,SAAwB,EAAa,EAAS,EAAO,CACjD,OAAOA,EAAI,6CAA8C,CACrD,QAAS,CACL,GAAG,EACH,cAAe,UAAY,GAE/B,aAAc,EAAY,UAAU,CAChC,KAAM,EACN,cAAe,yBACf,KAAM,YACN,OAAQ,cCVpB,MAAaC,EAAe,CACxB,KAAM,+CACN,WAAY,CAAC,gBACb,KAAM,EAAS,SACf,QAAS,+BACT,WAAY,CACR,QAAS,UACT,MAAO,CACH,YAAa,sEACb,QAAS,OACT,QAAS,CACL,CACI,MAAO,aACP,MAAO,QAEX,CACI,MAAO,gBACP,MAAO,aAInB,KAAM,CACF,YAAa,oBACb,QAAS,KACT,QAAS,CACL,CACI,MAAO,eACP,MAAO,QAEX,CACI,MAAO,WACP,MAAO,OAEX,CACI,MAAO,YACP,MAAO,QAInB,WAAY,CACR,YAAa,2CACb,QAAS,MACT,QAAS,CACL,CACI,MAAO,wCACP,MAAO,MAEX,CACI,MAAO,+BACP,MAAO,UAKvB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,UACN,YAAa,CAAC,UACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAI,CAAC,EAAO,OAAS,CAAC,EAAO,MAAM,aAC/B,MAAM,IAAIC,EAAoB,8IAGlC,IAAM,EAAU,EAAI,IAAI,MAAM,WACxB,EAAQ,EAAI,IAAI,MAAM,UAAY,OAClC,EAAO,EAAI,IAAI,MAAM,QACrB,EAAY,EAAI,IAAI,MAAM,cAE1B,EAAQ,MAAM,EAASC,EAAM,QACnC,GAAI,CAAC,EACD,MAAM,IAAID,EAAoB,mBAGlC,IAAM,EAAW,MAAO,IAAU,UAAY,EAAoB,EAAS,GAAS,EAAa,EAAS,IAEtG,EAAU,EAAS,KAAK,QAW5B,OAVI,IAAS,QAAU,IAAS,IAC5B,EAAU,EAAQ,OAAQ,GAAS,EAAK,aAAe,IAChD,IAAS,OAAS,IAAS,OAClC,EAAU,EAAQ,OAAQ,GAAS,EAAK,aAAe,KAGvD,IAAc,MAAQ,IAAc,OACpC,EAAU,EAAQ,OAAQ,GAAS,EAAK,gBAAkB,IAGvD,CACH,MAAO,GAAG,EAAQ,WAAW,IAAU,UAAY,KAAO,GAAG,IAC7D,KAAM,8BAA8B,EAAQ,WAC5C,KAAM,EAAQ,IAAK,GAAW,CAC1B,IAAM,EAASE,EAAW,QAAQ,GAClC,MAAO,CACH,MAAO,EAAO,MACd,OAAQ,EAAO,KAAK,KACpB,QAAS,EAAU,EAAO,aAC1B,YAAa,GAAG,EAAO,QAAQ,YAAY,EAAO,KAAK,KAAK,SAAS,EAAO,WAAW,SAAS,EAAO,gBAAgB,MAAM,EAAO,KAAK,MACzI,KAAM,kCAAkC,EAAO,QAGvD,WAAY"}