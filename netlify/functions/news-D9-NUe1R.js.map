{"version":3,"file":"news-D9-NUe1R.js","names":["got","route: Route","got","util","cache"],"sources":["../../lib/routes/bjfu/news/utils.ts","../../lib/routes/bjfu/news/index.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport timezone from '@/utils/timezone';\r\n\r\n// 完整文章页\r\nasync function loadContent(link) {\r\n    const response = await got.get(link);\r\n\r\n    const data = response.data; // 不用转码\r\n\r\n    // 加载文章内容\r\n    const $ = load(data);\r\n\r\n    // 解析日期\r\n    const pubDate = timezone(\r\n        parseDate(\r\n            $('.article')\r\n                .text()\r\n                .match(/\\d{4}(?:\\/\\d{2}){2}/)\r\n        ),\r\n        +8\r\n    );\r\n\r\n    // 提取内容\r\n    const description = $('.article_con').html();\r\n    const title = $('h2').text();\r\n\r\n    // 返回解析的结果\r\n    return { description, pubDate, title };\r\n}\r\n\r\nconst ProcessFeed = (base, list, caches) =>\r\n    Promise.all(\r\n        // 遍历每一篇文章\r\n        list.map((item) => {\r\n            const $ = load(item);\r\n\r\n            const $title = $('a');\r\n            // 还原相对链接为绝对链接\r\n            const itemUrl = new URL($title.attr('href'), base).href; // 感谢@hoilc指导\r\n\r\n            // 使用tryGet方法从缓存获取内容。\r\n            // 当缓存中无法获取到链接内容的时候，则使用load方法加载文章内容。\r\n            return caches.tryGet(itemUrl, async () => {\r\n                const { description, pubDate, title } = await loadContent(itemUrl);\r\n\r\n                // 列表上提取到的信息\r\n                return {\r\n                    title: $title.text().includes('...') ? title : $title.text(),\r\n                    link: itemUrl,\r\n                    author: '绿色新闻网',\r\n                    description,\r\n                    pubDate,\r\n                };\r\n            });\r\n        })\r\n    );\r\nexport default { ProcessFeed };\r\n","import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport util from './utils';\r\nimport iconv from 'iconv-lite';\r\n\r\nexport const route: Route = {\r\n    path: '/news/:type',\r\n    categories: ['university'],\r\n    example: '/bjfu/news/lsyw',\r\n    parameters: { type: '新闻栏目' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['news.bjfu.edu.cn/:type/index.html'],\r\n        },\r\n    ],\r\n    name: '绿色新闻网',\r\n    maintainers: ['markmingjie'],\r\n    handler,\r\n    description: `| 绿色要闻 | 校园动态 | 教学科研 | 党建思政 | 一周排行 |\r\n| -------- | -------- | -------- | -------- | -------- |\r\n| lsyw     | xydt     | jxky     | djsz     | yzph     |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const type = ctx.req.param('type');\r\n    let title, path;\r\n    switch (type) {\r\n        case 'xydt':\r\n            title = '校园动态';\r\n            path = 'lsxy/';\r\n            break;\r\n        case 'jxky':\r\n            title = '教学科研';\r\n            path = 'jxky/';\r\n            break;\r\n        case 'djsz':\r\n            title = '党建思政';\r\n            path = 'djsz/';\r\n            break;\r\n        case 'yzph':\r\n            title = '一周排行';\r\n            path = 'yzph/';\r\n            break;\r\n        case 'lsyw':\r\n        default:\r\n            title = '绿色要闻';\r\n            path = 'lsyw/';\r\n    }\r\n    const base = 'http://news.bjfu.edu.cn/' + path;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        responseType: 'buffer',\r\n        url: base,\r\n    });\r\n\r\n    const data = response.data;\r\n    let $ = load(iconv.decode(data, 'utf-8'));\r\n    const charset = $('meta[http-equiv=\"Content-Type\"]')\r\n        .attr('content')\r\n        .match(/charset=(.*)/)?.[1];\r\n    if (charset?.toLowerCase() !== 'utf-8') {\r\n        $ = load(iconv.decode(data, charset ?? 'utf-8'));\r\n    }\r\n\r\n    const list = $('.news_ul li').slice(0, 12).toArray();\r\n\r\n    const result = await util.ProcessFeed(base, list, cache); // 感谢@hoilc指导\r\n\r\n    return {\r\n        title: '北林新闻- ' + title,\r\n        link: 'http://news.bjfu.edu.cn/' + path,\r\n        description: '绿色新闻网 - ' + title,\r\n        item: result,\r\n    };\r\n}\r\n"],"mappings":"obAMA,eAAe,EAAY,EAAM,CAC7B,IAAM,EAAW,MAAME,EAAI,IAAI,GAEzB,EAAO,EAAS,KAGhB,EAAI,EAAK,GAGT,EAAU,EACZ,EACI,EAAE,YACG,OACA,MAAM,wBAEf,GAIE,EAAc,EAAE,gBAAgB,OAChC,EAAQ,EAAE,MAAM,OAGtB,MAAO,CAAE,cAAa,UAAS,SAGnC,MAAM,GAAe,EAAM,EAAM,IAC7B,QAAQ,IAEJ,EAAK,IAAK,GAAS,CACf,IAAM,EAAI,EAAK,GAET,EAAS,EAAE,KAEX,EAAU,IAAI,IAAI,EAAO,KAAK,QAAS,GAAM,KAInD,OAAO,EAAO,OAAO,EAAS,SAAY,CACtC,GAAM,CAAE,cAAa,UAAS,SAAU,MAAM,EAAY,GAG1D,MAAO,CACH,MAAO,EAAO,OAAO,SAAS,OAAS,EAAQ,EAAO,OACtD,KAAM,EACN,OAAQ,QACR,cACA,gBAKpB,IAAA,EAAe,CAAE,eCnDjB,MAAaD,EAAe,CACxB,KAAM,cACN,WAAY,CAAC,cACb,QAAS,kBACT,WAAY,CAAE,KAAM,QACpB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,uCAGjB,KAAM,QACN,YAAa,CAAC,eACd,UACA,YAAa;;2DAKjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,EAAI,IAAI,MAAM,QACvB,EAAO,EACX,OAAQ,EAAR,CACI,IAAK,OACD,EAAQ,OACR,EAAO,QACP,MACJ,IAAK,OACD,EAAQ,OACR,EAAO,QACP,MACJ,IAAK,OACD,EAAQ,OACR,EAAO,QACP,MACJ,IAAK,OACD,EAAQ,OACR,EAAO,QACP,MACJ,IAAK,OACL,QACI,EAAQ,OACR,EAAO,QAEf,IAAM,EAAO,2BAA6B,EAEpC,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,aAAc,SACd,IAAK,IAGH,EAAO,EAAS,KAClB,EAAI,EAAK,EAAM,OAAO,EAAM,UAC1B,EAAU,EAAE,mCACb,KAAK,WACL,MAAM,kBAAkB,GACzB,GAAS,gBAAkB,UAC3B,EAAI,EAAK,EAAM,OAAO,EAAM,GAAW,WAG3C,IAAM,EAAO,EAAE,eAAe,MAAM,EAAG,IAAI,UAErC,EAAS,MAAMC,EAAK,YAAY,EAAM,EAAMC,GAElD,MAAO,CACH,MAAO,SAAW,EAClB,KAAM,2BAA6B,EACnC,YAAa,WAAa,EAC1B,KAAM"}