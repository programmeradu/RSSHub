{"version":3,"file":"blog-BMvmCLgz.js","names":[],"sources":["../../lib/routes/tradingview/blog.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport pMap from 'p-map';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/blog/:category{.+}?',\r\n    name: 'Unknown',\r\n    maintainers: [],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category = 'en' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 22;\r\n\r\n    const rootUrl = 'https://www.tradingview.com';\r\n    const currentUrl = new URL(`blog/${category.endsWith('/') ? category : `${category}/`}`, rootUrl).href;\r\n\r\n    const { data: response } = await got(currentUrl);\r\n\r\n    const $ = load(response);\r\n\r\n    const list = $('article[id]')\r\n        .slice(0, limit)\r\n        .toArray()\r\n        .map((item) => {\r\n            item = $(item);\r\n\r\n            const title = item.find('div.title').text();\r\n\r\n            return {\r\n                title,\r\n                link: item.find('a.articles-grid-link').prop('href'),\r\n                description: art(path.join(__dirname, 'templates/description.art'), {\r\n                    image: {\r\n                        src: item\r\n                            .find('div.articles-grid-img img')\r\n                            .prop('src')\r\n                            .replace(/-\\d+x\\d+\\./, '.'),\r\n                        alt: title,\r\n                    },\r\n                }),\r\n                category: item\r\n                    .find('a.section')\r\n                    .toArray()\r\n                    .map((c) => $(c).text()),\r\n                guid: `tradingview-blog-${category}-${item.prop('id')}`,\r\n                pubDate: parseDate(item.find('div.date').text(), 'MMM D, YYYY'),\r\n            };\r\n        });\r\n\r\n    const items = await pMap(\r\n        list,\r\n        (item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const { data: detailResponse } = await got(item.link);\r\n\r\n                const content = load(detailResponse);\r\n\r\n                content('div.entry-content')\r\n                    .find('img')\r\n                    .each((_, e) => {\r\n                        content(e).replaceWith(\r\n                            art(path.join(__dirname, 'templates/description.art'), {\r\n                                image: {\r\n                                    src: content(e)\r\n                                        .prop('src')\r\n                                        .replace(/-\\d+x\\d+\\./, '.'),\r\n                                    width: content(e).prop('width'),\r\n                                    height: content(e).prop('height'),\r\n                                },\r\n                            })\r\n                        );\r\n                    });\r\n\r\n                item.title = content('meta[property=\"og:title\"]').prop('content');\r\n                item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                    image: {\r\n                        src: content('meta[property=\"og:image\"]').prop('content'),\r\n                        alt: item.title,\r\n                    },\r\n                    description: content('div.entry-content').html(),\r\n                });\r\n                item.author = content('meta[property=\"og:site_name\"]').prop('content');\r\n                item.category = content('div.sections a.section')\r\n                    .toArray()\r\n                    .map((c) => content(c).text());\r\n                item.pubDate = parseDate(content('div.single-date').text(), 'MMM D, YYYY');\r\n\r\n                return item;\r\n            }),\r\n        { concurrency: 3 }\r\n    );\r\n\r\n    const icon = new URL($('link[rel=\"icon\"]').prop('href'), rootUrl).href;\r\n\r\n    return {\r\n        item: items,\r\n        title: $('title').text(),\r\n        link: currentUrl,\r\n        description: $('div.site-subtitle').text(),\r\n        language: $('html').prop('lang'),\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('h1.site-title').text(),\r\n    };\r\n}\r\n"],"mappings":"6eAUA,MAAa,EAAe,CACxB,KAAM,uBACN,KAAM,UACN,YAAa,GACb,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,WAAW,MAAS,EAAI,IAAI,QAC9B,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,GAE/E,EAAU,8BACV,EAAa,IAAI,IAAI,QAAQ,EAAS,SAAS,KAAO,EAAW,GAAG,EAAS,KAAM,GAAS,KAE5F,CAAE,KAAM,GAAa,MAAM,EAAI,GAE/B,EAAI,EAAK,GAET,EAAO,EAAE,eACV,MAAM,EAAG,GACT,UACA,IAAK,GAAS,CACX,EAAO,EAAE,GAET,IAAM,EAAQ,EAAK,KAAK,aAAa,OAErC,MAAO,CACH,QACA,KAAM,EAAK,KAAK,wBAAwB,KAAK,QAC7C,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,MAAO,CACH,IAAK,EACA,KAAK,6BACL,KAAK,OACL,QAAQ,aAAc,KAC3B,IAAK,KAGb,SAAU,EACL,KAAK,aACL,UACA,IAAK,GAAM,EAAE,GAAG,QACrB,KAAM,oBAAoB,EAAS,GAAG,EAAK,KAAK,QAChD,QAAS,EAAU,EAAK,KAAK,YAAY,OAAQ,kBAIvD,EAAQ,MAAM,EAChB,EACC,GACG,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,GAAM,CAAE,KAAM,GAAmB,MAAM,EAAI,EAAK,MAE1C,EAAU,EAAK,GAgCrB,OA9BA,EAAQ,qBACH,KAAK,OACL,MAAM,EAAG,IAAM,CACZ,EAAQ,GAAG,YACP,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACnD,MAAO,CACH,IAAK,EAAQ,GACR,KAAK,OACL,QAAQ,aAAc,KAC3B,MAAO,EAAQ,GAAG,KAAK,SACvB,OAAQ,EAAQ,GAAG,KAAK,gBAM5C,EAAK,MAAQ,EAAQ,6BAA6B,KAAK,WACvD,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,MAAO,CACH,IAAK,EAAQ,6BAA6B,KAAK,WAC/C,IAAK,EAAK,OAEd,YAAa,EAAQ,qBAAqB,SAE9C,EAAK,OAAS,EAAQ,iCAAiC,KAAK,WAC5D,EAAK,SAAW,EAAQ,0BACnB,UACA,IAAK,GAAM,EAAQ,GAAG,QAC3B,EAAK,QAAU,EAAU,EAAQ,mBAAmB,OAAQ,eAErD,IAEf,CAAE,YAAa,IAGb,EAAO,IAAI,IAAI,EAAE,oBAAoB,KAAK,QAAS,GAAS,KAElE,MAAO,CACH,KAAM,EACN,MAAO,EAAE,SAAS,OAClB,KAAM,EACN,YAAa,EAAE,qBAAqB,OACpC,SAAU,EAAE,QAAQ,KAAK,QACzB,OACA,KAAM,EACN,SAAU,EAAE,iBAAiB"}