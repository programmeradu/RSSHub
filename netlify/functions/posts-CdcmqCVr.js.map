{"version":3,"file":"posts-CdcmqCVr.js","names":["route: Route","RSSParser","got"],"sources":["../../lib/routes/discourse/posts.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport { getConfig } from './utils';\r\nimport got from '@/utils/got';\r\nimport RSSParser from '@/utils/rss-parser';\r\n\r\nexport const route: Route = {\r\n    path: '/:configId/posts',\r\n    categories: ['bbs'],\r\n    example: '/discourse/0/posts',\r\n    parameters: { configId: 'Environment variable configuration id, see above' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'DISCOURSE_CONFIG_*',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Latest posts',\r\n    maintainers: ['dzx-dzx'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { link, key } = getConfig(ctx);\r\n\r\n    const feed = await RSSParser.parseString(\r\n        (\r\n            await got(`${link}/posts.rss`, {\r\n                headers: {\r\n                    'User-Api-Key': key,\r\n                },\r\n            })\r\n        ).data\r\n    );\r\n\r\n    feed.items = feed.items.map((e) => ({\r\n        description: e.content,\r\n        author: e.creator,\r\n        ...e,\r\n    }));\r\n\r\n    return { item: feed.items, ...feed };\r\n}\r\n"],"mappings":"qXAKA,MAAaA,EAAe,CACxB,KAAM,mBACN,WAAY,CAAC,OACb,QAAS,qBACT,WAAY,CAAE,SAAU,oDACxB,SAAU,CACN,cAAe,CACX,CACI,KAAM,qBACN,YAAa,KAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,eACN,YAAa,CAAC,WACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,OAAM,OAAQ,EAAU,GAE1B,EAAO,MAAMC,EAAU,aAErB,MAAMC,EAAI,GAAG,EAAK,YAAa,CAC3B,QAAS,CACL,eAAgB,MAG1B,MASN,MANA,GAAK,MAAQ,EAAK,MAAM,IAAK,IAAO,CAChC,YAAa,EAAE,QACf,OAAQ,EAAE,QACV,GAAG,KAGA,CAAE,KAAM,EAAK,MAAO,GAAG"}