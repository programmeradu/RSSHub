{"version":3,"file":"utils-CT-cBaSe.js","names":[],"sources":["../../lib/routes/dribbble/utils.ts"],"sourcesContent":["import cache from '@/utils/cache';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst host = 'https://dribbble.com';\r\n\r\n// Refactored function to load a link asynchronously\r\nasync function loadContent(link) {\r\n    // Make a GET request to the specified  and retrieve the response\r\n    const response = await ofetch(link);\r\n    const $ = load(response);\r\n\r\n    const shotData = JSON.parse(\r\n        $('script')\r\n            .text()\r\n            .match(/shotData:\\s({.+?}),\\n/)?.[1] ?? '{}'\r\n    );\r\n\r\n    // Join multiple shots together by selecting elements with class 'media-shot' or 'main-shot' or 'block-media-wrapper'\r\n    // 'block-media-wrapper' is a new class of dribbble\r\n    const shotMedia = $('.media-shot, .main-shot, .block-media-wrapper')\r\n        .toArray()\r\n        .map((element) => {\r\n            const object = $(element);\r\n\r\n            // remove the content that we don't want to show\r\n            object.find('span.cropped-indicator, button').remove();\r\n\r\n            object.find('video').each((_, video) => {\r\n                video = $(video);\r\n\r\n                if (!video.attr('src') && video.data('src')) {\r\n                    video.attr('src', video.data('src'));\r\n                    video.removeAttr('data-src');\r\n                    video.removeAttr('data-video-small');\r\n                    video.removeAttr('data-video-medium');\r\n                    video.removeAttr('data-video-large');\r\n                }\r\n            });\r\n            object.find('img').each((_, img) => {\r\n                img = $(img);\r\n\r\n                if (img.data('animated-url')) {\r\n                    img.attr('src', img.data('animated-url'));\r\n                    img.removeAttr('data-animated-url');\r\n                    img.removeAttr('srcset');\r\n                }\r\n\r\n                if (!img.attr('src') && img.data('src')) {\r\n                    img.attr('src', img.data('src').split('?')[0]);\r\n                    img.removeAttr('data-src');\r\n                }\r\n\r\n                img.attr('src', img.attr('src').split('?')[0]);\r\n                img.removeAttr('srcset');\r\n                img.removeAttr('data-srcset');\r\n            });\r\n            object.find('a').each((_, a) => {\r\n                a = $(a);\r\n                a.removeAttr('data-pswp-srcset');\r\n            });\r\n\r\n            return object.html();\r\n        })\r\n        .join('');\r\n\r\n    const shotDescription = $('.shot-description-container');\r\n\r\n    const author = `${shotData.shotUser.name}${shotData.shotUser.team.length ? ` for ${shotData.shotUser.team.name}` : ''}`;\r\n    const description = art(path.join(__dirname, 'templates/description.art'), {\r\n        shotMedia,\r\n        shotData,\r\n        description: shotDescription,\r\n    });\r\n\r\n    // Get the text content of the element with class 'shot-date' and convert it to a UTC string representation of a date\r\n    const pubDate = parseDate(shotData.postedOn);\r\n\r\n    // Return an object containing the description and pubDate\r\n    return {\r\n        description,\r\n        pubDate,\r\n        author,\r\n        category: shotData.tags,\r\n    };\r\n}\r\n\r\n// Refactored code with comments for clarity\r\n\r\nfunction ProcessFeed(list) {\r\n    // Use Promise.all to process all items in the list asynchronously\r\n    return Promise.all(\r\n        list.map((item) => {\r\n            const $ = load(item);\r\n\r\n            // The link of item is \"/signup/new\" when access \"https://dribbble.com/search/something\"\r\n            // So get url by id\r\n            const itemId = $(item).data('thumbnail-id');\r\n\r\n            // Construct the full item URL using the host and the item ID\r\n            const guid = new URL(`/shots/${itemId}`, host).href;\r\n            const itemUrl = new URL($(item).find('.shot-thumbnail-link').attr('href')!, host).href;\r\n\r\n            // Return a Promise that resolves to an object combining the single item data and the additional data\r\n            return cache.tryGet(guid, async () => {\r\n                const { description, pubDate, author, category } = await loadContent(itemUrl);\r\n\r\n                return {\r\n                    title: $('.shot-title').text(),\r\n                    link: itemUrl,\r\n                    guid,\r\n                    description,\r\n                    pubDate,\r\n                    author,\r\n                    category,\r\n                };\r\n            });\r\n        })\r\n    );\r\n}\r\n\r\n/**\r\n * Retrieves data from a given URL and processes it.\r\n *\r\n * @param {string} url - The URL to retrieve data from.\r\n * @param {string} title - The title of the data.\r\n * @return {Object} - An object containing the retrieved data and metadata.\r\n */\r\nconst getData = async (url, title) => {\r\n    // Make a GET request to the specified URL\r\n    const response = await ofetch(url);\r\n\r\n    // Load the response data into a cheerio object\r\n    const $ = load(response);\r\n    // Get all the list items under the 'ol.dribbbles.group' element\r\n    const list = $('ol.dribbbles.group > li').toArray();\r\n\r\n    // Process the list items using the ProcessFeed function\r\n    const result = await ProcessFeed(list);\r\n\r\n    // Return an object containing the retrieved data and metadata\r\n    return {\r\n        title,\r\n        link: url,\r\n        description: $('meta[name=\"description\"]').attr('content'),\r\n        item: result,\r\n    };\r\n};\r\n\r\nexport default { getData };\r\n"],"mappings":"8UAOA,MAAM,EAAO,uBAGb,eAAe,EAAY,EAAM,CAE7B,IAAM,EAAW,MAAM,EAAO,GACxB,EAAI,EAAK,GAET,EAAW,KAAK,MAClB,EAAE,UACG,OACA,MAAM,2BAA2B,IAAM,MAK1C,EAAY,EAAE,iDACf,UACA,IAAK,GAAY,CACd,IAAM,EAAS,EAAE,GAuCjB,OApCA,EAAO,KAAK,kCAAkC,SAE9C,EAAO,KAAK,SAAS,MAAM,EAAG,IAAU,CACpC,EAAQ,EAAE,GAEN,CAAC,EAAM,KAAK,QAAU,EAAM,KAAK,SACjC,EAAM,KAAK,MAAO,EAAM,KAAK,QAC7B,EAAM,WAAW,YACjB,EAAM,WAAW,oBACjB,EAAM,WAAW,qBACjB,EAAM,WAAW,uBAGzB,EAAO,KAAK,OAAO,MAAM,EAAG,IAAQ,CAChC,EAAM,EAAE,GAEJ,EAAI,KAAK,kBACT,EAAI,KAAK,MAAO,EAAI,KAAK,iBACzB,EAAI,WAAW,qBACf,EAAI,WAAW,WAGf,CAAC,EAAI,KAAK,QAAU,EAAI,KAAK,SAC7B,EAAI,KAAK,MAAO,EAAI,KAAK,OAAO,MAAM,KAAK,IAC3C,EAAI,WAAW,aAGnB,EAAI,KAAK,MAAO,EAAI,KAAK,OAAO,MAAM,KAAK,IAC3C,EAAI,WAAW,UACf,EAAI,WAAW,iBAEnB,EAAO,KAAK,KAAK,MAAM,EAAG,IAAM,CAC5B,EAAI,EAAE,GACN,EAAE,WAAW,sBAGV,EAAO,SAEjB,KAAK,IAEJ,EAAkB,EAAE,+BAEpB,EAAS,GAAG,EAAS,SAAS,OAAO,EAAS,SAAS,KAAK,OAAS,QAAQ,EAAS,SAAS,KAAK,OAAS,KAC7G,EAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACvE,YACA,WACA,YAAa,IAIX,EAAU,EAAU,EAAS,UAGnC,MAAO,CACH,cACA,UACA,SACA,SAAU,EAAS,MAM3B,SAAS,EAAY,EAAM,CAEvB,OAAO,QAAQ,IACX,EAAK,IAAK,GAAS,CACf,IAAM,EAAI,EAAK,GAIT,EAAS,EAAE,GAAM,KAAK,gBAGtB,EAAO,IAAI,IAAI,UAAU,IAAU,GAAM,KACzC,EAAU,IAAI,IAAI,EAAE,GAAM,KAAK,wBAAwB,KAAK,QAAU,GAAM,KAGlF,OAAO,EAAM,OAAO,EAAM,SAAY,CAClC,GAAM,CAAE,cAAa,UAAS,SAAQ,YAAa,MAAM,EAAY,GAErE,MAAO,CACH,MAAO,EAAE,eAAe,OACxB,KAAM,EACN,OACA,cACA,UACA,SACA,iBAcpB,MAAM,EAAU,MAAO,EAAK,IAAU,CAElC,IAAM,EAAW,MAAM,EAAO,GAGxB,EAAI,EAAK,GAET,EAAO,EAAE,2BAA2B,UAGpC,EAAS,MAAM,EAAY,GAGjC,MAAO,CACH,QACA,KAAM,EACN,YAAa,EAAE,4BAA4B,KAAK,WAChD,KAAM,IAId,IAAA,EAAe,CAAE"}