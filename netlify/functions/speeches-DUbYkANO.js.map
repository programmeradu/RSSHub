{"version":3,"file":"speeches-DUbYkANO.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/who/speeches.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/speeches/:language?',\r\n    categories: ['government'],\r\n    example: '/who/speeches',\r\n    parameters: { language: 'Language, see below, English by default' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['who.int/director-general/speeches'],\r\n            target: '/speeches',\r\n        },\r\n    ],\r\n    name: 'Speeches',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    url: 'who.int/director-general/speeches',\r\n    description: `Language\r\n\r\n| English | العربية | 中文 | Français | Русский | Español | Português |\r\n| ------- | ------- | ---- | -------- | ------- | ------- | --------- |\r\n| en      | ar      | zh   | fr       | ru      | es      | pt        |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const language = ctx.req.param('language') || 'en';\r\n\r\n    const rootUrl = 'https://www.who.int';\r\n    const currentUrl = `${rootUrl}/${language === 'en' ? '' : `${language}/`}director-general/speeches`;\r\n    const apiUrl = `${rootUrl}/api/hubs/speeches?sf_culture=${language}&$orderby=PublicationDateAndTime%20desc&$select=Title,PublicationDateAndTime,ItemDefaultUrl`;\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: apiUrl,\r\n    });\r\n\r\n    const list = response.data.value.map((item) => ({\r\n        title: item.Title,\r\n        link: `${currentUrl}/detail/${item.ItemDefaultUrl}`,\r\n        pubDate: parseDate(item.PublicationDateAndTime),\r\n    }));\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const detailResponse = await got({\r\n                    method: 'get',\r\n                    url: item.link,\r\n                });\r\n\r\n                const content = load(detailResponse.data);\r\n\r\n                item.description = content('.sf-detail-body-wrapper').html();\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: 'Speeches - WHO',\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"wWAMA,MAAaA,EAAe,CACxB,KAAM,uBACN,WAAY,CAAC,cACb,QAAS,gBACT,WAAY,CAAE,SAAU,2CACxB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,qCACT,OAAQ,cAGhB,KAAM,WACN,YAAa,CAAC,WACd,UACA,IAAK,oCACL,YAAa;;;;0EAOjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAW,EAAI,IAAI,MAAM,aAAe,KAExC,EAAU,sBACV,EAAa,GAAG,EAAQ,GAAG,IAAa,KAAO,GAAK,GAAG,EAAS,GAAG,2BACnE,EAAS,GAAG,EAAQ,gCAAgC,EAAS,6FAE7D,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAO,EAAS,KAAK,MAAM,IAAK,IAAU,CAC5C,MAAO,EAAK,MACZ,KAAM,GAAG,EAAW,UAAU,EAAK,iBACnC,QAAS,EAAU,EAAK,2BAGtB,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAM,EAAiB,MAAMD,EAAI,CAC7B,OAAQ,MACR,IAAK,EAAK,OAGR,EAAU,EAAK,EAAe,MAIpC,MAFA,GAAK,YAAc,EAAQ,2BAA2B,OAE/C,MAKnB,MAAO,CACH,MAAO,iBACP,KAAM,EACN,KAAM"}