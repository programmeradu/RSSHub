{"version":3,"file":"sfw-CnsnTdKL.js","names":["got","pixivUtils","cache","got","cache","got","images: Record<string, string>","pixivUtils"],"sources":["../../lib/routes/pixiv/api/get-illust-detail.ts","../../lib/routes/pixiv/novel-api/content/utils.ts","../../lib/routes/pixiv/novel-api/content/nsfw.ts","../../lib/routes/pixiv/novel-api/content/sfw.ts"],"sourcesContent":["import got from '../pixiv-got';\r\nimport { maskHeader } from '../constants';\r\nimport queryString from 'query-string';\r\n\r\n/**\r\n * 获取插画详细信息\r\n * @param {string} illust_id 插画作品 id\r\n * @param {string} token pixiv oauth token\r\n * @returns {Promise<got.AxiosResponse<{illust: IllustDetail}>>}\r\n */\r\nexport default function getIllustDetail(illust_id: string, token: string) {\r\n    return got('https://app-api.pixiv.net/v1/illust/detail', {\r\n        headers: {\r\n            ...maskHeader,\r\n            Authorization: 'Bearer ' + token,\r\n        },\r\n        searchParams: queryString.stringify({\r\n            illust_id,\r\n            filter: 'for_ios',\r\n        }),\r\n    });\r\n}\r\n","import { load } from 'cheerio';\r\nimport getIllustDetail from '../../api/get-illust-detail';\r\nimport pixivUtils from '../../utils';\r\nimport logger from '@/utils/logger';\r\n\r\nexport function convertPixivProtocolExtended(caption: string): string {\r\n    const protocolMap = new Map([\r\n        [/pixiv:\\/\\/novels\\/(\\d+)/g, 'https://www.pixiv.net/novel/show.php?id=$1'],\r\n        [/pixiv:\\/\\/illusts\\/(\\d+)/g, 'https://www.pixiv.net/artworks/$1'],\r\n        [/pixiv:\\/\\/users\\/(\\d+)/g, 'https://www.pixiv.net/users/$1'],\r\n        [/pixiv:\\/\\/novel\\/series\\/(\\d+)/g, 'https://www.pixiv.net/novel/series/$1'],\r\n    ]);\r\n\r\n    let convertedText = caption;\r\n    for (const [pattern, replacement] of protocolMap) {\r\n        convertedText = convertedText.replace(pattern, replacement);\r\n    }\r\n    return convertedText;\r\n}\r\n\r\n// docs: https://www.pixiv.help/hc/ja/articles/235584168-小説作品の本文内に使える特殊タグとは\r\nexport async function parseNovelContent(content: string, images: Record<string, string>, token?: string): Promise<string> {\r\n    try {\r\n        // 如果有 token，處理 pixiv 圖片引用\r\n        // If token exists, process pixiv image references\r\n        if (token) {\r\n            const imageMatches = [...content.matchAll(/\\[pixivimage:(\\d+)(?:-(\\d+))?\\]/g)];\r\n            const imageIdToUrl = new Map<string, string>();\r\n\r\n            // 批量獲取圖片資訊\r\n            // Batch fetch image information\r\n            await Promise.all(\r\n                imageMatches.map(async ([, illustId, pageNum]) => {\r\n                    if (!illustId) {\r\n                        return;\r\n                    }\r\n\r\n                    try {\r\n                        const illust = (await getIllustDetail(illustId, token)).data.illust;\r\n                        const pixivimages = pixivUtils.getImgs(illust).map((img) => img.match(/src=\"([^\"]+)\"/)?.[1] || '');\r\n\r\n                        const imageUrl = pixivimages[Number(pageNum) || 0];\r\n                        if (imageUrl) {\r\n                            imageIdToUrl.set(pageNum ? `${illustId}-${pageNum}` : illustId, imageUrl);\r\n                        }\r\n                    } catch (error) {\r\n                        // 記錄錯誤但不中斷處理\r\n                        // Log error but don't interrupt processing\r\n                        logger.warn(`Failed to fetch illust detail for ID ${illustId}: ${error instanceof Error ? error.message : String(error)}`);\r\n                    }\r\n                })\r\n            );\r\n\r\n            // 替換 pixiv 圖片引用為 img 標籤\r\n            // Replace pixiv image references with img tags\r\n            content = content.replaceAll(/\\[pixivimage:(\\d+)(?:-(\\d+))?\\]/g, (match, illustId, pageNum) => {\r\n                const key = pageNum ? `${illustId}-${pageNum}` : illustId;\r\n                const imageUrl = imageIdToUrl.get(key);\r\n                return imageUrl ? `<img src=\"${imageUrl}\" alt=\"pixiv illustration ${illustId}${pageNum ? ` page ${pageNum}` : ''}\">` : match;\r\n            });\r\n        } else {\r\n            /*\r\n             * 處理 get-novels-sfw 的情況\r\n             * 當沒有 PIXIV_REFRESHTOKEN 時，將 [pixivimage:(\\d+)] 格式轉換為 artwork 連結\r\n             * 因無法獲取 Pixiv 作品詳情，改為提供直接連結到原始作品頁面\r\n             *\r\n             * Handle get-novels-sfw case\r\n             * When PIXIV_REFRESHTOKEN is not available, convert [pixivimage:(\\d+)] format to artwork link\r\n             * Provide direct link to original artwork page since artwork details cannot be retrieved\r\n             */\r\n            content = content.replaceAll(/\\[pixivimage:(\\d+)(?:-(\\d+))?\\]/g, (_, illustId) => `<a href=\"https://www.pixiv.net/artworks/${illustId}\" target=\"_blank\" rel=\"noopener noreferrer\">Pixiv Artwork #${illustId}</a>`);\r\n        }\r\n\r\n        // 處理作者上傳的圖片\r\n        // Process author uploaded images\r\n        content = content.replaceAll(/\\[uploadedimage:(\\d+)\\]/g, (match, imageId) => {\r\n            if (images[imageId]) {\r\n                return `<img src=\"${pixivUtils.getProxiedImageUrl(images[imageId])}\" alt=\"novel illustration ${imageId}\">`;\r\n            }\r\n            return match;\r\n        });\r\n\r\n        // 基本格式處理\r\n        // Basic formatting\r\n        content = content\r\n            // 換行轉換為 HTML 換行\r\n            // Convert newlines to HTML breaks\r\n            .replaceAll('\\n', '<br>')\r\n            // 連續換行轉換為段落\r\n            // Convert consecutive breaks to paragraphs\r\n            .replaceAll(/(<br>){2,}/g, '</p><p>')\r\n            // ruby 標籤（為日文漢字標註讀音）\r\n            // ruby tags (for Japanese kanji readings)\r\n            .replaceAll(/\\[\\[rb:(.*?)>(.*?)\\]\\]/g, '<ruby>$1<rt>$2</rt></ruby>')\r\n            // 外部連結\r\n            // external links\r\n            .replaceAll(/\\[\\[jumpuri:(.*?)>(.*?)\\]\\]/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\r\n            // 頁面跳轉，但由於 [newpage] 使用 hr 分隔，沒有頁數，沒必要跳轉，所以只顯示文字\r\n            // Page jumps, but since [newpage] uses hr separators, without the page numbers, jumping isn't needed, so just display text\r\n            .replaceAll(/\\[jump:(\\d+)\\]/g, 'Jump to page $1')\r\n            // 章節標題\r\n            // chapter titles\r\n            .replaceAll(/\\[chapter:(.*?)\\]/g, '<h2>$1</h2>')\r\n            // 分頁符\r\n            // page breaks\r\n            .replaceAll('[newpage]', '<hr>');\r\n\r\n        // 使用 cheerio 進行 HTML 清理和優化\r\n        // Use cheerio for HTML cleanup and optimization\r\n        const $content = load(`<article><p>${content}</p></article>`);\r\n\r\n        // 處理嵌套段落：移除多餘的嵌套\r\n        // Handle nested paragraphs: remove unnecessary nesting\r\n        $content('p p').each((_, elem) => {\r\n            const $elem = $content(elem);\r\n            $elem.replaceWith($elem.html() || '');\r\n        });\r\n\r\n        // 處理段落中的標題：確保正確的 HTML 結構\r\n        // Handle headings in paragraphs: ensure correct HTML structure\r\n        $content('p h2').each((_, elem) => {\r\n            const $elem = $content(elem);\r\n            const $parent = $elem.parent('p');\r\n            const html = $elem.prop('outerHTML');\r\n            if ($parent.length && html) {\r\n                $parent.replaceWith(`</p>${html}<p>`);\r\n            }\r\n        });\r\n\r\n        return $content.html() || '';\r\n    } catch (error) {\r\n        throw new Error(`Error parsing novel content: ${error instanceof Error ? error.message : String(error)}`);\r\n    }\r\n}\r\n","import { JSDOM, VirtualConsole } from 'jsdom';\r\nimport cache from '@/utils/cache';\r\nimport got from '../../pixiv-got';\r\nimport { maskHeader } from '../../constants';\r\nimport queryString from 'query-string';\r\nimport { parseNovelContent } from './utils';\r\nimport type { NovelContent, NSFWNovelDetail } from './types';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport async function getNSFWNovelContent(novelId: string, token: string): Promise<NovelContent> {\r\n    return (await cache.tryGet(`https://app-api.pixiv.net/webview/v2/novel:${novelId}`, async () => {\r\n        const response = await got('https://app-api.pixiv.net/webview/v2/novel', {\r\n            headers: {\r\n                ...maskHeader,\r\n                Authorization: 'Bearer ' + token,\r\n            },\r\n            searchParams: queryString.stringify({\r\n                id: novelId,\r\n                viewer_version: '20221031_ai',\r\n            }),\r\n        });\r\n\r\n        const virtualConsole = new VirtualConsole().on('error', () => void 0);\r\n\r\n        const { window } = new JSDOM(response.data, {\r\n            runScripts: 'dangerously',\r\n            virtualConsole,\r\n        });\r\n\r\n        const novelDetail = window.pixiv?.novel as NSFWNovelDetail;\r\n\r\n        window.close();\r\n\r\n        if (!novelDetail) {\r\n            throw new Error('No novel data found');\r\n        }\r\n\r\n        const images = Object.fromEntries(\r\n            Object.entries(novelDetail.images)\r\n                .filter(([, image]) => image?.urls?.original)\r\n                .map(([id, image]) => [id, image.urls.original])\r\n        );\r\n\r\n        const parsedContent = await parseNovelContent(novelDetail.text, images, token);\r\n\r\n        return {\r\n            id: novelDetail.id,\r\n            title: novelDetail.title,\r\n            description: novelDetail.caption,\r\n            content: parsedContent,\r\n\r\n            userId: novelDetail.userId,\r\n            userName: null, // Not provided in NSFW API\r\n\r\n            bookmarkCount: novelDetail.rating.bookmark,\r\n            viewCount: novelDetail.rating.view,\r\n            likeCount: novelDetail.rating.like,\r\n\r\n            createDate: parseDate(novelDetail.cdate),\r\n            updateDate: null, // Not provided in NSFW API\r\n\r\n            isOriginal: novelDetail.isOriginal,\r\n            aiType: novelDetail.aiType,\r\n            tags: novelDetail.tags,\r\n\r\n            coverUrl: novelDetail.coverUrl,\r\n            images,\r\n\r\n            seriesId: novelDetail.seriesId || null,\r\n            seriesTitle: novelDetail.seriesTitle || null,\r\n        };\r\n    })) as NovelContent;\r\n}\r\n","import got from '@/utils/got';\r\nimport cache from '@/utils/cache';\r\nimport pixivUtils from '../../utils';\r\nimport { parseNovelContent } from './utils';\r\nimport { NovelContent, SFWNovelDetail } from './types';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst baseUrl = 'https://www.pixiv.net';\r\n\r\nexport async function getSFWNovelContent(novelId: string): Promise<NovelContent> {\r\n    const url = `${baseUrl}/ajax/novel/${novelId}`;\r\n    return (await cache.tryGet(url, async () => {\r\n        const response = await got(url, {\r\n            headers: {\r\n                referer: `${baseUrl}/novel/show.php?id=${novelId}`,\r\n            },\r\n        });\r\n\r\n        const novelDetail = response.data as SFWNovelDetail;\r\n\r\n        if (!novelDetail) {\r\n            throw new Error('No novel data found');\r\n        }\r\n\r\n        const body = novelDetail.body;\r\n        const images: Record<string, string> = {};\r\n\r\n        if (novelDetail.body.textEmbeddedImages) {\r\n            for (const [id, image] of Object.entries(novelDetail.body.textEmbeddedImages)) {\r\n                images[id] = pixivUtils.getProxiedImageUrl(image.urls.original);\r\n            }\r\n        }\r\n\r\n        const parsedContent = await parseNovelContent(novelDetail.body.content, images);\r\n\r\n        return {\r\n            id: body.id,\r\n            title: body.title,\r\n            description: body.description,\r\n            content: parsedContent,\r\n\r\n            userId: body.userId,\r\n            userName: body.userName,\r\n\r\n            bookmarkCount: body.bookmarkCount,\r\n            viewCount: body.viewCount,\r\n            likeCount: body.likeCount,\r\n\r\n            createDate: parseDate(body.createDate),\r\n            updateDate: parseDate(body.uploadDate),\r\n\r\n            isOriginal: body.isOriginal,\r\n            aiType: body.aiType,\r\n            tags: body.tags.tags.map((tag) => tag.tag),\r\n\r\n            coverUrl: body.coverUrl,\r\n            images,\r\n\r\n            seriesId: body.seriesNavData?.seriesId?.toString() || null,\r\n            seriesTitle: body.seriesNavData?.title || null,\r\n        };\r\n    })) as NovelContent;\r\n}\r\n"],"mappings":"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"}