{"version":3,"file":"feeds-BgH9D1kj.js","names":["route: Route","ofetch"],"sources":["../../lib/routes/bestblogs/feeds.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nexport const route: Route = {\r\n    path: '/feeds/:category?',\r\n    categories: ['programming'],\r\n    example: '/bestblogs/feeds/featured',\r\n    parameters: { category: 'the category of articles. Can be `programming`, `ai`, `product`, `business` or `featured`. Default is `featured`' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '文章列表',\r\n    maintainers: ['zhenlohuang'],\r\n    handler,\r\n};\r\n\r\nclass APIRequest {\r\n    keyword?: string;\r\n    qualifiedFilter: string;\r\n    sourceId?: string;\r\n    category?: string;\r\n    timeFilter: string;\r\n    language: string;\r\n    userLanguage: string;\r\n    sortType: string;\r\n    currentPage: number;\r\n    pageSize: number;\r\n\r\n    constructor({ keyword = '', qualifiedFilter = 'true', sourceId = '', category = '', timeFilter = '1w', language = 'all', userLanguage = 'zh', sortType = 'default', currentPage = 1, pageSize = 10 } = {}) {\r\n        this.keyword = keyword;\r\n        this.qualifiedFilter = qualifiedFilter;\r\n        this.sourceId = sourceId;\r\n        this.category = category;\r\n        this.timeFilter = timeFilter;\r\n        this.language = language;\r\n        this.userLanguage = userLanguage;\r\n        this.sortType = sortType;\r\n        this.currentPage = currentPage;\r\n        this.pageSize = pageSize;\r\n    }\r\n\r\n    toJson(): string {\r\n        const requestBody = {\r\n            keyword: this.keyword,\r\n            qualifiedFilter: this.qualifiedFilter,\r\n            sourceId: this.sourceId,\r\n            category: this.category,\r\n            timeFilter: this.timeFilter,\r\n            language: this.language,\r\n            userLanguage: this.userLanguage,\r\n            sortType: this.sortType,\r\n            currentPage: this.currentPage,\r\n            pageSize: this.pageSize,\r\n        };\r\n\r\n        return JSON.stringify(requestBody);\r\n    }\r\n}\r\n\r\nasync function handler(ctx) {\r\n    const defaultPageSize = 100;\r\n    const defaultTimeFilter = '1w';\r\n    const { category = 'featured' } = ctx.req.param();\r\n\r\n    const apiRequest = new APIRequest({\r\n        category,\r\n        pageSize: defaultPageSize,\r\n        qualifiedFilter: category === 'featured' ? 'true' : 'false',\r\n        timeFilter: defaultTimeFilter,\r\n    });\r\n\r\n    const apiUrl = 'https://api.bestblogs.dev/api/resource/list';\r\n    const response = await ofetch(apiUrl, {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        method: 'POST',\r\n        body: apiRequest.toJson(),\r\n    });\r\n\r\n    if (!response || !response.data || !response.data.dataList) {\r\n        throw new Error('Invalid API response: ' + JSON.stringify(response));\r\n    }\r\n\r\n    const articles = response.data.dataList;\r\n\r\n    const items = articles.map((article) => ({\r\n        title: article.title,\r\n        link: article.url,\r\n        description: article.summary,\r\n        pubDate: parseDate(article.publishDateTimeStr),\r\n        author: Array.isArray(article.authors) ? article.authors.map((author) => ({ name: author })) : [{ name: article.authors }],\r\n        category: article.category,\r\n    }));\r\n\r\n    return {\r\n        title: `Bestblogs.dev`,\r\n        link: `https://www.bestblogs.dev/feeds`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"gOAIA,MAAaA,EAAe,CACxB,KAAM,oBACN,WAAY,CAAC,eACb,QAAS,4BACT,WAAY,CAAE,SAAU,oHACxB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,OACN,YAAa,CAAC,eACd,WAGJ,IAAM,EAAN,KAAiB,CACb,QACA,gBACA,SACA,SACA,WACA,SACA,aACA,SACA,YACA,SAEA,YAAY,CAAE,UAAU,GAAI,kBAAkB,OAAQ,WAAW,GAAI,WAAW,GAAI,aAAa,KAAM,WAAW,MAAO,eAAe,KAAM,WAAW,UAAW,cAAc,EAAG,WAAW,IAAO,GAAI,CACvM,KAAK,QAAU,EACf,KAAK,gBAAkB,EACvB,KAAK,SAAW,EAChB,KAAK,SAAW,EAChB,KAAK,WAAa,EAClB,KAAK,SAAW,EAChB,KAAK,aAAe,EACpB,KAAK,SAAW,EAChB,KAAK,YAAc,EACnB,KAAK,SAAW,EAGpB,QAAiB,CACb,IAAM,EAAc,CAChB,QAAS,KAAK,QACd,gBAAiB,KAAK,gBACtB,SAAU,KAAK,SACf,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,SAAU,KAAK,SACf,aAAc,KAAK,aACnB,SAAU,KAAK,SACf,YAAa,KAAK,YAClB,SAAU,KAAK,UAGnB,OAAO,KAAK,UAAU,KAI9B,eAAe,EAAQ,EAAK,CACxB,GAEM,CAAE,WAAW,YAAe,EAAI,IAAI,QAEpC,EAAa,IAAI,EAAW,CAC9B,WACA,SAAU,IACV,gBAAiB,IAAa,WAAa,OAAS,QACpD,WAAY,OAIV,EAAW,MAAMC,EAAO,8CAAQ,CAClC,QAAS,CACL,eAAgB,oBAEpB,OAAQ,OACR,KAAM,EAAW,WAGrB,GAAI,CAAC,GAAY,CAAC,EAAS,MAAQ,CAAC,EAAS,KAAK,SAC9C,MAAU,MAAM,yBAA2B,KAAK,UAAU,IAG9D,IAAM,EAAW,EAAS,KAAK,SAEzB,EAAQ,EAAS,IAAK,IAAa,CACrC,MAAO,EAAQ,MACf,KAAM,EAAQ,IACd,YAAa,EAAQ,QACrB,QAAS,EAAU,EAAQ,oBAC3B,OAAQ,MAAM,QAAQ,EAAQ,SAAW,EAAQ,QAAQ,IAAK,IAAY,CAAE,KAAM,KAAa,CAAC,CAAE,KAAM,EAAQ,UAChH,SAAU,EAAQ,YAGtB,MAAO,CACH,MAAO,gBACP,KAAM,kCACN,KAAM"}