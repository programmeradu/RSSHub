{"version":3,"file":"query-C0bz4W46.js","names":[],"sources":["../../lib/routes/papers/query.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport parser from '@/utils/rss-parser';\r\n\r\nconst pdfUrlGenerators = {\r\n    arxiv: (id: string) => `https://arxiv.org/pdf/${id}.pdf`,\r\n};\r\n\r\nexport const handler = async (ctx) => {\r\n    const { keyword = 'query/Detection' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 150;\r\n\r\n    const rootUrl = 'https://papers.cool';\r\n    const currentUrl = new URL(`arxiv/search?highlight=1&query=${keyword}&sort=0`, rootUrl).href;\r\n    const feedUrl = new URL(`arxiv/search/feed?query=${keyword}`, rootUrl).href;\r\n\r\n    const site = keyword.split(/\\//)[0];\r\n    const apiKimiUrl = new URL(`${site}/kimi?paper=`, rootUrl).href;\r\n    const feed = await parser.parseURL(feedUrl);\r\n\r\n    const language = 'en';\r\n\r\n    const items = feed.items.slice(0, limit).map((item) => {\r\n        const title = item.title;\r\n        const guid = item.guid;\r\n\r\n        const id = item.link?.split(/\\//).pop() ?? '';\r\n        const kimiUrl = new URL(id, apiKimiUrl).href;\r\n        const pdfUrl = Object.hasOwn(pdfUrlGenerators, site) ? pdfUrlGenerators[site](id) : undefined;\r\n\r\n        const authorString = item.author;\r\n        const description = art(path.join(__dirname, 'templates/description.art'), {\r\n            pdfUrl,\r\n            siteUrl: item.link,\r\n            kimiUrl,\r\n            authorString,\r\n            summary: item.summary,\r\n        });\r\n\r\n        return {\r\n            title,\r\n            description,\r\n            pubDate: parseDate(item.pubDate ?? ''),\r\n            link: item.link,\r\n            category: item.categories,\r\n            author: authorString,\r\n            doi: `${site}${id}`,\r\n            guid,\r\n            id: guid,\r\n            content: {\r\n                html: description,\r\n                text: item.content,\r\n            },\r\n            language,\r\n            enclosure_url: pdfUrl,\r\n            enclosure_type: 'application/pdf',\r\n            enclosure_title: title,\r\n        };\r\n    });\r\n\r\n    return {\r\n        title: feed.title,\r\n        description: feed.description,\r\n        link: currentUrl,\r\n        item: items,\r\n        allowEmpty: true,\r\n        image: feed.image?.url,\r\n        language: feed.language,\r\n    };\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/query/:keyword{.+}?',\r\n    name: 'Topic',\r\n    url: 'papers.cool',\r\n    maintainers: ['Muyun99'],\r\n    handler,\r\n    example: '/papers/query/Detection',\r\n    parameters: { keyword: 'Keyword to search for papers, e.g., Detection, Segmentation, etc.' },\r\n    description: `::: tip\r\n  If you subscibe to [arXiv Paper queryed by Detection](https://papers.cool/arxiv/search?highlight=1&query=Detection), where the URL is \\`https://papers.cool/arxiv/search?highlight=1&query=Detection\\`, extract the part \\`https://papers.cool/\\` to the end, and use it as the parameter to fill in. Therefore, the route will be [\\`/papers/query/Detection\\`](https://rsshub.app/papers/query/Detection).\r\n:::\r\n\r\n| Category                                              | id                  |\r\n| ----------------------------------------------------- | ------------------- |\r\n| arXiv Paper queryed by Detection                      | query/Detection     |\r\n| arXiv Paper queryed by Segmentation                   | query/Segmentation  |\r\n  `,\r\n    categories: ['journal'],\r\n\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: true,\r\n    },\r\n    radar: [\r\n        {\r\n            title: 'arXiv Paper queryed by Keyword',\r\n            source: ['papers.cool/arxiv/search?highlight=1&query=*&sort=0'],\r\n            target: '/papers/query/:keyword',\r\n        },\r\n    ],\r\n};\r\n"],"mappings":"gSAOA,MAAM,EAAmB,CACrB,MAAQ,GAAe,yBAAyB,EAAG,OAG1C,EAAU,KAAO,IAAQ,CAClC,GAAM,CAAE,UAAU,mBAAsB,EAAI,IAAI,QAC1C,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,IAE/E,EAAU,sBACV,EAAa,IAAI,IAAI,kCAAkC,EAAQ,SAAU,GAAS,KAClF,EAAU,IAAI,IAAI,2BAA2B,IAAW,GAAS,KAEjE,EAAO,EAAQ,MAAM,MAAM,GAC3B,EAAa,IAAI,IAAI,GAAG,EAAK,cAAe,GAAS,KACrD,EAAO,MAAM,EAAO,SAAS,GAI7B,EAAQ,EAAK,MAAM,MAAM,EAAG,GAAO,IAAK,GAAS,CACnD,IAAM,EAAQ,EAAK,MACb,EAAO,EAAK,KAEZ,EAAK,EAAK,MAAM,MAAM,MAAM,OAAS,GACrC,EAAU,IAAI,IAAI,EAAI,GAAY,KAClC,EAAS,OAAO,OAAO,EAAkB,GAAQ,EAAiB,GAAM,GAAM,IAAA,GAE9E,EAAe,EAAK,OACpB,EAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACvE,SACA,QAAS,EAAK,KACd,UACA,eACA,QAAS,EAAK,UAGlB,MAAO,CACH,QACA,cACA,QAAS,EAAU,EAAK,SAAW,IACnC,KAAM,EAAK,KACX,SAAU,EAAK,WACf,OAAQ,EACR,IAAK,GAAG,IAAO,IACf,OACA,GAAI,EACJ,QAAS,CACL,KAAM,EACN,KAAM,EAAK,SAEf,cACA,cAAe,EACf,eAAgB,kBAChB,gBAAiB,KAIzB,MAAO,CACH,MAAO,EAAK,MACZ,YAAa,EAAK,YAClB,KAAM,EACN,KAAM,EACN,WAAY,GACZ,MAAO,EAAK,OAAO,IACnB,SAAU,EAAK,WAIV,EAAe,CACxB,KAAM,uBACN,KAAM,QACN,IAAK,cACL,YAAa,CAAC,WACd,UACA,QAAS,0BACT,WAAY,CAAE,QAAS,qEACvB,YAAa;;;;;;;;IASb,WAAY,CAAC,WAEb,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,aAAc,GACd,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,MAAO,iCACP,OAAQ,CAAC,uDACT,OAAQ"}