{"version":3,"file":"graphql-DIDBbceu.js","names":["got","cache","got"],"sources":["../../lib/routes/medium/parse-article.ts","../../lib/routes/medium/graphql.ts"],"sourcesContent":["import cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\n\r\nimport { config } from '@/config';\r\n\r\nasync function parse(url, cookie = '') {\r\n    const { data } = await got(url, {\r\n        headers: {\r\n            cookie,\r\n        },\r\n    });\r\n    const $ = load(data);\r\n\r\n    const publishedTime = $('meta[property=\"article:published_time\"]').attr('content');\r\n    const author = $('meta[name=\"author\"]').attr('content');\r\n\r\n    const article = $('body article');\r\n\r\n    // remove header actions\r\n    article.find('header').remove();\r\n\r\n    // get and remove title\r\n    const title = article.find('h1').first();\r\n    const titleText = title.text();\r\n    title.remove(); // remove title from html\r\n\r\n    // get subtitle and remove author actions\r\n    const subtitle = article.find('.pw-subtitle-paragraph');\r\n    const subtitleText = subtitle.text();\r\n    if (subtitle.length === 0) {\r\n        // no subtitle\r\n        article.find('.pw-post-body-paragraph').siblings().first().remove();\r\n    } else {\r\n        // preserve subtitle in html\r\n        subtitle.siblings().remove();\r\n    }\r\n\r\n    return {\r\n        title: titleText,\r\n        subtitle: subtitleText,\r\n        author,\r\n        publishedTime,\r\n        html: article.html(),\r\n        url,\r\n    };\r\n}\r\n\r\nexport default function parseArticle(ctx, url) {\r\n    return cache.tryGet(`medium:article:${url}`, async () => {\r\n        const { title, author, publishedTime, html } = await parse(url, config.medium.articleCookie);\r\n\r\n        return {\r\n            title,\r\n            author,\r\n            link: url,\r\n            description: html,\r\n            pubDate: publishedTime,\r\n        };\r\n    });\r\n}\r\n","import got from '@/utils/got';\r\n\r\nasync function graphqlRequest(body, cookie) {\r\n    const { data } = await got('https://medium.com/_/graphql', {\r\n        method: 'POST',\r\n        headers: {\r\n            accept: '*/*',\r\n            'accept-language': 'en-US,en;q=0.9,zh;q=0.8,zh-CN;q=0.7',\r\n            'apollographql-client-name': 'lite',\r\n            'apollographql-client-version': 'main-20240329-011934-2370d8b72b',\r\n            'cache-control': 'no-cache',\r\n            'content-type': 'application/json',\r\n            'medium-frontend-app': 'lite/main-20240329-011934-2370d8b72b',\r\n            'medium-frontend-path': '/',\r\n            'medium-frontend-route': 'homepage',\r\n            'ot-tracer-sampled': 'true',\r\n            'ot-tracer-spanid': '26b843316dc9494d',\r\n            'ot-tracer-traceid': 'c84ea9154765033',\r\n            pragma: 'no-cache',\r\n            'sec-ch-ua': '\"Chromium\";v=\"123\", \"Not:A-Brand\";v=\"8\"',\r\n            'sec-ch-ua-mobile': '?0',\r\n            'sec-ch-ua-platform': '\"macOS\"',\r\n            'sec-fetch-dest': 'empty',\r\n            'sec-fetch-mode': 'cors',\r\n            'sec-fetch-site': 'same-origin',\r\n            'graphql-operation': body.operationName,\r\n            cookie,\r\n        },\r\n        body: JSON.stringify([body]),\r\n    });\r\n    return data[0].data;\r\n}\r\n\r\nasync function getFollowingFeedQuery(user, cookie, pagingLimit = 20) {\r\n    return (await graphqlRequest(newFollowingFeedQuery(pagingLimit), cookie))?.followingFeed;\r\n}\r\n\r\nasync function getWebInlineRecommendedFeedQuery(user, cookie, pagingLimit = 20) {\r\n    return (await graphqlRequest(newWebInlineRecommendedFeedQuery(pagingLimit), cookie))?.webRecommendedFeed;\r\n}\r\n\r\nasync function getWebInlineTopicFeedQuery(user, tagSlug, cookie, pagingLimit = 20) {\r\n    return (await graphqlRequest(newWebInlineTopicFeedQuery(tagSlug, pagingLimit), cookie))?.personalisedTagFeed;\r\n}\r\n\r\nasync function getUserCatalogMainContentQuery(user, catalogId, cookie, pagingLimit = 20) {\r\n    return (await graphqlRequest(newUserCatalogMainContentQuery(catalogId, pagingLimit), cookie))?.catalogById;\r\n}\r\n\r\nexport { getWebInlineRecommendedFeedQuery, getFollowingFeedQuery, getWebInlineTopicFeedQuery, getUserCatalogMainContentQuery };\r\n\r\nfunction newFollowingFeedQuery(pagingLimit = 5) {\r\n    return {\r\n        operationName: 'LegacyFollowingFeedQuery',\r\n        variables: {\r\n            paging: {\r\n                limit: pagingLimit,\r\n            },\r\n        },\r\n        query: `query LegacyFollowingFeedQuery($paging: PagingOptions) {\r\n            followingFeed(paging: $paging) {\r\n              items {\r\n                feedId\r\n                post {\r\n                  mediumUrl\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              pagingInfo {\r\n                next {\r\n                  to\r\n                  from\r\n                  limit\r\n                  source\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              __typename\r\n            }\r\n        }`,\r\n    };\r\n}\r\n\r\nfunction newWebInlineRecommendedFeedQuery(pagingLimit = 5) {\r\n    return {\r\n        operationName: 'LegacyWebInlineRecommendedFeedQuery',\r\n        variables: {\r\n            forceRank: true,\r\n            paging: {\r\n                limit: pagingLimit,\r\n            },\r\n        },\r\n        query: `query LegacyWebInlineRecommendedFeedQuery($paging: PagingOptions, $forceRank: Boolean) {\r\n            webRecommendedFeed(paging: $paging, forceRank: $forceRank) {\r\n              items {\r\n                feedId\r\n                post {\r\n                  mediumUrl\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              pagingInfo {\r\n                next {\r\n                  limit\r\n                  to\r\n                  source\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              __typename\r\n            }\r\n        }`,\r\n    };\r\n}\r\n\r\nfunction newWebInlineTopicFeedQuery(tagSlug, pagingLimit = 5) {\r\n    return {\r\n        operationName: 'LegacyWebInlineTopicFeedQuery',\r\n        variables: {\r\n            tagSlug,\r\n            paging: {\r\n                limit: pagingLimit,\r\n            },\r\n            skipCache: true,\r\n        },\r\n        query: `query LegacyWebInlineTopicFeedQuery($tagSlug: String!, $paging: PagingOptions!, $skipCache: Boolean) {\r\n            personalisedTagFeed(tagSlug: $tagSlug, paging: $paging, skipCache: $skipCache) {\r\n              items {\r\n                feedId\r\n                post {\r\n                  mediumUrl\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              pagingInfo {\r\n                next {\r\n                  source\r\n                  limit\r\n                  from\r\n                  to\r\n                  __typename\r\n                }\r\n                __typename\r\n              }\r\n              __typename\r\n            }\r\n        }`,\r\n    };\r\n}\r\n\r\nfunction newUserCatalogMainContentQuery(catalogId, pagingLimit = 20) {\r\n    return {\r\n        operationName: 'UserCatalogMainContentQuery',\r\n        variables: {\r\n            catalogId,\r\n            pagingOptions: {\r\n                limit: pagingLimit,\r\n            },\r\n        },\r\n        query: `query UserCatalogMainContentQuery($catalogId: ID!, $pagingOptions: CatalogPagingOptionsInput!) {\r\n            catalogById(catalogId: $catalogId) {\r\n              __typename\r\n              ... on Catalog {\r\n                name\r\n                itemsConnection(pagingOptions: $pagingOptions) {\r\n                  items {\r\n                    entity {\r\n                      ... on Post {\r\n                        mediumUrl\r\n                      }\r\n                    }\r\n                    __typename\r\n                  }\r\n                  __typename\r\n                }\r\n              }\r\n            }\r\n          }`,\r\n    };\r\n}\r\n"],"mappings":"iLAMA,eAAe,EAAM,EAAK,EAAS,GAAI,CACnC,GAAM,CAAE,QAAS,MAAME,EAAI,EAAK,CAC5B,QAAS,CACL,YAGF,EAAI,EAAK,GAET,EAAgB,EAAE,2CAA2C,KAAK,WAClE,EAAS,EAAE,uBAAuB,KAAK,WAEvC,EAAU,EAAE,gBAGlB,EAAQ,KAAK,UAAU,SAGvB,IAAM,EAAQ,EAAQ,KAAK,MAAM,QAC3B,EAAY,EAAM,OACxB,EAAM,SAGN,IAAM,EAAW,EAAQ,KAAK,0BACxB,EAAe,EAAS,OAS9B,OARI,EAAS,SAAW,EAEpB,EAAQ,KAAK,2BAA2B,WAAW,QAAQ,SAG3D,EAAS,WAAW,SAGjB,CACH,MAAO,EACP,SAAU,EACV,SACA,gBACA,KAAM,EAAQ,OACd,OAIR,SAAwB,EAAa,EAAK,EAAK,CAC3C,OAAOD,EAAM,OAAO,kBAAkB,IAAO,SAAY,CACrD,GAAM,CAAE,QAAO,SAAQ,gBAAe,QAAS,MAAM,EAAM,EAAK,EAAO,OAAO,eAE9E,MAAO,CACH,QACA,SACA,KAAM,EACN,YAAa,EACb,QAAS,KCvDrB,eAAe,EAAe,EAAM,EAAQ,CACxC,GAAM,CAAE,QAAS,MAAMC,EAAI,+BAAgC,CACvD,OAAQ,OACR,QAAS,CACL,OAAQ,MACR,kBAAmB,sCACnB,4BAA6B,OAC7B,+BAAgC,kCAChC,gBAAiB,WACjB,eAAgB,mBAChB,sBAAuB,uCACvB,uBAAwB,IACxB,wBAAyB,WACzB,oBAAqB,OACrB,mBAAoB,mBACpB,oBAAqB,kBACrB,OAAQ,WACR,YAAa,0CACb,mBAAoB,KACpB,qBAAsB,UACtB,iBAAkB,QAClB,iBAAkB,OAClB,iBAAkB,cAClB,oBAAqB,EAAK,cAC1B,UAEJ,KAAM,KAAK,UAAU,CAAC,MAE1B,OAAO,EAAK,GAAG,KAGnB,eAAe,EAAsB,EAAM,EAAQ,EAAc,GAAI,CACjE,OAAQ,MAAM,EAAe,EAAsB,GAAc,KAAU,cAG/E,eAAe,EAAiC,EAAM,EAAQ,EAAc,GAAI,CAC5E,OAAQ,MAAM,EAAe,EAAiC,GAAc,KAAU,mBAG1F,eAAe,EAA2B,EAAM,EAAS,EAAQ,EAAc,GAAI,CAC/E,OAAQ,MAAM,EAAe,EAA2B,EAAS,GAAc,KAAU,oBAG7F,eAAe,EAA+B,EAAM,EAAW,EAAQ,EAAc,GAAI,CACrF,OAAQ,MAAM,EAAe,EAA+B,EAAW,GAAc,KAAU,YAKnG,SAAS,EAAsB,EAAc,EAAG,CAC5C,MAAO,CACH,cAAe,2BACf,UAAW,CACP,OAAQ,CACJ,MAAO,IAGf,MAAO;;;;;;;;;;;;;;;;;;;;;;YA0Bf,SAAS,EAAiC,EAAc,EAAG,CACvD,MAAO,CACH,cAAe,sCACf,UAAW,CACP,UAAW,GACX,OAAQ,CACJ,MAAO,IAGf,MAAO;;;;;;;;;;;;;;;;;;;;;YAyBf,SAAS,EAA2B,EAAS,EAAc,EAAG,CAC1D,MAAO,CACH,cAAe,gCACf,UAAW,CACP,UACA,OAAQ,CACJ,MAAO,GAEX,UAAW,IAEf,MAAO;;;;;;;;;;;;;;;;;;;;;;YA0Bf,SAAS,EAA+B,EAAW,EAAc,GAAI,CACjE,MAAO,CACH,cAAe,8BACf,UAAW,CACP,YACA,cAAe,CACX,MAAO,IAGf,MAAO"}