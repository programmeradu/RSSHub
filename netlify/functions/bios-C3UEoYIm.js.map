{"version":3,"file":"bios-C3UEoYIm.js","names":[],"sources":["../../lib/routes/asus/bios.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport cache from '@/utils/cache';\r\n\r\nconst endPoints = {\r\n    zh: {\r\n        url: 'https://odinapi.asus.com.cn/',\r\n        lang: 'cn',\r\n        websiteCode: 'cn',\r\n    },\r\n    en: {\r\n        url: 'https://odinapi.asus.com/',\r\n        lang: 'en',\r\n        websiteCode: 'global',\r\n    },\r\n};\r\n\r\nconst getProductInfo = (model, language) => {\r\n    const currentEndpoint = endPoints[language] ?? endPoints.zh;\r\n    const { url, lang, websiteCode } = currentEndpoint;\r\n\r\n    const searchAPI = `${url}recent-data/apiv2/SearchSuggestion?SystemCode=asus&WebsiteCode=${websiteCode}&SearchKey=${model}&SearchType=ProductsAll&RowLimit=4&sitelang=${lang}`;\r\n\r\n    return cache.tryGet(`asus:bios:${model}:${language}`, async () => {\r\n        const response = await ofetch(searchAPI);\r\n        const product = response.Result[0].Content[0];\r\n\r\n        return {\r\n            productID: product.DataId,\r\n            hashId: product.HashId,\r\n            url: product.Url,\r\n            title: product.Title,\r\n            image: product.ImageURL,\r\n            m1Id: product.M1Id,\r\n            productLine: product.ProductLine,\r\n        };\r\n    }) as Promise<{\r\n        productID: string;\r\n        hashId: string;\r\n        url: string;\r\n        title: string;\r\n        image: string;\r\n        m1Id: string;\r\n        productLine: string;\r\n    }>;\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/bios/:model/:lang?',\r\n    categories: ['program-update'],\r\n    example: '/asus/bios/RT-AX88U/zh',\r\n    parameters: {\r\n        model: 'Model, can be found in product page',\r\n        lang: {\r\n            description: 'Language, provide access routes for other parts of the world',\r\n            options: [\r\n                {\r\n                    label: 'Chinese',\r\n                    value: 'zh',\r\n                },\r\n                {\r\n                    label: 'Global',\r\n                    value: 'en',\r\n                },\r\n            ],\r\n            default: 'en',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: [\r\n                'www.asus.com/displays-desktops/:productLine/:series/:model',\r\n                'www.asus.com/laptops/:productLine/:series/:model',\r\n                'www.asus.com/motherboards-components/:productLine/:series/:model',\r\n                'www.asus.com/networking-iot-servers/:productLine/:series/:model',\r\n                'www.asus.com/:region/displays-desktops/:productLine/:series/:model',\r\n                'www.asus.com/:region/laptops/:productLine/:series/:model',\r\n                'www.asus.com/:region/motherboards-components/:productLine/:series/:model',\r\n                'www.asus.com/:region/networking-iot-servers/:productLine/:series/:model',\r\n            ],\r\n            target: '/bios/:model',\r\n        },\r\n    ],\r\n    name: 'BIOS',\r\n    maintainers: ['Fatpandac'],\r\n    handler,\r\n    url: 'www.asus.com',\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const model = ctx.req.param('model');\r\n    const language = ctx.req.param('lang') ?? 'en';\r\n    const productInfo = await getProductInfo(model, language);\r\n    const biosAPI =\r\n        language === 'zh' ? `https://www.asus.com.cn/support/api/product.asmx/GetPDBIOS?website=cn&model=${model}&sitelang=cn` : `https://www.asus.com/support/api/product.asmx/GetPDBIOS?website=global&model=${model}&sitelang=en`;\r\n\r\n    const response = await ofetch(biosAPI);\r\n    const biosList = response.Result.Obj[0].Files;\r\n\r\n    const items = biosList.map((item) => ({\r\n        title: item.Title,\r\n        description: art(path.join(__dirname, 'templates/bios.art'), {\r\n            item,\r\n            language,\r\n        }),\r\n        guid: productInfo.url + item.Version,\r\n        pubDate: parseDate(item.ReleaseDate, 'YYYY/MM/DD'),\r\n        link: productInfo.url,\r\n    }));\r\n\r\n    return {\r\n        title: `${productInfo.title} BIOS`,\r\n        link: productInfo.url,\r\n        image: productInfo.image,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"oYAQA,MAAM,EAAY,CACd,GAAI,CACA,IAAK,+BACL,KAAM,KACN,YAAa,MAEjB,GAAI,CACA,IAAK,4BACL,KAAM,KACN,YAAa,WAIf,GAAkB,EAAO,IAAa,CACxC,IAAM,EAAkB,EAAU,IAAa,EAAU,GACnD,CAAE,MAAK,OAAM,eAAgB,EAE7B,EAAY,GAAG,EAAI,iEAAiE,EAAY,aAAa,EAAM,8CAA8C,IAEvK,OAAO,EAAM,OAAO,aAAa,EAAM,GAAG,IAAY,SAAY,CAC9D,IAAM,EAAW,MAAM,EAAO,GACxB,EAAU,EAAS,OAAO,GAAG,QAAQ,GAE3C,MAAO,CACH,UAAW,EAAQ,OACnB,OAAQ,EAAQ,OAChB,IAAK,EAAQ,IACb,MAAO,EAAQ,MACf,MAAO,EAAQ,SACf,KAAM,EAAQ,KACd,YAAa,EAAQ,gBAapB,EAAe,CACxB,KAAM,sBACN,WAAY,CAAC,kBACb,QAAS,yBACT,WAAY,CACR,MAAO,sCACP,KAAM,CACF,YAAa,+DACb,QAAS,CACL,CACI,MAAO,UACP,MAAO,MAEX,CACI,MAAO,SACP,MAAO,OAGf,QAAS,OAGjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CACJ,6DACA,mDACA,mEACA,kEACA,qEACA,2DACA,2EACA,2EAEJ,OAAQ,iBAGhB,KAAM,OACN,YAAa,CAAC,aACd,UACA,IAAK,gBAGT,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAQ,EAAI,IAAI,MAAM,SACtB,EAAW,EAAI,IAAI,MAAM,SAAW,KACpC,EAAc,MAAM,EAAe,EAAO,GAC1C,EACF,IAAa,KAAO,+EAA+E,EAAM,cAAgB,gFAAgF,EAAM,cAE7M,EAAW,MAAM,EAAO,GACxB,EAAW,EAAS,OAAO,IAAI,GAAG,MAElC,EAAQ,EAAS,IAAK,IAAU,CAClC,MAAO,EAAK,MACZ,YAAa,EAAI,EAAA,KAAA,EAAA,+BAA4C,CACzD,OACA,aAEJ,KAAM,EAAY,IAAM,EAAK,QAC7B,QAAS,EAAU,EAAK,YAAa,cACrC,KAAM,EAAY,OAGtB,MAAO,CACH,MAAO,GAAG,EAAY,MAAM,OAC5B,KAAM,EAAY,IAClB,MAAO,EAAY,MACnB,KAAM"}