{"version":3,"file":"utils-D9tUviZV.js","names":["URL"],"sources":["../../lib/routes/twitter/utils.ts"],"sourcesContent":["import URL from 'node:url';\r\nimport { config } from '@/config';\r\nimport { TwitterApi } from 'twitter-api-v2';\r\nimport { fallback, queryToBoolean, queryToInteger } from '@/utils/readable-social';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nconst getQueryParams = (url) => URL.parse(url, true).query;\r\nconst getOriginalImg = (url) => {\r\n    // https://greasyfork.org/zh-CN/scripts/2312-resize-image-on-open-image-in-new-tab/code#n150\r\n    let m = null;\r\n    if ((m = url.match(/^(https?:\\/\\/\\w+\\.twimg\\.com\\/media\\/[^/:]+)\\.(jpg|jpeg|gif|png|bmp|webp)(:\\w+)?$/i))) {\r\n        let format = m[2];\r\n        if (m[2] === 'jpeg') {\r\n            format = 'jpg';\r\n        }\r\n        return `${m[1]}?format=${format}&name=orig`;\r\n    } else if ((m = url.match(/^(https?:\\/\\/\\w+\\.twimg\\.com\\/.+)(\\?.+)$/i))) {\r\n        const pars = getQueryParams(url);\r\n        if (!pars.format || !pars.name) {\r\n            return url;\r\n        }\r\n        if (pars.name === 'orig') {\r\n            return url;\r\n        }\r\n        return m[1] + '?format=' + pars.format + '&name=orig';\r\n    } else {\r\n        return url;\r\n    }\r\n};\r\nconst replaceBreak = (text) => text.replaceAll(/<br><br>|<br>/g, ' ');\r\n\r\nconst formatText = (item) => {\r\n    let text = item.full_text;\r\n    const id_str = item.id_str || item.conversation_id_str;\r\n    const urls = item.entities.urls || [];\r\n    for (const url of urls) {\r\n        // trim link pointing to the tweet itself (usually appears when the tweet is truncated)\r\n        text = text.replaceAll(url.url, url.expanded_url?.endsWith(id_str) ? '' : url.expanded_url);\r\n    }\r\n    const media = item.extended_entities?.media || [];\r\n    for (const m of media) {\r\n        text = text.replaceAll(m.url, '');\r\n    }\r\n    return text.trim().replaceAll('\\n', '<br>');\r\n};\r\n\r\nconst ProcessFeed = (ctx, { data = [] }, params = {}) => {\r\n    // undefined and strings like \"exclude_rts_replies\" is also safely parsed, so no if branch is needed\r\n    const routeParams = new URLSearchParams(ctx.req.param('routeParams'));\r\n\r\n    const mergedParams = {\r\n        readable: fallback(params.readable, queryToBoolean(routeParams.get('readable')), false),\r\n        authorNameBold: fallback(params.authorNameBold, queryToBoolean(routeParams.get('authorNameBold')), false),\r\n        showAuthorInTitle: fallback(params.showAuthorInTitle, queryToBoolean(routeParams.get('showAuthorInTitle')), false),\r\n        showAuthorAsTitleOnly: fallback(params.showAuthorAsTitleOnly, queryToBoolean(routeParams.get('showAuthorAsTitleOnly')), false),\r\n        showAuthorInDesc: fallback(params.showAuthorInDesc, queryToBoolean(routeParams.get('showAuthorInDesc')), false),\r\n        showQuotedAuthorAvatarInDesc: fallback(params.showQuotedAuthorAvatarInDesc, queryToBoolean(routeParams.get('showQuotedAuthorAvatarInDesc')), false),\r\n        showAuthorAvatarInDesc: fallback(params.showAuthorAvatarInDesc, queryToBoolean(routeParams.get('showAuthorAvatarInDesc')), false),\r\n        showEmojiForRetweetAndReply: fallback(params.showEmojiForRetweetAndReply, queryToBoolean(routeParams.get('showEmojiForRetweetAndReply')), false),\r\n        showSymbolForRetweetAndReply: fallback(params.showSymbolForRetweetAndReply, queryToBoolean(routeParams.get('showSymbolForRetweetAndReply')), true),\r\n        showRetweetTextInTitle: fallback(params.showRetweetTextInTitle, queryToBoolean(routeParams.get('showRetweetTextInTitle')), true),\r\n        addLinkForPics: fallback(params.addLinkForPics, queryToBoolean(routeParams.get('addLinkForPics')), false),\r\n        showTimestampInDescription: fallback(params.showTimestampInDescription, queryToBoolean(routeParams.get('showTimestampInDescription')), false),\r\n        showQuotedInTitle: fallback(params.showQuotedInTitle, queryToBoolean(routeParams.get('showQuotedInTitle')), false),\r\n\r\n        widthOfPics: fallback(params.widthOfPics, queryToInteger(routeParams.get('widthOfPics')), -1),\r\n        heightOfPics: fallback(params.heightOfPics, queryToInteger(routeParams.get('heightOfPics')), -1),\r\n        sizeOfAuthorAvatar: fallback(params.sizeOfAuthorAvatar, queryToInteger(routeParams.get('sizeOfAuthorAvatar')), 48),\r\n        sizeOfQuotedAuthorAvatar: fallback(params.sizeOfQuotedAuthorAvatar, queryToInteger(routeParams.get('sizeOfQuotedAuthorAvatar')), 24),\r\n        mediaNumber: fallback(params.mediaNumber, queryToInteger(routeParams.get('mediaNumber')), false),\r\n    };\r\n\r\n    params = mergedParams;\r\n\r\n    const {\r\n        readable,\r\n        authorNameBold,\r\n        showAuthorInTitle,\r\n        showAuthorAsTitleOnly,\r\n        showAuthorInDesc,\r\n        showQuotedAuthorAvatarInDesc,\r\n        showAuthorAvatarInDesc,\r\n        showEmojiForRetweetAndReply,\r\n        showSymbolForRetweetAndReply,\r\n        showRetweetTextInTitle,\r\n        addLinkForPics,\r\n        showTimestampInDescription,\r\n        showQuotedInTitle,\r\n        mediaNumber,\r\n        widthOfPics,\r\n        heightOfPics,\r\n        sizeOfAuthorAvatar,\r\n        sizeOfQuotedAuthorAvatar,\r\n    } = params;\r\n\r\n    const formatVideo = (media, extraAttrs = '') => {\r\n        let content = '';\r\n        let bestVideo = null;\r\n\r\n        for (const item of media.video_info.variants) {\r\n            if (!bestVideo || (item.bitrate || 0) > (bestVideo.bitrate || -Infinity)) {\r\n                bestVideo = item;\r\n            }\r\n        }\r\n\r\n        if (bestVideo && bestVideo.url) {\r\n            const gifAutoPlayAttr = media.type === 'animated_gif' ? `autoplay loop muted webkit-playsinline playsinline` : '';\r\n            if (!readable) {\r\n                content += '<br>';\r\n            }\r\n            content += `<video width=\"${media.sizes.large.w}\" height=\"${media.sizes.large.h}\" src='${bestVideo.url}' ${gifAutoPlayAttr} controls='controls' poster='${getOriginalImg(media.media_url_https)}' ${extraAttrs}></video>`;\r\n        }\r\n\r\n        return content;\r\n    };\r\n\r\n    const formatMedia = (item) => {\r\n        let img = '';\r\n        if (item.extended_entities) {\r\n            const mediaCount = item.extended_entities.media.length;\r\n            let index = 1;\r\n            for (const media of item.extended_entities.media) {\r\n                // https://developer.x.com/en/docs/tweets/data-dictionary/overview/extended-entities-object\r\n                let content = '';\r\n                let style = '';\r\n                let originalImg;\r\n                switch (media.type) {\r\n                    case 'animated_gif':\r\n                    case 'video':\r\n                        content = formatVideo(media);\r\n                        break;\r\n\r\n                    case 'photo':\r\n                    default:\r\n                        originalImg = getOriginalImg(media.media_url_https);\r\n                        if (!readable) {\r\n                            content += `<br>`;\r\n                        }\r\n                        if (addLinkForPics) {\r\n                            content += `<a href='${originalImg}' target='_blank' rel='noopener noreferrer'>`;\r\n                        }\r\n                        content += `<img `;\r\n                        if (widthOfPics >= 0) {\r\n                            content += ` width=\"${widthOfPics}\"`;\r\n                            style += `width: ${widthOfPics}px;`;\r\n                        }\r\n                        if (heightOfPics > 0) {\r\n                            content += `height=\"${heightOfPics}\" `;\r\n                            style += `height: ${heightOfPics}px;`;\r\n                        }\r\n                        if (widthOfPics <= 0 && heightOfPics <= 0) {\r\n                            content += `width=\"${media.sizes.large.w}\" height=\"${media.sizes.large.h}\" `;\r\n                        }\r\n                        content += ` style=\"${style}\" ` + `${readable ? 'hspace=\"4\" vspace=\"8\"' : ''} src=\"${originalImg}\">`;\r\n                        if (addLinkForPics) {\r\n                            content += `</a>`;\r\n                        }\r\n                        break;\r\n                }\r\n\r\n                img += content;\r\n\r\n                if (mediaNumber) {\r\n                    img += `<p style=\"text-align:center\">${index}/${mediaCount}</p>`;\r\n                    index++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (readable && img) {\r\n            img = `<br clear='both' /><div style='clear: both'></div>` + img;\r\n        }\r\n        return img;\r\n    };\r\n\r\n    const generatePicsPrefix = (item) => {\r\n        // When author avatar is shown, generate invisible <img> for inner images at the beginning of HTML\r\n        // to please some RSS readers\r\n        let picsPrefix = '';\r\n        if (item.extended_entities) {\r\n            for (const media of item.extended_entities.media) {\r\n                let content;\r\n                let originalImg;\r\n                switch (media.type) {\r\n                    case 'video':\r\n                        content = formatVideo(media, `width=\"0\" height=\"0\"`);\r\n                        break;\r\n\r\n                    case 'photo':\r\n                    default:\r\n                        originalImg = getOriginalImg(media.media_url_https);\r\n                        content = `<img width='0' height='0' hidden='true' src='${originalImg}'>`;\r\n                        break;\r\n                }\r\n\r\n                picsPrefix += content;\r\n            }\r\n        }\r\n        return picsPrefix;\r\n    };\r\n\r\n    return data.map((item) => {\r\n        const originalItem = item;\r\n        item = item.retweeted_status || item;\r\n        item.full_text = item.full_text || item.text;\r\n        item.full_text = formatText(item);\r\n        const img = formatMedia(item);\r\n        let picsPrefix = generatePicsPrefix(item);\r\n        let quote = '';\r\n        let quoteInTitle = '';\r\n\r\n        // Make quote in description\r\n        if (item.is_quote_status) {\r\n            const quoteData = item.quoted_status;\r\n\r\n            if (quoteData) {\r\n                quoteData.full_text = quoteData.full_text || quoteData.text;\r\n                const author = quoteData.user;\r\n                quote += '<div class=\"rsshub-quote\">';\r\n                if (readable) {\r\n                    quote += `<br clear='both' /><div style='clear: both'></div>`;\r\n                    quote += `<blockquote style='background: #80808010;border-top:1px solid #80808030;border-bottom:1px solid #80808030;margin:0;padding:5px 20px;'>`;\r\n                } else {\r\n                    quote += `<br><br>`;\r\n                }\r\n\r\n                if (readable) {\r\n                    quote += `<a href='https://x.com/${author.screen_name}' target='_blank' rel='noopener noreferrer'>`;\r\n                }\r\n\r\n                if (showQuotedAuthorAvatarInDesc) {\r\n                    quote += `<img width='${sizeOfQuotedAuthorAvatar}' height='${sizeOfQuotedAuthorAvatar}' src='${author.profile_image_url_https}' ${readable ? 'hspace=\"8\" vspace=\"8\" align=\"left\"' : ''}>`;\r\n                }\r\n\r\n                if (authorNameBold) {\r\n                    quote += `<strong>`;\r\n                }\r\n\r\n                quote += author.name;\r\n\r\n                if (authorNameBold) {\r\n                    quote += `</strong>`;\r\n                }\r\n\r\n                if (readable) {\r\n                    quote += `</a>`;\r\n                }\r\n\r\n                quote += `:&ensp;`;\r\n                quote += formatText(quoteData);\r\n\r\n                if (!readable) {\r\n                    quote += '<br>';\r\n                }\r\n                quote += formatMedia(quoteData);\r\n                picsPrefix += generatePicsPrefix(quoteData);\r\n                quoteInTitle += showEmojiForRetweetAndReply ? ' 💬 ' : showSymbolForRetweetAndReply ? ' RT ' : '';\r\n                quoteInTitle += `${author.name}: ${formatText(quoteData)}`;\r\n\r\n                if (readable) {\r\n                    quote += `<br><small>Link: <a href='https://x.com/${author.screen_name}/status/${quoteData.id_str || quoteData.conversation_id_str}' target='_blank' rel='noopener noreferrer'>https://x.com/${\r\n                        author.screen_name\r\n                    }/status/${quoteData.id_str || quoteData.conversation_id_str}</a></small>`;\r\n                }\r\n                if (showTimestampInDescription) {\r\n                    quote += '<br><small>' + parseDate(quoteData.created_at);\r\n                    quote += `</small>`;\r\n                    if (readable) {\r\n                        quote += `<br clear='both' /><div style='clear: both'></div>`;\r\n                    }\r\n                }\r\n\r\n                if (readable) {\r\n                    quote += `</blockquote>`;\r\n                }\r\n                quote += '</div>';\r\n            }\r\n        }\r\n\r\n        // Make title\r\n        let title = '';\r\n        if (showAuthorInTitle) {\r\n            title += originalItem.user?.name + ': ';\r\n        }\r\n        const isRetweet = originalItem !== item;\r\n        const isQuote = item.is_quote_status;\r\n        if (!isRetweet && (!isQuote || showRetweetTextInTitle)) {\r\n            if (item.in_reply_to_screen_name) {\r\n                title += showEmojiForRetweetAndReply ? '↩️ ' : showSymbolForRetweetAndReply ? 'Re ' : '';\r\n            }\r\n            title += replaceBreak(originalItem.full_text);\r\n        }\r\n        if (isRetweet) {\r\n            title += showEmojiForRetweetAndReply ? '🔁 ' : showSymbolForRetweetAndReply ? 'RT ' : '';\r\n            title += item.user.name + ': ';\r\n            if (item.in_reply_to_screen_name) {\r\n                title += showEmojiForRetweetAndReply ? ' ↩️ ' : showSymbolForRetweetAndReply ? ' Re ' : '';\r\n            }\r\n            title += replaceBreak(item.full_text);\r\n        }\r\n\r\n        if (showQuotedInTitle) {\r\n            title += quoteInTitle;\r\n        }\r\n\r\n        if (showAuthorAsTitleOnly) {\r\n            title = originalItem.user?.name;\r\n        }\r\n\r\n        // Make description\r\n        let description = '';\r\n        if (showAuthorInDesc && showAuthorAvatarInDesc) {\r\n            description += picsPrefix;\r\n        }\r\n        if (isRetweet) {\r\n            if (showAuthorInDesc) {\r\n                if (readable) {\r\n                    description += '<small>';\r\n                    description += `<a href='https://x.com/${originalItem.user?.screen_name}' target='_blank' rel='noopener noreferrer'>`;\r\n                }\r\n                if (authorNameBold) {\r\n                    description += `<strong>`;\r\n                }\r\n                description += originalItem.user?.name;\r\n                if (authorNameBold) {\r\n                    description += `</strong>`;\r\n                }\r\n                if (readable) {\r\n                    description += '</a>';\r\n                }\r\n                description += '&ensp;';\r\n            }\r\n            description += showEmojiForRetweetAndReply ? '🔁' : showSymbolForRetweetAndReply ? 'RT' : '';\r\n            if (!showAuthorInDesc) {\r\n                description += '&ensp;';\r\n                if (readable) {\r\n                    description += `<a href='https://x.com/${item.user?.screen_name}' target='_blank' rel='noopener noreferrer'>`;\r\n                }\r\n                if (authorNameBold) {\r\n                    description += `<strong>`;\r\n                }\r\n                description += item.user?.name;\r\n                if (authorNameBold) {\r\n                    description += `</strong>`;\r\n                }\r\n                if (readable) {\r\n                    description += '</a>';\r\n                }\r\n            }\r\n            if (readable) {\r\n                description += '</small>';\r\n            }\r\n            description += '<br>';\r\n        }\r\n        if (showAuthorInDesc) {\r\n            if (readable) {\r\n                description += `<a href='https://x.com/${item.user?.screen_name}' target='_blank' rel='noopener noreferrer'>`;\r\n            }\r\n\r\n            if (showAuthorAvatarInDesc) {\r\n                description += `<img width='${sizeOfAuthorAvatar}' height='${sizeOfAuthorAvatar}' src='${item.user.profile_image_url_https}' ${readable ? 'hspace=\"8\" vspace=\"8\" align=\"left\"' : ''}>`;\r\n            }\r\n            if (authorNameBold) {\r\n                description += `<strong>`;\r\n            }\r\n            description += item.user?.name;\r\n            if (authorNameBold) {\r\n                description += `</strong>`;\r\n            }\r\n            if (readable) {\r\n                description += `</a>`;\r\n            }\r\n            description += `:&ensp;`;\r\n        }\r\n        if (item.in_reply_to_screen_name) {\r\n            description += showEmojiForRetweetAndReply ? '↩️ ' : showSymbolForRetweetAndReply ? 'Re ' : '';\r\n        }\r\n\r\n        description += item.full_text;\r\n        // 从 description 提取 话题作为 category，放在此处是为了避免 匹配到 quote 中的 # 80808030 颜色字符\r\n        const category = description.match(/(\\s)?(#[^\\s;<]+)/g)?.map((e) => e?.match(/#([^\\s<]+)/)?.[1]);\r\n        description += img;\r\n        description += quote;\r\n        if (readable) {\r\n            description += `<br clear='both' /><div style='clear: both'></div>`;\r\n        }\r\n\r\n        if (showTimestampInDescription) {\r\n            if (readable) {\r\n                description += `<hr>`;\r\n            }\r\n            description += `<small>${parseDate(item.created_at)}</small>`;\r\n        }\r\n\r\n        const link =\r\n            originalItem.user?.screen_name && (originalItem.id_str || originalItem.conversation_id_str)\r\n                ? `https://x.com/${originalItem.user?.screen_name}/status/${originalItem.id_str || originalItem.conversation_id_str}`\r\n                : `https://x.com/${item.user?.screen_name}/status/${item.id_str || item.conversation_id_str}`;\r\n        return {\r\n            title,\r\n            author: [\r\n                {\r\n                    name: originalItem.user?.name,\r\n                    url: `https://x.com/${originalItem.user?.screen_name}`,\r\n                    avatar: originalItem.user?.profile_image_url_https,\r\n                },\r\n            ],\r\n            description,\r\n            pubDate: parseDate(item.created_at),\r\n            link,\r\n            guid: link.replace('x.com', 'twitter.com'),\r\n            category,\r\n            _extra:\r\n                (isRetweet && {\r\n                    links: [\r\n                        {\r\n                            url: `https://x.com/${item.user?.screen_name || userScreenName}/status/${item.conversation_id_str}`,\r\n                            type: 'repost',\r\n                        },\r\n                    ],\r\n                }) ||\r\n                (item.is_quote_status && {\r\n                    links: [\r\n                        {\r\n                            url: `https://x.com/${item.quoted_status?.user?.screen_name}/status/${item.quoted_status?.id_str || item.quoted_status?.conversation_id_str}`,\r\n                            type: 'quote',\r\n                        },\r\n                    ],\r\n                }) ||\r\n                (item.in_reply_to_screen_name &&\r\n                    item.in_reply_to_status_id_str && {\r\n                        links: [\r\n                            {\r\n                                url: `https://x.com/${item.in_reply_to_screen_name}/status/${item.in_reply_to_status_id_str}`,\r\n                                type: 'reply',\r\n                            },\r\n                        ],\r\n                    }),\r\n        };\r\n    });\r\n};\r\n\r\nlet getAppClient = () => null;\r\n\r\nif (config.twitter.consumer_key && config.twitter.consumer_secret) {\r\n    const consumer_keys = config.twitter.consumer_key.split(',');\r\n    const consumer_secrets = config.twitter.consumer_secret.split(',');\r\n    const T = {};\r\n    let count = 0;\r\n    let index = -1;\r\n\r\n    for (const [i, consumer_key] of consumer_keys.entries()) {\r\n        const consumer_secret = consumer_secrets[i];\r\n        if (consumer_key && consumer_secret) {\r\n            T[i] = new TwitterApi({\r\n                appKey: consumer_key,\r\n                appSecret: consumer_secret,\r\n            }).readOnly;\r\n            count = i + 1;\r\n        }\r\n    }\r\n\r\n    getAppClient = () => {\r\n        index++;\r\n        return T[index % count].appLogin();\r\n    };\r\n}\r\n\r\nconst parseRouteParams = (routeParams) => {\r\n    let count, include_replies, include_rts, only_media;\r\n    let force_web_api = false;\r\n    switch (routeParams) {\r\n        case 'exclude_rts_replies':\r\n        case 'exclude_replies_rts':\r\n            include_replies = false;\r\n            include_rts = false;\r\n\r\n            break;\r\n\r\n        case 'include_replies':\r\n            include_replies = true;\r\n            include_rts = true;\r\n\r\n            break;\r\n\r\n        case 'exclude_rts':\r\n            include_replies = false;\r\n            include_rts = false;\r\n\r\n            break;\r\n\r\n        default: {\r\n            const parsed = new URLSearchParams(routeParams);\r\n            count = fallback(undefined, queryToInteger(parsed.get('count')));\r\n            include_replies = fallback(undefined, queryToBoolean(parsed.get('includeReplies')), false);\r\n            include_rts = fallback(undefined, queryToBoolean(parsed.get('includeRts')), true);\r\n            force_web_api = fallback(undefined, queryToBoolean(parsed.get('forceWebApi')), false);\r\n            only_media = fallback(undefined, queryToBoolean(parsed.get('onlyMedia')), false);\r\n        }\r\n    }\r\n    return { count, include_replies, include_rts, force_web_api, only_media };\r\n};\r\n\r\nexport const excludeRetweet = function (tweets) {\r\n    const excluded = [];\r\n    for (const t of tweets) {\r\n        if (t.retweeted_status) {\r\n            continue;\r\n        }\r\n        excluded.push(t);\r\n    }\r\n    return excluded;\r\n};\r\n\r\nexport const keepOnlyMedia = function (tweets) {\r\n    const excluded = tweets.filter((t) => t.extended_entities && t.extended_entities.media);\r\n    return excluded;\r\n};\r\n\r\nexport default { ProcessFeed, getAppClient, parseRouteParams, excludeRetweet, keepOnlyMedia };\r\n"],"mappings":"wQAMA,MAAM,EAAkB,GAAQA,EAAI,MAAM,EAAK,IAAM,MAC/C,EAAkB,GAAQ,CAE5B,IAAI,EAAI,KACR,GAAK,EAAI,EAAI,MAAM,sFAAwF,CACvG,IAAI,EAAS,EAAE,GAIf,OAHI,EAAE,KAAO,SACT,EAAS,OAEN,GAAG,EAAE,GAAG,UAAU,EAAO,oBACxB,EAAI,EAAI,MAAM,6CAA+C,CACrE,IAAM,EAAO,EAAe,GAO5B,MANI,CAAC,EAAK,QAAU,CAAC,EAAK,MAGtB,EAAK,OAAS,OACP,EAEJ,EAAE,GAAK,WAAa,EAAK,OAAS,kBAEzC,OAAO,GAGT,EAAgB,GAAS,EAAK,WAAW,iBAAkB,KAE3D,EAAc,GAAS,CACzB,IAAI,EAAO,EAAK,UACV,EAAS,EAAK,QAAU,EAAK,oBAC7B,EAAO,EAAK,SAAS,MAAQ,GACnC,IAAK,IAAM,KAAO,EAEd,EAAO,EAAK,WAAW,EAAI,IAAK,EAAI,cAAc,SAAS,GAAU,GAAK,EAAI,cAElF,IAAM,EAAQ,EAAK,mBAAmB,OAAS,GAC/C,IAAK,IAAM,KAAK,EACZ,EAAO,EAAK,WAAW,EAAE,IAAK,IAElC,OAAO,EAAK,OAAO,WAAW;EAAM,SAGlC,GAAe,EAAK,CAAE,OAAO,IAAM,EAAS,KAAO,CAErD,IAAM,EAAc,IAAI,gBAAgB,EAAI,IAAI,MAAM,gBAEhD,EAAe,CACjB,SAAU,EAAS,EAAO,SAAU,EAAe,EAAY,IAAI,aAAc,IACjF,eAAgB,EAAS,EAAO,eAAgB,EAAe,EAAY,IAAI,mBAAoB,IACnG,kBAAmB,EAAS,EAAO,kBAAmB,EAAe,EAAY,IAAI,sBAAuB,IAC5G,sBAAuB,EAAS,EAAO,sBAAuB,EAAe,EAAY,IAAI,0BAA2B,IACxH,iBAAkB,EAAS,EAAO,iBAAkB,EAAe,EAAY,IAAI,qBAAsB,IACzG,6BAA8B,EAAS,EAAO,6BAA8B,EAAe,EAAY,IAAI,iCAAkC,IAC7I,uBAAwB,EAAS,EAAO,uBAAwB,EAAe,EAAY,IAAI,2BAA4B,IAC3H,4BAA6B,EAAS,EAAO,4BAA6B,EAAe,EAAY,IAAI,gCAAiC,IAC1I,6BAA8B,EAAS,EAAO,6BAA8B,EAAe,EAAY,IAAI,iCAAkC,IAC7I,uBAAwB,EAAS,EAAO,uBAAwB,EAAe,EAAY,IAAI,2BAA4B,IAC3H,eAAgB,EAAS,EAAO,eAAgB,EAAe,EAAY,IAAI,mBAAoB,IACnG,2BAA4B,EAAS,EAAO,2BAA4B,EAAe,EAAY,IAAI,+BAAgC,IACvI,kBAAmB,EAAS,EAAO,kBAAmB,EAAe,EAAY,IAAI,sBAAuB,IAE5G,YAAa,EAAS,EAAO,YAAa,EAAe,EAAY,IAAI,gBAAiB,IAC1F,aAAc,EAAS,EAAO,aAAc,EAAe,EAAY,IAAI,iBAAkB,IAC7F,mBAAoB,EAAS,EAAO,mBAAoB,EAAe,EAAY,IAAI,uBAAwB,IAC/G,yBAA0B,EAAS,EAAO,yBAA0B,EAAe,EAAY,IAAI,6BAA8B,IACjI,YAAa,EAAS,EAAO,YAAa,EAAe,EAAY,IAAI,gBAAiB,KAG9F,EAAS,EAET,GAAM,CACF,WACA,iBACA,oBACA,wBACA,mBACA,+BACA,yBACA,8BACA,+BACA,yBACA,iBACA,6BACA,oBACA,cACA,cACA,eACA,qBACA,4BACA,EAEE,GAAe,EAAO,EAAa,KAAO,CAC5C,IAAI,EAAU,GACV,EAAY,KAEhB,IAAK,IAAM,KAAQ,EAAM,WAAW,UAC5B,CAAC,IAAc,EAAK,SAAW,IAAM,EAAU,SAAW,SAC1D,EAAY,GAIpB,GAAI,GAAa,EAAU,IAAK,CAC5B,IAAM,EAAkB,EAAM,OAAS,eAAiB,qDAAuD,GAC1G,IACD,GAAW,QAEf,GAAW,iBAAiB,EAAM,MAAM,MAAM,EAAE,YAAY,EAAM,MAAM,MAAM,EAAE,SAAS,EAAU,IAAI,IAAI,EAAgB,+BAA+B,EAAe,EAAM,iBAAiB,IAAI,EAAW,WAGnN,OAAO,GAGL,EAAe,GAAS,CAC1B,IAAI,EAAM,GACV,GAAI,EAAK,kBAAmB,CACxB,IAAM,EAAa,EAAK,kBAAkB,MAAM,OAC5C,EAAQ,EACZ,IAAK,IAAM,KAAS,EAAK,kBAAkB,MAAO,CAE9C,IAAI,EAAU,GACV,EAAQ,GACR,EACJ,OAAQ,EAAM,KAAd,CACI,IAAK,eACL,IAAK,QACD,EAAU,EAAY,GACtB,MAEJ,IAAK,QACL,QACI,EAAc,EAAe,EAAM,iBAC9B,IACD,GAAW,QAEX,IACA,GAAW,YAAY,EAAY,+CAEvC,GAAW,QACP,GAAe,IACf,GAAW,WAAW,EAAY,GAClC,GAAS,UAAU,EAAY,MAE/B,EAAe,IACf,GAAW,WAAW,EAAa,IACnC,GAAS,WAAW,EAAa,MAEjC,GAAe,GAAK,GAAgB,IACpC,GAAW,UAAU,EAAM,MAAM,MAAM,EAAE,YAAY,EAAM,MAAM,MAAM,EAAE,KAE7E,GAAW,WAAW,EAAM,IAAS,EAAW,wBAA0B,GAAG,QAAQ,EAAY,IAC7F,IACA,GAAW,QAEf,MAGR,GAAO,EAEH,IACA,GAAO,gCAAgC,EAAM,GAAG,EAAW,MAC3D,MAQZ,OAHI,GAAY,IACZ,EAAM,qDAAuD,GAE1D,GAGL,EAAsB,GAAS,CAGjC,IAAI,EAAa,GACjB,GAAI,EAAK,kBACL,IAAK,IAAM,KAAS,EAAK,kBAAkB,MAAO,CAC9C,IAAI,EACA,EACJ,OAAQ,EAAM,KAAd,CACI,IAAK,QACD,EAAU,EAAY,EAAO,wBAC7B,MAEJ,IAAK,QACL,QACI,EAAc,EAAe,EAAM,iBACnC,EAAU,gDAAgD,EAAY,IACtE,MAGR,GAAc,EAGtB,OAAO,GAGX,OAAO,EAAK,IAAK,GAAS,CACtB,IAAM,EAAe,EACrB,EAAO,EAAK,kBAAoB,EAChC,EAAK,UAAY,EAAK,WAAa,EAAK,KACxC,EAAK,UAAY,EAAW,GAC5B,IAAM,EAAM,EAAY,GACpB,EAAa,EAAmB,GAChC,EAAQ,GACR,EAAe,GAGnB,GAAI,EAAK,gBAAiB,CACtB,IAAM,EAAY,EAAK,cAEvB,GAAI,EAAW,CACX,EAAU,UAAY,EAAU,WAAa,EAAU,KACvD,IAAM,EAAS,EAAU,KACzB,GAAS,6BACL,GACA,GAAS,qDACT,GAAS,0IAET,GAAS,WAGT,IACA,GAAS,0BAA0B,EAAO,YAAY,+CAGtD,IACA,GAAS,eAAe,EAAyB,YAAY,EAAyB,SAAS,EAAO,wBAAwB,IAAI,EAAW,qCAAuC,GAAG,IAGvL,IACA,GAAS,YAGb,GAAS,EAAO,KAEZ,IACA,GAAS,aAGT,IACA,GAAS,QAGb,GAAS,UACT,GAAS,EAAW,GAEf,IACD,GAAS,QAEb,GAAS,EAAY,GACrB,GAAc,EAAmB,GACjC,GAAgB,EAA8B,OAAS,EAA+B,OAAS,GAC/F,GAAgB,GAAG,EAAO,KAAK,IAAI,EAAW,KAE1C,IACA,GAAS,2CAA2C,EAAO,YAAY,UAAU,EAAU,QAAU,EAAU,oBAAoB,4DAC/H,EAAO,YACV,UAAU,EAAU,QAAU,EAAU,oBAAoB,eAE7D,IACA,GAAS,cAAgB,EAAU,EAAU,YAC7C,GAAS,WACL,IACA,GAAS,uDAIb,IACA,GAAS,iBAEb,GAAS,UAKjB,IAAI,EAAQ,GACR,IACA,GAAS,EAAa,MAAM,KAAO,MAEvC,IAAM,EAAY,IAAiB,EAC7B,EAAU,EAAK,gBACjB,CAAC,IAAc,CAAC,GAAW,KACvB,EAAK,0BACL,GAAS,EAA8B,MAAQ,EAA+B,MAAQ,IAE1F,GAAS,EAAa,EAAa,YAEnC,IACA,GAAS,EAA8B,MAAQ,EAA+B,MAAQ,GACtF,GAAS,EAAK,KAAK,KAAO,KACtB,EAAK,0BACL,GAAS,EAA8B,OAAS,EAA+B,OAAS,IAE5F,GAAS,EAAa,EAAK,YAG3B,IACA,GAAS,GAGT,IACA,EAAQ,EAAa,MAAM,MAI/B,IAAI,EAAc,GACd,GAAoB,IACpB,GAAe,GAEf,IACI,IACI,IACA,GAAe,UACf,GAAe,0BAA0B,EAAa,MAAM,YAAY,+CAExE,IACA,GAAe,YAEnB,GAAe,EAAa,MAAM,KAC9B,IACA,GAAe,aAEf,IACA,GAAe,QAEnB,GAAe,UAEnB,GAAe,EAA8B,KAAO,EAA+B,KAAO,GACrF,IACD,GAAe,SACX,IACA,GAAe,0BAA0B,EAAK,MAAM,YAAY,+CAEhE,IACA,GAAe,YAEnB,GAAe,EAAK,MAAM,KACtB,IACA,GAAe,aAEf,IACA,GAAe,SAGnB,IACA,GAAe,YAEnB,GAAe,QAEf,IACI,IACA,GAAe,0BAA0B,EAAK,MAAM,YAAY,+CAGhE,IACA,GAAe,eAAe,EAAmB,YAAY,EAAmB,SAAS,EAAK,KAAK,wBAAwB,IAAI,EAAW,qCAAuC,GAAG,IAEpL,IACA,GAAe,YAEnB,GAAe,EAAK,MAAM,KACtB,IACA,GAAe,aAEf,IACA,GAAe,QAEnB,GAAe,WAEf,EAAK,0BACL,GAAe,EAA8B,MAAQ,EAA+B,MAAQ,IAGhG,GAAe,EAAK,UAEpB,IAAM,EAAW,EAAY,MAAM,sBAAsB,IAAK,GAAM,GAAG,MAAM,gBAAgB,IAC7F,GAAe,EACf,GAAe,EACX,IACA,GAAe,sDAGf,IACI,IACA,GAAe,QAEnB,GAAe,UAAU,EAAU,EAAK,YAAY,WAGxD,IAAM,EACF,EAAa,MAAM,cAAgB,EAAa,QAAU,EAAa,qBACjE,iBAAiB,EAAa,MAAM,YAAY,UAAU,EAAa,QAAU,EAAa,sBAC9F,iBAAiB,EAAK,MAAM,YAAY,UAAU,EAAK,QAAU,EAAK,sBAChF,MAAO,CACH,QACA,OAAQ,CACJ,CACI,KAAM,EAAa,MAAM,KACzB,IAAK,iBAAiB,EAAa,MAAM,cACzC,OAAQ,EAAa,MAAM,0BAGnC,cACA,QAAS,EAAU,EAAK,YACxB,OACA,KAAM,EAAK,QAAQ,QAAS,eAC5B,WACA,OACK,GAAa,CACV,MAAO,CACH,CACI,IAAK,iBAAiB,EAAK,MAAM,aAAe,eAAe,UAAU,EAAK,sBAC9E,KAAM,aAIjB,EAAK,iBAAmB,CACrB,MAAO,CACH,CACI,IAAK,iBAAiB,EAAK,eAAe,MAAM,YAAY,UAAU,EAAK,eAAe,QAAU,EAAK,eAAe,sBACxH,KAAM,YAIjB,EAAK,yBACF,EAAK,2BAA6B,CAC9B,MAAO,CACH,CACI,IAAK,iBAAiB,EAAK,wBAAwB,UAAU,EAAK,4BAClE,KAAM,eAQtC,IAAI,MAAqB,KAEzB,GAAI,EAAO,QAAQ,cAAgB,EAAO,QAAQ,gBAAiB,CAC/D,IAAM,EAAgB,EAAO,QAAQ,aAAa,MAAM,KAClD,EAAmB,EAAO,QAAQ,gBAAgB,MAAM,KACxD,EAAI,GACN,EAAQ,EACR,EAAQ,GAEZ,IAAK,GAAM,CAAC,EAAG,KAAiB,EAAc,UAAW,CACrD,IAAM,EAAkB,EAAiB,GACrC,GAAgB,IAChB,EAAE,GAAK,IAAI,EAAW,CAClB,OAAQ,EACR,UAAW,IACZ,SACH,EAAQ,EAAI,GAIpB,OACI,IACO,EAAE,EAAQ,GAAO,YAIhC,MAAM,EAAoB,GAAgB,CACtC,IAAI,EAAO,EAAiB,EAAa,EACrC,EAAgB,GACpB,OAAQ,EAAR,CACI,IAAK,sBACL,IAAK,sBACD,EAAkB,GAClB,EAAc,GAEd,MAEJ,IAAK,kBACD,EAAkB,GAClB,EAAc,GAEd,MAEJ,IAAK,cACD,EAAkB,GAClB,EAAc,GAEd,MAEJ,QAAS,CACL,IAAM,EAAS,IAAI,gBAAgB,GACnC,EAAQ,EAAS,IAAA,GAAW,EAAe,EAAO,IAAI,WACtD,EAAkB,EAAS,IAAA,GAAW,EAAe,EAAO,IAAI,mBAAoB,IACpF,EAAc,EAAS,IAAA,GAAW,EAAe,EAAO,IAAI,eAAgB,IAC5E,EAAgB,EAAS,IAAA,GAAW,EAAe,EAAO,IAAI,gBAAiB,IAC/E,EAAa,EAAS,IAAA,GAAW,EAAe,EAAO,IAAI,cAAe,KAGlF,MAAO,CAAE,QAAO,kBAAiB,cAAa,gBAAe,eAGpD,EAAiB,SAAU,EAAQ,CAC5C,IAAM,EAAW,GACjB,IAAK,IAAM,KAAK,EAAQ,CACpB,GAAI,EAAE,iBACF,SAEJ,EAAS,KAAK,GAElB,OAAO,GAGE,EAAgB,SAAU,EAAQ,CAC3C,IAAM,EAAW,EAAO,OAAQ,GAAM,EAAE,mBAAqB,EAAE,kBAAkB,OACjF,OAAO,GAGX,IAAA,EAAe,CAAE,cAAa,eAAc,mBAAkB,iBAAgB"}