{"version":3,"file":"theblock-C3d2NMRy.js","names":["route: Route","ofetch","cache","error: any"],"sources":["../../lib/routes/theblock/index.ts"],"sourcesContent":["import { Route, Data } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { load } from 'cheerio';\r\nimport logger from '@/utils/logger';\r\n\r\nexport const route: Route = {\r\n    path: '/category/:category',\r\n    categories: ['finance'],\r\n    example: '/theblock/category/crypto-ecosystems',\r\n    parameters: { category: 'News category' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Category',\r\n    maintainers: ['pseudoyu'],\r\n    handler,\r\n    radar: [\r\n        {\r\n            source: ['theblock.co/category/:category'],\r\n            target: '/category/:category',\r\n        },\r\n    ],\r\n    description: 'Get latest news from TheBlock by category. Note that due to website limitations, only article summaries may be available.',\r\n};\r\n\r\nasync function handler(ctx): Promise<Data> {\r\n    const category = ctx.req.param('category');\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit')) : 10;\r\n\r\n    const apiUrl = `https://www.theblock.co/api/category/${category}`;\r\n\r\n    try {\r\n        const response = await ofetch(apiUrl);\r\n\r\n        // Extract articles from the nested data structure\r\n        const articles = response.data?.articles || [];\r\n\r\n        if (!articles.length) {\r\n            throw new Error(`No articles found for category: ${category}`);\r\n        }\r\n\r\n        const items = await Promise.all(\r\n            articles.slice(0, limit).map((article) =>\r\n                cache.tryGet(`theblock:article:${article.url}`, async () => {\r\n                    try {\r\n                        // Try to get the full article\r\n                        const articleResponse = await ofetch(`https://www.theblock.co/api/post/${article.id}/`);\r\n\r\n                        const post = articleResponse.post;\r\n                        const $ = load(post.body, null, false);\r\n\r\n                        // If we successfully got the article content\r\n                        if (post.body.length) {\r\n                            // Remove unwanted elements\r\n                            $('.copyright').remove();\r\n\r\n                            let fullText = '';\r\n\r\n                            if (article.thumbnail) {\r\n                                fullText += `<p><img src=\"${post.thumbnail}\" alt=\"${article.title}\"></p>`;\r\n                            }\r\n                            fullText += post.intro + $.html();\r\n\r\n                            if (fullText) {\r\n                                return {\r\n                                    title: article.title,\r\n                                    link: article.url,\r\n                                    pubDate: parseDate(post.published),\r\n                                    description: fullText,\r\n                                    author: article.authors?.map((a) => a.name).join(', ') || 'TheBlock',\r\n                                    category: [...new Set([post.categories.name, ...post.categories.map((cat) => cat.name), ...post.tags.map((tag) => tag.name)])],\r\n                                    guid: article.url,\r\n                                    image: article.thumbnail,\r\n                                };\r\n                            }\r\n                        }\r\n\r\n                        // If we couldn't extract specific content, fall back to a summary-based approach\r\n                        logger.info(`Using summary-based approach for article: ${article.url}`);\r\n                        return createSummaryItem(article);\r\n                    } catch (error: any) {\r\n                        // If we got a 403 error or any other error, use summary approach\r\n                        logger.warn(`Couldn't fetch full content for ${article.url}: ${error.message}`);\r\n                        return createSummaryItem(article);\r\n                    }\r\n                })\r\n            )\r\n        );\r\n\r\n        return {\r\n            title: `TheBlock - ${category.charAt(0).toUpperCase() + category.slice(1).replaceAll('-', ' ')}`,\r\n            link: `https://www.theblock.co/category/${category}`,\r\n            item: items,\r\n            description: `Latest articles from TheBlock in the ${category} category`,\r\n            language: 'en',\r\n        } as Data;\r\n    } catch (error: any) {\r\n        logger.error(`Error in TheBlock handler: ${error.message}`);\r\n        throw error;\r\n    }\r\n}\r\n\r\n// Helper function to create a summary-based item when full content isn't available\r\nfunction createSummaryItem(article: any) {\r\n    let description = '';\r\n\r\n    // Add thumbnail if available\r\n    if (article.thumbnail) {\r\n        description += `<p><img src=\"${article.thumbnail}\" alt=\"${article.title}\"></p>`;\r\n    }\r\n\r\n    // Add subheading if available\r\n    if (article.subheading) {\r\n        description += `<p><strong>${article.subheading}</strong></p>`;\r\n    }\r\n\r\n    // Add preview if available\r\n    if (article.preview) {\r\n        description += `<p>${article.preview}</p>`;\r\n    }\r\n\r\n    // Add link to original article\r\n    description += `<p><a href=\"${article.url}\">Read the full article at TheBlock</a></p>`;\r\n\r\n    return {\r\n        title: article.title,\r\n        link: article.url,\r\n        pubDate: parseDate(article.publishedFormatted, 'MMMM D, YYYY, h:mmA [EST]'),\r\n        description,\r\n        author: article.authors?.map((a) => a.name).join(', ') || 'TheBlock',\r\n        category: article.primaryCategory?.name || [],\r\n        guid: article.url,\r\n        image: article.thumbnail,\r\n    };\r\n}\r\n"],"mappings":"4UAOA,MAAaA,EAAe,CACxB,KAAM,sBACN,WAAY,CAAC,WACb,QAAS,uCACT,WAAY,CAAE,SAAU,iBACxB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,WACN,YAAa,CAAC,YACd,UACA,MAAO,CACH,CACI,OAAQ,CAAC,kCACT,OAAQ,wBAGhB,YAAa,6HAGjB,eAAe,EAAQ,EAAoB,CACvC,IAAM,EAAW,EAAI,IAAI,MAAM,YACzB,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,GAE3E,EAAS,wCAAwC,IAEvD,GAAI,CACA,IAAM,EAAW,MAAMC,EAAO,GAGxB,EAAW,EAAS,MAAM,UAAY,GAE5C,GAAI,CAAC,EAAS,OACV,MAAU,MAAM,mCAAmC,KAGvD,IAAM,EAAQ,MAAM,QAAQ,IACxB,EAAS,MAAM,EAAG,GAAO,IAAK,GAC1BC,EAAM,OAAO,oBAAoB,EAAQ,MAAO,SAAY,CACxD,GAAI,CAEA,IAAM,EAAkB,MAAMD,EAAO,oCAAoC,EAAQ,GAAG,IAE9E,EAAO,EAAgB,KACvB,EAAI,EAAK,EAAK,KAAM,KAAM,IAGhC,GAAI,EAAK,KAAK,OAAQ,CAElB,EAAE,cAAc,SAEhB,IAAI,EAAW,GAOf,GALI,EAAQ,YACR,GAAY,gBAAgB,EAAK,UAAU,SAAS,EAAQ,MAAM,SAEtE,GAAY,EAAK,MAAQ,EAAE,OAEvB,EACA,MAAO,CACH,MAAO,EAAQ,MACf,KAAM,EAAQ,IACd,QAAS,EAAU,EAAK,WACxB,YAAa,EACb,OAAQ,EAAQ,SAAS,IAAK,GAAM,EAAE,MAAM,KAAK,OAAS,WAC1D,SAAU,CAAC,GAAG,IAAI,IAAI,CAAC,EAAK,WAAW,KAAM,GAAG,EAAK,WAAW,IAAK,GAAQ,EAAI,MAAO,GAAG,EAAK,KAAK,IAAK,GAAQ,EAAI,SACtH,KAAM,EAAQ,IACd,MAAO,EAAQ,WAO3B,OADA,EAAO,KAAK,6CAA6C,EAAQ,OAC1D,EAAkB,SACpBE,EAAY,CAGjB,OADA,EAAO,KAAK,mCAAmC,EAAQ,IAAI,IAAI,EAAM,WAC9D,EAAkB,QAMzC,MAAO,CACH,MAAO,cAAc,EAAS,OAAO,GAAG,cAAgB,EAAS,MAAM,GAAG,WAAW,IAAK,OAC1F,KAAM,oCAAoC,IAC1C,KAAM,EACN,YAAa,wCAAwC,EAAS,WAC9D,SAAU,YAETA,EAAY,CAEjB,MADA,EAAO,MAAM,8BAA8B,EAAM,WAC3C,GAKd,SAAS,EAAkB,EAAc,CACrC,IAAI,EAAc,GAoBlB,OAjBI,EAAQ,YACR,GAAe,gBAAgB,EAAQ,UAAU,SAAS,EAAQ,MAAM,SAIxE,EAAQ,aACR,GAAe,cAAc,EAAQ,WAAW,gBAIhD,EAAQ,UACR,GAAe,MAAM,EAAQ,QAAQ,OAIzC,GAAe,eAAe,EAAQ,IAAI,6CAEnC,CACH,MAAO,EAAQ,MACf,KAAM,EAAQ,IACd,QAAS,EAAU,EAAQ,mBAAoB,6BAC/C,cACA,OAAQ,EAAQ,SAAS,IAAK,GAAM,EAAE,MAAM,KAAK,OAAS,WAC1D,SAAU,EAAQ,iBAAiB,MAAQ,GAC3C,KAAM,EAAQ,IACd,MAAO,EAAQ"}