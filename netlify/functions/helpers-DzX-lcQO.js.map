{"version":3,"file":"helpers-DzX-lcQO.js","names":["path"],"sources":["../../lib/utils/helpers.ts"],"sourcesContent":["import { fileURLToPath } from 'node:url';\r\nimport path from 'node:path';\r\nimport { stringifyQuery } from 'ufo';\r\n\r\nexport const getRouteNameFromPath = (path: string) => {\r\n    const p = path.split('/').filter(Boolean);\r\n    if (p.length > 0) {\r\n        return p[0];\r\n    }\r\n    return null;\r\n};\r\n\r\nexport const getPath = (request: Request): string => {\r\n    // Optimized: RegExp is faster than indexOf() + slice()\r\n    const match = request.url.match(/^https?:\\/\\/[^/]+(\\/[^?]*)/);\r\n    return match ? match[1] : '';\r\n};\r\n\r\nconst humanize = (times: string[]) => {\r\n    const [delimiter, separator] = [',', '.'];\r\n    const orderTimes = times.map((v) => v.replaceAll(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + delimiter));\r\n    return orderTimes.join(separator);\r\n};\r\n\r\nexport const time = (start: number) => {\r\n    const delta = Date.now() - start;\r\n    return humanize([delta < 1000 ? delta + 'ms' : Math.round(delta / 1000) + 's']);\r\n};\r\n\r\nexport const getCurrentPath = (metaUrl: string) => {\r\n    const __filename = path.join(fileURLToPath(metaUrl));\r\n    return path.dirname(__filename);\r\n};\r\n\r\nfunction isPureObject(o: any) {\r\n    return Object.prototype.toString.call(o) === '[object Object]';\r\n}\r\n\r\nexport function getSearchParamsString(searchParams: any) {\r\n    const searchParamsString = isPureObject(searchParams) ? stringifyQuery(searchParams) : null;\r\n    return searchParamsString ?? new URLSearchParams(searchParams).toString();\r\n}\r\n\r\n/**\r\n * parse duration string to seconds\r\n * @param {string} timeStr - duration string like \"01:01:01\" / \"01:01\" / \"59\"\r\n * @returns {number}       - total seconds\r\n */\r\nexport function parseDuration(timeStr: string) {\r\n    const clean = timeStr.trim().replaceAll(/[^\\d:]/g, '');\r\n    return clean\r\n        .split(':')\r\n        .toReversed()\r\n        .reduce((total, part, idx) => {\r\n            const n = Number(part);\r\n            if (Number.isNaN(n)) {\r\n                throw new TypeError(`Invalid segment: ${part}`);\r\n            }\r\n            return total + n * Math.pow(60, idx);\r\n        }, 0);\r\n}\r\n"],"mappings":"uGAIA,MAAa,EAAwB,GAAiB,CAClD,IAAM,EAAIA,EAAK,MAAM,KAAK,OAAO,SAIjC,OAHI,EAAE,OAAS,EACJ,EAAE,GAEN,MAGE,EAAW,GAA6B,CAEjD,IAAM,EAAQ,EAAQ,IAAI,MAAM,8BAChC,OAAO,EAAQ,EAAM,GAAK,IAGxB,EAAY,GAAoB,CAClC,GAAM,CAAC,EAAW,GAAa,CAAC,IAAK,KAC/B,EAAa,EAAM,IAAK,GAAM,EAAE,WAAW,0BAA2B,KAAO,IACnF,OAAO,EAAW,KAAK,IAGd,EAAQ,GAAkB,CACnC,IAAM,EAAQ,KAAK,MAAQ,EAC3B,OAAO,EAAS,CAAC,EAAQ,IAAO,EAAQ,KAAO,KAAK,MAAM,EAAQ,KAAQ,OAGjE,EAAkB,GAAoB,CAC/C,IAAM,EAAa,EAAK,KAAK,EAAc,IAC3C,OAAO,EAAK,QAAQ,IAGxB,SAAS,EAAa,EAAQ,CAC1B,OAAO,OAAO,UAAU,SAAS,KAAK,KAAO,kBAGjD,SAAgB,EAAsB,EAAmB,CACrD,IAAM,EAAqB,EAAa,GAAgB,EAAe,GAAgB,KACvF,OAAO,GAAsB,IAAI,gBAAgB,GAAc,WAQnE,SAAgB,EAAc,EAAiB,CAC3C,IAAM,EAAQ,EAAQ,OAAO,WAAW,UAAW,IACnD,OAAO,EACF,MAAM,KACN,aACA,QAAQ,EAAO,EAAM,IAAQ,CAC1B,IAAM,EAAI,OAAO,GACjB,GAAI,OAAO,MAAM,GACb,MAAU,UAAU,oBAAoB,KAE5C,OAAO,EAAQ,EAAI,KAAK,IAAI,GAAI,IACjC"}