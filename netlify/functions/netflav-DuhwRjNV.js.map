{"version":3,"file":"netflav-DuhwRjNV.js","names":[],"sources":["../../lib/routes/netflav/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport const route: Route = {\r\n    path: '/',\r\n    radar: [\r\n        {\r\n            source: ['netflav.com/'],\r\n            target: '',\r\n        },\r\n    ],\r\n    name: 'Unknown',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n    url: 'netflav.com/',\r\n};\r\n\r\nasync function handler() {\r\n    const baseUrl = 'https://netflav.com';\r\n    const { data } = await got(baseUrl);\r\n\r\n    const $ = load(data);\r\n    const nextData = JSON.parse($('#__NEXT_DATA__').text());\r\n    const {\r\n        head,\r\n        props: { initialState },\r\n    } = nextData;\r\n\r\n    const items = [...initialState.censored.docs, ...initialState.uncensored.docs, ...initialState.chinese.docs, ...initialState.trending.docs].map((item) => ({\r\n        title: item.title,\r\n        description: art(path.join(__dirname, 'templates/description.art'), {\r\n            description: item.description,\r\n            images: [...new Set([item.preview_hp, item.preview, item.previewImagesUrl, ...(item.previewImages || [])])].filter(Boolean),\r\n        }),\r\n        link: `https://netflav.com/video?id=${item.videoId}`,\r\n        pubDate: parseDate(item.sourceDate),\r\n        author: [...new Set(item.actors.map((a) => a.replace(/^(\\w{2}:)/, '')))].join(', '),\r\n        category: [...new Set(item.tags?.map((t) => t.replace(/^(\\w{2}:)/, '')))],\r\n    }));\r\n\r\n    return {\r\n        title: head.find((h) => h[0] === 'title')[1].children,\r\n        description: head.find((h) => h[0] === 'meta' && h[1].name === 'description')[1].content,\r\n        logo: `${baseUrl}${head.find((h) => h[0] === 'meta' && h[1].property === 'og:image')[1].content}`,\r\n        image: `${baseUrl}${head.find((h) => h[0] === 'meta' && h[1].property === 'og:image')[1].content}`,\r\n        link: baseUrl,\r\n        item: items,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"oaAQA,MAAa,EAAe,CACxB,KAAM,IACN,MAAO,CACH,CACI,OAAQ,CAAC,gBACT,OAAQ,KAGhB,KAAM,UACN,YAAa,CAAC,UACd,UACA,IAAK,gBAGT,eAAe,GAAU,CACrB,IAAM,EAAU,sBACV,CAAE,QAAS,MAAM,EAAI,GAErB,EAAI,EAAK,GACT,EAAW,KAAK,MAAM,EAAE,kBAAkB,QAC1C,CACF,OACA,MAAO,CAAE,iBACT,EAEE,EAAQ,CAAC,GAAG,EAAa,SAAS,KAAM,GAAG,EAAa,WAAW,KAAM,GAAG,EAAa,QAAQ,KAAM,GAAG,EAAa,SAAS,MAAM,IAAK,IAAU,CACvJ,MAAO,EAAK,MACZ,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,YAAa,EAAK,YAClB,OAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,EAAK,WAAY,EAAK,QAAS,EAAK,iBAAkB,GAAI,EAAK,eAAiB,MAAO,OAAO,WAEvH,KAAM,gCAAgC,EAAK,UAC3C,QAAS,EAAU,EAAK,YACxB,OAAQ,CAAC,GAAG,IAAI,IAAI,EAAK,OAAO,IAAK,GAAM,EAAE,QAAQ,YAAa,OAAO,KAAK,MAC9E,SAAU,CAAC,GAAG,IAAI,IAAI,EAAK,MAAM,IAAK,GAAM,EAAE,QAAQ,YAAa,UAGvE,MAAO,CACH,MAAO,EAAK,KAAM,GAAM,EAAE,KAAO,SAAS,GAAG,SAC7C,YAAa,EAAK,KAAM,GAAM,EAAE,KAAO,QAAU,EAAE,GAAG,OAAS,eAAe,GAAG,QACjF,KAAM,GAAG,IAAU,EAAK,KAAM,GAAM,EAAE,KAAO,QAAU,EAAE,GAAG,WAAa,YAAY,GAAG,UACxF,MAAO,GAAG,IAAU,EAAK,KAAM,GAAM,EAAE,KAAO,QAAU,EAAE,GAAG,WAAa,YAAY,GAAG,UACzF,KAAM,EACN,KAAM,EACN,WAAY"}