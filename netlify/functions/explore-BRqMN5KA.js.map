{"version":3,"file":"explore-BRqMN5KA.js","names":["route: Route","ofetch","keyword"],"sources":["../../lib/routes/pubscholar/utils.ts","../../lib/routes/pubscholar/explore.ts"],"sourcesContent":["import crypto from 'node:crypto';\r\nimport CryptoJS from 'crypto-js';\r\n\r\nconst salt = '6m6pingbinwaktg227gngifoocrfbo95';\r\nconst key = CryptoJS.enc.Utf8.parse('eRtYuIoPaSdFgHqW');\r\nconst iv = CryptoJS.enc.Utf8.parse('Nmc09JkLzX8765Vb');\r\n\r\nexport const baseUrl = 'https://pubscholar.cn';\r\nexport const sha1 = (str: string) => crypto.createHash('sha1').update(str).digest('hex');\r\nexport const uuidv4 = () => crypto.randomUUID();\r\n\r\nconst generateNonce = (length: number): string => {\r\n    if (!length) {\r\n        return null;\r\n    }\r\n\r\n    let nonce = '';\r\n    while (nonce.length < length) {\r\n        const randomString = Math.random().toString(36).slice(2).toUpperCase();\r\n        nonce += randomString;\r\n    }\r\n\r\n    return nonce.slice(0, length);\r\n};\r\n\r\nexport const getSignedHeaders = () => {\r\n    const nonce = generateNonce(6);\r\n    const timestamp = Date.now().toString();\r\n    const signature = sha1([salt, timestamp, nonce].sort().join(''));\r\n    return {\r\n        nonce,\r\n        timestamp,\r\n        signature,\r\n    };\r\n};\r\n\r\nexport const getArticleLink = (id: string) => {\r\n    const ciphertext = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(id), key, {\r\n        iv,\r\n        mode: CryptoJS.mode.CBC,\r\n        padding: CryptoJS.pad.Pkcs7,\r\n    }).ciphertext.toString();\r\n    return ciphertext;\r\n};\r\n","import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { baseUrl, uuidv4, getArticleLink, getSignedHeaders } from './utils';\r\nimport md5 from '@/utils/md5';\r\nimport { Resource } from './types';\r\nimport sanitizeHtml from 'sanitize-html';\r\n\r\nexport const route: Route = {\r\n    path: '/explore/:category?/:keyword?',\r\n    name: 'Explore',\r\n    maintainers: ['TonyRL'],\r\n    example: '/pubscholar/explore',\r\n    parameters: {\r\n        category: 'Category, see the table below, `articles` by default',\r\n        keyword: 'Search Keyword',\r\n    },\r\n    handler,\r\n    description: `| Articles / 论文 | Patents / 专利 | Reports / 领域快报 | Information / 动态快讯 | Datasets / 科学数据 | Books / 图书 |\r\n| --------------- | -------------- | ------------------ | ---------------------- | ------------------- | ------------ |\r\n| articles        | patents        | bulletins          | reports                | sciencedata         | books        |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category = 'articles', keyword } = ctx.req.param();\r\n    const uuid = uuidv4();\r\n\r\n    const response = await ofetch<Resource>(`${baseUrl}/hky/open/resources/api/v1/${category}`, {\r\n        method: 'POST',\r\n        headers: {\r\n            ...getSignedHeaders(),\r\n            Cookie: `XSRF-TOKEN=${uuid}`,\r\n            'X-XSRF-TOKEN': uuid,\r\n        },\r\n        body: {\r\n            page: 1,\r\n            size: 10,\r\n            order_field: 'date',\r\n            order_direction: 'desc',\r\n            user_id: md5(Date.now().toString()),\r\n            lang: 'zh',\r\n            query: keyword,\r\n            strategy: null,\r\n            orderField: 'default',\r\n        },\r\n    });\r\n\r\n    const list = response.content.map((item) => ({\r\n        title: (item.is_free || item.links.some((l) => l.is_open_access) ? '「Open Access」' : '') + sanitizeHtml(item.title, { allowedTags: [], allowedAttributes: {} }),\r\n        description: item.abstracts + `<br>${item.links.map((link) => `<a href=\"${link.url}\">${link.is_open_access ? '「Open Access」' : ''}${link.name}</a>`).join('<br>')}`,\r\n        author: item.author.join('; '),\r\n        pubDate: parseDate(item.date),\r\n        category: item.keywords.map((keyword) => sanitizeHtml(keyword, { allowedTags: [], allowedAttributes: {} })),\r\n        link: `${baseUrl}/${category}/${getArticleLink(item.id)}`,\r\n    }));\r\n\r\n    return {\r\n        title: 'PubScholar 公益学术平台',\r\n        link: `${baseUrl}/explore`,\r\n        item: list,\r\n    };\r\n}\r\n"],"mappings":"yVAGA,MACM,EAAM,EAAS,IAAI,KAAK,MAAM,oBAC9B,EAAK,EAAS,IAAI,KAAK,MAAM,oBAEtB,EAAU,wBACV,EAAQ,GAAgB,EAAO,WAAW,QAAQ,OAAO,GAAK,OAAO,OACrE,MAAe,EAAO,aAE7B,EAAiB,GAA2B,CAC9C,GAAI,CAAC,EACD,OAAO,KAGX,IAAI,EAAQ,GACZ,KAAO,EAAM,OAAS,GAAQ,CAC1B,IAAM,EAAe,KAAK,SAAS,SAAS,IAAI,MAAM,GAAG,cACzD,GAAS,EAGb,OAAO,EAAM,MAAM,EAAG,IAGb,MAAyB,CAClC,IAAM,EAAQ,EAAc,GACtB,EAAY,KAAK,MAAM,WACvB,EAAY,EAAK,CAAC,mCAAM,EAAW,GAAO,OAAO,KAAK,KAC5D,MAAO,CACH,QACA,YACA,cAIK,EAAkB,GAAe,CAC1C,IAAM,EAAa,EAAS,IAAI,QAAQ,EAAS,IAAI,KAAK,MAAM,GAAK,EAAK,CACtE,KACA,KAAM,EAAS,KAAK,IACpB,QAAS,EAAS,IAAI,QACvB,WAAW,WACd,OAAO,GClCEA,EAAe,CACxB,KAAM,gCACN,KAAM,UACN,YAAa,CAAC,UACd,QAAS,sBACT,WAAY,CACR,SAAU,uDACV,QAAS,kBAEb,UACA,YAAa;;0HAKjB,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,WAAW,WAAY,WAAY,EAAI,IAAI,QAC7C,EAAO,IAEP,EAAW,MAAMC,EAAiB,GAAG,EAAQ,6BAA6B,IAAY,CACxF,OAAQ,OACR,QAAS,CACL,GAAG,IACH,OAAQ,cAAc,IACtB,eAAgB,GAEpB,KAAM,CACF,KAAM,EACN,KAAM,GACN,YAAa,OACb,gBAAiB,OACjB,QAAS,EAAI,KAAK,MAAM,YACxB,KAAM,KACN,MAAO,EACP,SAAU,KACV,WAAY,aAId,EAAO,EAAS,QAAQ,IAAK,IAAU,CACzC,OAAQ,EAAK,SAAW,EAAK,MAAM,KAAM,GAAM,EAAE,gBAAkB,gBAAkB,IAAM,EAAa,EAAK,MAAO,CAAE,YAAa,GAAI,kBAAmB,KAC1J,YAAa,EAAK,UAAY,OAAO,EAAK,MAAM,IAAK,GAAS,YAAY,EAAK,IAAI,IAAI,EAAK,eAAiB,gBAAkB,KAAK,EAAK,KAAK,OAAO,KAAK,UAC1J,OAAQ,EAAK,OAAO,KAAK,MACzB,QAAS,EAAU,EAAK,MACxB,SAAU,EAAK,SAAS,IAAK,GAAY,EAAaC,EAAS,CAAE,YAAa,GAAI,kBAAmB,MACrG,KAAM,GAAG,EAAQ,GAAG,EAAS,GAAG,EAAe,EAAK,SAGxD,MAAO,CACH,MAAO,oBACP,KAAM,GAAG,EAAQ,UACjB,KAAM"}