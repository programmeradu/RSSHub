{"version":3,"file":"parse-date-Bgabdhlb.js","names":["durations: Record<string, string>"],"sources":["../../lib/utils/parse-date.ts"],"sourcesContent":["import dayjs from 'dayjs';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\r\nimport duration from 'dayjs/plugin/duration.js';\r\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore.js';\r\nimport weekday from 'dayjs/plugin/weekday.js';\r\n\r\ndayjs.extend(customParseFormat);\r\ndayjs.extend(duration);\r\ndayjs.extend(isSameOrBefore);\r\ndayjs.extend(weekday);\r\n\r\nconst words = [\r\n    {\r\n        startAt: dayjs(),\r\n        regExp: /^(?:今[天日]|to?day?)(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().subtract(1, 'days'),\r\n        regExp: /^(?:昨[天日]|y(?:ester)?day?)(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().subtract(2, 'days'),\r\n        regExp: /^(?:前天|(?:the)?d(?:ay)?b(?:eforeyesterda)?y)(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(1)) ? dayjs().weekday(1).subtract(1, 'week') : dayjs().weekday(1),\r\n        regExp: /^(?:周|星期)一(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(2)) ? dayjs().weekday(2).subtract(1, 'week') : dayjs().weekday(2),\r\n        regExp: /^(?:周|星期)二(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(3)) ? dayjs().weekday(3).subtract(1, 'week') : dayjs().weekday(3),\r\n        regExp: /^(?:周|星期)三(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(4)) ? dayjs().weekday(4).subtract(1, 'week') : dayjs().weekday(4),\r\n        regExp: /^(?:周|星期)四(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(5)) ? dayjs().weekday(5).subtract(1, 'week') : dayjs().weekday(5),\r\n        regExp: /^(?:周|星期)五(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(6)) ? dayjs().weekday(6).subtract(1, 'week') : dayjs().weekday(6),\r\n        regExp: /^(?:周|星期)六(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().isSameOrBefore(dayjs().weekday(7)) ? dayjs().weekday(7).subtract(1, 'week') : dayjs().weekday(7),\r\n        regExp: /^(?:周|星期)[天日](.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().add(1, 'days'),\r\n        regExp: /^(?:明[天日]|y(?:ester)?day?)(.*)/,\r\n    },\r\n    {\r\n        startAt: dayjs().add(2, 'days'),\r\n        regExp: /^(?:[后後][天日]|(?:the)?d(?:ay)?a(?:fter)?t(?:omrrow)?)(.*)/,\r\n    },\r\n];\r\n\r\nconst patterns = [\r\n    {\r\n        unit: 'years',\r\n        regExp: /(\\d+)(?:年|y(?:ea)?rs?)/,\r\n    },\r\n    {\r\n        unit: 'months',\r\n        regExp: /(\\d+)(?:[个個]?月|months?)/,\r\n    },\r\n    {\r\n        unit: 'weeks',\r\n        regExp: /(\\d+)(?:周|[个個]?星期|weeks?)/,\r\n    },\r\n    {\r\n        unit: 'days',\r\n        regExp: /(\\d+)(?:天|日|d(?:ay)?s?)/,\r\n    },\r\n    {\r\n        unit: 'hours',\r\n        regExp: /(\\d+)(?:[个個]?(?:小?时|時|点|點)|h(?:(?:ou)?r)?s?)/,\r\n    },\r\n    {\r\n        unit: 'minutes',\r\n        regExp: /(\\d+)(?:分[鐘钟]?|m(?:in(?:ute)?)?s?)/,\r\n    },\r\n    {\r\n        unit: 'seconds',\r\n        regExp: /(\\d+)(?:秒[鐘钟]?|s(?:ec(?:ond)?)?s?)/,\r\n    },\r\n];\r\n\r\nconst patternSize = Object.keys(patterns).length;\r\n\r\n/**\r\n * 预处理日期字符串\r\n * @param {String} date 原始日期字符串\r\n */\r\nconst toDate = (date: string) =>\r\n    date\r\n        .toLowerCase()\r\n        .replaceAll(/(^an?\\s)|(\\san?\\s)/g, '1') // 替换 `a` 和 `an` 为 `1`\r\n        .replaceAll(/几|幾/g, '3') // 如 `几秒钟前` 视作 `3秒钟前`\r\n        .replaceAll(/[\\s,]/g, ''); // 移除所有空格\r\n\r\n/**\r\n * 将 `['\\d+时', ..., '\\d+秒']` 转换为 `{ hours: \\d+, ..., seconds: \\d+ }`\r\n * 用于描述时间长度\r\n * @param {Array.<String>} matches 所有匹配结果\r\n */\r\nconst toDurations = (matches: string[]) => {\r\n    const durations: Record<string, string> = {};\r\n\r\n    let p = 0;\r\n    for (const m of matches) {\r\n        for (; p <= patternSize; p++) {\r\n            const match = patterns[p].regExp.exec(m);\r\n            if (match) {\r\n                durations[patterns[p].unit] = match[1];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return durations;\r\n};\r\n\r\nexport const parseDate = (date: string | number, ...options: any) => dayjs(date, ...options).toDate();\r\n\r\nexport const parseRelativeDate = (date: string) => {\r\n    // 预处理日期字符串 date\r\n\r\n    const theDate = toDate(date);\r\n\r\n    // 将 `\\d+年\\d+月...\\d+秒前` 分割成 `['\\d+年', ..., '\\d+秒前']`\r\n\r\n    const matches = theDate.match(/(?:\\D+)?\\d+(?!:|-|\\/|(a|p)m)\\D+/g);\r\n\r\n    if (matches) {\r\n        // 获得最后的时间单元，如 `\\d+秒前`\r\n\r\n        const lastMatch = matches.pop();\r\n\r\n        if (lastMatch) {\r\n            // 若最后的时间单元含有 `前`、`以前`、`之前` 等标识字段，减去相应的时间长度\r\n            // 如 `1分10秒前`\r\n\r\n            const beforeMatches = /(.*)(?:[之以]?前|ago)$/.exec(lastMatch);\r\n            if (beforeMatches) {\r\n                matches.push(beforeMatches[1]);\r\n                return dayjs()\r\n                    .subtract(dayjs.duration(toDurations(matches)))\r\n                    .toDate();\r\n            }\r\n\r\n            // 若最后的时间单元含有 `后`、`以后`、`之后` 等标识字段，加上相应的时间长度\r\n            // 如 `1分10秒后`\r\n\r\n            const afterMatches = /(?:^in(.*)|(.*)[之以]?[后後])$/.exec(lastMatch);\r\n            if (afterMatches) {\r\n                matches.push(afterMatches[1] ?? afterMatches[2]);\r\n                return dayjs()\r\n                    .add(dayjs.duration(toDurations(matches)))\r\n                    .toDate();\r\n            }\r\n\r\n            // 以下处理日期字符串 date 含有特殊词的情形\r\n            // 如 `今天1点10分`\r\n\r\n            matches.push(lastMatch);\r\n        }\r\n        const firstMatch = matches.shift();\r\n\r\n        if (firstMatch) {\r\n            for (const w of words) {\r\n                const wordMatches = w.regExp.exec(firstMatch);\r\n                if (wordMatches) {\r\n                    matches.unshift(wordMatches[1]);\r\n\r\n                    // 取特殊词对应日零时为起点，加上相应的时间长度\r\n\r\n                    return w.startAt\r\n                        .set('hour', 0)\r\n                        .set('minute', 0)\r\n                        .set('second', 0)\r\n                        .set('millisecond', 0)\r\n                        .add(dayjs.duration(toDurations(matches)))\r\n                        .toDate();\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // 若日期字符串 date 不匹配 patterns 中所有模式，则默认为 `特殊词 + 标准时间格式` 的情形，此时直接将特殊词替换为对应日期\r\n        // 如今天为 `2022-03-22`，则 `今天 20:00` => `2022-03-22 20:00`\r\n\r\n        for (const w of words) {\r\n            const wordMatches = w.regExp.exec(theDate);\r\n            if (wordMatches) {\r\n                // The default parser of dayjs() can parse '8:00 pm' but not '8:00pm'\r\n                // so we need to insert a space in between\r\n                return dayjs(`${w.startAt.format('YYYY-MM-DD')} ${/a|pm$/.test(wordMatches[1]) ? wordMatches[1].replace(/a|pm/, ' $&') : wordMatches[1]}`).toDate();\r\n            }\r\n        }\r\n    }\r\n\r\n    return date;\r\n};\r\n"],"mappings":"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"}