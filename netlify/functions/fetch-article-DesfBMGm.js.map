{"version":3,"file":"fetch-article-DesfBMGm.js","names":[],"sources":["../../lib/routes/twreporter/fetch-article.ts"],"sourcesContent":["import ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nexport default async function fetch(slug: string) {\r\n    const url = `https://go-api.twreporter.org/v2/posts/${slug}?full=true`;\r\n    const res = await ofetch(url);\r\n    const post = res.data;\r\n\r\n    const time = post.published_date;\r\n    // For `writers`\r\n    let authors = '';\r\n    if (post.writers) {\r\n        authors = post.writers.map((writer) => (writer.job_title ? writer.job_title + ' / ' + writer.name : '文字 / ' + writer.name)).join('，');\r\n    }\r\n\r\n    // For `photography`, if it exists\r\n    let photographers = '';\r\n    if (post.photographers) {\r\n        photographers = post.photographers\r\n            .map((photographer) => {\r\n                let title = '攝影 / ';\r\n                if (photographer.job_title) {\r\n                    title = photographer.job_title + ' / ';\r\n                }\r\n                return title + photographer.name;\r\n            })\r\n            .join('，');\r\n        authors += '；' + photographers;\r\n    }\r\n\r\n    const bannerImage = post.hero_image.resized_targets.desktop.url;\r\n    const caption = post.leading_image_description;\r\n    const bannerDescription = post.hero_image.description;\r\n    const ogDescription = post.og_description;\r\n    const banner = art(path.join(__dirname, 'templates/image.art'), { image: bannerImage, description: bannerDescription, caption });\r\n\r\n    function format(type, content) {\r\n        let block = '';\r\n        if (content !== '' && type !== 'embeddedcode') {\r\n            switch (type) {\r\n                case 'image':\r\n                case 'slideshow':\r\n                    block = content.map((image) => art(path.join(__dirname, 'templates/image.art'), { image: image.desktop.url, description: image.description, caption: image.description })).join('<br>');\r\n\r\n                    break;\r\n\r\n                case 'blockquote':\r\n                    block = `<blockquote>${content}</blockquote>`;\r\n\r\n                    break;\r\n\r\n                case 'header-one':\r\n                    block = `<h1>${content}</h1>`;\r\n\r\n                    break;\r\n\r\n                case 'header-two':\r\n                    block = `<h2>${content}</h2>`;\r\n\r\n                    break;\r\n\r\n                case 'infobox': {\r\n                    const box = content[0];\r\n                    block = `<h2>${box.title}</h2>${box.body}`;\r\n\r\n                    break;\r\n                }\r\n                case 'youtube': {\r\n                    const video = content[0].youtubeId;\r\n                    const id = video.split('?')[0];\r\n                    block = art(path.join(__dirname, 'templates/youtube.art'), { video: id });\r\n\r\n                    break;\r\n                }\r\n                case 'quoteby': {\r\n                    const quote = content[0];\r\n                    block = `<blockquote>${quote.quote}</blockquote><p>${quote.quoteBy}</p>`;\r\n\r\n                    break;\r\n                }\r\n                default:\r\n                    block = `${content}<br>`;\r\n            }\r\n        }\r\n        return block;\r\n    }\r\n\r\n    const text = post.content.api_data\r\n        .map((item) => {\r\n            const content = item.content;\r\n            const type = item.type;\r\n            return format(type, content);\r\n        })\r\n        .filter(Boolean)\r\n        .join('<br>');\r\n    const contents = [banner, ogDescription, text].filter(Boolean).join('<br><br>');\r\n\r\n    return {\r\n        author: authors,\r\n        description: contents,\r\n        link: `https://www.twreporter.org/a/${slug}`,\r\n        guid: `https://www.twreporter.org/a/${slug}`,\r\n        pubDate: parseDate(time, 'YYYY-MM-DDTHH:mm:ssZ'),\r\n    };\r\n}\r\n"],"mappings":"2PAKA,eAA8B,EAAM,EAAc,CAC9C,IAAM,EAAM,0CAA0C,EAAK,YACrD,EAAM,MAAM,EAAO,GACnB,EAAO,EAAI,KAEX,EAAO,EAAK,eAEd,EAAU,GACV,EAAK,UACL,EAAU,EAAK,QAAQ,IAAK,GAAY,EAAO,UAAY,EAAO,UAAY,MAAQ,EAAO,KAAO,QAAU,EAAO,MAAO,KAAK,MAIrI,IAAI,EAAgB,GAChB,EAAK,gBACL,EAAgB,EAAK,cAChB,IAAK,GAAiB,CACnB,IAAI,EAAQ,QAIZ,OAHI,EAAa,YACb,EAAQ,EAAa,UAAY,OAE9B,EAAQ,EAAa,OAE/B,KAAK,KACV,GAAW,IAAM,GAGrB,IAAM,EAAc,EAAK,WAAW,gBAAgB,QAAQ,IACtD,EAAU,EAAK,0BACf,EAAoB,EAAK,WAAW,YACpC,EAAgB,EAAK,eACrB,EAAS,EAAI,EAAA,KAAA,EAAA,gCAA6C,CAAE,MAAO,EAAa,YAAa,EAAmB,YAEtH,SAAS,EAAO,EAAM,EAAS,CAC3B,IAAI,EAAQ,GACZ,GAAI,IAAY,IAAM,IAAS,eAC3B,OAAQ,EAAR,CACI,IAAK,QACL,IAAK,YACD,EAAQ,EAAQ,IAAK,GAAU,EAAI,EAAA,KAAA,EAAA,gCAA6C,CAAE,MAAO,EAAM,QAAQ,IAAK,YAAa,EAAM,YAAa,QAAS,EAAM,eAAgB,KAAK,QAEhL,MAEJ,IAAK,aACD,EAAQ,eAAe,EAAQ,eAE/B,MAEJ,IAAK,aACD,EAAQ,OAAO,EAAQ,OAEvB,MAEJ,IAAK,aACD,EAAQ,OAAO,EAAQ,OAEvB,MAEJ,IAAK,UAAW,CACZ,IAAM,EAAM,EAAQ,GACpB,EAAQ,OAAO,EAAI,MAAM,OAAO,EAAI,OAEpC,MAEJ,IAAK,UAAW,CACZ,IAAM,EAAQ,EAAQ,GAAG,UACnB,EAAK,EAAM,MAAM,KAAK,GAC5B,EAAQ,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAAE,MAAO,IAEpE,MAEJ,IAAK,UAAW,CACZ,IAAM,EAAQ,EAAQ,GACtB,EAAQ,eAAe,EAAM,MAAM,kBAAkB,EAAM,QAAQ,MAEnE,MAEJ,QACI,EAAQ,GAAG,EAAQ,MAG/B,OAAO,EAGX,IAAM,EAAO,EAAK,QAAQ,SACrB,IAAK,GAAS,CACX,IAAM,EAAU,EAAK,QACf,EAAO,EAAK,KAClB,OAAO,EAAO,EAAM,KAEvB,OAAO,SACP,KAAK,QACJ,EAAW,CAAC,EAAQ,EAAe,GAAM,OAAO,SAAS,KAAK,YAEpE,MAAO,CACH,OAAQ,EACR,YAAa,EACb,KAAM,gCAAgC,IACtC,KAAM,gCAAgC,IACtC,QAAS,EAAU,EAAM"}