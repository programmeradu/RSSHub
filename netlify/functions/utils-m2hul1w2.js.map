{"version":3,"file":"utils-m2hul1w2.js","names":["ofetch","cache","tags: string[]","podcastData: { mediaUrl?: string; itunes_duration?: number; image?: string }"],"sources":["../../lib/routes/capitalmind/utils.ts"],"sourcesContent":["import { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch';\r\nimport cache from '@/utils/cache';\r\nimport { DataItem } from '@/types';\r\n\r\nexport const baseUrl = 'https://www.capitalmind.in';\r\n\r\nexport async function fetchArticles(path) {\r\n    const url = `${baseUrl}/${path}/page/1`;\r\n    const response = await ofetch(url);\r\n    const $ = load(response);\r\n\r\n    const articlePromises = $('.article-wrapper a.article-card-wrapper')\r\n        .toArray()\r\n        .map(async (element) => {\r\n            const $element = $(element);\r\n            const link = baseUrl + $element.attr('href');\r\n            return await cache.tryGet(link, async () => {\r\n                const title = $element.find('h3').text().trim();\r\n                const author = $element\r\n                    .find(String.raw`div.text-[16px]`)\r\n                    .text()\r\n                    .trim();\r\n                const image = $element.find('img').attr('src');\r\n                const imageUrl = image?.startsWith('/_next/image') ? image.split('url=')[1].split('&')[0] : image;\r\n                const decodedImageUrl = imageUrl ? decodeURIComponent(imageUrl) : '';\r\n\r\n                // Fetch full article content\r\n                const articleResponse = await ofetch(link);\r\n                const $articlePage = load(articleResponse);\r\n                const $article = $articlePage('article').clone();\r\n\r\n                // Extract tags from footer\r\n                const tags: string[] = $article\r\n                    .find('footer div')\r\n                    .toArray()\r\n                    .map((el) => {\r\n                        const $el = $articlePage(el);\r\n                        $el.find('.sr-only').remove();\r\n                        const tag = $el.text().trim();\r\n                        return tag;\r\n                    })\r\n                    .filter(Boolean);\r\n\r\n                // Extract publication date from header\r\n                let pubDate = '';\r\n                const $header = $article.find('header');\r\n                const $time = $header.find('time');\r\n                if ($time.length) {\r\n                    pubDate = $time.attr('datetime') || $time.text().trim();\r\n                }\r\n\r\n                const $content = $article.find('section[aria-label=\"Post content\"]').clone();\r\n\r\n                // Remove footer\r\n                $content.find('footer').remove();\r\n\r\n                // Process Libsyn podcast iframe (assuming only one)\r\n                let podcastData: { mediaUrl?: string; itunes_duration?: number; image?: string } = {};\r\n\r\n                const $iframe = $content.find('iframe[src*=\"libsyn.com/embed/episode/id/\"]');\r\n                if ($iframe.length) {\r\n                    const src = $iframe.attr('src');\r\n                    if (src) {\r\n                        const idMatch = src.match(/\\/id\\/(\\d+)\\//);\r\n                        if (idMatch && idMatch[1]) {\r\n                            const episodeId = idMatch[1];\r\n                            try {\r\n                                const episodeData = await ofetch(`https://html5-player.libsyn.com/api/episode/id/${episodeId}`);\r\n                                if (episodeData && episodeData._item && episodeData._item._primary_content) {\r\n                                    podcastData = {\r\n                                        mediaUrl: episodeData._item._primary_content._download_url,\r\n                                        image: `https://assets.libsyn.com/item/${episodeId}`,\r\n                                        itunes_duration: episodeData._item._primary_content.duration,\r\n                                    };\r\n                                }\r\n                            } catch {\r\n                                logger.info(`Failed to fetch podcast data for episode ID ${episodeId}`);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Convert relative image URLs to absolute URLs only in figure tags\r\n                // and remove srcset attribute\r\n                $content.find('figure img').each((_, img) => {\r\n                    const $img = $articlePage(img);\r\n                    const src = $img.attr('src');\r\n\r\n                    // Remove srcset attribute\r\n                    $img.removeAttr('srcset');\r\n\r\n                    if (src && src.startsWith('/_next/image')) {\r\n                        // Extract the original URL from the Next.js image URL\r\n                        const urlMatch = src.match(/url=([^&]+)/);\r\n                        if (urlMatch && urlMatch[1]) {\r\n                            const originalUrl = decodeURIComponent(urlMatch[1]);\r\n                            $img.attr('src', originalUrl);\r\n                        } else if (src.startsWith('/')) {\r\n                            // Handle other relative URLs\r\n                            $img.attr('src', baseUrl + src);\r\n                        }\r\n                    }\r\n                });\r\n                return {\r\n                    title,\r\n                    link,\r\n                    author,\r\n                    description: $content.html() || `<p><img src=\"${decodedImageUrl}\" alt=\"${title}\"></p><p>Author: ${author}</p>`,\r\n                    guid: link,\r\n                    itunes_item_image: podcastData?.image || decodedImageUrl,\r\n                    category: tags,\r\n                    pubDate,\r\n                    enclosure_url: podcastData?.mediaUrl || null,\r\n                    itunes_duration: podcastData?.itunes_duration || null,\r\n                    enclosure_type: podcastData?.mediaUrl ? 'audio/mpeg' : null,\r\n                } as DataItem;\r\n            });\r\n        });\r\n\r\n    return Promise.all(articlePromises);\r\n}\r\n"],"mappings":"yIAKA,MAAa,EAAU,6BAEvB,eAAsB,EAAc,EAAM,CACtC,IAAM,EAAM,GAAG,EAAQ,GAAG,EAAK,SACzB,EAAW,MAAMA,EAAO,GACxB,EAAI,EAAK,GAET,EAAkB,EAAE,2CACrB,UACA,IAAI,KAAO,IAAY,CACpB,IAAM,EAAW,EAAE,GACb,EAAO,EAAU,EAAS,KAAK,QACrC,OAAO,MAAMC,EAAM,OAAO,EAAM,SAAY,CACxC,IAAM,EAAQ,EAAS,KAAK,MAAM,OAAO,OACnC,EAAS,EACV,KAAK,OAAO,GAAG,mBACf,OACA,OACC,EAAQ,EAAS,KAAK,OAAO,KAAK,OAClC,EAAW,GAAO,WAAW,gBAAkB,EAAM,MAAM,QAAQ,GAAG,MAAM,KAAK,GAAK,EACtF,EAAkB,EAAW,mBAAmB,GAAY,GAG5D,EAAkB,MAAMD,EAAO,GAC/B,EAAe,EAAK,GACpB,EAAW,EAAa,WAAW,QAGnCE,EAAiB,EAClB,KAAK,cACL,UACA,IAAK,GAAO,CACT,IAAM,EAAM,EAAa,GACzB,EAAI,KAAK,YAAY,SACrB,IAAM,EAAM,EAAI,OAAO,OACvB,OAAO,IAEV,OAAO,SAGR,EAAU,GACR,EAAU,EAAS,KAAK,UACxB,EAAQ,EAAQ,KAAK,QACvB,EAAM,SACN,EAAU,EAAM,KAAK,aAAe,EAAM,OAAO,QAGrD,IAAM,EAAW,EAAS,KAAK,sCAAsC,QAGrE,EAAS,KAAK,UAAU,SAGxB,IAAIC,EAA+E,GAE7E,EAAU,EAAS,KAAK,+CAC9B,GAAI,EAAQ,OAAQ,CAChB,IAAM,EAAM,EAAQ,KAAK,OACzB,GAAI,EAAK,CACL,IAAM,EAAU,EAAI,MAAM,iBAC1B,GAAI,GAAW,EAAQ,GAAI,CACvB,IAAM,EAAY,EAAQ,GAC1B,GAAI,CACA,IAAM,EAAc,MAAMH,EAAO,kDAAkD,KAC/E,GAAe,EAAY,OAAS,EAAY,MAAM,mBACtD,EAAc,CACV,SAAU,EAAY,MAAM,iBAAiB,cAC7C,MAAO,kCAAkC,IACzC,gBAAiB,EAAY,MAAM,iBAAiB,gBAGxD,CACJ,OAAO,KAAK,+CAA+C,QA2B3E,OAnBA,EAAS,KAAK,cAAc,MAAM,EAAG,IAAQ,CACzC,IAAM,EAAO,EAAa,GACpB,EAAM,EAAK,KAAK,OAKtB,GAFA,EAAK,WAAW,UAEZ,GAAO,EAAI,WAAW,gBAAiB,CAEvC,IAAM,EAAW,EAAI,MAAM,eAC3B,GAAI,GAAY,EAAS,GAAI,CACzB,IAAM,EAAc,mBAAmB,EAAS,IAChD,EAAK,KAAK,MAAO,QACV,EAAI,WAAW,MAEtB,EAAK,KAAK,MAAO,EAAU,MAIhC,CACH,QACA,OACA,SACA,YAAa,EAAS,QAAU,gBAAgB,EAAgB,SAAS,EAAM,mBAAmB,EAAO,MACzG,KAAM,EACN,kBAAmB,GAAa,OAAS,EACzC,SAAU,EACV,UACA,cAAe,GAAa,UAAY,KACxC,gBAAiB,GAAa,iBAAmB,KACjD,eAAgB,GAAa,SAAW,aAAe,UAKvE,OAAO,QAAQ,IAAI"}