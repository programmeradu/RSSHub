{"version":3,"file":"utils-DNHtzCgk.js","names":[],"sources":["../../lib/routes/followin/utils.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst apiUrl = 'https://api.followin.io';\r\nconst baseUrl = 'https://followin.io';\r\nconst favicon = `${baseUrl}/favicon.ico`;\r\n\r\nconst getBParam = (lang) => ({\r\n    a: 'web',\r\n    b: '',\r\n    c: lang,\r\n    d: 0,\r\n    e: '',\r\n    f: '',\r\n    g: '',\r\n    h: '0.1.0',\r\n    i: 'official',\r\n});\r\n\r\nconst getBuildId = (tryGet) =>\r\n    tryGet(\r\n        'followin:buildId',\r\n        async () => {\r\n            const { data: pageResponse } = await got(baseUrl);\r\n            const $ = load(pageResponse);\r\n            const { buildId } = JSON.parse($('script#__NEXT_DATA__').text());\r\n            return buildId;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    );\r\n\r\nconst getGToken = (tryGet) =>\r\n    tryGet('followin:gtoken', async () => {\r\n        const { data } = await got.post(`${apiUrl}/user/gtoken`);\r\n        return data.data.gtoken;\r\n    });\r\n\r\nconst parseList = (list, lang, buildId) =>\r\n    list.map((item) => ({\r\n        title: item.translated_title || item.title,\r\n        description: item.translated_content || item.content,\r\n        link: `${baseUrl}/${lang === 'en' ? '' : `${lang}/`}feed/${item.id}`,\r\n        pubDate: parseDate(item.publish_time, 'x'),\r\n        category: item.tags.map((tag) => tag.name),\r\n        author: item.nickname,\r\n        nextData: `${baseUrl}/_next/data/${buildId}/${lang}/feed/${item.id}.json`,\r\n    }));\r\n\r\nconst parseItem = (item, tryGet) =>\r\n    tryGet(item.link, async () => {\r\n        const { data } = await got(item.nextData);\r\n\r\n        const { queries } = data.pageProps.dehydratedState;\r\n        const info = queries.find((q) => q.queryKey[0] === '/feed/info').state;\r\n        const thread = queries.find((q) => q.queryKey[0] === '/feed/thread');\r\n        item.description = thread\r\n            ? art(path.join(__dirname, 'templates/thread.art'), {\r\n                  list: thread.state.data.list,\r\n              })\r\n            : info.data.translated_full_content || info.data.full_content;\r\n\r\n        item.updated = parseDate(info.dataUpdatedAt, 'x');\r\n        item.category = [...new Set([...item.category, ...info.data.tags.map((tag) => tag.name)])];\r\n\r\n        return item;\r\n    });\r\n\r\nexport { apiUrl, baseUrl, favicon, getBParam, getBuildId, getGToken, parseList, parseItem };\r\n"],"mappings":"kUAOA,MAAM,EAAS,0BACT,EAAU,sBACV,EAAU,GAAG,EAAQ,cAErB,EAAa,IAAU,CACzB,EAAG,MACH,EAAG,GACH,EAAG,EACH,EAAG,EACH,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,QACH,EAAG,aAGD,EAAc,GAChB,EACI,mBACA,SAAY,CACR,GAAM,CAAE,KAAM,GAAiB,MAAM,EAAI,GACnC,EAAI,EAAK,GACT,CAAE,WAAY,KAAK,MAAM,EAAE,wBAAwB,QACzD,OAAO,GAEX,EAAO,MAAM,YACb,IAGF,EAAa,GACf,EAAO,kBAAmB,SAAY,CAClC,GAAM,CAAE,QAAS,MAAM,EAAI,KAAK,GAAG,EAAO,eAC1C,OAAO,EAAK,KAAK,SAGnB,GAAa,EAAM,EAAM,IAC3B,EAAK,IAAK,IAAU,CAChB,MAAO,EAAK,kBAAoB,EAAK,MACrC,YAAa,EAAK,oBAAsB,EAAK,QAC7C,KAAM,GAAG,EAAQ,GAAG,IAAS,KAAO,GAAK,GAAG,EAAK,GAAG,OAAO,EAAK,KAChE,QAAS,EAAU,EAAK,aAAc,KACtC,SAAU,EAAK,KAAK,IAAK,GAAQ,EAAI,MACrC,OAAQ,EAAK,SACb,SAAU,GAAG,EAAQ,cAAc,EAAQ,GAAG,EAAK,QAAQ,EAAK,GAAG,UAGrE,GAAa,EAAM,IACrB,EAAO,EAAK,KAAM,SAAY,CAC1B,GAAM,CAAE,QAAS,MAAM,EAAI,EAAK,UAE1B,CAAE,WAAY,EAAK,UAAU,gBAC7B,EAAO,EAAQ,KAAM,GAAM,EAAE,SAAS,KAAO,cAAc,MAC3D,EAAS,EAAQ,KAAM,GAAM,EAAE,SAAS,KAAO,gBAUrD,MATA,GAAK,YAAc,EACb,EAAI,EAAA,KAAA,EAAA,iCAA8C,CAC9C,KAAM,EAAO,MAAM,KAAK,OAE5B,EAAK,KAAK,yBAA2B,EAAK,KAAK,aAErD,EAAK,QAAU,EAAU,EAAK,cAAe,KAC7C,EAAK,SAAW,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAK,SAAU,GAAG,EAAK,KAAK,KAAK,IAAK,GAAQ,EAAI,SAE3E"}