{"version":3,"file":"util-IzpZM47K.js","names":[],"sources":["../../lib/routes/xinpianchang/util.ts"],"sourcesContent":["import got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst appKey = '61a2f329348b3bf77';\r\n\r\nconst domain = 'xinpianchang.com';\r\nconst rootUrl = `https://www.${domain}`;\r\nconst rootApiUrl = `https://mod-api.${domain}`;\r\n\r\n/**\r\n * Retrieves information from a given URL using a provided tryGet function.\r\n *\r\n * @param {string} url - The URL to fetch information from.\r\n * @param {Function} tryGet - The tryGet function that handles the retrieval process.\r\n * @returns {Promise<Object>} - A Promise that resolves to an object containing the retrieved information.\r\n */\r\nconst getData = (url, tryGet) =>\r\n    tryGet(url, async () => {\r\n        const { data: response } = await got(url);\r\n\r\n        const $ = load(response);\r\n\r\n        const icon = new URL('favicon.ico', rootUrl).href;\r\n        const author = $('meta[property=\"og:site_name\"]').prop('content');\r\n\r\n        return {\r\n            data: {\r\n                title: $('span.bg-clip-text').text() || `${author}Â·${$('meta[property=\"og:title\"]').prop('content').split('-')[0]}`,\r\n                link: url,\r\n                description: $('meta[property=\"og:description\"]').prop('content'),\r\n                language: $('html').prop('lang'),\r\n                image: $('meta[property=\"og:image\"]').prop('content'),\r\n                icon,\r\n                logo: icon,\r\n                subtitle: $('meta[property=\"og:description\"]').prop('content'),\r\n                author,\r\n                itunes_author: author,\r\n                itunes_category: 'TV &amp Film',\r\n                allowEmpty: true,\r\n            },\r\n            response,\r\n        };\r\n    });\r\n\r\n/**\r\n * Process items asynchronously.\r\n *\r\n * @param {Array<Object>} items - The array of items to process.\r\n * @param {function} tryGet - The tryGet function that handles the retrieval process.\r\n * @returns {Promise<Array<Object>>} Returns a Promise that resolves to an array of processed items.\r\n */\r\nconst processItems = async (items, tryGet) => {\r\n    items = items.map((item) => ({\r\n        title: item.title,\r\n        link: item.web_url,\r\n        description: item.content,\r\n        author: item.author.userinfo.username,\r\n        category: item.categories.flatMap((c) => [c.category_name, c.sub?.category_name]).filter(Boolean),\r\n        guid: `xinpianchang-${item.id}`,\r\n        pubDate: parseDate(item.publish_time * 1000),\r\n        itunes_item_image: item.cover,\r\n        itunes_duration: item.duration,\r\n        enclosure_url: item.video_library_id,\r\n        upvotes: item.count.count_liked ?? item.count.count_like,\r\n        comments: item.count.count_comment ?? 0,\r\n    }));\r\n\r\n    return await Promise.all(\r\n        items.map((item) =>\r\n            tryGet(item.guid, async () => {\r\n                const apiUrl = new URL(`mod/api/v2/media/${item.enclosure_url}?appKey=${appKey}`, rootApiUrl).href;\r\n\r\n                const { data: detailResponse } = await got(apiUrl);\r\n                const data = detailResponse.data;\r\n\r\n                const enclousure = data.resource?.progressive ? data.resource.progressive[0] : undefined;\r\n\r\n                item.title = data.title ?? item.title;\r\n                item.description = art(path.join(__dirname, 'templates/description.art'), {\r\n                    content: item.description,\r\n                    cover: data.cover ?? item.itunes_item_image,\r\n                    enclousure,\r\n                });\r\n                item.author = data.owner.username ?? item.author;\r\n\r\n                item.category = [...new Set([...item.category, ...(data.categories ?? []), ...(data.keywords ?? [])])];\r\n                item.itunes_item_image = data.cover ?? item.itunes_item_image;\r\n                item.itunes_duration = data.duration ?? item.itunes_duration;\r\n\r\n                if (enclousure) {\r\n                    item.enclosure_url = enclousure.url ?? enclousure.backupUrl;\r\n                    item.enclosure_length = enclousure.filesize;\r\n                    item.enclosure_type = enclousure.mime;\r\n                }\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n};\r\n\r\nexport { rootUrl, getData, processItems };\r\n"],"mappings":"oRAMA,MAEM,EAAS,mBACT,EAAU,eAAe,IACzB,EAAa,mBAAmB,IAShC,GAAW,EAAK,IAClB,EAAO,EAAK,SAAY,CACpB,GAAM,CAAE,KAAM,GAAa,MAAM,EAAI,GAE/B,EAAI,EAAK,GAET,EAAO,IAAI,IAAI,cAAe,GAAS,KACvC,EAAS,EAAE,iCAAiC,KAAK,WAEvD,MAAO,CACH,KAAM,CACF,MAAO,EAAE,qBAAqB,QAAU,GAAG,EAAO,GAAG,EAAE,6BAA6B,KAAK,WAAW,MAAM,KAAK,KAC/G,KAAM,EACN,YAAa,EAAE,mCAAmC,KAAK,WACvD,SAAU,EAAE,QAAQ,KAAK,QACzB,MAAO,EAAE,6BAA6B,KAAK,WAC3C,OACA,KAAM,EACN,SAAU,EAAE,mCAAmC,KAAK,WACpD,SACA,cAAe,EACf,gBAAiB,eACjB,WAAY,IAEhB,cAWN,EAAe,MAAO,EAAO,KAC/B,EAAQ,EAAM,IAAK,IAAU,CACzB,MAAO,EAAK,MACZ,KAAM,EAAK,QACX,YAAa,EAAK,QAClB,OAAQ,EAAK,OAAO,SAAS,SAC7B,SAAU,EAAK,WAAW,QAAS,GAAM,CAAC,EAAE,cAAe,EAAE,KAAK,gBAAgB,OAAO,SACzF,KAAM,gBAAgB,EAAK,KAC3B,QAAS,EAAU,EAAK,aAAe,KACvC,kBAAmB,EAAK,MACxB,gBAAiB,EAAK,SACtB,cAAe,EAAK,iBACpB,QAAS,EAAK,MAAM,aAAe,EAAK,MAAM,WAC9C,SAAU,EAAK,MAAM,eAAiB,KAGnC,MAAM,QAAQ,IACjB,EAAM,IAAK,GACP,EAAO,EAAK,KAAM,SAAY,CAC1B,IAAM,EAAS,IAAI,IAAI,oBAAoB,EAAK,cAAc,2BAAoB,GAAY,KAExF,CAAE,KAAM,GAAmB,MAAM,EAAI,GACrC,EAAO,EAAe,KAEtB,EAAa,EAAK,UAAU,YAAc,EAAK,SAAS,YAAY,GAAK,IAAA,GAoB/E,MAlBA,GAAK,MAAQ,EAAK,OAAS,EAAK,MAChC,EAAK,YAAc,EAAI,EAAA,KAAA,EAAA,sCAAmD,CACtE,QAAS,EAAK,YACd,MAAO,EAAK,OAAS,EAAK,kBAC1B,eAEJ,EAAK,OAAS,EAAK,MAAM,UAAY,EAAK,OAE1C,EAAK,SAAW,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAK,SAAU,GAAI,EAAK,YAAc,GAAK,GAAI,EAAK,UAAY,MAChG,EAAK,kBAAoB,EAAK,OAAS,EAAK,kBAC5C,EAAK,gBAAkB,EAAK,UAAY,EAAK,gBAEzC,IACA,EAAK,cAAgB,EAAW,KAAO,EAAW,UAClD,EAAK,iBAAmB,EAAW,SACnC,EAAK,eAAiB,EAAW,MAG9B"}