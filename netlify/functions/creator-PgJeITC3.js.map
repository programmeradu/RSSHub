{"version":3,"file":"creator-PgJeITC3.js","names":["cache","ofetch"],"sources":["../../lib/routes/fantube/utils.ts","../../lib/routes/fantube/creator.ts"],"sourcesContent":["import ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport cache from '@/utils/cache';\r\nimport { CreatorFragment, PostReelNode } from './types';\r\n\r\nexport const baseUrl = 'https://www.fantube.tokyo';\r\n\r\nexport const getCreatorFragment = (username: string) =>\r\n    cache.tryGet(`fantube:creator:${username}`, async () => {\r\n        const response = await ofetch(`${baseUrl}/r18/creator/${username}`, {\r\n            headers: {\r\n                cookie: 'fantube-ageVerified=1;',\r\n            },\r\n        });\r\n        const $ = load(response);\r\n\r\n        const selfPushString = JSON.parse(\r\n            $('script:contains(\"creatorFragment\")')\r\n                .text()\r\n                .match(/^self\\.__next_f\\.push\\((.+?)\\)$/)?.[1] || '{}'\r\n        );\r\n        const selfPushData = JSON.parse(selfPushString[1].slice(2));\r\n        // const creatorFragment = selfPushData[3].children.find((c) => c[1] === 'div')[3].children[3].creatorFragment;\r\n        const creatorFragment = selfPushData\r\n            .find((d) => d?.hasOwnProperty('children'))\r\n            .children.find((child) => Object.values(child).includes('div'))\r\n            .find((c) => c?.hasOwnProperty('children'))\r\n            .children.find((c) => c?.hasOwnProperty('creatorFragment')).creatorFragment;\r\n\r\n        return creatorFragment as CreatorFragment;\r\n    });\r\n\r\nexport const getCreatorPostReelList = (identifier: string, limit: number): Promise<PostReelNode[]> =>\r\n    cache.tryGet(`fantube:creatorPostReelList:${identifier}:${limit}`, async () => {\r\n        const response = await ofetch('https://api.prd.fantube.tokyo/graphql', {\r\n            headers: {\r\n                Referer: baseUrl,\r\n            },\r\n            body: JSON.stringify({\r\n                query: `query CreatorPostReelList($identifier: String!, $first: Int, $after: String, $last: Int, $before: String) {\r\n  posts(\r\n    where: {status: {equals: PUBLISHED}, creator: {is: {identifier: {equals: $identifier}}}}\r\n    orderBy: [{pinnedAt: {nulls: last, sort: desc}}, {order: asc}, {createdAt: desc}, {id: desc}]\r\n    first: $first\r\n    after: $after\r\n    last: $last\r\n    before: $before\r\n  ) {\r\n    nodes {\r\n      ...PostSwiper_Post\r\n    }\r\n    pageInfo {\r\n      hasNextPage\r\n      endCursor\r\n      hasPreviousPage\r\n      startCursor\r\n    }\r\n  }\r\n}\r\n\r\nfragment PostSwiper_Post on Post {\r\n  id\r\n  title\r\n  isFavorite\r\n  favoritesCount\r\n  ...PostSwiperSlide_Post\r\n}\r\n\r\nfragment PostSwiperSlide_Post on Post {\r\n  id\r\n  type\r\n  title\r\n  price\r\n  creator {\r\n    displayName\r\n  }\r\n  ...PostVideoElement_Post\r\n  ...PostImageElement_Post\r\n}\r\n\r\nfragment PostVideoElement_Post on Post {\r\n  id\r\n  title\r\n  contentData {\r\n    ... on PostVideoType {\r\n      __typename\r\n      videoUrl\r\n      isSample\r\n      noSample\r\n      durationSeconds\r\n    }\r\n  }\r\n  isFavorite\r\n  sampleVideoId\r\n  thumbnailUrl\r\n  creator {\r\n    displayName\r\n  }\r\n  ...PostInfo_Post\r\n  ...VideoControlIcons_Post\r\n  ...PurchaseWrapper_Post\r\n}\r\n\r\nfragment PostInfo_Post on Post {\r\n  title\r\n  description\r\n  publishStartAt\r\n  price\r\n  isBuyEnabled\r\n  ...Profile_Post\r\n}\r\n\r\nfragment Profile_Post on Post {\r\n  id\r\n  creator {\r\n    id\r\n    isSelf\r\n    identifier\r\n    displayName\r\n    avatarImageUrl\r\n    following\r\n  }\r\n}\r\n\r\nfragment VideoControlIcons_Post on Post {\r\n  id\r\n  isMine\r\n  pinnedAt\r\n  favoritesCount\r\n  ...PostComment_Post\r\n}\r\n\r\nfragment PostComment_Post on Post {\r\n  id\r\n  isMine\r\n  canComment\r\n  comments(\r\n    where: {OR: [{parentPostComment: {is: {isDeleted: {equals: false}}}}, {parentPostCommentId: {equals: null}}], isDeleted: {equals: false}}\r\n  ) {\r\n    totalCount\r\n  }\r\n  ...PostCommentReplyDrawer_Post\r\n}\r\n\r\nfragment PostCommentReplyDrawer_Post on Post {\r\n  id\r\n  isMine\r\n  canComment\r\n}\r\n\r\nfragment PurchaseWrapper_Post on Post {\r\n  id\r\n  title\r\n  price\r\n  creator {\r\n    displayName\r\n  }\r\n  ...PostPurchaseDialog_Post\r\n  ...PostPurchaseSingleDialog_Post\r\n}\r\n\r\nfragment PostPurchaseDialog_Post on Post {\r\n  id\r\n  isBuyEnabled\r\n  price\r\n  thumbnailUrl\r\n  title\r\n  planPosts(\r\n    orderBy: [{plan: {deleteRequestAt: {sort: desc, nulls: first}}}, {plan: {isRecommended: desc}}, {plan: {price: asc}}]\r\n  ) {\r\n    nodes {\r\n      plan {\r\n        id\r\n        title\r\n        price\r\n        ...PlanSwiper_Plan\r\n      }\r\n    }\r\n  }\r\n  creator {\r\n    displayName\r\n  }\r\n  ...PostPurchaseSingleDialog_Post\r\n}\r\n\r\nfragment PlanSwiper_Plan on Plan {\r\n  id\r\n  ...PlanSwiperItem_Plan\r\n}\r\n\r\nfragment PlanSwiperItem_Plan on Plan {\r\n  id\r\n  title\r\n  price\r\n  isArchive\r\n  isRecommended\r\n  deleteRequestAt\r\n  isSubscribing\r\n  subscriptionCloseAt\r\n  capacity\r\n  subscribersCount\r\n  planPosts(\r\n    where: {post: {is: {status: {equals: PUBLISHED}}}}\r\n    first: 7\r\n    orderBy: [{createdAt: desc}]\r\n  ) {\r\n    nodes {\r\n      post {\r\n        id\r\n        thumbnailUrl\r\n        title\r\n      }\r\n    }\r\n    totalCount\r\n  }\r\n  ...PlanUnavailableNote_Plan\r\n}\r\n\r\nfragment PlanUnavailableNote_Plan on Plan {\r\n  capacity\r\n  subscribersCount\r\n  subscriptionCloseAt\r\n  deleteRequestAt\r\n}\r\n\r\nfragment PostPurchaseSingleDialog_Post on Post {\r\n  id\r\n  price\r\n  thumbnailUrl\r\n  title\r\n  isBuyEnabled\r\n}\r\n\r\nfragment PostImageElement_Post on Post {\r\n  id\r\n  title\r\n  contentData {\r\n    __typename\r\n    ... on PostImageType {\r\n      encrypted\r\n      imageUrls\r\n      count\r\n    }\r\n  }\r\n  isFavorite\r\n  creator {\r\n    displayName\r\n  }\r\n  ...PostInfo_Post\r\n  ...ImageControlIcons_Post\r\n  ...PurchaseWrapper_Post\r\n}\r\n\r\nfragment ImageControlIcons_Post on Post {\r\n  id\r\n  isMine\r\n  pinnedAt\r\n  favoritesCount\r\n  ...PostComment_Post\r\n}`,\r\n                variables: { identifier, first: limit, after: '' },\r\n                operationName: 'CreatorPostReelList',\r\n            }),\r\n            method: 'POST',\r\n        });\r\n\r\n        return response.data.posts.nodes as PostReelNode[];\r\n    });\r\n","import { Route } from '@/types';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { getCreatorFragment, getCreatorPostReelList, baseUrl } from './utils';\r\nimport path from 'node:path';\r\nimport { art } from '@/utils/render';\r\n\r\nexport const route: Route = {\r\n    path: '/r18/creator/:identifier',\r\n    categories: ['multimedia'],\r\n    example: '/fantube/r18/creator/miyuu',\r\n    parameters: { identifier: 'User handle' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.fantube.tokyo/r18/creator/:identifier'],\r\n        },\r\n    ],\r\n    name: 'User Posts',\r\n    maintainers: ['TonyRL'],\r\n    handler,\r\n};\r\n\r\nconst render = ({ description, thumbnailUrl, sampleVideoId, imageUrls }) =>\r\n    art(path.join(__dirname, 'templates/post.art'), {\r\n        description,\r\n        thumbnailUrl,\r\n        sampleVideoId,\r\n        imageUrls,\r\n    });\r\n\r\nasync function handler(ctx) {\r\n    const { identifier } = ctx.req.param();\r\n    const limit = Number.parseInt(ctx.req.query('limit') || 18, 10);\r\n\r\n    const creatorInfo = await getCreatorFragment(identifier);\r\n    const posts = await getCreatorPostReelList(identifier, limit);\r\n\r\n    const items = posts.map((p) => ({\r\n        title: p.title.replaceAll('\\n', ' ').trim(),\r\n        description: render({\r\n            description: p.description,\r\n            thumbnailUrl: p.thumbnailUrl,\r\n            sampleVideoId: p.sampleVideoId,\r\n            imageUrls: p.contentData?.imageUrls || [],\r\n        }),\r\n        link: `${baseUrl}/r18/post/${p.id}?creator=${identifier}`,\r\n        author: p.creator.displayName,\r\n        pubDate: parseDate(p.publishStartAt),\r\n        image: p.thumbnailUrl,\r\n    }));\r\n\r\n    return {\r\n        title: `${creatorInfo.displayName}のプロフィール｜クリエイターページ｜FANTUBE(ファンチューブ)`,\r\n        link: `${baseUrl}/r18/creator/${identifier}`,\r\n        description: creatorInfo.description,\r\n        image: creatorInfo.avatarImageUrl,\r\n        icon: creatorInfo.avatarImageUrl,\r\n        logo: creatorInfo.avatarImageUrl,\r\n        language: 'ja',\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"maAKA,MAAA,EAAA,4BAEA,EAAA,GAAA,EAAA,OAAA,mBAAA,IAAA,SAAA,obAsBQ,OAAA,IAGR,GAAA,EAAA,IAAA,EAAA,OAAA,+BAAA,EAAA,GAAA,IAAA,SAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mGA0OQ,OAAA,EAAA,KAAA,MAAA,QCpQK,EAAe,CACxB,KAAM,2BACN,WAAY,CAAC,cACb,QAAS,6BACT,WAAY,CAAE,WAAY,eAC1B,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,+CAGjB,KAAM,aACN,YAAa,CAAC,UACd,WAGE,GAAU,CAAE,cAAa,eAAc,gBAAe,eACxD,EAAI,EAAA,KAAA,EAAA,+BAA4C,CAC5C,cACA,eACA,gBACA,cAGR,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,cAAe,EAAI,IAAI,QACzB,EAAQ,OAAO,SAAS,EAAI,IAAI,MAAM,UAAY,GAAI,IAEtD,EAAc,MAAM,EAAmB,GACvC,EAAQ,MAAM,EAAuB,EAAY,GAEjD,EAAQ,EAAM,IAAK,IAAO,CAC5B,MAAO,EAAE,MAAM,WAAW;EAAM,KAAK,OACrC,YAAa,EAAO,CAChB,YAAa,EAAE,YACf,aAAc,EAAE,aAChB,cAAe,EAAE,cACjB,UAAW,EAAE,aAAa,WAAa,KAE3C,KAAM,GAAG,EAAQ,YAAY,EAAE,GAAG,WAAW,IAC7C,OAAQ,EAAE,QAAQ,YAClB,QAAS,EAAU,EAAE,gBACrB,MAAO,EAAE,gBAGb,MAAO,CACH,MAAO,GAAG,EAAY,YAAY,oCAClC,KAAM,GAAG,EAAQ,eAAe,IAChC,YAAa,EAAY,YACzB,MAAO,EAAY,eACnB,KAAM,EAAY,eAClB,KAAM,EAAY,eAClB,SAAU,KACV,KAAM"}