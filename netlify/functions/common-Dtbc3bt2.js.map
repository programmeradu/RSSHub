{"version":3,"file":"common-Dtbc3bt2.js","names":[],"sources":["../../lib/routes/openai/common.ts"],"sourcesContent":["import cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { DataItem } from '@/types';\r\nimport { load } from 'cheerio';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\nimport { config } from '@/config';\r\n\r\nexport const BASE_URL = new URL('https://openai.com');\r\n\r\n/** Fetch the details of an article. */\r\nexport const fetchArticleDetails = async (url: string) => {\r\n    const page = await ofetch(url);\r\n    const $ = load(page);\r\n\r\n    const $article = $('#main article');\r\n\r\n    const categories = $('h1')\r\n        .prev()\r\n        .find('a[href]')\r\n        .toArray()\r\n        .map((element) => $(element).text());\r\n\r\n    // Article header (title, sub title and categories)\r\n    $($article.find('h1').parents().get(4)).remove();\r\n    // Related articles (can be the #citations section in some cases, so the last child needs to be removed first)\r\n    $article.children().last().remove();\r\n    // Article authors and tags\r\n    $article.find('#citations').remove();\r\n\r\n    return {\r\n        content: $article.html() ?? undefined,\r\n        // Categories can be found on https://openai.com/news/ and https://openai.com/research/index/\r\n        categories,\r\n        image: $('meta[property=\"og:image\"]').attr('content'),\r\n    };\r\n};\r\n\r\n/** Fetch all articles from OpenAI's RSS feed. */\r\nexport const fetchArticles = async (limit: number): Promise<DataItem[]> => {\r\n    const page = await ofetch('https://openai.com/news/rss.xml', {\r\n        responseType: 'text',\r\n        headers: { 'User-Agent': config.ua },\r\n    });\r\n\r\n    const $ = load(page, { xml: true });\r\n\r\n    return Promise.all(\r\n        $('item')\r\n            .toArray()\r\n            .slice(0, limit)\r\n            .map<Promise<DataItem>>((element) => {\r\n                const id = $(element).find('guid').text();\r\n\r\n                return cache.tryGet(`openai:news:${id}`, async () => {\r\n                    const title = $(element).find('title').text();\r\n                    const pubDate = $(element).find('pubDate').text();\r\n                    const link = $(element).find('link').text();\r\n\r\n                    const { content, categories } = await fetchArticleDetails(link);\r\n\r\n                    return {\r\n                        guid: id,\r\n                        title,\r\n                        link,\r\n                        pubDate,\r\n                        description: content,\r\n                        category: categories,\r\n                    } as DataItem;\r\n                }) as Promise<DataItem>;\r\n            })\r\n    );\r\n};\r\n\r\nconst getApiUrl = async () => {\r\n    const blogRootUrl = 'https://openai.com/blog';\r\n\r\n    // Find API base URL\r\n    const initResponse = await got({\r\n        method: 'get',\r\n        url: blogRootUrl,\r\n    });\r\n\r\n    const apiBaseUrl = initResponse.data\r\n        .toString()\r\n        .match(/(?<=TWILL_API_BASE:\").+?(?=\")/)[0]\r\n        .replaceAll(String.raw`\\u002F`, '/');\r\n\r\n    return new URL(apiBaseUrl);\r\n};\r\n\r\nconst parseArticle = (ctx, rootUrl, attributes) =>\r\n    cache.tryGet(attributes.slug, async () => {\r\n        const textUrl = `${rootUrl}/${attributes.slug}`;\r\n        const detailResponse = await got({\r\n            method: 'get',\r\n            url: textUrl,\r\n        });\r\n        let content = load(detailResponse.data);\r\n\r\n        const authors = content('[aria-labelledby=\"metaAuthorsHeading\"] > li > a > span > span')\r\n            .toArray()\r\n            .map((entry) => content(entry).text())\r\n            .join(', ');\r\n\r\n        // Leave out comments\r\n        const comments = content('*')\r\n            .contents()\r\n            .filter(function () {\r\n                return this.nodeType === 8;\r\n            });\r\n        comments.remove();\r\n\r\n        content = content('#content');\r\n\r\n        const imageSrc = attributes.seo.ogImageSrc;\r\n        const imageAlt = attributes.seo.ogImageAlt;\r\n\r\n        const article = art(path.join(__dirname, 'templates/article.art'), {\r\n            content,\r\n            imageSrc,\r\n            imageAlt,\r\n        });\r\n\r\n        // Not all article has tags\r\n        attributes.tags = attributes.tags || [];\r\n\r\n        return {\r\n            title: attributes.title,\r\n            author: authors,\r\n            description: article,\r\n            pubDate: attributes.createdAt,\r\n            category: attributes.tags.map((tag) => tag.title),\r\n            link: textUrl,\r\n        };\r\n    });\r\n\r\nexport { getApiUrl, parseArticle };\r\n"],"mappings":"uXASA,MAAa,EAAW,IAAI,IAAI,sBAGnB,EAAsB,KAAO,IAAgB,CACtD,IAAM,EAAO,MAAM,EAAO,GACpB,EAAI,EAAK,GAET,EAAW,EAAE,iBAEb,EAAa,EAAE,MAChB,OACA,KAAK,WACL,UACA,IAAK,GAAY,EAAE,GAAS,QASjC,OANA,EAAE,EAAS,KAAK,MAAM,UAAU,IAAI,IAAI,SAExC,EAAS,WAAW,OAAO,SAE3B,EAAS,KAAK,cAAc,SAErB,CACH,QAAS,EAAS,QAAU,IAAA,GAE5B,aACA,MAAO,EAAE,6BAA6B,KAAK,aAKtC,EAAgB,KAAO,IAAuC,CACvE,IAAM,EAAO,MAAM,EAAO,kCAAmC,CACzD,aAAc,OACd,QAAS,CAAE,aAAc,EAAO,MAG9B,EAAI,EAAK,EAAM,CAAE,IAAK,KAE5B,OAAO,QAAQ,IACX,EAAE,QACG,UACA,MAAM,EAAG,GACT,IAAwB,GAAY,CACjC,IAAM,EAAK,EAAE,GAAS,KAAK,QAAQ,OAEnC,OAAO,EAAM,OAAO,eAAe,IAAM,SAAY,CACjD,IAAM,EAAQ,EAAE,GAAS,KAAK,SAAS,OACjC,EAAU,EAAE,GAAS,KAAK,WAAW,OACrC,EAAO,EAAE,GAAS,KAAK,QAAQ,OAE/B,CAAE,UAAS,cAAe,MAAM,EAAoB,GAE1D,MAAO,CACH,KAAM,EACN,QACA,OACA,UACA,YAAa,EACb,SAAU,SAO5B,EAAY,SAAY,CAC1B,IAGM,EAAe,MAAM,EAAI,CAC3B,OAAQ,MACR,IAAK,4BAGH,EAAa,EAAa,KAC3B,WACA,MAAM,iCAAiC,GACvC,WAAW,OAAO,GAAG,SAAU,KAEpC,OAAO,IAAI,IAAI,IAGb,GAAgB,EAAK,EAAS,IAChC,EAAM,OAAO,EAAW,KAAM,SAAY,CACtC,IAAM,EAAU,GAAG,EAAQ,GAAG,EAAW,OACnC,EAAiB,MAAM,EAAI,CAC7B,OAAQ,MACR,IAAK,IAEL,EAAU,EAAK,EAAe,MAE5B,EAAU,EAAQ,iEACnB,UACA,IAAK,GAAU,EAAQ,GAAO,QAC9B,KAAK,MAGJ,EAAW,EAAQ,KACpB,WACA,OAAO,UAAY,CAChB,OAAO,KAAK,WAAa,IAEjC,EAAS,SAET,EAAU,EAAQ,YAElB,IAAM,EAAW,EAAW,IAAI,WAC1B,EAAW,EAAW,IAAI,WAE1B,EAAU,EAAI,EAAA,KAAA,EAAA,kCAA+C,CAC/D,UACA,WACA,aAMJ,MAFA,GAAW,KAAO,EAAW,MAAQ,GAE9B,CACH,MAAO,EAAW,MAClB,OAAQ,EACR,YAAa,EACb,QAAS,EAAW,UACpB,SAAU,EAAW,KAAK,IAAK,GAAQ,EAAI,OAC3C,KAAM"}