{"version":3,"file":"jwc-BwElHDme.js","names":["route: Route","got","cache"],"sources":["../../lib/routes/bupt/jwc.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport cache from '@/utils/cache';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport timezone from '@/utils/timezone';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport type { Context } from 'hono';\r\n\r\nexport const route: Route = {\r\n    path: '/jwc/:type',\r\n    categories: ['university'],\r\n    example: '/bupt/jwc/tzgg',\r\n    parameters: {\r\n        type: {\r\n            type: 'string',\r\n            optional: false,\r\n            description: '信息类型，可选值：tzgg（通知公告），xwzx（新闻资讯）',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['jwc.bupt.edu.cn/tzgg1.htm'],\r\n            target: '/jwc/tzgg',\r\n        },\r\n        {\r\n            source: ['jwc.bupt.edu.cn/xwzx2.htm'],\r\n            target: '/jwc/xwzx',\r\n        },\r\n    ],\r\n    name: '教务处',\r\n    maintainers: ['Yoruet'],\r\n    handler,\r\n    url: 'jwc.bupt.edu.cn',\r\n};\r\n\r\nasync function handler(ctx: Context) {\r\n    let type = ctx.req.param('type'); // 默认类型为通知公告\r\n    if (!type) {\r\n        type = 'tzgg';\r\n    }\r\n    const rootUrl = 'https://jwc.bupt.edu.cn';\r\n    let currentUrl;\r\n    let pageTitle;\r\n\r\n    if (type === 'tzgg') {\r\n        currentUrl = `${rootUrl}/tzgg1.htm`;\r\n        pageTitle = '通知公告';\r\n    } else if (type === 'xwzx') {\r\n        currentUrl = `${rootUrl}/xwzx2.htm`;\r\n        pageTitle = '新闻资讯';\r\n    } else {\r\n        throw new Error('Invalid type parameter');\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: currentUrl,\r\n    });\r\n\r\n    const $ = load(response.data);\r\n\r\n    const list = $('.txt-elise')\r\n        .toArray()\r\n        .map((item) => {\r\n            const $item = $(item);\r\n            const $link = $item.find('a');\r\n            // Skip elements without links or with empty href\r\n            if ($link.length === 0 || !$link.attr('href')) {\r\n                return null;\r\n            }\r\n            return {\r\n                title: $link.text().trim(),\r\n                link: rootUrl + '/' + $link.attr('href'),\r\n            };\r\n        })\r\n        .filter(Boolean);\r\n\r\n    const items = await Promise.all(\r\n        list.map((item) =>\r\n            cache.tryGet(item.link, async () => {\r\n                const detailResponse = await got({\r\n                    method: 'get',\r\n                    url: item.link,\r\n                });\r\n\r\n                const content = load(detailResponse.data);\r\n\r\n                // 选择包含新闻内容的元素\r\n                const newsContent = content('.v_news_content');\r\n\r\n                // 移除不必要的标签，比如 <p> 和 <span> 中无用的内容\r\n                newsContent.find('p, span, strong').each(function () {\r\n                    const element = content(this);\r\n                    const text = element.text().trim();\r\n\r\n                    // 删除没有有用文本的元素，防止空元素被保留\r\n                    if (text === '') {\r\n                        element.remove();\r\n                    } else {\r\n                        // 去除多余的嵌套标签，但保留其内容\r\n                        element.replaceWith(text);\r\n                    }\r\n                });\r\n\r\n                // 清理后的内容转换为文本\r\n                const cleanedDescription = newsContent.text().trim();\r\n\r\n                // 提取并格式化发布时间\r\n                item.description = cleanedDescription;\r\n                item.pubDate = timezone(parseDate(content('.info').text().replace('发布时间：', '').trim()), +8);\r\n\r\n                return item;\r\n            })\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `北京邮电大学教务处 - ${pageTitle}`,\r\n        link: currentUrl,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"0ZAQA,MAAaA,EAAe,CACxB,KAAM,aACN,WAAY,CAAC,cACb,QAAS,iBACT,WAAY,CACR,KAAM,CACF,KAAM,SACN,SAAU,GACV,YAAa,mCAGrB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,6BACT,OAAQ,aAEZ,CACI,OAAQ,CAAC,6BACT,OAAQ,cAGhB,KAAM,MACN,YAAa,CAAC,UACd,UACA,IAAK,mBAGT,eAAe,EAAQ,EAAc,CACjC,IAAI,EAAO,EAAI,IAAI,MAAM,QACpB,IACD,EAAO,QAEX,IAAM,EAAU,0BACZ,EACA,EAEJ,GAAI,IAAS,OACT,EAAa,GAAG,EAAQ,YACxB,EAAY,eACL,IAAS,OAChB,EAAa,GAAG,EAAQ,YACxB,EAAY,YAEZ,MAAU,MAAM,0BAGpB,IAAM,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,IAGH,EAAI,EAAK,EAAS,MAElB,EAAO,EAAE,cACV,UACA,IAAK,GAAS,CACX,IAAM,EAAQ,EAAE,GACV,EAAQ,EAAM,KAAK,KAKzB,OAHI,EAAM,SAAW,GAAK,CAAC,EAAM,KAAK,QAC3B,KAEJ,CACH,MAAO,EAAM,OAAO,OACpB,KAAM,EAAU,IAAM,EAAM,KAAK,WAGxC,OAAO,SAEN,EAAQ,MAAM,QAAQ,IACxB,EAAK,IAAK,GACNC,EAAM,OAAO,EAAK,KAAM,SAAY,CAChC,IAAM,EAAiB,MAAMD,EAAI,CAC7B,OAAQ,MACR,IAAK,EAAK,OAGR,EAAU,EAAK,EAAe,MAG9B,EAAc,EAAQ,mBAG5B,EAAY,KAAK,mBAAmB,KAAK,UAAY,CACjD,IAAM,EAAU,EAAQ,MAClB,EAAO,EAAQ,OAAO,OAGxB,IAAS,GACT,EAAQ,SAGR,EAAQ,YAAY,KAK5B,IAAM,EAAqB,EAAY,OAAO,OAM9C,MAHA,GAAK,YAAc,EACnB,EAAK,QAAU,EAAS,EAAU,EAAQ,SAAS,OAAO,QAAQ,QAAS,IAAI,QAAS,GAEjF,MAKnB,MAAO,CACH,MAAO,eAAe,IACtB,KAAM,EACN,KAAM"}