{"version":3,"file":"artist-ByiasAwL.js","names":["route: Route","utils","ofetch"],"sources":["../../lib/routes/spotify/artist.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\nimport utils from './utils';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport ofetch from '@/utils/ofetch';\r\n\r\nexport const route: Route = {\r\n    path: '/artist/:id',\r\n    categories: ['multimedia'],\r\n    view: ViewType.Audios,\r\n    example: '/spotify/artist/6k9TBCxyr4bXwZ8Y21Kwn1',\r\n    parameters: { id: 'Artist ID' },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'SPOTIFY_CLIENT_ID',\r\n                description: '',\r\n            },\r\n            {\r\n                name: 'SPOTIFY_CLIENT_SECRET',\r\n                description: '',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['open.spotify.com/artist/:id'],\r\n        },\r\n    ],\r\n    name: 'Artist Albums',\r\n    maintainers: ['outloudvi'],\r\n    handler,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const token = await utils.getPublicToken();\r\n    const id = ctx.req.param('id');\r\n    const meta = await ofetch(`https://api.spotify.com/v1/artists/${id}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n    const itemsResponse = await ofetch(`https://api.spotify.com/v1/artists/${id}/albums`, {\r\n        method: 'GET',\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n        },\r\n    });\r\n    const albums = itemsResponse.items;\r\n\r\n    return {\r\n        title: `Albums of ${meta.name}`,\r\n        link: meta.external_urls.spotify,\r\n        allowEmpty: true,\r\n        item: albums.map((x) => ({\r\n            title: x.name,\r\n            author: x.artists.map((a) => a.name).join(', '),\r\n            description: `\"${x.name}\" by ${x.artists.map((a) => a.name).join(', ')}, released at ${x.release_date} with ${x.total_tracks} tracks.`,\r\n            pubDate: parseDate(x.release_date),\r\n            link: x.external_urls.spotify,\r\n        })),\r\n        image: meta.images.length ? meta.images[0].url : undefined,\r\n    };\r\n}\r\n"],"mappings":"0WAKA,MAAaA,EAAe,CACxB,KAAM,cACN,WAAY,CAAC,cACb,KAAM,EAAS,OACf,QAAS,yCACT,WAAY,CAAE,GAAI,aAClB,SAAU,CACN,cAAe,CACX,CACI,KAAM,oBACN,YAAa,IAEjB,CACI,KAAM,wBACN,YAAa,KAGrB,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,MAAO,CACH,CACI,OAAQ,CAAC,iCAGjB,KAAM,gBACN,YAAa,CAAC,aACd,WAGJ,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAQ,MAAMC,EAAM,iBACpB,EAAK,EAAI,IAAI,MAAM,MACnB,EAAO,MAAMC,EAAO,sCAAsC,IAAM,CAClE,OAAQ,MACR,QAAS,CACL,cAAe,UAAU,OAG3B,EAAgB,MAAMA,EAAO,sCAAsC,EAAG,SAAU,CAClF,OAAQ,MACR,QAAS,CACL,cAAe,UAAU,OAG3B,EAAS,EAAc,MAE7B,MAAO,CACH,MAAO,aAAa,EAAK,OACzB,KAAM,EAAK,cAAc,QACzB,WAAY,GACZ,KAAM,EAAO,IAAK,IAAO,CACrB,MAAO,EAAE,KACT,OAAQ,EAAE,QAAQ,IAAK,GAAM,EAAE,MAAM,KAAK,MAC1C,YAAa,IAAI,EAAE,KAAK,OAAO,EAAE,QAAQ,IAAK,GAAM,EAAE,MAAM,KAAK,MAAM,gBAAgB,EAAE,aAAa,QAAQ,EAAE,aAAa,UAC7H,QAAS,EAAU,EAAE,cACrB,KAAM,EAAE,cAAc,WAE1B,MAAO,EAAK,OAAO,OAAS,EAAK,OAAO,GAAG,IAAM,IAAA"}