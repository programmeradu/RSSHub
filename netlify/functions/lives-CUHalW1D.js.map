{"version":3,"file":"lives-CUHalW1D.js","names":[],"sources":["../../lib/routes/jinse/lives.ts"],"sourcesContent":["import { Route, ViewType } from '@/types';\r\n\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { art } from '@/utils/render';\r\nimport path from 'node:path';\r\n\r\nconst categories = {\r\n    0: '全部',\r\n    1: '精选',\r\n    2: '政策',\r\n    3: '数据',\r\n    4: 'NFT',\r\n    5: '项目',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/lives/:category?',\r\n    categories: ['finance'],\r\n    view: ViewType.Notifications,\r\n    example: '/jinse/lives',\r\n    parameters: {\r\n        category: {\r\n            description: '分类',\r\n            options: Object.entries(categories).map(([value, label]) => ({ value, label })),\r\n            default: '0',\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '快讯',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    description: `| 全部 | 精选 | 政策 | 数据 | NFT | 项目 |\r\n| ---- | ---- | ---- | ---- | --- | ---- |\r\n| 0    | 1    | 2    | 3    | 4   | 5    |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const { category = '0' } = ctx.req.param();\r\n    const limit = ctx.req.query('limit') ? Number.parseInt(ctx.req.query('limit'), 10) : 100;\r\n\r\n    const rootUrl = 'https://jinse.cn';\r\n    const rootApiUrl = 'https://api.jinse.cn';\r\n    const apiUrl = new URL('noah/v2/lives', rootApiUrl).href;\r\n    const currentUrl = new URL('lives', rootUrl).href;\r\n\r\n    const { data: response } = await got(apiUrl, {\r\n        searchParams: {\r\n            limit,\r\n            reading: false,\r\n            source: 'web',\r\n            flag: 'up',\r\n            id: 0,\r\n            category,\r\n        },\r\n    });\r\n\r\n    const items =\r\n        response.list\r\n            .flatMap((l) => l.lives)\r\n            .slice(0, limit)\r\n            .map((item) => ({\r\n                title: item.content_prefix,\r\n                link: new URL(`lives/${item.id}.html`, rootUrl).href,\r\n                description: art(path.join(__dirname, 'templates/description.art'), {\r\n                    images:\r\n                        item.images?.map((i) => ({\r\n                            src: i.url.replace(/_[^\\W_]+(\\.\\w+)$/, '_true$1'),\r\n                            width: i.width,\r\n                            height: i.height,\r\n                        })) ?? [],\r\n                    description: item.content,\r\n                    original: item.link\r\n                        ? {\r\n                              link: item.link,\r\n                              name: item.link_name,\r\n                          }\r\n                        : undefined,\r\n                }),\r\n                author: item.show_source_name,\r\n                guid: `jinse-lives-${item.id}`,\r\n                pubDate: parseDate(item.created_at, 'X'),\r\n                upvotes: item.up_counts ?? 0,\r\n                downvotes: item.down_counts ?? 0,\r\n                comments: item.comment_count ?? 0,\r\n            })) ?? [];\r\n\r\n    const { data: currentResponse } = await got(currentUrl);\r\n\r\n    const $ = load(currentResponse);\r\n\r\n    const author = $('meta[name=\"author\"]').prop('content');\r\n    const image = $('a.js-logoBox img').prop('src');\r\n    const icon = new URL($('link[rel=\"favicon\"]').prop('href'), rootUrl).href;\r\n\r\n    return {\r\n        item: items,\r\n        title: `${author} - ${Object.hasOwn(categories, category) ? categories[category] : category}`,\r\n        link: currentUrl,\r\n        description: $('meta[name=\"description\"]').prop('content'),\r\n        language: $('html').prop('lang'),\r\n        image,\r\n        icon,\r\n        logo: icon,\r\n        subtitle: $('meta[name=\"keywords\"]').prop('content'),\r\n        author,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"mdAQA,MAAM,EAAa,CACf,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,KACH,EAAG,MACH,EAAG,MAGM,EAAe,CACxB,KAAM,oBACN,WAAY,CAAC,WACb,KAAM,EAAS,cACf,QAAS,eACT,WAAY,CACR,SAAU,CACN,YAAa,KACb,QAAS,OAAO,QAAQ,GAAY,KAAK,CAAC,EAAO,MAAY,CAAE,QAAO,WACtE,QAAS,MAGjB,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,KACN,YAAa,CAAC,WACd,UACA,YAAa;;6CAKjB,eAAe,EAAQ,EAAK,CACxB,GAAM,CAAE,WAAW,KAAQ,EAAI,IAAI,QAC7B,EAAQ,EAAI,IAAI,MAAM,SAAW,OAAO,SAAS,EAAI,IAAI,MAAM,SAAU,IAAM,IAE/E,EAAU,mBAEV,EAAS,IAAI,IAAI,gBAAiB,wBAAY,KAC9C,EAAa,IAAI,IAAI,QAAS,GAAS,KAEvC,CAAE,KAAM,GAAa,MAAM,EAAI,EAAQ,CACzC,aAAc,CACV,QACA,QAAS,GACT,OAAQ,MACR,KAAM,KACN,GAAI,EACJ,cAIF,EACF,EAAS,KACJ,QAAS,GAAM,EAAE,OACjB,MAAM,EAAG,GACT,IAAK,IAAU,CACZ,MAAO,EAAK,eACZ,KAAM,IAAI,IAAI,SAAS,EAAK,GAAG,OAAQ,GAAS,KAChD,YAAa,EAAI,EAAA,KAAA,EAAA,sCAAmD,CAChE,OACI,EAAK,QAAQ,IAAK,IAAO,CACrB,IAAK,EAAE,IAAI,QAAQ,mBAAoB,WACvC,MAAO,EAAE,MACT,OAAQ,EAAE,WACP,GACX,YAAa,EAAK,QAClB,SAAU,EAAK,KACT,CACI,KAAM,EAAK,KACX,KAAM,EAAK,WAEf,IAAA,KAEV,OAAQ,EAAK,iBACb,KAAM,eAAe,EAAK,KAC1B,QAAS,EAAU,EAAK,WAAY,KACpC,QAAS,EAAK,WAAa,EAC3B,UAAW,EAAK,aAAe,EAC/B,SAAU,EAAK,eAAiB,MAC7B,GAET,CAAE,KAAM,GAAoB,MAAM,EAAI,GAEtC,EAAI,EAAK,GAET,EAAS,EAAE,uBAAuB,KAAK,WACvC,EAAQ,EAAE,oBAAoB,KAAK,OACnC,EAAO,IAAI,IAAI,EAAE,uBAAuB,KAAK,QAAS,GAAS,KAErE,MAAO,CACH,KAAM,EACN,MAAO,GAAG,EAAO,KAAK,OAAO,OAAO,EAAY,GAAY,EAAW,GAAY,IACnF,KAAM,EACN,YAAa,EAAE,4BAA4B,KAAK,WAChD,SAAU,EAAE,QAAQ,KAAK,QACzB,QACA,OACA,KAAM,EACN,SAAU,EAAE,yBAAyB,KAAK,WAC1C,SACA,WAAY"}