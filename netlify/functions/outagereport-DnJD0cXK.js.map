{"version":3,"file":"outagereport-DnJD0cXK.js","names":["route: Route","got"],"sources":["../../lib/routes/outagereport/index.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\n\r\nconst baseUrl = 'https://outage.report/';\r\n\r\nexport const route: Route = {\r\n    path: '/:name/:count?',\r\n    categories: ['forecast'],\r\n    example: '/outagereport/ubisoft/5',\r\n    parameters: { name: 'Service name, spelling format must be consistent with URL', count: 'Counting threshold, will only be written in RSS if the number of people who report to stop serving is not less than this number' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: 'Report',\r\n    maintainers: ['cxumol', 'nczitzk'],\r\n    handler,\r\n    description: `Please skip the local service area code for \\`name\\`, for example \\`https://outage.report/us/verizon-wireless\\` to \\`verizon-wireless\\`.`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const serviceName = ctx.req.param('name'); // Which service do you want to monitor? Have to be the same as what it appears in URL.\r\n    const watchCount = ctx.req.param('count') || 10; // How many reports is received during last 20 minutes? 10 reports as default.\r\n    const url = `${baseUrl}${serviceName}`;\r\n    const response = await got({\r\n        method: 'get',\r\n        url,\r\n    });\r\n\r\n    const html = response.data;\r\n\r\n    // use RegExp because of irregular class name\r\n    const gaugeRegexp = /class=\"Gauge__Count.*?>(\\d+)<\\/text>/; // Core Pattern\r\n    const gaugeTextRegexp = /class=\"Gauge__MessageWrapper.*?class=\"Gauge__Message.*?>(.*?)<\\/span>/; // Core Pattern\r\n    const rssDescribeRegexp = /<p class=\"PageSubheader.*?>(.*?)<\\/p>/;\r\n\r\n    // data to be shown on RSS feed and RSS items\r\n    const gaugeCount = Number(html.match(gaugeRegexp)[1]);\r\n    const gaugeText = html.match(gaugeTextRegexp)[1];\r\n    const rssDescribe = html.match(rssDescribeRegexp)[1];\r\n\r\n    // list (\"Array\" in js, though) of items\r\n    const outageHistory = [];\r\n\r\n    // 2020-09-17 output as long as it exists, avoid reporting errors\r\n    // compatible with optional variables\r\n    if (gaugeCount >= watchCount) {\r\n        // alert only when it counts\r\n        const outageReportItem = {\r\n            title: `${serviceName} appear to be (partially) down`,\r\n            description: String(gaugeCount) + ' ' + gaugeText,\r\n            pubDate: new Date().toUTCString(),\r\n            guid: Date.now(),\r\n            link: url,\r\n        };\r\n        outageHistory.push(outageReportItem);\r\n    }\r\n\r\n    // how this RSS feed looks like\r\n    return {\r\n        title: `Is ${serviceName} Down Right Now?`,\r\n        link: url,\r\n        description: rssDescribe,\r\n        item: outageHistory,\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"gOAGA,MAEaA,EAAe,CACxB,KAAM,iBACN,WAAY,CAAC,YACb,QAAS,0BACT,WAAY,CAAE,KAAM,4DAA6D,MAAO,mIACxF,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,SACN,YAAa,CAAC,SAAU,WACxB,UACA,YAAa,sIAGjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAc,EAAI,IAAI,MAAM,QAC5B,EAAa,EAAI,IAAI,MAAM,UAAY,GACvC,EAAM,yBAAa,IACnB,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,QAGE,EAAO,EAAS,KAGhB,EAAc,uCACd,EAAkB,wEAClB,EAAoB,wCAGpB,EAAa,OAAO,EAAK,MAAM,GAAa,IAC5C,EAAY,EAAK,MAAM,GAAiB,GACxC,EAAc,EAAK,MAAM,GAAmB,GAG5C,EAAgB,GAItB,GAAI,GAAc,EAAY,CAE1B,IAAM,EAAmB,CACrB,MAAO,GAAG,EAAY,gCACtB,YAAa,OAAO,GAAc,IAAM,EACxC,QAAS,IAAI,OAAO,cACpB,KAAM,KAAK,MACX,KAAM,GAEV,EAAc,KAAK,GAIvB,MAAO,CACH,MAAO,MAAM,EAAY,kBACzB,KAAM,EACN,YAAa,EACb,KAAM,EACN,WAAY"}