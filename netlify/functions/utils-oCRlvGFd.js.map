{"version":3,"file":"utils-oCRlvGFd.js","names":["ofetch","cache"],"sources":["../../lib/routes/joshwcomeau/utils.ts"],"sourcesContent":["import { DataItem } from '@/types';\r\nimport { load } from 'cheerio';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport cache from '@/utils/cache';\r\n\r\nexport const rootUrl = 'https://www.joshwcomeau.com';\r\n\r\nexport async function getRelativeUrlList(url, selector) {\r\n    const response = await ofetch(url);\r\n    const $ = load(response);\r\n    const heading = $('header>h1').text();\r\n    const urls = $(selector)\r\n        .toArray()\r\n        .map((element) => {\r\n            const itemRelativeUrl = $(element).attr('href');\r\n            const cardTitle = $(element).find('span').text();\r\n            return { url: itemRelativeUrl as string, cardTitle };\r\n        });\r\n    return { heading, urls };\r\n}\r\n\r\nexport async function processList(list) {\r\n    const listPromise = await Promise.allSettled(list.map(async (item) => await cache.tryGet(`joshwcomeau:${item.url}`, async () => await getPostContent(item))));\r\n    return listPromise.map((item, index) => (item.status === 'fulfilled' ? item.value : ({ title: 'Error Reading Item', link: `${rootUrl}${list[index]?.url}` } as DataItem)));\r\n}\r\n\r\nexport async function getPostContent({ url, cardTitle }) {\r\n    if (url.startsWith('https')) {\r\n        return {\r\n            title: cardTitle ?? 'External Content',\r\n            description: 'Read it on external Site',\r\n            link: url,\r\n        } as DataItem;\r\n    }\r\n    const response = await ofetch(`${rootUrl}${url}`);\r\n    const $ = load(response);\r\n    const title = $('meta[property=\"og:title\"]').attr('content')?.replace('â€¢ Josh W. Comeau', '');\r\n    const summary = $('meta[property=\"og:description\"]').attr('content');\r\n    const author = $('meta[name=\"author\"]').attr('content');\r\n    const dateDiv = $('div[data-parent-layout]');\r\n    const tag = dateDiv.find('dl:first-child > dd > a').text();\r\n    const pubDate = dateDiv.find('dl:first-child > dd:has(span):not(:last-child)').text();\r\n    const updateDate = dateDiv.find('dl:last-child > dd:has(span):not(:last-child)').text();\r\n    const description = $('main > article').html();\r\n    return {\r\n        title,\r\n        description,\r\n        author,\r\n        pubDate: processDate(pubDate),\r\n        updated: processDate(updateDate),\r\n        link: `${rootUrl}${url}`,\r\n        content: { html: description, text: summary },\r\n        category: [tag],\r\n    } as DataItem;\r\n}\r\n\r\nfunction processDate(date: string) {\r\n    const dateWithSlash = date.trim().replaceAll(' ', '/').replace(',', '');\r\n    return parseDate(dateWithSlash, 'MMMM/Do/YYYY', 'en');\r\n}\r\n"],"mappings":"8LAMA,MAAa,EAAU,8BAEvB,eAAsB,EAAmB,EAAK,EAAU,CACpD,IAAM,EAAW,MAAMA,EAAO,GACxB,EAAI,EAAK,GACT,EAAU,EAAE,aAAa,OACzB,EAAO,EAAE,GACV,UACA,IAAK,GAAY,CACd,IAAM,EAAkB,EAAE,GAAS,KAAK,QAClC,EAAY,EAAE,GAAS,KAAK,QAAQ,OAC1C,MAAO,CAAE,IAAK,EAA2B,eAEjD,MAAO,CAAE,UAAS,QAGtB,eAAsB,EAAY,EAAM,CACpC,IAAM,EAAc,MAAM,QAAQ,WAAW,EAAK,IAAI,KAAO,IAAS,MAAMC,EAAM,OAAO,eAAe,EAAK,MAAO,SAAY,MAAM,EAAe,MACrJ,OAAO,EAAY,KAAK,EAAM,IAAW,EAAK,SAAW,YAAc,EAAK,MAAS,CAAE,MAAO,qBAAsB,KAAM,GAAG,IAAU,EAAK,IAAQ,QAGxJ,eAAsB,EAAe,CAAE,MAAK,aAAa,CACrD,GAAI,EAAI,WAAW,SACf,MAAO,CACH,MAAO,GAAa,mBACpB,YAAa,2BACb,KAAM,GAGd,IAAM,EAAW,MAAMD,EAAO,GAAG,IAAU,KACrC,EAAI,EAAK,GACT,EAAQ,EAAE,6BAA6B,KAAK,YAAY,QAAQ,mBAAoB,IACpF,EAAU,EAAE,mCAAmC,KAAK,WACpD,EAAS,EAAE,uBAAuB,KAAK,WACvC,EAAU,EAAE,2BACZ,EAAM,EAAQ,KAAK,2BAA2B,OAC9C,EAAU,EAAQ,KAAK,kDAAkD,OACzE,EAAa,EAAQ,KAAK,iDAAiD,OAC3E,EAAc,EAAE,kBAAkB,OACxC,MAAO,CACH,QACA,cACA,SACA,QAAS,EAAY,GACrB,QAAS,EAAY,GACrB,KAAM,GAAG,IAAU,IACnB,QAAS,CAAE,KAAM,EAAa,KAAM,GACpC,SAAU,CAAC,IAInB,SAAS,EAAY,EAAc,CAC/B,IAAM,EAAgB,EAAK,OAAO,WAAW,IAAK,KAAK,QAAQ,IAAK,IACpE,OAAO,EAAU,EAAe,eAAgB"}