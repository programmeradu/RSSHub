{"version":3,"file":"proxy-D7ccvALx.js","names":["possibleProtocol","pacUrlHandler: URL | null","error: any","proxyObj","proxyObj","proxyUri","proxyUrlHandler: URL | null","error: any","proxyUrlHandler","proxies: ProxyState[]","unifyProxy","proxyObj","markProxyFailed","proxyUri","proxyUri: string | undefined","proxyObj: Record<string, any>","proxyUrlHandler: URL | null","multiProxy: MultiProxyResult | undefined","proxyObj","pacProxy","createMultiProxy","unifyProxy","agent: PacProxyAgent<string> | HttpsProxyAgent<string> | SocksProxyAgent | null","dispatcher: ProxyAgent | null","proxyExport: ProxyExport"],"sources":["../../lib/utils/proxy/pac-proxy.ts","../../lib/utils/proxy/unify-proxy.ts","../../lib/utils/proxy/multi-proxy.ts","../../lib/utils/proxy/index.ts"],"sourcesContent":["import { type Config } from '@/config';\r\nimport logger from '@/utils/logger';\r\n\r\nconst possibleProtocol = ['http', 'https', 'ftp', 'file', 'data'];\r\n\r\nconst pacProxy = (pacUri: Config['pacUri'], pacScript: Config['pacScript'], proxyObj: Config['proxy']) => {\r\n    let pacUrlHandler: URL | null = null;\r\n\r\n    // Validate PAC_URI / PAC_SCRIPT\r\n    if (pacScript) {\r\n        if (typeof pacScript === 'string') {\r\n            pacUri = 'data:text/javascript;charset=utf-8,' + encodeURIComponent(pacScript);\r\n        } else {\r\n            logger.error('Invalid PAC_SCRIPT, use PAC_URI instead');\r\n        }\r\n    }\r\n    if (pacUri && typeof pacUri === 'string') {\r\n        try {\r\n            pacUrlHandler = new URL(pacUri);\r\n        } catch (error: any) {\r\n            pacUri = undefined;\r\n            pacUrlHandler = null;\r\n            logger.error(`Parse PAC_URI error: ${error.stack}`);\r\n        }\r\n    } else {\r\n        pacUri = undefined;\r\n    }\r\n\r\n    // Check if PAC_URI has the right protocol\r\n    if (pacUri && (!pacUrlHandler?.protocol || !possibleProtocol.includes(pacUrlHandler.protocol.replace(':', '')))) {\r\n        logger.error(`Unsupported PAC protocol: ${pacUrlHandler?.protocol?.replace(':', '')}, expect one of ${possibleProtocol.join(', ')}`);\r\n        pacUri = undefined;\r\n        pacUrlHandler = null;\r\n    }\r\n\r\n    // Validate proxyObj\r\n    if (pacUrlHandler) {\r\n        proxyObj.host = pacUrlHandler.hostname;\r\n        proxyObj.port = pacUrlHandler.port;\r\n        proxyObj.protocol = pacUrlHandler.protocol.replace(':', '');\r\n    } else {\r\n        proxyObj.protocol = proxyObj.host = proxyObj.port = proxyObj.auth = undefined;\r\n    }\r\n\r\n    // Validate PROXY_AUTH\r\n    if (proxyObj.auth && pacUrlHandler) {\r\n        let promptProxyUri = false;\r\n        if (pacUrlHandler.username || pacUrlHandler.password) {\r\n            logger.warn('PAC_URI contains username and/or password, ignoring PROXY_AUTH');\r\n            proxyObj.auth = undefined;\r\n        } else if (['http:', 'https:'].includes(pacUrlHandler.protocol)) {\r\n            logger.info('PROXY_AUTH is set and will be used for requests from Node.js. However, requests from puppeteer will not use it');\r\n            promptProxyUri = true;\r\n        } else {\r\n            logger.warn(`PROXY_AUTH is only supported by HTTP(S) proxies, but got ${pacUrlHandler.protocol}, ignoring`);\r\n            proxyObj.auth = undefined;\r\n            promptProxyUri = true;\r\n        }\r\n        if (promptProxyUri) {\r\n            logger.info('To get rid of this, set PAC_URI like protocol://username:password@host:port and clear PROXY_{AUTH,PROTOCOL,HOST,PORT}');\r\n        }\r\n    }\r\n\r\n    // Compatible with unify-proxy\r\n    return {\r\n        proxyUri: pacUri,\r\n        proxyObj,\r\n        proxyUrlHandler: pacUrlHandler,\r\n    };\r\n};\r\n\r\nexport default pacProxy;\r\n","import { type Config } from '@/config';\r\nimport logger from '@/utils/logger';\r\n\r\nconst defaultProtocol = 'http';\r\nconst possibleProtocol = ['http', 'https', 'socks', 'socks4', 'socks4a', 'socks5', 'socks5h'];\r\n\r\nconst unifyProxy = (proxyUri: Config['proxyUri'] | string, proxyObj: Config['proxy']) => {\r\n    proxyObj = proxyObj || {};\r\n    const [oriProxyUri, oriProxyObj] = [proxyUri, proxyObj];\r\n    proxyObj = { ...proxyObj };\r\n\r\n    let proxyUrlHandler: URL | null = null;\r\n\r\n    // PROXY_URI\r\n    if (proxyUri && typeof proxyUri === 'string') {\r\n        if (!proxyUri.includes('://')) {\r\n            logger.warn(`PROXY_URI contains no protocol, assuming ${defaultProtocol}`);\r\n            proxyUri = `${defaultProtocol}://${proxyUri}`;\r\n        }\r\n        try {\r\n            proxyUrlHandler = new URL(proxyUri);\r\n        } catch (error: any) {\r\n            logger.error(`Parse PROXY_URI error: ${error.stack}`);\r\n        }\r\n    }\r\n\r\n    // PROXY_{PROTOCOL,HOST,PORT}\r\n    if (proxyObj.protocol || proxyObj.host || proxyObj.port) {\r\n        if (proxyUrlHandler) {\r\n            logger.warn('PROXY_URI is set, ignoring PROXY_{PROTOCOL,HOST,PORT}');\r\n        } else if (proxyObj.host) {\r\n            let tempProxyStr = proxyObj.host;\r\n\r\n            if (tempProxyStr.includes('://')) {\r\n                logger.warn('PROXY_HOST contains protocol, ignoring PROXY_PROTOCOL');\r\n            } else if (proxyObj.protocol) {\r\n                tempProxyStr = `${proxyObj.protocol}://${tempProxyStr}`;\r\n            } else {\r\n                logger.warn(`PROXY_PROTOCOL is not set, assuming '${defaultProtocol}'`);\r\n                tempProxyStr = `${defaultProtocol}://${tempProxyStr}`;\r\n            }\r\n            try {\r\n                proxyUrlHandler = new URL(tempProxyStr);\r\n                if (proxyUrlHandler.port && proxyObj.port) {\r\n                    logger.warn('PROXY_HOST contains port, ignoring PROXY_PORT');\r\n                } else if (proxyObj.port) {\r\n                    if (Number.parseInt(proxyObj.port)) {\r\n                        proxyUrlHandler.port = proxyObj.port;\r\n                    } else {\r\n                        logger.warn(`PROXY_PORT is not a number, ignoring`);\r\n                    }\r\n                } else {\r\n                    logger.warn('PROXY_PORT is not set, leaving proxy agent to determine');\r\n                }\r\n            } catch (error: any) {\r\n                logger.error(`Parse PROXY_HOST error: ${error.stack}`);\r\n            }\r\n        } else {\r\n            logger.warn('Either PROXY_{PROTOCOL,PORT} is set, but PROXY_HOST is missing, ignoring');\r\n        }\r\n    }\r\n\r\n    // PROXY_AUTH\r\n    if (proxyObj.auth && proxyUrlHandler) {\r\n        let promptProxyUri = false;\r\n        if (proxyUrlHandler.username || proxyUrlHandler.password) {\r\n            logger.warn('PROXY_URI contains username and/or password, ignoring PROXY_AUTH');\r\n            proxyObj.auth = undefined;\r\n        } else if (['http:', 'https:'].includes(proxyUrlHandler.protocol)) {\r\n            logger.info('PROXY_AUTH is set and will be used for requests from Node.js. However, requests from puppeteer will not use it');\r\n            promptProxyUri = true;\r\n        } else {\r\n            logger.warn(`PROXY_AUTH is only supported by HTTP(S) proxies, but got ${proxyUrlHandler.protocol}, ignoring`);\r\n            proxyObj.auth = undefined;\r\n            promptProxyUri = true;\r\n        }\r\n        if (promptProxyUri) {\r\n            logger.info('To get rid of this, set PROXY_URI like protocol://username:password@host:port and clear PROXY_{AUTH,PROTOCOL,HOST,PORT}');\r\n        }\r\n    }\r\n\r\n    // is proxy enabled and valid?\r\n    let isProxyValid = false;\r\n    if (proxyUrlHandler) {\r\n        const protocol = proxyUrlHandler.protocol.replace(':', '');\r\n        if (possibleProtocol.includes(protocol)) {\r\n            if (protocol !== 'http' && (proxyUrlHandler.username || proxyUrlHandler.password)) {\r\n                logger.warn(\"PROXY_URI is an HTTPS/SOCKS proxy with authentication, which is not supported by puppeteer (ignore if you don't need it)\");\r\n                logger.info('To get rid of this, consider using an HTTP proxy instead');\r\n            }\r\n            proxyObj.protocol = protocol;\r\n            proxyObj.host = proxyUrlHandler.hostname;\r\n            proxyObj.port = proxyUrlHandler.port || undefined;\r\n            // trailing slash will cause puppeteer to throw net::ERR_NO_SUPPORTED_PROXIES, trim it\r\n            proxyUri = proxyUrlHandler.href.endsWith('/') ? proxyUrlHandler.href.slice(0, -1) : proxyUrlHandler.href;\r\n            isProxyValid = true;\r\n        } else {\r\n            logger.error(`Unsupported proxy protocol: ${protocol}, expect one of ${possibleProtocol.join(', ')}`);\r\n        }\r\n    }\r\n    if (!isProxyValid) {\r\n        if ((oriProxyUri && typeof oriProxyUri === 'string') || oriProxyObj.protocol || oriProxyObj.host || oriProxyObj.port || oriProxyObj.auth) {\r\n            logger.error('Proxy is disabled due to misconfiguration');\r\n        }\r\n        proxyObj.protocol = proxyObj.host = proxyObj.port = proxyObj.auth = undefined;\r\n        proxyUri = undefined;\r\n        proxyUrlHandler = null;\r\n    }\r\n\r\n    return { proxyUri, proxyObj, proxyUrlHandler };\r\n};\r\n\r\nexport const unifyProxies = (proxyUris: string[], proxyObj: Config['proxy']) => proxyUris.map((uri) => unifyProxy(uri, proxyObj)).filter((result) => result.proxyUri);\r\n\r\nexport default unifyProxy;\r\n","import { type Config } from '@/config';\r\nimport logger from '@/utils/logger';\r\nimport unifyProxy from './unify-proxy';\r\n\r\nexport interface ProxyState {\r\n    uri: string;\r\n    isActive: boolean;\r\n    failureCount: number;\r\n    lastFailureTime?: number;\r\n    agent?: any;\r\n    dispatcher?: any;\r\n    urlHandler?: URL | null;\r\n}\r\n\r\nexport interface MultiProxyResult {\r\n    currentProxy?: ProxyState | null;\r\n    allProxies: ProxyState[];\r\n    proxyObj: Config['proxy'];\r\n    getNextProxy: () => ProxyState | null;\r\n    markProxyFailed: (proxyUri: string) => void;\r\n    resetProxy: (proxyUri: string) => void;\r\n}\r\n\r\nconst createMultiProxy = (proxyUris: string[], proxyObj: Config['proxy']): MultiProxyResult => {\r\n    const proxies: ProxyState[] = [];\r\n    let currentProxyIndex = 0;\r\n\r\n    for (const uri of proxyUris) {\r\n        const unifiedProxy = unifyProxy(uri, proxyObj);\r\n        if (unifiedProxy.proxyUri) {\r\n            proxies.push({\r\n                uri: unifiedProxy.proxyUri,\r\n                isActive: true,\r\n                failureCount: 0,\r\n                urlHandler: unifiedProxy.proxyUrlHandler,\r\n            });\r\n        }\r\n    }\r\n\r\n    if (proxies.length === 0) {\r\n        logger.warn('No valid proxies found in the provided list');\r\n        return {\r\n            allProxies: [],\r\n            proxyObj: proxyObj || {},\r\n            getNextProxy: () => null,\r\n            markProxyFailed: () => {},\r\n            resetProxy: () => {},\r\n        };\r\n    }\r\n\r\n    const healthCheckInterval = proxyObj?.healthCheckInterval || 60000;\r\n    const maxFailures = 3;\r\n\r\n    const healthCheck = () => {\r\n        const now = Date.now();\r\n        for (const proxy of proxies) {\r\n            if (!proxy.isActive && proxy.lastFailureTime && now - proxy.lastFailureTime > healthCheckInterval) {\r\n                proxy.isActive = true;\r\n                proxy.failureCount = 0;\r\n                delete proxy.lastFailureTime;\r\n                logger.info(`Proxy ${proxy.uri} marked as active again after health check`);\r\n            }\r\n        }\r\n    };\r\n\r\n    setInterval(healthCheck, healthCheckInterval);\r\n\r\n    const getNextProxy = (): ProxyState | null => {\r\n        const activeProxies = proxies.filter((p) => p.isActive);\r\n        if (activeProxies.length === 0) {\r\n            logger.warn('No active proxies available');\r\n            return null;\r\n        }\r\n\r\n        let nextProxy = activeProxies[currentProxyIndex % activeProxies.length];\r\n        let attempts = 0;\r\n\r\n        while (!nextProxy.isActive && attempts < activeProxies.length) {\r\n            currentProxyIndex = (currentProxyIndex + 1) % activeProxies.length;\r\n            nextProxy = activeProxies[currentProxyIndex];\r\n            attempts++;\r\n        }\r\n\r\n        if (!nextProxy.isActive) {\r\n            return null;\r\n        }\r\n\r\n        return nextProxy;\r\n    };\r\n\r\n    const markProxyFailed = (proxyUri: string) => {\r\n        const proxy = proxies.find((p) => p.uri === proxyUri);\r\n        if (proxy) {\r\n            proxy.failureCount++;\r\n            proxy.lastFailureTime = Date.now();\r\n            if (proxy.failureCount >= maxFailures) {\r\n                proxy.isActive = false;\r\n                logger.warn(`Proxy ${proxyUri} marked as inactive after ${maxFailures} failures`);\r\n            } else {\r\n                logger.warn(`Proxy ${proxyUri} failed (${proxy.failureCount}/${maxFailures})`);\r\n            }\r\n\r\n            const activeProxies = proxies.filter((p) => p.isActive);\r\n            if (activeProxies.length > 0) {\r\n                currentProxyIndex = (currentProxyIndex + 1) % activeProxies.length;\r\n                const nextProxy = getNextProxy();\r\n                if (nextProxy) {\r\n                    logger.info(`Switching to proxy: ${nextProxy.uri}`);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const resetProxy = (proxyUri: string) => {\r\n        const proxy = proxies.find((p) => p.uri === proxyUri);\r\n        if (proxy) {\r\n            proxy.isActive = true;\r\n            proxy.failureCount = 0;\r\n            delete proxy.lastFailureTime;\r\n            logger.info(`Proxy ${proxyUri} manually reset`);\r\n        }\r\n    };\r\n\r\n    const currentProxy = getNextProxy();\r\n    if (currentProxy) {\r\n        logger.info(`Initial proxy selected: ${currentProxy.uri}`);\r\n    }\r\n\r\n    return {\r\n        currentProxy,\r\n        allProxies: proxies,\r\n        proxyObj: proxyObj || {},\r\n        getNextProxy,\r\n        markProxyFailed,\r\n        resetProxy,\r\n    };\r\n};\r\n\r\nexport default createMultiProxy;\r\n","import { config } from '@/config';\r\nimport { PacProxyAgent } from 'pac-proxy-agent';\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\nimport { SocksProxyAgent } from 'socks-proxy-agent';\r\nimport { ProxyAgent } from 'undici';\r\nimport logger from '@/utils/logger';\r\n\r\nconst proxyIsPAC = config.pacUri || config.pacScript;\r\n\r\nimport pacProxy from './pac-proxy';\r\nimport unifyProxy from './unify-proxy';\r\nimport createMultiProxy, { type MultiProxyResult, type ProxyState } from './multi-proxy';\r\n\r\ninterface ProxyExport {\r\n    agent: PacProxyAgent<string> | HttpsProxyAgent<string> | SocksProxyAgent | null;\r\n    dispatcher: ProxyAgent | null;\r\n    proxyUri?: string;\r\n    proxyObj: Record<string, any>;\r\n    proxyUrlHandler?: URL | null;\r\n    multiProxy?: MultiProxyResult;\r\n    getCurrentProxy: () => ProxyState | null;\r\n    markProxyFailed: (proxyUri: string) => void;\r\n    getAgentForProxy: (proxyState: ProxyState) => any;\r\n    getDispatcherForProxy: (proxyState: ProxyState) => ProxyAgent | null;\r\n}\r\n\r\nlet proxyUri: string | undefined;\r\nlet proxyObj: Record<string, any> = {};\r\nlet proxyUrlHandler: URL | null = null;\r\nlet multiProxy: MultiProxyResult | undefined;\r\n\r\nconst createAgentForProxy = (uri: string, proxyObj: Record<string, any>): any => {\r\n    if (uri.startsWith('http')) {\r\n        return new HttpsProxyAgent(uri, {\r\n            headers: {\r\n                'proxy-authorization': proxyObj?.auth ? `Basic ${proxyObj.auth}` : undefined,\r\n            },\r\n        });\r\n    } else if (uri.startsWith('socks')) {\r\n        return new SocksProxyAgent(uri);\r\n    }\r\n    return null;\r\n};\r\n\r\nconst createDispatcherForProxy = (uri: string, proxyObj: Record<string, any>): ProxyAgent | null => {\r\n    if (uri.startsWith('http')) {\r\n        return new ProxyAgent({\r\n            uri,\r\n            token: proxyObj?.auth ? `Basic ${proxyObj.auth}` : undefined,\r\n            requestTls: {\r\n                rejectUnauthorized: process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0',\r\n            },\r\n        });\r\n    }\r\n    return null;\r\n};\r\n\r\nif (proxyIsPAC) {\r\n    const proxy = pacProxy(config.pacUri, config.pacScript, config.proxy);\r\n    proxyUri = proxy.proxyUri;\r\n    proxyObj = proxy.proxyObj;\r\n    proxyUrlHandler = proxy.proxyUrlHandler;\r\n} else if (config.proxyUris && config.proxyUris.length > 0) {\r\n    multiProxy = createMultiProxy(config.proxyUris, config.proxy);\r\n    proxyObj = multiProxy.proxyObj;\r\n    const currentProxy = multiProxy.getNextProxy();\r\n    if (currentProxy) {\r\n        proxyUri = currentProxy.uri;\r\n        proxyUrlHandler = currentProxy.urlHandler;\r\n    }\r\n    logger.info(`Multi-proxy initialized with ${config.proxyUris.length} proxies`);\r\n} else {\r\n    const proxy = unifyProxy(config.proxyUri, config.proxy);\r\n    proxyUri = proxy.proxyUri;\r\n    proxyObj = proxy.proxyObj;\r\n    proxyUrlHandler = proxy.proxyUrlHandler;\r\n}\r\n\r\nlet agent: PacProxyAgent<string> | HttpsProxyAgent<string> | SocksProxyAgent | null = null;\r\nlet dispatcher: ProxyAgent | null = null;\r\n\r\nif (proxyIsPAC && proxyUri) {\r\n    agent = new PacProxyAgent(`pac+${proxyUri}`);\r\n} else if (proxyUri) {\r\n    agent = createAgentForProxy(proxyUri, proxyObj);\r\n    dispatcher = createDispatcherForProxy(proxyUri, proxyObj);\r\n}\r\n\r\nconst getCurrentProxy = (): ProxyState | null => {\r\n    if (multiProxy) {\r\n        return multiProxy.getNextProxy();\r\n    }\r\n    if (proxyUri) {\r\n        return {\r\n            uri: proxyUri,\r\n            isActive: true,\r\n            failureCount: 0,\r\n            urlHandler: proxyUrlHandler,\r\n        };\r\n    }\r\n    return null;\r\n};\r\n\r\nconst markProxyFailed = (failedProxyUri: string) => {\r\n    if (multiProxy) {\r\n        multiProxy.markProxyFailed(failedProxyUri);\r\n        const nextProxy = multiProxy.getNextProxy();\r\n        if (nextProxy) {\r\n            proxyUri = nextProxy.uri;\r\n            proxyUrlHandler = nextProxy.urlHandler || null;\r\n            agent = createAgentForProxy(nextProxy.uri, proxyObj);\r\n            dispatcher = createDispatcherForProxy(nextProxy.uri, proxyObj);\r\n            logger.info(`Switched to proxy: ${nextProxy.uri}`);\r\n        } else {\r\n            logger.warn('No available proxies remaining');\r\n            agent = null;\r\n            dispatcher = null;\r\n            proxyUri = undefined;\r\n        }\r\n    }\r\n};\r\n\r\nconst getAgentForProxy = (proxyState: ProxyState) => createAgentForProxy(proxyState.uri, proxyObj);\r\n\r\nconst getDispatcherForProxy = (proxyState: ProxyState) => createDispatcherForProxy(proxyState.uri, proxyObj);\r\n\r\nconst proxyExport: ProxyExport = {\r\n    agent,\r\n    dispatcher,\r\n    proxyUri,\r\n    proxyObj,\r\n    proxyUrlHandler,\r\n    multiProxy,\r\n    getCurrentProxy,\r\n    markProxyFailed,\r\n    getAgentForProxy,\r\n    getDispatcherForProxy,\r\n};\r\n\r\nexport default proxyExport;\r\n"],"mappings":"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"}