{"version":3,"file":"announcement-CNSd-_XS.js","names":["handler: Route['handler']","reqBody: {\r\n        pageSize: string;\r\n        openUnread: number;\r\n        stationLetterType: string;\r\n        isPre: boolean;\r\n        lastEndId: null;\r\n        languageType: number;\r\n        excludeStationLetterType?: string;\r\n    }","cache","ofetch","dataItem: DataItem","error: any","route: Route"],"sources":["../../lib/routes/bitget/announcement.ts"],"sourcesContent":["import { DataItem, Route, ViewType } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { load } from 'cheerio';\r\nimport cache from '@/utils/cache';\r\nimport { BitgetResponse } from './type';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\n\r\nconst handler: Route['handler'] = async (ctx) => {\r\n    const baseUrl = 'https://www.bitget.com';\r\n    const announcementApiUrl = `${baseUrl}/v1/msg/push/stationLetterNew`;\r\n    const { type, lang = 'zh-CN' } = ctx.req.param<'/bitget/announcement/:type/:lang?'>();\r\n    const languageCode = lang.replace('-', '_');\r\n    const headers = {\r\n        Referer: baseUrl,\r\n        accept: 'application/json, text/plain, */*',\r\n        'content-type': 'application/json;charset=UTF-8',\r\n        language: languageCode,\r\n        locale: languageCode,\r\n    };\r\n    const pageSize = ctx.req.query('limit') ?? '10';\r\n\r\n    // stationLetterType: 0 表示全部通知，02 表示新币上线，01 表示最新活动，06 表示最新公告\r\n    const reqBody: {\r\n        pageSize: string;\r\n        openUnread: number;\r\n        stationLetterType: string;\r\n        isPre: boolean;\r\n        lastEndId: null;\r\n        languageType: number;\r\n        excludeStationLetterType?: string;\r\n    } = {\r\n        pageSize,\r\n        openUnread: 0,\r\n        stationLetterType: '0',\r\n        isPre: false,\r\n        lastEndId: null,\r\n        languageType: 1,\r\n    };\r\n\r\n    // 根据 type 判断 reqBody 的 stationLetterType 的值\r\n    switch (type) {\r\n        case 'new-listing':\r\n            reqBody.stationLetterType = '02';\r\n            break;\r\n\r\n        case 'latest-activities':\r\n            reqBody.stationLetterType = '01';\r\n            break;\r\n\r\n        case 'new-announcement':\r\n            reqBody.stationLetterType = '06';\r\n            break;\r\n\r\n        case 'all':\r\n            reqBody.stationLetterType = '0';\r\n            reqBody.excludeStationLetterType = '00';\r\n            break;\r\n\r\n        default:\r\n            throw new Error('Invalid type');\r\n    }\r\n\r\n    const response = (await cache.tryGet(\r\n        `bitget:announcement:${type}:${pageSize}:${lang}`,\r\n        async () => {\r\n            const result = await ofetch<BitgetResponse>(announcementApiUrl, {\r\n                method: 'POST',\r\n                body: reqBody,\r\n                headers,\r\n            });\r\n            if (result?.code !== '200') {\r\n                throw new Error('Failed to fetch announcements, error code: ' + result?.code);\r\n            }\r\n            return result;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    )) as BitgetResponse;\r\n\r\n    if (!response) {\r\n        throw new Error('Failed to fetch announcements');\r\n    }\r\n    const items = response.data.items;\r\n    const data = await Promise.all(\r\n        items.map(\r\n            (item) =>\r\n                cache.tryGet(`bitget:announcement:${item.id}:${pageSize}:${lang}`, async () => {\r\n                    // 从 unix 时间戳转换为日期\r\n                    const date = parseDate(Number(item.sendTime));\r\n                    const dataItem: DataItem = {\r\n                        title: item.title ?? '',\r\n                        link: item.openUrl ?? '',\r\n                        pubDate: item.sendTime ? date : undefined,\r\n                        description: item.content ?? '',\r\n                    };\r\n\r\n                    if (item.imgUrl) {\r\n                        dataItem.image = item.imgUrl;\r\n                    }\r\n\r\n                    if (item.stationLetterType === '01' || item.stationLetterType === '06') {\r\n                        try {\r\n                            const itemResponse = await ofetch<string>(item.openUrl ?? '', {\r\n                                headers,\r\n                            });\r\n                            const $ = load(itemResponse);\r\n                            const nextData = JSON.parse($('script#__NEXT_DATA__').text());\r\n                            dataItem.description = nextData.props.pageProps.details?.content || nextData.props.pageProps.pageInitInfo?.ruleContent || item.content || '';\r\n                        } catch (error: any) {\r\n                            if (error.name && (error.name === 'HTTPError' || error.name === 'RequestError' || error.name === 'FetchError')) {\r\n                                dataItem.description = item.content ?? '';\r\n                            } else {\r\n                                throw error;\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem;\r\n                }) as Promise<DataItem>\r\n        )\r\n    );\r\n\r\n    return {\r\n        title: `Bitget | ${findTypeLabel(type)}`,\r\n        link: `https://www.bitget.com/${lang}/inmail`,\r\n        item: data,\r\n    };\r\n};\r\n\r\nconst findTypeLabel = (type: string) => {\r\n    const typeMap = {\r\n        all: 'All',\r\n        'new-listing': 'New Listing',\r\n        'latest-activities': 'Latest Activities',\r\n        'new-announcement': 'New Announcement',\r\n    };\r\n    return typeMap[type];\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/announcement/:type/:lang?',\r\n    categories: ['finance'],\r\n    view: ViewType.Articles,\r\n    example: '/bitget/announcement/all/zh-CN',\r\n    parameters: {\r\n        type: {\r\n            description: 'Bitget 通知类型',\r\n            default: 'all',\r\n            options: [\r\n                { value: 'all', label: '全部通知' },\r\n                { value: 'new-listing', label: '新币上线' },\r\n                { value: 'latest-activities', label: '最新活动' },\r\n                { value: 'new-announcement', label: '最新公告' },\r\n            ],\r\n        },\r\n        lang: {\r\n            description: '语言',\r\n            default: 'zh-CN',\r\n            options: [\r\n                { value: 'zh-CN', label: '中文' },\r\n                { value: 'en-US', label: 'English' },\r\n                { value: 'es-ES', label: 'Español' },\r\n                { value: 'fr-FR', label: 'Français' },\r\n                { value: 'de-DE', label: 'Deutsch' },\r\n                { value: 'ja-JP', label: '日本語' },\r\n                { value: 'ru-RU', label: 'Русский' },\r\n                { value: 'ar-SA', label: 'العربية' },\r\n            ],\r\n        },\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['www.bitget.com/:lang/inmail'],\r\n            target: '/announcement/all/:lang',\r\n        },\r\n    ],\r\n    name: 'Announcement',\r\n    description: `\r\ntype:\r\n| Type | Description |\r\n| --- | --- |\r\n| all | 全部通知 |\r\n| new-listing | 新币上线 |\r\n| latest-activities | 最新活动 |\r\n| new-announcement | 最新公告 |\r\n\r\nlang:\r\n| Lang | Description |\r\n| ---   | ---   |\r\n| zh-CN | 中文 |\r\n| en-US | English |\r\n| es-ES | Español |\r\n| fr-FR | Français |\r\n| de-DE | Deutsch |\r\n| ja-JP | 日本語 |\r\n| ru-RU | Русский |\r\n| ar-SA | العربية |\r\n`,\r\n    maintainers: ['YukiCoco'],\r\n    handler,\r\n};\r\n"],"mappings":"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"}