{"version":3,"file":"universe-B0Pl3RMW.js","names":["route: Route","ofetch","data: string","context: Context","$"],"sources":["../../lib/routes/typst/universe.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { load } from 'cheerio';\r\nimport markdownit from 'markdown-it';\r\nimport vm from 'node:vm';\r\n\r\ninterface Package {\r\n    name: string;\r\n    version: string;\r\n    entrypoint: string;\r\n    authors: Array<string>;\r\n    license: string;\r\n    description: string;\r\n    repository: string;\r\n    keywords: Array<string>;\r\n    compiler: string;\r\n    exclude: Array<string>;\r\n    size: number;\r\n    readme: string;\r\n    updatedAt: number;\r\n    releasedAt: number;\r\n}\r\n\r\ninterface Context {\r\n    an: { exports: Array<Package> };\r\n}\r\n\r\nconst GITHUBRAW_BASE = 'https://raw.githubusercontent.com';\r\nconst PKG_GITHUB_BASE = `${GITHUBRAW_BASE}/typst/packages/main/packages/preview`;\r\n\r\nfunction fixImageSrc(src: string, env: Package) {\r\n    if (src.includes('://')) {\r\n        if (src.startsWith('https://typst.app/universe/package')) {\r\n            src = src.replaceAll('https://typst.app/universe/package', `${PKG_GITHUB_BASE}/${env.name}/${env.version}`);\r\n        } else if (src.startsWith('https://github.com/') && src.match(/\\.(jpeg|jpg|gif|png|bmp|webp)$/gi)?.length) {\r\n            src = src.replace('https://github.com/', `${GITHUBRAW_BASE}/`);\r\n        }\r\n    } else {\r\n        const suffix = src.startsWith('/') ? '' : '/';\r\n        const package_base = `${PKG_GITHUB_BASE}/${env.name}/${env.version}${suffix}`;\r\n        const url = new URL(src, package_base);\r\n        src = url.toString();\r\n    }\r\n    return src;\r\n}\r\n\r\nexport const route: Route = {\r\n    path: '/universe',\r\n    categories: ['program-update'],\r\n    example: '/typst/universe',\r\n    radar: [\r\n        {\r\n            source: ['typst.app/universe'],\r\n            target: '/universe',\r\n        },\r\n    ],\r\n    name: 'Universe',\r\n    maintainers: ['HPDell'],\r\n    handler: async () => {\r\n        const targetUrl = 'https://typst.app/universe/search?kind=packages%2Ctemplates&packages=last-updated';\r\n        const page = await ofetch(targetUrl);\r\n        const $ = load(page);\r\n        const script = $('script')\r\n            .toArray()\r\n            .map((item) => item.attribs.src)\r\n            .find((item) => item && item.startsWith('/scripts/universe-search'));\r\n        const data: string = await ofetch(`https://typst.app${script}`, {\r\n            parseResponse: (txt) => txt,\r\n        });\r\n        let packages = data.match(/(an.exports=[\\S\\s]+);var ([$A-Z_a-z][\\w$]*)=new Intl.Collator/)?.[1];\r\n        if (packages) {\r\n            packages = packages.slice(0, -2);\r\n            const context: Context = { an: { exports: [] } };\r\n            vm.createContext(context);\r\n            vm.runInContext(packages, context, {\r\n                displayErrors: true,\r\n            });\r\n            const md = markdownit('commonmark');\r\n            const items = context.an.exports.sort((a, b) => a.updatedAt - b.updatedAt);\r\n            const groups = new Map(items.map((it) => [it.name, it]));\r\n            const pkgs = [...groups.values()].map((item) => {\r\n                const $ = load(md.render(item.readme));\r\n                $('img').each((i, el) => {\r\n                    const src = el.attribs.src;\r\n                    el.attribs.src = fixImageSrc(src, item);\r\n                });\r\n                return {\r\n                    title: `${item.name} (${item.version}) | ${item.description}`,\r\n                    link: `https://typst.app/universe/package/${item.name}`,\r\n                    description: $.html(),\r\n                    pubDate: parseDate(item.updatedAt, 'X'),\r\n                };\r\n            });\r\n            return {\r\n                title: 'Typst universe',\r\n                link: targetUrl,\r\n                item: pkgs,\r\n            };\r\n        } else {\r\n            return {\r\n                title: 'Typst universe',\r\n                link: targetUrl,\r\n                item: [],\r\n            };\r\n        }\r\n    },\r\n};\r\n"],"mappings":"iTA4BA,MAAM,EAAiB,oCACjB,EAAkB,GAAG,EAAe,uCAE1C,SAAS,EAAY,EAAa,EAAc,CAC5C,GAAI,EAAI,SAAS,OACT,EAAI,WAAW,sCACf,EAAM,EAAI,WAAW,qCAAsC,GAAG,EAAgB,GAAG,EAAI,KAAK,GAAG,EAAI,WAC1F,EAAI,WAAW,wBAA0B,EAAI,MAAM,qCAAqC,SAC/F,EAAM,EAAI,QAAQ,sBAAuB,GAAG,EAAe,SAE5D,CACH,IAAM,EAAS,EAAI,WAAW,KAAO,GAAK,IACpC,EAAe,GAAG,EAAgB,GAAG,EAAI,KAAK,GAAG,EAAI,UAAU,IAC/D,EAAM,IAAI,IAAI,EAAK,GACzB,EAAM,EAAI,WAEd,OAAO,EAGX,MAAaA,EAAe,CACxB,KAAM,YACN,WAAY,CAAC,kBACb,QAAS,kBACT,MAAO,CACH,CACI,OAAQ,CAAC,sBACT,OAAQ,cAGhB,KAAM,WACN,YAAa,CAAC,UACd,QAAS,SAAY,CACjB,IAAM,EAAY,oFACZ,EAAO,MAAMC,EAAO,GACpB,EAAI,EAAK,GACT,EAAS,EAAE,UACZ,UACA,IAAK,GAAS,EAAK,QAAQ,KAC3B,KAAM,GAAS,GAAQ,EAAK,WAAW,6BACtCC,EAAe,MAAMD,EAAO,oBAAoB,IAAU,CAC5D,cAAgB,GAAQ,IAExB,EAAW,EAAK,MAAM,mEAAmE,GAC7F,GAAI,EAAU,CACV,EAAW,EAAS,MAAM,EAAG,IAC7B,IAAME,EAAmB,CAAE,GAAI,CAAE,QAAS,KAC1C,EAAG,cAAc,GACjB,EAAG,aAAa,EAAU,EAAS,CAC/B,cAAe,KAEnB,IAAM,EAAK,EAAW,cAChB,EAAQ,EAAQ,GAAG,QAAQ,MAAM,EAAG,IAAM,EAAE,UAAY,EAAE,WAC1D,EAAS,IAAI,IAAI,EAAM,IAAK,GAAO,CAAC,EAAG,KAAM,KAC7C,EAAO,CAAC,GAAG,EAAO,UAAU,IAAK,GAAS,CAC5C,IAAMC,EAAI,EAAK,EAAG,OAAO,EAAK,SAK9B,OAJA,EAAE,OAAO,MAAM,EAAG,IAAO,CACrB,IAAM,EAAM,EAAG,QAAQ,IACvB,EAAG,QAAQ,IAAM,EAAY,EAAK,KAE/B,CACH,MAAO,GAAG,EAAK,KAAK,IAAI,EAAK,QAAQ,MAAM,EAAK,cAChD,KAAM,sCAAsC,EAAK,OACjD,YAAaA,EAAE,OACf,QAAS,EAAU,EAAK,UAAW,QAG3C,MAAO,CACH,MAAO,iBACP,KAAM,EACN,KAAM,QAGV,MAAO,CACH,MAAO,iBACP,KAAM,EACN,KAAM"}