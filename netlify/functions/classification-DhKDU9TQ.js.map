{"version":3,"file":"classification-DhKDU9TQ.js","names":["route: Route","got"],"sources":["../../lib/routes/douban/other/classification.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\n\r\nexport const route: Route = {\r\n    path: '/movie/classification/:sort?/:score?/:tags?',\r\n    categories: ['social-media'],\r\n    example: '/douban/movie/classification/R/7.5/Netflix,2020',\r\n    parameters: { sort: '排序方式，默认为U', score: '最低评分，默认不限制', tags: '分类标签，多个标签之间用英文逗号分隔，常见的标签到豆瓣电影的分类页面查看，支持自定义标签' },\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    name: '豆瓣电影分类',\r\n    maintainers: ['zzwab'],\r\n    handler,\r\n    description: `排序方式可选值如下\r\n\r\n| 近期热门 | 标记最多 | 评分最高 | 最近上映 |\r\n| -------- | -------- | -------- | -------- |\r\n| U        | T        | S        | R        |`,\r\n};\r\n\r\nasync function handler(ctx) {\r\n    const sort = ctx.req.param('sort') || 'U';\r\n    const score = Number.parseFloat(ctx.req.param('score')) || 0;\r\n    const tags = ctx.req.param('tags') || '';\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: `https://movie.douban.com/j/new_search_subjects?sort=${sort}&range=0,10&tags=${tags}&start=0`,\r\n    });\r\n\r\n    const movies = response.data.data;\r\n\r\n    return {\r\n        title: `豆瓣电影分类${score ? `超过 ${score} 分的` : ''}影视`,\r\n        link: `https://movie.douban.com/tag/#/?sort=U&range=0,10&tags=`,\r\n        item: movies\r\n            .map((item) => {\r\n                const itemScore = Number.parseFloat(item.rate) || 0;\r\n\r\n                return itemScore >= score\r\n                    ? {\r\n                          title: item.title,\r\n                          description: `标题：${item.title}<br>\r\n                        评分：${item.rate}<br>\r\n                        导演：${item.directors.join(' / ')}<br>\r\n                        主演：${item.casts.join(' / ')}<br>\r\n                        <img src=\"${item.cover}\">`,\r\n                          link: item.url,\r\n                      }\r\n                    : null;\r\n            })\r\n            .filter(Boolean),\r\n        allowEmpty: true,\r\n    };\r\n}\r\n"],"mappings":"gOAGA,MAAaA,EAAe,CACxB,KAAM,8CACN,WAAY,CAAC,gBACb,QAAS,kDACT,WAAY,CAAE,KAAM,YAAa,MAAO,aAAc,KAAM,gDAC5D,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,IAEnB,KAAM,SACN,YAAa,CAAC,SACd,UACA,YAAa;;;;gDAOjB,eAAe,EAAQ,EAAK,CACxB,IAAM,EAAO,EAAI,IAAI,MAAM,SAAW,IAChC,EAAQ,OAAO,WAAW,EAAI,IAAI,MAAM,WAAa,EACrD,EAAO,EAAI,IAAI,MAAM,SAAW,GAEhC,EAAW,MAAMC,EAAI,CACvB,OAAQ,MACR,IAAK,uDAAuD,EAAK,mBAAmB,EAAK,YAGvF,EAAS,EAAS,KAAK,KAE7B,MAAO,CACH,MAAO,SAAS,EAAQ,MAAM,EAAM,KAAO,GAAG,IAC9C,KAAM,0DACN,KAAM,EACD,IAAK,GAAS,CACX,IAAM,EAAY,OAAO,WAAW,EAAK,OAAS,EAElD,OAAO,GAAa,EACd,CACI,MAAO,EAAK,MACZ,YAAa,MAAM,EAAK,MAAM;6BAC3B,EAAK,KAAK;6BACV,EAAK,UAAU,KAAK,OAAO;6BAC3B,EAAK,MAAM,KAAK,OAAO;oCAChB,EAAK,MAAM,IACrB,KAAM,EAAK,KAEf,OAET,OAAO,SACZ,WAAY"}