{"version":3,"file":"apps-DoSGzdWf.js","names":[],"sources":["../../lib/routes/scoop/apps.ts"],"sourcesContent":["import { type Data, type DataItem, type Route, ViewType } from '@/types';\r\n\r\nimport { art } from '@/utils/render';\r\nimport ofetch from '@/utils/ofetch';\r\nimport { parseDate } from '@/utils/parse-date';\r\n\r\nimport { type CheerioAPI, load } from 'cheerio';\r\nimport { type Context } from 'hono';\r\nimport path from 'node:path';\r\n\r\nconst orderbys = (desc: string) => {\r\n    const base = {\r\n        0: 'search.score() desc, Metadata/OfficialRepositoryNumber desc, NameSortable asc',\r\n        1: 'NameSortable asc, Metadata/OfficialRepositoryNumber desc, Metadata/RepositoryStars desc, Metadata/Committed desc',\r\n        2: 'Metadata/Committed desc, Metadata/OfficialRepositoryNumber desc, Metadata/RepositoryStars desc',\r\n    };\r\n\r\n    if (desc === '1') {\r\n        return base;\r\n    }\r\n\r\n    const inverted = {};\r\n    for (const key in base) {\r\n        const orderStr = base[key];\r\n        inverted[key] = orderStr.replaceAll(/\\b(desc|asc)\\b/gi, (match) => (match.toLowerCase() === 'desc' ? 'asc' : 'desc'));\r\n    }\r\n    return inverted;\r\n};\r\n\r\nconst filters = {\r\n    o: 'Metadata/OfficialRepositoryNumber eq 1', // offical buckets only\r\n    dm: 'Metadata/DuplicateOf eq null', // distinct manifests only\r\n};\r\n\r\nexport const handler = async (ctx: Context): Promise<Data> => {\r\n    const { query = 's=2&d=1&n=true&dm=true&o=true' } = ctx.req.param();\r\n    const limit: number = Number.parseInt(ctx.req.query('limit') ?? '50', 10);\r\n\r\n    const baseUrl: string = 'https://scoop.sh';\r\n    const apiBaseUrl: string = 'https://scoopsearch.search.windows.net';\r\n    const targetUrl: string = new URL(`/#/apps?${query}`, baseUrl).href;\r\n    const apiUrl: string = new URL('indexes/apps/docs/search', apiBaseUrl).href;\r\n\r\n    const targetResponse = await ofetch(targetUrl);\r\n    const $: CheerioAPI = load(targetResponse);\r\n    const language = $('html').attr('lang') ?? 'en';\r\n\r\n    const scriptRegExp: RegExp = /<script type=\"module\" crossorigin src=\"(.*?)\"><\\/script>/;\r\n    const scriptUrl: string = scriptRegExp.test(targetResponse) ? new URL(targetResponse.match(scriptRegExp)?.[1], baseUrl).href : '';\r\n\r\n    if (!scriptUrl) {\r\n        throw new Error('JavaScript file not found.');\r\n    }\r\n\r\n    const scriptResponse = await ofetch(scriptUrl, {\r\n        parseResponse: (txt) => txt,\r\n    });\r\n\r\n    const key: string = scriptResponse.match(/VITE_APP_AZURESEARCH_KEY:\"(.*?)\"/)?.[1];\r\n\r\n    if (!key) {\r\n        throw new Error('Key not found.');\r\n    }\r\n\r\n    const isOffcial: boolean = !query.includes('o=false');\r\n    const isDistinct: boolean = !query.includes('dm=false');\r\n    const sort: string = query.match(/s=(\\d+)/)?.[1] ?? '2';\r\n    const desc: string = query.match(/d=(\\d+)/)?.[1] ?? '1';\r\n\r\n    const response = await ofetch(apiUrl, {\r\n        method: 'post',\r\n        query: {\r\n            'api-version': '2020-06-30',\r\n        },\r\n        headers: {\r\n            'api-key': key,\r\n            origin: baseUrl,\r\n            referer: baseUrl,\r\n        },\r\n        body: {\r\n            count: true,\r\n            search: '',\r\n            searchMode: 'all',\r\n            filter: [isOffcial ? filters.o : undefined, isDistinct ? filters.dm : undefined].filter(Boolean).join(' and '),\r\n            orderby: orderbys(desc)[sort],\r\n            skip: 0,\r\n            top: limit,\r\n            select: 'Id,Name,NamePartial,NameSuffix,Description,Notes,Homepage,License,Version,Metadata/Repository,Metadata/FilePath,Metadata/OfficialRepository,Metadata/RepositoryStars,Metadata/Committed,Metadata/Sha',\r\n            highlight: 'Name,NamePartial,NameSuffix,Description,Version,License,Metadata/Repository',\r\n            highlightPreTag: '<mark>',\r\n            highlightPostTag: '</mark>',\r\n        },\r\n    });\r\n\r\n    let items: DataItem[] = [];\r\n\r\n    items = response.value.slice(0, limit).map((item): DataItem => {\r\n        const repositorySplits: string[] = item.Metadata.Repository.split(/\\//);\r\n        const repositoryName: string = repositorySplits.slice(-2).join('/');\r\n        const title: string = `${item.Name} ${item.Version} in ${repositoryName}`;\r\n        const description: string | undefined = art(path.join(__dirname, 'templates/description.art'), {\r\n            item,\r\n        });\r\n        const pubDate: number | string = item.Metadata.Committed;\r\n        const linkUrl: string | undefined = item.Homepage;\r\n        const authors: DataItem['author'] = [\r\n            {\r\n                name: repositoryName,\r\n                url: item.Metadata.Repository,\r\n                avatar: undefined,\r\n            },\r\n        ];\r\n        const guid: string = `scoop-${item.Name}-${item.Version}-${item.Metadata.Sha}`;\r\n        const updated: number | string = pubDate;\r\n\r\n        const processedItem: DataItem = {\r\n            title,\r\n            description,\r\n            pubDate: pubDate ? parseDate(pubDate) : undefined,\r\n            link: linkUrl,\r\n            author: authors,\r\n            guid,\r\n            id: guid,\r\n            content: {\r\n                html: description,\r\n                text: description,\r\n            },\r\n            updated: updated ? parseDate(updated) : undefined,\r\n            language,\r\n        };\r\n\r\n        return processedItem;\r\n    });\r\n\r\n    const author: string = 'Scoop';\r\n\r\n    return {\r\n        title: `${author} - Apps`,\r\n        description: undefined,\r\n        link: targetUrl,\r\n        item: items,\r\n        allowEmpty: true,\r\n        author,\r\n        language,\r\n        id: targetUrl,\r\n    };\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/apps/:query?',\r\n    name: 'Apps',\r\n    url: 'scoop.sh',\r\n    maintainers: ['nczitzk'],\r\n    handler,\r\n    example: '/scoop/apps',\r\n    parameters: {\r\n        query: {\r\n            description: 'Query, `s=2&d=1&n=true&dm=true&o=true` by default',\r\n        },\r\n    },\r\n    description: `:::tip\r\nTo subscribe to [Apps](https://scoop.sh/#/apps?s=2&d=1&n=true&dm=true&o=true), where the source URL is \\`https://scoop.sh/#/apps?s=2&d=1&n=true&dm=true&o=true\\`, extract the certain parts from this URL to be used as parameters, resulting in the route as [\\`/scoop/apps/s=2&d=1&n=true&dm=true&o=true\\`](https://rsshub.app/scoop/apps/s=2&d=1&n=true&dm=true&o=true).\r\n\r\n:::\r\n`,\r\n    categories: ['program-update'],\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportRadar: true,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['scoop.sh/#/apps', 'scoop.sh'],\r\n            target: (_, url) => {\r\n                const urlObj: URL = new URL(url);\r\n                const query: string | undefined = urlObj.searchParams.toString() ?? undefined;\r\n\r\n                return `/scoop/apps${query ? `/${query}` : ''}`;\r\n            },\r\n        },\r\n    ],\r\n    view: ViewType.Notifications,\r\n};\r\n"],"mappings":"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"}