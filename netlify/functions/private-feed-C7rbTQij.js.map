{"version":3,"file":"private-feed-C7rbTQij.js","names":["typeMapping: Record<string, string>","route: Route","headers: Record<string, string>","got","filteredEventTypes: string[]"],"sources":["../../lib/routes/github/private-feed.ts"],"sourcesContent":["import { Route } from '@/types';\r\nimport got from '@/utils/got';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport { config } from '@/config';\r\n\r\nconst typeMapping: Record<string, string> = {\r\n    push: 'PushEvent',\r\n    pr: 'PullRequestEvent',\r\n    prcomm: 'PullRequestReviewCommentEvent',\r\n    issuecomm: 'IssueCommentEvent',\r\n    star: 'WatchEvent',\r\n    fork: 'ForkEvent',\r\n    create: 'CreateEvent',\r\n    delete: 'DeleteEvent',\r\n    release: 'ReleaseEvent',\r\n    public: 'PublicEvent',\r\n    member: 'MemberEvent',\r\n};\r\n\r\nexport const route: Route = {\r\n    path: '/feed/:user/:types?',\r\n    categories: ['programming'],\r\n    example: '/github/feed/yihong0618/star,release,pr',\r\n    parameters: {\r\n        user: 'GitHub username',\r\n        types: {\r\n            description: 'Event types to include, comma separated',\r\n            default: 'all',\r\n            options: [\r\n                {\r\n                    label: 'All events',\r\n                    value: 'all',\r\n                },\r\n                {\r\n                    label: 'Create events',\r\n                    value: 'create',\r\n                },\r\n                {\r\n                    label: 'Delete events',\r\n                    value: 'delete',\r\n                },\r\n                {\r\n                    label: 'Fork events',\r\n                    value: 'fork',\r\n                },\r\n                {\r\n                    label: 'Issue comment events',\r\n                    value: 'issuecomm',\r\n                },\r\n                {\r\n                    label: 'Member events',\r\n                    value: 'member',\r\n                },\r\n                {\r\n                    label: 'Pull request events',\r\n                    value: 'pr',\r\n                },\r\n                {\r\n                    label: 'Pull request review comment events',\r\n                    value: 'prcomm',\r\n                },\r\n                {\r\n                    label: 'Public events',\r\n                    value: 'public',\r\n                },\r\n                {\r\n                    label: 'Push events',\r\n                    value: 'push',\r\n                },\r\n                {\r\n                    label: 'Release events',\r\n                    value: 'release',\r\n                },\r\n                {\r\n                    label: 'Watch events (stars)',\r\n                    value: 'star',\r\n                },\r\n            ],\r\n        },\r\n    },\r\n    features: {\r\n        requireConfig: [\r\n            {\r\n                name: 'GITHUB_ACCESS_TOKEN',\r\n                optional: true,\r\n                description: 'GitHub access token to access private events',\r\n            },\r\n        ],\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n    },\r\n    radar: [\r\n        {\r\n            source: ['github.com/:user'],\r\n            target: '/feed/:user',\r\n        },\r\n    ],\r\n    name: \"User's Feed\",\r\n    maintainers: ['RtYkk'],\r\n    handler,\r\n};\r\n\r\nfunction formatEventItem(event: any) {\r\n    const { id, type, actor, repo, payload, created_at } = event;\r\n\r\n    let title = '';\r\n    let description = '';\r\n    let link = '';\r\n\r\n    switch (type) {\r\n        case 'PushEvent': {\r\n            title = `${actor.login} pushed to ${repo.name}`;\r\n            const branch = payload.ref ? payload.ref.replace('refs/heads/', '') : 'unknown';\r\n            description = `Pushed ${payload.size || 0} commit(s) to ${branch} in ${repo.name}`;\r\n            link = payload.commits.at(-1).url.replace('api.github.com/repos/', 'github.com/').replace('/commits/', '/commit/');\r\n            description += `<br><strong>Latest commit:</strong> ${payload.commits.at(-1).message}`;\r\n            break;\r\n        }\r\n        case 'PullRequestEvent':\r\n            title = `${actor.login} ${payload.action} a pull request in ${repo.name}`;\r\n            description = `PR: ${payload.pull_request?.title || 'Unknown'}`;\r\n            link = payload.pull_request?.html_url || `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'PullRequestReviewCommentEvent':\r\n            title = `${actor.login} commented on a pull request review in ${repo.name}`;\r\n            description = `Comment: ${payload.comment?.body || 'No comment'}`;\r\n            link = payload.comment?.html_url || `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'IssueCommentEvent':\r\n            title = `${actor.login} commented on an issue in ${repo.name}`;\r\n            description = `Comment: ${payload.comment?.body || 'No comment'}`;\r\n            link = payload.comment?.html_url || `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'WatchEvent':\r\n            title = `${actor.login} starred ${repo.name}`;\r\n            description = `Starred repository ${repo.name}`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'ForkEvent':\r\n            title = `${actor.login} forked ${repo.name}`;\r\n            description = `Forked repository ${repo.name}`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'CreateEvent':\r\n            title = `${actor.login} created ${payload.ref_type} in ${repo.name}`;\r\n            description = `Created ${payload.ref_type}: ${payload.ref || repo.name}`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'DeleteEvent':\r\n            title = `${actor.login} deleted ${payload.ref_type} in ${repo.name}`;\r\n            description = `Deleted ${payload.ref_type}: ${payload.ref}`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'ReleaseEvent':\r\n            title = `${actor.login} released ${payload.release?.name || payload.release?.tag_name} in ${repo.name}`;\r\n            description = payload.release?.body || `Released ${payload.release?.tag_name}`;\r\n            link = payload.release?.html_url || `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'PublicEvent':\r\n            title = `${actor.login} made ${repo.name} public`;\r\n            description = `Repository ${repo.name} was made public`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        case 'MemberEvent':\r\n            title = `${actor.login} ${payload.action} as a member of ${repo.name}`;\r\n            description = `Member ${payload.action} in repository ${repo.name}`;\r\n            link = `https://github.com/${repo.name}`;\r\n            break;\r\n        default:\r\n            title = `${actor.login} performed ${type} in ${repo?.name || 'unknown repository'}`;\r\n            description = `Activity type: ${type}`;\r\n            link = repo ? `https://github.com/${repo.name}` : `https://github.com/${actor.login}`;\r\n    }\r\n\r\n    return {\r\n        title,\r\n        link,\r\n        description,\r\n        pubDate: parseDate(created_at),\r\n        author: actor.login,\r\n        category: [type],\r\n        guid: id,\r\n    };\r\n}\r\n\r\nasync function handler(ctx) {\r\n    const user = ctx.req.param('user');\r\n    const types = ctx.req.param('types') || 'all';\r\n\r\n    const isAuthenticated = config.github && config.github.access_token;\r\n\r\n    const headers: Record<string, string> = {};\r\n    if (isAuthenticated) {\r\n        headers.Authorization = `token ${config.github.access_token}`;\r\n    }\r\n\r\n    const response = await got({\r\n        method: 'get',\r\n        url: `https://api.github.com/users/${user}/received_events`,\r\n        headers,\r\n        searchParams: {\r\n            per_page: 100,\r\n        },\r\n    });\r\n\r\n    // Parse requested event types and map short names to full event types\r\n    let filteredEventTypes: string[] = [];\r\n    if (types !== 'all') {\r\n        filteredEventTypes = types.split(',').map((type) => {\r\n            const trimmedType = type.trim();\r\n            return typeMapping[trimmedType] || trimmedType;\r\n        });\r\n    }\r\n\r\n    const items = response.data.filter((event) => filteredEventTypes.length === 0 || filteredEventTypes.includes(event.type)).map((event) => formatEventItem(event));\r\n\r\n    const typeFilter = types === 'all' ? 'All Events' : `Events: ${types}`;\r\n    const feedType = isAuthenticated ? 'Private Feed' : 'Public Feed';\r\n\r\n    return {\r\n        title: `${user}'s GitHub ${feedType} - ${typeFilter}`,\r\n        link: `https://github.com/${user}`,\r\n        description: `GitHub events received by ${user}${types === 'all' ? '' : ` (filtered: ${types})`}${isAuthenticated ? ' - includes private events' : ' - public events only'}`,\r\n        item: items,\r\n    };\r\n}\r\n"],"mappings":"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"}