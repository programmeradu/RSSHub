{"version":3,"file":"latest-ranked-DwoOihQi.js","names":[],"sources":["../../lib/routes/osu/beatmaps/latest-ranked.ts"],"sourcesContent":["import { Data, DataItem, Route } from '@/types';\r\nimport path from 'node:path';\r\nimport got from '@/utils/got';\r\nimport { load } from 'cheerio';\r\nimport { parseDate } from '@/utils/parse-date';\r\nimport cache from '@/utils/cache';\r\nimport { config } from '@/config';\r\nimport { art } from '@/utils/render';\r\n\r\nconst actualParametersDescTable = `\r\n| Name              | Default  | Description                                                                                                                                                                                                                                          |\r\n| ----------------- | -------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n| \\`includeMode\\`     | All mode | Could be \\`osu\\`, \\`mania\\`, \\`fruits\\` or \\`taiko\\`. Specify included game mode of beatmaps. Including this paramseter multiple times to specify multiple game modes, e.g.: \\`includeMode=osu&includeMode=mania\\`. Subscribe to all game modes if not specified |\r\n| \\`difficultyLimit\\` | None     | Lower/upper limit of star rating of the beatmaps in the beatmapset item, e.g.:\\`difficultyLimit=U6\\`. Checkout tips in descriptions for detailed explaination and examples.                                                                            |\r\n| \\`modeInTitle\\`     | \\`true\\`   | \\`true\\` or \\`false\\` Add mode info into feed title.\r\n`;\r\n\r\nconst descriptionDoc: string = `\r\nSubscribe to the new beatmaps on https://osu.ppy.sh/beatmapsets.\r\n\r\n#### Parameter Description\r\n\r\nParameters allows you to:\r\n\r\n- Filter game mode\r\n- Limit beatmap difficulty\r\n- Show/hide game mode in feed title\r\n\r\nBelow is a table of all allowed parameters passed to \\`routeParams\\`\r\n\r\n${actualParametersDescTable}\r\n\r\nThis actual parameters should be passed as \\`routeParams\\` in URL Query String format without \\`?\\`, e.g.:\r\n\r\n    /osu/latest-ranked/modeInTitle=true&includeMode=osu\r\n\r\n:::tip\r\nYou could make use of \\`difficultyLimit\\` paramters to create a \"high difficulty/low difficulty only\" only feed.\r\n\r\nFor example, if you only wants to play low star rating beatmap like 1 or 2 star, you could subscribe to:\r\n\r\n    /osu/latest-ranked/difficultyLimit=U2\r\n\r\nThis will filter out all beatmapsets that do not provide at least one beatmap with star rating<=\\`2.00\\`.\r\n\r\nSimilarly, you could use lower bound to filter out beatmapsets which don't have at least one beatmap\r\nwith star rating higher than a certain threshold.\r\n\r\n    /osu/latest-ranked/difficultyLimit=L6\r\n\r\nNow all beatmapsets that don't provided at least one beatmap with star rating higher than \\`6.00\\` will be filtered.\r\n:::\r\n`;\r\n\r\nexport const route: Route = {\r\n    path: '/latest-ranked/:routeParams?',\r\n    categories: ['game'],\r\n    example: '/osu/latest-ranked/includeMode=osu&difficultyLimit=L3&difficultyLimit=U7',\r\n    features: {\r\n        requireConfig: false,\r\n        requirePuppeteer: false,\r\n        antiCrawler: false,\r\n        supportBT: false,\r\n        supportPodcast: false,\r\n        supportScihub: false,\r\n        supportRadar: true,\r\n    },\r\n    parameters: {\r\n        routeParams: {\r\n            description: 'Used to pass route parameters in Query String format. Check out route description for more info.',\r\n            default: 'null',\r\n        },\r\n    },\r\n    name: 'Latest Ranked Beatmap',\r\n    description: descriptionDoc,\r\n    maintainers: ['nfnfgo'],\r\n    radar: [\r\n        {\r\n            source: ['osu.ppy.sh/beatmapsets'],\r\n        },\r\n    ],\r\n    handler,\r\n};\r\n\r\ninterface Beatmap {\r\n    beatmapset_id: number;\r\n    difficulty_rating: number;\r\n    id: number;\r\n    mode: string;\r\n    status: string;\r\n    total_length: number;\r\n    user_id: number;\r\n    version: string;\r\n    accuracy: number;\r\n    ar: number;\r\n    bpm: number;\r\n    convert: boolean;\r\n    count_circles: number;\r\n    count_sliders: number;\r\n    count_spinners: number;\r\n    cs: number;\r\n    deleted_at: string | null;\r\n    drain: number;\r\n    hit_length: number;\r\n    is_scoreable: boolean;\r\n    last_updated: string;\r\n    mode_int: number;\r\n    passcount: number;\r\n    playcount: number;\r\n    ranked: number;\r\n    url: string;\r\n    checksum: string;\r\n    max_combo: number;\r\n}\r\n\r\ninterface NominationsSummary {\r\n    current: number;\r\n    eligible_main_rulesets: string[];\r\n    required_meta: {\r\n        main_ruleset: number;\r\n        non_main_ruleset: number;\r\n    };\r\n}\r\n\r\ninterface Covers {\r\n    cover: string;\r\n    'cover@2x': string;\r\n    card: string;\r\n    'card@2x': string;\r\n    list: string;\r\n    'list@2x': string;\r\n    slimcover: string;\r\n    'slimcover@2x': string;\r\n}\r\n\r\ninterface Availability {\r\n    download_disabled: boolean;\r\n    more_information: string | null;\r\n}\r\n\r\ninterface BeatmapsetInfo {\r\n    artist: string;\r\n    artist_unicode: string;\r\n    covers: Covers;\r\n    creator: string;\r\n    favourite_count: number;\r\n    hype: null | string;\r\n    id: number;\r\n    nsfw: boolean;\r\n    offset: number;\r\n    play_count: number;\r\n    preview_url: string;\r\n    source: string;\r\n    spotlight: boolean;\r\n    status: string;\r\n    title: string;\r\n    title_unicode: string;\r\n    track_id: number;\r\n    user_id: number;\r\n    video: boolean;\r\n    bpm: number;\r\n    can_be_hyped: boolean;\r\n    deleted_at: string | null;\r\n    discussion_enabled: boolean;\r\n    discussion_locked: boolean;\r\n    is_scoreable: boolean;\r\n    last_updated: string;\r\n    legacy_thread_url: string;\r\n    nominations_summary: NominationsSummary;\r\n    ranked: number;\r\n    ranked_date: string;\r\n    storyboard: boolean;\r\n    submitted_date: string;\r\n    tags: string;\r\n    availability: Availability;\r\n    beatmaps: Beatmap[];\r\n    pack_tags: string[];\r\n}\r\n\r\nasync function handler(ctx): Promise<Data> {\r\n    // Parse & retrive searchParams\r\n    const pathParams = ctx.req.param('routeParams');\r\n    // Here user actually pass the query using path param, like: `/osu/latest-ranked/includeMode=osu`\r\n    // We first retrieve path param part: `includeMode=osu`, then concat it with host to construct a \"fake\" URL:\r\n    // `https://osu.ppy.sh?includeMode=osu`\r\n    // Then we use URL.searchParams to parse and retrieve params from this \"fake\" URL.\r\n    const searchParams = new URL(`https://osu.ppy.sh?${pathParams}`).searchParams; // use URL to parse params\r\n    const includeModes = searchParams.getAll('includeMode');\r\n    const difficultyLimits = searchParams.getAll('difficultyLimit');\r\n    const modeInTitle = searchParams.get('modeInTitle') ?? 'true'; // show mode name in title, default to true.\r\n\r\n    // fetch beatmap JSON info from website within cache\r\n    let beatmapsetList = (await cache.tryGet(\r\n        'https://osu.ppy.sh/beatmapsets:JSON',\r\n        async () => {\r\n            const link = 'https://osu.ppy.sh/beatmapsets';\r\n\r\n            const response = await got.get(link);\r\n            const $ = load(response.data);\r\n\r\n            const beatmapInfo = JSON.parse($('#json-beatmaps').text() ?? '{\"beatmapsets\": undefined}');\r\n\r\n            const beatmapList: BeatmapsetInfo[] = beatmapInfo.beatmapsets;\r\n\r\n            // Failed to fetch, raise error\r\n            if (beatmapList === undefined) {\r\n                throw new Error('Failed to retrieve JSON beatmap info from osu! website');\r\n            }\r\n\r\n            return beatmapList;\r\n        },\r\n        config.cache.routeExpire,\r\n        false\r\n    )) as BeatmapsetInfo[];\r\n\r\n    // Sort beatmap by difficultyRate.desc\r\n    // This step is necessary even if difficultyLimit not enabled, since we want the beatmap\r\n    // in RSS description sorted when displayed\r\n    for (const item of beatmapsetList) {\r\n        item.beatmaps.sort((a, b) => a.difficulty_rating - b.difficulty_rating);\r\n    }\r\n\r\n    // filter beatmapset types\r\n    // Note:\r\n    // One Osu beatmapset could actually contains several beatmaps with different game mode.\r\n    // Here for simplicity we just use the mode of first beatmap in this set for filtering criteria.\r\n    if (includeModes?.length && includeModes?.length > 0) {\r\n        beatmapsetList = beatmapsetList.filter((bm) => includeModes.includes(bm.beatmaps[0].mode));\r\n    }\r\n\r\n    let upperLimit = 99; // Osu! will never have maps with 99+ star rating right?\r\n    let lowerLimit = 0;\r\n    if (difficultyLimits && difficultyLimits.length > 0 && difficultyLimits.length < 2) {\r\n        for (const dfLimit of difficultyLimits) {\r\n            if (dfLimit.startsWith('U')) {\r\n                upperLimit = Number.parseFloat(dfLimit.slice(1));\r\n            } else if (dfLimit.startsWith('L')) {\r\n                lowerLimit = Number.parseFloat(dfLimit.slice(1));\r\n            }\r\n        }\r\n\r\n        const difficultyRateFilterFunc = (item: BeatmapsetInfo): boolean => {\r\n            if (item.beatmaps.at(0)!.difficulty_rating > upperLimit) {\r\n                return false;\r\n            }\r\n            if (item.beatmaps.at(-1)!.difficulty_rating < lowerLimit) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        beatmapsetList = beatmapsetList.filter((item) => difficultyRateFilterFunc(item));\r\n    }\r\n\r\n    // Returns a user-readble string that shows details about route parameter config\r\n    function getReadableFeedConfig(): string {\r\n        if (!pathParams) {\r\n            return '';\r\n        }\r\n\r\n        let readableConf = 'Feed Configurations:\\n';\r\n        readableConf += `Game Mode: ${includeModes.length > 0 ? JSON.stringify(includeModes) : 'All modes'}\\n`;\r\n        readableConf += `Star Rating Limit: Lower=${lowerLimit}, Upper=${upperLimit}`;\r\n        return readableConf;\r\n    }\r\n\r\n    // Construct beatmap feed items\r\n    const rssItems: DataItem[] = beatmapsetList.map((beatmapset) => {\r\n        // Format publication date using parseDate utility\r\n        // Here it make sense to consider the ranked date as the pubDate of this item since this is ranked map RSS\r\n        const pubDate = parseDate(beatmapset.ranked_date);\r\n\r\n        // Select the best resolution cover (2x if available)\r\n        const coverImage = beatmapset.covers['cover@2x'] || beatmapset.covers.cover;\r\n        const bannerImage = beatmapset.covers['card@2x'] || beatmapset.covers.card;\r\n\r\n        // Readable beatmap total length\r\n        const readableTotalLength = `${Math.floor(beatmapset.beatmaps[0].total_length / 60)\r\n            .toString()\r\n            .padStart(2, '0')}:${(beatmapset.beatmaps[0].total_length % 60).toString().padStart(2, '0')}`;\r\n\r\n        const modeLiteralToDisplayNameMap = {\r\n            osu: 'Osu!',\r\n            fruits: 'Osu!Catch',\r\n            taiko: 'Osu!Taiko',\r\n            mania: 'Osu!Mania',\r\n        };\r\n\r\n        // Create a description with beatmap details and a table of difficulties\r\n        const description = art(path.join(__dirname, 'templates/beatmapset.art'), { ...beatmapset, readableTotalLength, modeLiteralToDisplayNameMap });\r\n\r\n        return {\r\n            title: `${modeInTitle === 'true' ? `[${modeLiteralToDisplayNameMap[beatmapset.beatmaps[0].mode]}] ` : ``}${beatmapset.title_unicode ?? beatmapset.title}`,\r\n            description,\r\n            pubDate,\r\n            link: `https://osu.ppy.sh/beatmapsets/${beatmapset.id}`,\r\n            category: ['osu!', 'game'],\r\n            author: [{ name: beatmapset.creator }],\r\n            image: coverImage,\r\n            banner: bannerImage,\r\n            updated: beatmapset.last_updated,\r\n        };\r\n    });\r\n\r\n    return {\r\n        title: 'Osu! Latest Ranked Map',\r\n        link: 'https://osu.ppy.sh/beatmapsets',\r\n        description: `Newly ranked beatmaps at https://osu.ppy.sh/beatmapsets.\\n${getReadableFeedConfig()}`,\r\n        item: rssItems,\r\n    };\r\n}\r\n"],"mappings":"yeASA,MA6Ca,EAAe,CACxB,KAAM,+BACN,WAAY,CAAC,QACb,QAAS,2EACT,SAAU,CACN,cAAe,GACf,iBAAkB,GAClB,YAAa,GACb,UAAW,GACX,eAAgB,GAChB,cAAe,GACf,aAAc,IAElB,WAAY,CACR,YAAa,CACT,YAAa,mGACb,QAAS,SAGjB,KAAM,wBACN,YAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EACb,YAAa,CAAC,UACd,MAAO,CACH,CACI,OAAQ,CAAC,4BAGjB,WAkGJ,eAAe,EAAQ,EAAoB,CAEvC,IAAM,EAAa,EAAI,IAAI,MAAM,eAK3B,EAAe,IAAI,IAAI,sBAAsB,KAAc,aAC3D,EAAe,EAAa,OAAO,eACnC,EAAmB,EAAa,OAAO,mBACvC,EAAc,EAAa,IAAI,gBAAkB,OAGnD,EAAkB,MAAM,EAAM,OAC9B,sCACA,SAAY,CACR,IAEM,EAAW,MAAM,EAAI,IAAI,kCACzB,EAAI,EAAK,EAAS,MAElB,EAAc,KAAK,MAAM,EAAE,kBAAkB,QAAU,8BAEvD,EAAgC,EAAY,YAGlD,GAAI,IAAgB,IAAA,GAChB,MAAU,MAAM,0DAGpB,OAAO,GAEX,EAAO,MAAM,YACb,IAMJ,IAAK,IAAM,KAAQ,EACf,EAAK,SAAS,MAAM,EAAG,IAAM,EAAE,kBAAoB,EAAE,mBAOrD,GAAc,QAAU,GAAc,OAAS,IAC/C,EAAiB,EAAe,OAAQ,GAAO,EAAa,SAAS,EAAG,SAAS,GAAG,QAGxF,IAAI,EAAa,GACb,EAAa,EACjB,GAAI,GAAoB,EAAiB,OAAS,GAAK,EAAiB,OAAS,EAAG,CAChF,IAAK,IAAM,KAAW,EACd,EAAQ,WAAW,KACnB,EAAa,OAAO,WAAW,EAAQ,MAAM,IACtC,EAAQ,WAAW,OAC1B,EAAa,OAAO,WAAW,EAAQ,MAAM,KAIrD,IAAM,EAA4B,GAI9B,EAHI,EAAK,SAAS,GAAG,GAAI,kBAAoB,GAGzC,EAAK,SAAS,GAAG,IAAK,kBAAoB,GAMlD,EAAiB,EAAe,OAAQ,GAAS,EAAyB,IAI9E,SAAS,GAAgC,CACrC,GAAI,CAAC,EACD,MAAO,GAGX,IAAI,EAAe;EAGnB,MAFA,IAAgB,cAAc,EAAa,OAAS,EAAI,KAAK,UAAU,GAAgB,YAAY,IACnG,GAAgB,4BAA4B,EAAW,UAAU,IAC1D,EAIX,IAAM,EAAuB,EAAe,IAAK,GAAe,CAG5D,IAAM,EAAU,EAAU,EAAW,aAG/B,EAAa,EAAW,OAAO,aAAe,EAAW,OAAO,MAChE,EAAc,EAAW,OAAO,YAAc,EAAW,OAAO,KAGhE,EAAsB,GAAG,KAAK,MAAM,EAAW,SAAS,GAAG,aAAe,IAC3E,WACA,SAAS,EAAG,KAAK,IAAI,EAAW,SAAS,GAAG,aAAe,IAAI,WAAW,SAAS,EAAG,OAErF,EAA8B,CAChC,IAAK,OACL,OAAQ,YACR,MAAO,YACP,MAAO,aAIL,EAAc,EAAI,EAAA,KAAA,EAAA,qCAAkD,CAAE,GAAG,EAAY,sBAAqB,gCAEhH,MAAO,CACH,MAAO,GAAG,IAAgB,OAAS,IAAI,EAA4B,EAAW,SAAS,GAAG,MAAM,IAAM,KAAK,EAAW,eAAiB,EAAW,QAClJ,cACA,UACA,KAAM,kCAAkC,EAAW,KACnD,SAAU,CAAC,OAAQ,QACnB,OAAQ,CAAC,CAAE,KAAM,EAAW,UAC5B,MAAO,EACP,OAAQ,EACR,QAAS,EAAW,gBAI5B,MAAO,CACH,MAAO,yBACP,KAAM,iCACN,YAAa,6DAA6D,MAC1E,KAAM"}